
Jeffs Hardware Testbed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005298  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08005438  08005438  00015438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005560  08005560  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005560  08005560  00015560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005568  08005568  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005568  08005568  00015568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800556c  0800556c  0001556c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000450c  20000074  080055e4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004580  080055e4  00024580  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010007  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000272e  00000000  00000000  000300ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c90  00000000  00000000  000327e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b58  00000000  00000000  00033470  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018c01  00000000  00000000  00033fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b680  00000000  00000000  0004cbc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00093b88  00000000  00000000  00058249  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ebdd1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003964  00000000  00000000  000ebe4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005420 	.word	0x08005420

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005420 	.word	0x08005420

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	4a07      	ldr	r2, [pc, #28]	; (80005ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000590:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000596:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2280      	movs	r2, #128	; 0x80
 800059c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000090 	.word	0x20000090
 80005b0:	200000e4 	.word	0x200000e4

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b5b0      	push	{r4, r5, r7, lr}
 80005b6:	b092      	sub	sp, #72	; 0x48
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f000 fc19 	bl	8000df0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f89d 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 f9b7 	bl	8000934 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005c6:	f000 f8f7 	bl	80007b8 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80005ca:	f000 f989 	bl	80008e0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 80005ce:	4841      	ldr	r0, [pc, #260]	; (80006d4 <main+0x120>)
 80005d0:	f000 f9f6 	bl	80009c0 <RetargetInit>
  //genericDevice_t button = MS5607_init(0,0,0);
  for(int i = 0; i < 500; i++) printf(" \r\n");
 80005d4:	2300      	movs	r3, #0
 80005d6:	647b      	str	r3, [r7, #68]	; 0x44
 80005d8:	e005      	b.n	80005e6 <main+0x32>
 80005da:	483f      	ldr	r0, [pc, #252]	; (80006d8 <main+0x124>)
 80005dc:	f003 ff96 	bl	800450c <puts>
 80005e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80005e2:	3301      	adds	r3, #1
 80005e4:	647b      	str	r3, [r7, #68]	; 0x44
 80005e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80005e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005ec:	dbf5      	blt.n	80005da <main+0x26>
    HAL_Delay(250);
 80005ee:	20fa      	movs	r0, #250	; 0xfa
 80005f0:	f000 fc70 	bl	8000ed4 <HAL_Delay>
    printf("Starting:\r\n");
 80005f4:	4839      	ldr	r0, [pc, #228]	; (80006dc <main+0x128>)
 80005f6:	f003 ff89 	bl	800450c <puts>
    HAL_Delay(250);
 80005fa:	20fa      	movs	r0, #250	; 0xfa
 80005fc:	f000 fc6a 	bl	8000ed4 <HAL_Delay>

    PRINT_BIN(31,1);
 8000600:	231f      	movs	r3, #31
 8000602:	643b      	str	r3, [r7, #64]	; 0x40
 8000604:	e00c      	b.n	8000620 <main+0x6c>
 8000606:	221f      	movs	r2, #31
 8000608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800060a:	fa42 f303 	asr.w	r3, r2, r3
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	4619      	mov	r1, r3
 8000614:	4832      	ldr	r0, [pc, #200]	; (80006e0 <main+0x12c>)
 8000616:	f003 ff05 	bl	8004424 <iprintf>
 800061a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800061c:	3b01      	subs	r3, #1
 800061e:	643b      	str	r3, [r7, #64]	; 0x40
 8000620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000622:	2b00      	cmp	r3, #0
 8000624:	daef      	bge.n	8000606 <main+0x52>
 8000626:	482f      	ldr	r0, [pc, #188]	; (80006e4 <main+0x130>)
 8000628:	f003 ff70 	bl	800450c <puts>
    PRINT_BIN(127,1);
 800062c:	231f      	movs	r3, #31
 800062e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000630:	e00c      	b.n	800064c <main+0x98>
 8000632:	227f      	movs	r2, #127	; 0x7f
 8000634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000636:	fa42 f303 	asr.w	r3, r2, r3
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	4619      	mov	r1, r3
 8000640:	4827      	ldr	r0, [pc, #156]	; (80006e0 <main+0x12c>)
 8000642:	f003 feef 	bl	8004424 <iprintf>
 8000646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000648:	3b01      	subs	r3, #1
 800064a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800064c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800064e:	2b00      	cmp	r3, #0
 8000650:	daef      	bge.n	8000632 <main+0x7e>
 8000652:	4824      	ldr	r0, [pc, #144]	; (80006e4 <main+0x130>)
 8000654:	f003 ff5a 	bl	800450c <puts>
    PRINT_BIN(128,0);
 8000658:	231f      	movs	r3, #31
 800065a:	63bb      	str	r3, [r7, #56]	; 0x38
 800065c:	e00c      	b.n	8000678 <main+0xc4>
 800065e:	2280      	movs	r2, #128	; 0x80
 8000660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000662:	fa42 f303 	asr.w	r3, r2, r3
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	4619      	mov	r1, r3
 800066c:	481c      	ldr	r0, [pc, #112]	; (80006e0 <main+0x12c>)
 800066e:	f003 fed9 	bl	8004424 <iprintf>
 8000672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000674:	3b01      	subs	r3, #1
 8000676:	63bb      	str	r3, [r7, #56]	; 0x38
 8000678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800067a:	2b00      	cmp	r3, #0
 800067c:	daef      	bge.n	800065e <main+0xaa>
    printf("dsfd");
 800067e:	481a      	ldr	r0, [pc, #104]	; (80006e8 <main+0x134>)
 8000680:	f003 fed0 	bl	8004424 <iprintf>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of myTask01 */
  osThreadStaticDef(myTask01, StartDefaultTask, osPriorityNormal, 0, 128, myTask01Buffer, &myTask01ControlBlock);
 8000684:	4b19      	ldr	r3, [pc, #100]	; (80006ec <main+0x138>)
 8000686:	f107 041c 	add.w	r4, r7, #28
 800068a:	461d      	mov	r5, r3
 800068c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000690:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000694:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask01Handle = osThreadCreate(osThread(myTask01), NULL);
 8000698:	f107 031c 	add.w	r3, r7, #28
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f002 fc71 	bl	8002f86 <osThreadCreate>
 80006a4:	4602      	mov	r2, r0
 80006a6:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <main+0x13c>)
 80006a8:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask02 */
  osThreadStaticDef(myTask02, StartTask02, osPriorityRealtime, 0, 128, myTask02Buffer, &myTask02ControlBlock);
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <main+0x140>)
 80006ac:	463c      	mov	r4, r7
 80006ae:	461d      	mov	r5, r3
 80006b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80006bc:	463b      	mov	r3, r7
 80006be:	2100      	movs	r1, #0
 80006c0:	4618      	mov	r0, r3
 80006c2:	f002 fc60 	bl	8002f86 <osThreadCreate>
 80006c6:	4602      	mov	r2, r0
 80006c8:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <main+0x144>)
 80006ca:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006cc:	f002 fc54 	bl	8002f78 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <main+0x11c>
 80006d2:	bf00      	nop
 80006d4:	200042e0 	.word	0x200042e0
 80006d8:	08005438 	.word	0x08005438
 80006dc:	0800543c 	.word	0x0800543c
 80006e0:	08005448 	.word	0x08005448
 80006e4:	0800544c 	.word	0x0800544c
 80006e8:	08005450 	.word	0x08005450
 80006ec:	08005464 	.word	0x08005464
 80006f0:	200042dc 	.word	0x200042dc
 80006f4:	0800548c 	.word	0x0800548c
 80006f8:	200040d8 	.word	0x200040d8

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b094      	sub	sp, #80	; 0x50
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 0320 	add.w	r3, r7, #32
 8000706:	2230      	movs	r2, #48	; 0x30
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f003 fe82 	bl	8004414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000720:	2300      	movs	r3, #0
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	4b22      	ldr	r3, [pc, #136]	; (80007b0 <SystemClock_Config+0xb4>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000728:	4a21      	ldr	r2, [pc, #132]	; (80007b0 <SystemClock_Config+0xb4>)
 800072a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072e:	6413      	str	r3, [r2, #64]	; 0x40
 8000730:	4b1f      	ldr	r3, [pc, #124]	; (80007b0 <SystemClock_Config+0xb4>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	4b1c      	ldr	r3, [pc, #112]	; (80007b4 <SystemClock_Config+0xb8>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a1b      	ldr	r2, [pc, #108]	; (80007b4 <SystemClock_Config+0xb8>)
 8000746:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800074a:	6013      	str	r3, [r2, #0]
 800074c:	4b19      	ldr	r3, [pc, #100]	; (80007b4 <SystemClock_Config+0xb8>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000758:	2302      	movs	r3, #2
 800075a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800075c:	2301      	movs	r3, #1
 800075e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000760:	2310      	movs	r3, #16
 8000762:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000764:	2300      	movs	r3, #0
 8000766:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000768:	f107 0320 	add.w	r3, r7, #32
 800076c:	4618      	mov	r0, r3
 800076e:	f001 fa5d 	bl	8001c2c <HAL_RCC_OscConfig>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000778:	f000 f91e 	bl	80009b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077c:	230f      	movs	r3, #15
 800077e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000780:	2300      	movs	r3, #0
 8000782:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f001 fcb8 	bl	800210c <HAL_RCC_ClockConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80007a2:	f000 f909 	bl	80009b8 <Error_Handler>
  }
}
 80007a6:	bf00      	nop
 80007a8:	3750      	adds	r7, #80	; 0x50
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40007000 	.word	0x40007000

080007b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08c      	sub	sp, #48	; 0x30
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007be:	f107 0320 	add.w	r3, r7, #32
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80007cc:	463b      	mov	r3, r7
 80007ce:	2220      	movs	r2, #32
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f003 fe1e 	bl	8004414 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007d8:	4b3d      	ldr	r3, [pc, #244]	; (80008d0 <MX_ADC1_Init+0x118>)
 80007da:	4a3e      	ldr	r2, [pc, #248]	; (80008d4 <MX_ADC1_Init+0x11c>)
 80007dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007de:	4b3c      	ldr	r3, [pc, #240]	; (80008d0 <MX_ADC1_Init+0x118>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007e4:	4b3a      	ldr	r3, [pc, #232]	; (80008d0 <MX_ADC1_Init+0x118>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80007ea:	4b39      	ldr	r3, [pc, #228]	; (80008d0 <MX_ADC1_Init+0x118>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007f0:	4b37      	ldr	r3, [pc, #220]	; (80008d0 <MX_ADC1_Init+0x118>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007f6:	4b36      	ldr	r3, [pc, #216]	; (80008d0 <MX_ADC1_Init+0x118>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007fe:	4b34      	ldr	r3, [pc, #208]	; (80008d0 <MX_ADC1_Init+0x118>)
 8000800:	2200      	movs	r2, #0
 8000802:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000804:	4b32      	ldr	r3, [pc, #200]	; (80008d0 <MX_ADC1_Init+0x118>)
 8000806:	4a34      	ldr	r2, [pc, #208]	; (80008d8 <MX_ADC1_Init+0x120>)
 8000808:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800080a:	4b31      	ldr	r3, [pc, #196]	; (80008d0 <MX_ADC1_Init+0x118>)
 800080c:	2200      	movs	r2, #0
 800080e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000810:	4b2f      	ldr	r3, [pc, #188]	; (80008d0 <MX_ADC1_Init+0x118>)
 8000812:	2202      	movs	r2, #2
 8000814:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000816:	4b2e      	ldr	r3, [pc, #184]	; (80008d0 <MX_ADC1_Init+0x118>)
 8000818:	2200      	movs	r2, #0
 800081a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800081e:	4b2c      	ldr	r3, [pc, #176]	; (80008d0 <MX_ADC1_Init+0x118>)
 8000820:	2201      	movs	r2, #1
 8000822:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000824:	482a      	ldr	r0, [pc, #168]	; (80008d0 <MX_ADC1_Init+0x118>)
 8000826:	f000 fb77 	bl	8000f18 <HAL_ADC_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8000830:	f000 f8c2 	bl	80009b8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000834:	2300      	movs	r3, #0
 8000836:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8000838:	2301      	movs	r3, #1
 800083a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800083c:	2300      	movs	r3, #0
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000840:	f107 0320 	add.w	r3, r7, #32
 8000844:	4619      	mov	r1, r3
 8000846:	4822      	ldr	r0, [pc, #136]	; (80008d0 <MX_ADC1_Init+0x118>)
 8000848:	f000 fbaa 	bl	8000fa0 <HAL_ADC_ConfigChannel>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000852:	f000 f8b1 	bl	80009b8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000856:	2301      	movs	r3, #1
 8000858:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 2;
 800085a:	2302      	movs	r3, #2
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800085e:	f107 0320 	add.w	r3, r7, #32
 8000862:	4619      	mov	r1, r3
 8000864:	481a      	ldr	r0, [pc, #104]	; (80008d0 <MX_ADC1_Init+0x118>)
 8000866:	f000 fb9b 	bl	8000fa0 <HAL_ADC_ConfigChannel>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8000870:	f000 f8a2 	bl	80009b8 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8000874:	2306      	movs	r3, #6
 8000876:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8000878:	2301      	movs	r3, #1
 800087a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 2;
 800087c:	2302      	movs	r3, #2
 800087e:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000880:	2300      	movs	r3, #0
 8000882:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000888:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_ADC1_Init+0x124>)
 800088a:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800088c:	2300      	movs	r3, #0
 800088e:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000890:	2300      	movs	r3, #0
 8000892:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000898:	463b      	mov	r3, r7
 800089a:	4619      	mov	r1, r3
 800089c:	480c      	ldr	r0, [pc, #48]	; (80008d0 <MX_ADC1_Init+0x118>)
 800089e:	f000 fdad 	bl	80013fc <HAL_ADCEx_InjectedConfigChannel>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 80008a8:	f000 f886 	bl	80009b8 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 80008ac:	2307      	movs	r3, #7
 80008ae:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 80008b0:	2302      	movs	r3, #2
 80008b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80008b4:	463b      	mov	r3, r7
 80008b6:	4619      	mov	r1, r3
 80008b8:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_ADC1_Init+0x118>)
 80008ba:	f000 fd9f 	bl	80013fc <HAL_ADCEx_InjectedConfigChannel>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 80008c4:	f000 f878 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008c8:	bf00      	nop
 80008ca:	3730      	adds	r7, #48	; 0x30
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20004090 	.word	0x20004090
 80008d4:	40012000 	.word	0x40012000
 80008d8:	0f000001 	.word	0x0f000001
 80008dc:	000f0001 	.word	0x000f0001

080008e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_USART2_UART_Init+0x4c>)
 80008e6:	4a12      	ldr	r2, [pc, #72]	; (8000930 <MX_USART2_UART_Init+0x50>)
 80008e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <MX_USART2_UART_Init+0x4c>)
 80008ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <MX_USART2_UART_Init+0x4c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_USART2_UART_Init+0x4c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <MX_USART2_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_USART2_UART_Init+0x4c>)
 8000906:	220c      	movs	r2, #12
 8000908:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <MX_USART2_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_USART2_UART_Init+0x4c>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_USART2_UART_Init+0x4c>)
 8000918:	f001 fdc4 	bl	80024a4 <HAL_UART_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000922:	f000 f849 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200042e0 	.word	0x200042e0
 8000930:	40004400 	.word	0x40004400

08000934 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000948:	2300      	movs	r3, #0
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	4b10      	ldr	r3, [pc, #64]	; (8000990 <MX_GPIO_Init+0x5c>)
 800094e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000950:	4a0f      	ldr	r2, [pc, #60]	; (8000990 <MX_GPIO_Init+0x5c>)
 8000952:	f043 0301 	orr.w	r3, r3, #1
 8000956:	6313      	str	r3, [r2, #48]	; 0x30
 8000958:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <MX_GPIO_Init+0x5c>)
 800095a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095c:	f003 0301 	and.w	r3, r3, #1
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	2120      	movs	r1, #32
 8000968:	480a      	ldr	r0, [pc, #40]	; (8000994 <MX_GPIO_Init+0x60>)
 800096a:	f001 f945 	bl	8001bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800096e:	2320      	movs	r3, #32
 8000970:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000972:	2301      	movs	r3, #1
 8000974:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	4619      	mov	r1, r3
 8000982:	4804      	ldr	r0, [pc, #16]	; (8000994 <MX_GPIO_Init+0x60>)
 8000984:	f000 ffb6 	bl	80018f4 <HAL_GPIO_Init>

}
 8000988:	bf00      	nop
 800098a:	3718      	adds	r7, #24
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40023800 	.word	0x40023800
 8000994:	40020000 	.word	0x40020000

08000998 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009a0:	2001      	movs	r0, #1
 80009a2:	f002 fb3c 	bl	800301e <osDelay>
 80009a6:	e7fb      	b.n	80009a0 <StartDefaultTask+0x8>

080009a8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009b0:	2001      	movs	r0, #1
 80009b2:	f002 fb34 	bl	800301e <osDelay>
 80009b6:	e7fb      	b.n	80009b0 <StartTask02+0x8>

080009b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009bc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009be:	e7fe      	b.n	80009be <Error_Handler+0x6>

080009c0 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80009c8:	4a07      	ldr	r2, [pc, #28]	; (80009e8 <RetargetInit+0x28>)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80009ce:	4b07      	ldr	r3, [pc, #28]	; (80009ec <RetargetInit+0x2c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	6898      	ldr	r0, [r3, #8]
 80009d4:	2300      	movs	r3, #0
 80009d6:	2202      	movs	r2, #2
 80009d8:	2100      	movs	r1, #0
 80009da:	f003 fd9f 	bl	800451c <setvbuf>
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20004574 	.word	0x20004574
 80009ec:	20000010 	.word	0x20000010

080009f0 <_isatty>:

int _isatty(int fd) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	db04      	blt.n	8000a08 <_isatty+0x18>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2b02      	cmp	r3, #2
 8000a02:	dc01      	bgt.n	8000a08 <_isatty+0x18>
    return 1;
 8000a04:	2301      	movs	r3, #1
 8000a06:	e005      	b.n	8000a14 <_isatty+0x24>

  errno = EBADF;
 8000a08:	f003 fcda 	bl	80043c0 <__errno>
 8000a0c:	4602      	mov	r2, r0
 8000a0e:	2309      	movs	r3, #9
 8000a10:	6013      	str	r3, [r2, #0]
  return 0;
 8000a12:	2300      	movs	r3, #0
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <_write>:

int _write(int fd, char* ptr, int len) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d002      	beq.n	8000a34 <_write+0x18>
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	d111      	bne.n	8000a58 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000a34:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <_write+0x54>)
 8000a36:	6818      	ldr	r0, [r3, #0]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	b29a      	uxth	r2, r3
 8000a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a40:	68b9      	ldr	r1, [r7, #8]
 8000a42:	f001 fd7c 	bl	800253e <HAL_UART_Transmit>
 8000a46:	4603      	mov	r3, r0
 8000a48:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000a4a:	7dfb      	ldrb	r3, [r7, #23]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d101      	bne.n	8000a54 <_write+0x38>
      return len;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	e008      	b.n	8000a66 <_write+0x4a>
    else
      return EIO;
 8000a54:	2305      	movs	r3, #5
 8000a56:	e006      	b.n	8000a66 <_write+0x4a>
  }
  errno = EBADF;
 8000a58:	f003 fcb2 	bl	80043c0 <__errno>
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	2309      	movs	r3, #9
 8000a60:	6013      	str	r3, [r2, #0]
  return -1;
 8000a62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3718      	adds	r7, #24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20004574 	.word	0x20004574

08000a74 <_close>:

int _close(int fd) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	db04      	blt.n	8000a8c <_close+0x18>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2b02      	cmp	r3, #2
 8000a86:	dc01      	bgt.n	8000a8c <_close+0x18>
    return 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	e006      	b.n	8000a9a <_close+0x26>

  errno = EBADF;
 8000a8c:	f003 fc98 	bl	80043c0 <__errno>
 8000a90:	4602      	mov	r2, r0
 8000a92:	2309      	movs	r3, #9
 8000a94:	6013      	str	r3, [r2, #0]
  return -1;
 8000a96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b084      	sub	sp, #16
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	60f8      	str	r0, [r7, #12]
 8000aaa:	60b9      	str	r1, [r7, #8]
 8000aac:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000aae:	f003 fc87 	bl	80043c0 <__errno>
 8000ab2:	4602      	mov	r2, r0
 8000ab4:	2309      	movs	r3, #9
 8000ab6:	6013      	str	r3, [r2, #0]
  return -1;
 8000ab8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3710      	adds	r7, #16
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <_read>:

int _read(int fd, char* ptr, int len) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d110      	bne.n	8000af8 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <_read+0x4c>)
 8000ad8:	6818      	ldr	r0, [r3, #0]
 8000ada:	f04f 33ff 	mov.w	r3, #4294967295
 8000ade:	2201      	movs	r2, #1
 8000ae0:	68b9      	ldr	r1, [r7, #8]
 8000ae2:	f001 fdc5 	bl	8002670 <HAL_UART_Receive>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000aea:	7dfb      	ldrb	r3, [r7, #23]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d101      	bne.n	8000af4 <_read+0x30>
      return 1;
 8000af0:	2301      	movs	r3, #1
 8000af2:	e008      	b.n	8000b06 <_read+0x42>
    else
      return EIO;
 8000af4:	2305      	movs	r3, #5
 8000af6:	e006      	b.n	8000b06 <_read+0x42>
  }
  errno = EBADF;
 8000af8:	f003 fc62 	bl	80043c0 <__errno>
 8000afc:	4602      	mov	r2, r0
 8000afe:	2309      	movs	r3, #9
 8000b00:	6013      	str	r3, [r2, #0]
  return -1;
 8000b02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3718      	adds	r7, #24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20004574 	.word	0x20004574

08000b14 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	db08      	blt.n	8000b36 <_fstat+0x22>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2b02      	cmp	r3, #2
 8000b28:	dc05      	bgt.n	8000b36 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b30:	605a      	str	r2, [r3, #4]
    return 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	e005      	b.n	8000b42 <_fstat+0x2e>
  }

  errno = EBADF;
 8000b36:	f003 fc43 	bl	80043c0 <__errno>
 8000b3a:	4602      	mov	r2, r0
 8000b3c:	2309      	movs	r3, #9
 8000b3e:	6013      	str	r3, [r2, #0]
  return 0;
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
	...

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <HAL_MspInit+0x54>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5a:	4a11      	ldr	r2, [pc, #68]	; (8000ba0 <HAL_MspInit+0x54>)
 8000b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b60:	6453      	str	r3, [r2, #68]	; 0x44
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <HAL_MspInit+0x54>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	603b      	str	r3, [r7, #0]
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <HAL_MspInit+0x54>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	4a0a      	ldr	r2, [pc, #40]	; (8000ba0 <HAL_MspInit+0x54>)
 8000b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <HAL_MspInit+0x54>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	210f      	movs	r1, #15
 8000b8e:	f06f 0001 	mvn.w	r0, #1
 8000b92:	f000 fe86 	bl	80018a2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40023800 	.word	0x40023800

08000ba4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a17      	ldr	r2, [pc, #92]	; (8000c20 <HAL_ADC_MspInit+0x7c>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d127      	bne.n	8000c16 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
 8000bca:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <HAL_ADC_MspInit+0x80>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bce:	4a15      	ldr	r2, [pc, #84]	; (8000c24 <HAL_ADC_MspInit+0x80>)
 8000bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bd6:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <HAL_ADC_MspInit+0x80>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <HAL_ADC_MspInit+0x80>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a0e      	ldr	r2, [pc, #56]	; (8000c24 <HAL_ADC_MspInit+0x80>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <HAL_ADC_MspInit+0x80>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = ADC1_Pin|ADC2_Pin|ADCI1_Pin|ADCI2_Pin;
 8000bfe:	23c3      	movs	r3, #195	; 0xc3
 8000c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c02:	2303      	movs	r3, #3
 8000c04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4805      	ldr	r0, [pc, #20]	; (8000c28 <HAL_ADC_MspInit+0x84>)
 8000c12:	f000 fe6f 	bl	80018f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c16:	bf00      	nop
 8000c18:	3728      	adds	r7, #40	; 0x28
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40012000 	.word	0x40012000
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40020000 	.word	0x40020000

08000c2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	; 0x28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a19      	ldr	r2, [pc, #100]	; (8000cb0 <HAL_UART_MspInit+0x84>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d12b      	bne.n	8000ca6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <HAL_UART_MspInit+0x88>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	4a17      	ldr	r2, [pc, #92]	; (8000cb4 <HAL_UART_MspInit+0x88>)
 8000c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <HAL_UART_MspInit+0x88>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <HAL_UART_MspInit+0x88>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a10      	ldr	r2, [pc, #64]	; (8000cb4 <HAL_UART_MspInit+0x88>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <HAL_UART_MspInit+0x88>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c86:	230c      	movs	r3, #12
 8000c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c96:	2307      	movs	r3, #7
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9a:	f107 0314 	add.w	r3, r7, #20
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <HAL_UART_MspInit+0x8c>)
 8000ca2:	f000 fe27 	bl	80018f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ca6:	bf00      	nop
 8000ca8:	3728      	adds	r7, #40	; 0x28
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40004400 	.word	0x40004400
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40020000 	.word	0x40020000

08000cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <NMI_Handler+0x4>

08000cc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc6:	e7fe      	b.n	8000cc6 <HardFault_Handler+0x4>

08000cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <MemManage_Handler+0x4>

08000cce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd2:	e7fe      	b.n	8000cd2 <BusFault_Handler+0x4>

08000cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <UsageFault_Handler+0x4>

08000cda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cec:	f000 f8d2 	bl	8000e94 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000cf0:	f002 ff0c 	bl	8003b0c <xTaskGetSchedulerState>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d001      	beq.n	8000cfe <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000cfa:	f003 f93d 	bl	8003f78 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d0c:	4a14      	ldr	r2, [pc, #80]	; (8000d60 <_sbrk+0x5c>)
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <_sbrk+0x60>)
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d18:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <_sbrk+0x64>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d102      	bne.n	8000d26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d20:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <_sbrk+0x64>)
 8000d22:	4a12      	ldr	r2, [pc, #72]	; (8000d6c <_sbrk+0x68>)
 8000d24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <_sbrk+0x64>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d207      	bcs.n	8000d44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d34:	f003 fb44 	bl	80043c0 <__errno>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	230c      	movs	r3, #12
 8000d3c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d42:	e009      	b.n	8000d58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <_sbrk+0x64>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d4a:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <_sbrk+0x64>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	4a05      	ldr	r2, [pc, #20]	; (8000d68 <_sbrk+0x64>)
 8000d54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d56:	68fb      	ldr	r3, [r7, #12]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20020000 	.word	0x20020000
 8000d64:	00000400 	.word	0x00000400
 8000d68:	200002e4 	.word	0x200002e4
 8000d6c:	20004580 	.word	0x20004580

08000d70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <SystemInit+0x28>)
 8000d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7a:	4a07      	ldr	r2, [pc, #28]	; (8000d98 <SystemInit+0x28>)
 8000d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d84:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <SystemInit+0x28>)
 8000d86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d8a:	609a      	str	r2, [r3, #8]
#endif
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000da0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000da2:	e003      	b.n	8000dac <LoopCopyDataInit>

08000da4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000da6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000da8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000daa:	3104      	adds	r1, #4

08000dac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000dac:	480b      	ldr	r0, [pc, #44]	; (8000ddc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000dae:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000db0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000db2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000db4:	d3f6      	bcc.n	8000da4 <CopyDataInit>
  ldr  r2, =_sbss
 8000db6:	4a0b      	ldr	r2, [pc, #44]	; (8000de4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000db8:	e002      	b.n	8000dc0 <LoopFillZerobss>

08000dba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000dba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000dbc:	f842 3b04 	str.w	r3, [r2], #4

08000dc0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000dc0:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000dc2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000dc4:	d3f9      	bcc.n	8000dba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dc6:	f7ff ffd3 	bl	8000d70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dca:	f003 faff 	bl	80043cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dce:	f7ff fbf1 	bl	80005b4 <main>
  bx  lr    
 8000dd2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dd4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000dd8:	08005570 	.word	0x08005570
  ldr  r0, =_sdata
 8000ddc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000de0:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000de4:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000de8:	20004580 	.word	0x20004580

08000dec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dec:	e7fe      	b.n	8000dec <ADC_IRQHandler>
	...

08000df0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000df4:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <HAL_Init+0x40>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a0d      	ldr	r2, [pc, #52]	; (8000e30 <HAL_Init+0x40>)
 8000dfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e00:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <HAL_Init+0x40>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a0a      	ldr	r2, [pc, #40]	; (8000e30 <HAL_Init+0x40>)
 8000e06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e0c:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <HAL_Init+0x40>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a07      	ldr	r2, [pc, #28]	; (8000e30 <HAL_Init+0x40>)
 8000e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e18:	2003      	movs	r0, #3
 8000e1a:	f000 fd37 	bl	800188c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e1e:	200f      	movs	r0, #15
 8000e20:	f000 f808 	bl	8000e34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e24:	f7ff fe92 	bl	8000b4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40023c00 	.word	0x40023c00

08000e34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <HAL_InitTick+0x54>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <HAL_InitTick+0x58>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	4619      	mov	r1, r3
 8000e46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 fd41 	bl	80018da <HAL_SYSTICK_Config>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e00e      	b.n	8000e80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2b0f      	cmp	r3, #15
 8000e66:	d80a      	bhi.n	8000e7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	6879      	ldr	r1, [r7, #4]
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e70:	f000 fd17 	bl	80018a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e74:	4a06      	ldr	r2, [pc, #24]	; (8000e90 <HAL_InitTick+0x5c>)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	e000      	b.n	8000e80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000000 	.word	0x20000000
 8000e8c:	20000008 	.word	0x20000008
 8000e90:	20000004 	.word	0x20000004

08000e94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_IncTick+0x20>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_IncTick+0x24>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	4a04      	ldr	r2, [pc, #16]	; (8000eb8 <HAL_IncTick+0x24>)
 8000ea6:	6013      	str	r3, [r2, #0]
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	20000008 	.word	0x20000008
 8000eb8:	20004578 	.word	0x20004578

08000ebc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec0:	4b03      	ldr	r3, [pc, #12]	; (8000ed0 <HAL_GetTick+0x14>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20004578 	.word	0x20004578

08000ed4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000edc:	f7ff ffee 	bl	8000ebc <HAL_GetTick>
 8000ee0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eec:	d005      	beq.n	8000efa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eee:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <HAL_Delay+0x40>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000efa:	bf00      	nop
 8000efc:	f7ff ffde 	bl	8000ebc <HAL_GetTick>
 8000f00:	4602      	mov	r2, r0
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d8f7      	bhi.n	8000efc <HAL_Delay+0x28>
  {
  }
}
 8000f0c:	bf00      	nop
 8000f0e:	3710      	adds	r7, #16
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000008 	.word	0x20000008

08000f18 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f20:	2300      	movs	r3, #0
 8000f22:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d101      	bne.n	8000f2e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e033      	b.n	8000f96 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d109      	bne.n	8000f4a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff fe34 	bl	8000ba4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	f003 0310 	and.w	r3, r3, #16
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d118      	bne.n	8000f88 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f5e:	f023 0302 	bic.w	r3, r3, #2
 8000f62:	f043 0202 	orr.w	r2, r3, #2
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f000 f94a 	bl	8001204 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	f023 0303 	bic.w	r3, r3, #3
 8000f7e:	f043 0201 	orr.w	r2, r3, #1
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	641a      	str	r2, [r3, #64]	; 0x40
 8000f86:	e001      	b.n	8000f8c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000faa:	2300      	movs	r3, #0
 8000fac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d101      	bne.n	8000fbc <HAL_ADC_ConfigChannel+0x1c>
 8000fb8:	2302      	movs	r3, #2
 8000fba:	e113      	b.n	80011e4 <HAL_ADC_ConfigChannel+0x244>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b09      	cmp	r3, #9
 8000fca:	d925      	bls.n	8001018 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	68d9      	ldr	r1, [r3, #12]
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4613      	mov	r3, r2
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	4413      	add	r3, r2
 8000fe0:	3b1e      	subs	r3, #30
 8000fe2:	2207      	movs	r2, #7
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43da      	mvns	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	400a      	ands	r2, r1
 8000ff0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	68d9      	ldr	r1, [r3, #12]
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	689a      	ldr	r2, [r3, #8]
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	b29b      	uxth	r3, r3
 8001002:	4618      	mov	r0, r3
 8001004:	4603      	mov	r3, r0
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	4403      	add	r3, r0
 800100a:	3b1e      	subs	r3, #30
 800100c:	409a      	lsls	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	430a      	orrs	r2, r1
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	e022      	b.n	800105e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	6919      	ldr	r1, [r3, #16]
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	b29b      	uxth	r3, r3
 8001024:	461a      	mov	r2, r3
 8001026:	4613      	mov	r3, r2
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	4413      	add	r3, r2
 800102c:	2207      	movs	r2, #7
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43da      	mvns	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	400a      	ands	r2, r1
 800103a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	6919      	ldr	r1, [r3, #16]
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	689a      	ldr	r2, [r3, #8]
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	b29b      	uxth	r3, r3
 800104c:	4618      	mov	r0, r3
 800104e:	4603      	mov	r3, r0
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	4403      	add	r3, r0
 8001054:	409a      	lsls	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	430a      	orrs	r2, r1
 800105c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	2b06      	cmp	r3, #6
 8001064:	d824      	bhi.n	80010b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685a      	ldr	r2, [r3, #4]
 8001070:	4613      	mov	r3, r2
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	4413      	add	r3, r2
 8001076:	3b05      	subs	r3, #5
 8001078:	221f      	movs	r2, #31
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43da      	mvns	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	400a      	ands	r2, r1
 8001086:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	b29b      	uxth	r3, r3
 8001094:	4618      	mov	r0, r3
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685a      	ldr	r2, [r3, #4]
 800109a:	4613      	mov	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4413      	add	r3, r2
 80010a0:	3b05      	subs	r3, #5
 80010a2:	fa00 f203 	lsl.w	r2, r0, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	430a      	orrs	r2, r1
 80010ac:	635a      	str	r2, [r3, #52]	; 0x34
 80010ae:	e04c      	b.n	800114a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	2b0c      	cmp	r3, #12
 80010b6:	d824      	bhi.n	8001102 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685a      	ldr	r2, [r3, #4]
 80010c2:	4613      	mov	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4413      	add	r3, r2
 80010c8:	3b23      	subs	r3, #35	; 0x23
 80010ca:	221f      	movs	r2, #31
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43da      	mvns	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	400a      	ands	r2, r1
 80010d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	4618      	mov	r0, r3
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685a      	ldr	r2, [r3, #4]
 80010ec:	4613      	mov	r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	4413      	add	r3, r2
 80010f2:	3b23      	subs	r3, #35	; 0x23
 80010f4:	fa00 f203 	lsl.w	r2, r0, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	430a      	orrs	r2, r1
 80010fe:	631a      	str	r2, [r3, #48]	; 0x30
 8001100:	e023      	b.n	800114a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685a      	ldr	r2, [r3, #4]
 800110c:	4613      	mov	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	4413      	add	r3, r2
 8001112:	3b41      	subs	r3, #65	; 0x41
 8001114:	221f      	movs	r2, #31
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43da      	mvns	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	400a      	ands	r2, r1
 8001122:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	b29b      	uxth	r3, r3
 8001130:	4618      	mov	r0, r3
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685a      	ldr	r2, [r3, #4]
 8001136:	4613      	mov	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	4413      	add	r3, r2
 800113c:	3b41      	subs	r3, #65	; 0x41
 800113e:	fa00 f203 	lsl.w	r2, r0, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	430a      	orrs	r2, r1
 8001148:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800114a:	4b29      	ldr	r3, [pc, #164]	; (80011f0 <HAL_ADC_ConfigChannel+0x250>)
 800114c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a28      	ldr	r2, [pc, #160]	; (80011f4 <HAL_ADC_ConfigChannel+0x254>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d10f      	bne.n	8001178 <HAL_ADC_ConfigChannel+0x1d8>
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b12      	cmp	r3, #18
 800115e:	d10b      	bne.n	8001178 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a1d      	ldr	r2, [pc, #116]	; (80011f4 <HAL_ADC_ConfigChannel+0x254>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d12b      	bne.n	80011da <HAL_ADC_ConfigChannel+0x23a>
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a1c      	ldr	r2, [pc, #112]	; (80011f8 <HAL_ADC_ConfigChannel+0x258>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d003      	beq.n	8001194 <HAL_ADC_ConfigChannel+0x1f4>
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b11      	cmp	r3, #17
 8001192:	d122      	bne.n	80011da <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a11      	ldr	r2, [pc, #68]	; (80011f8 <HAL_ADC_ConfigChannel+0x258>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d111      	bne.n	80011da <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <HAL_ADC_ConfigChannel+0x25c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a11      	ldr	r2, [pc, #68]	; (8001200 <HAL_ADC_ConfigChannel+0x260>)
 80011bc:	fba2 2303 	umull	r2, r3, r2, r3
 80011c0:	0c9a      	lsrs	r2, r3, #18
 80011c2:	4613      	mov	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80011cc:	e002      	b.n	80011d4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	3b01      	subs	r3, #1
 80011d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d1f9      	bne.n	80011ce <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	40012300 	.word	0x40012300
 80011f4:	40012000 	.word	0x40012000
 80011f8:	10000012 	.word	0x10000012
 80011fc:	20000000 	.word	0x20000000
 8001200:	431bde83 	.word	0x431bde83

08001204 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800120c:	4b79      	ldr	r3, [pc, #484]	; (80013f4 <ADC_Init+0x1f0>)
 800120e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	431a      	orrs	r2, r3
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001238:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	6859      	ldr	r1, [r3, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	021a      	lsls	r2, r3, #8
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	430a      	orrs	r2, r1
 800124c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	685a      	ldr	r2, [r3, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800125c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6859      	ldr	r1, [r3, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	430a      	orrs	r2, r1
 800126e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	689a      	ldr	r2, [r3, #8]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800127e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6899      	ldr	r1, [r3, #8]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	68da      	ldr	r2, [r3, #12]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	430a      	orrs	r2, r1
 8001290:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001296:	4a58      	ldr	r2, [pc, #352]	; (80013f8 <ADC_Init+0x1f4>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d022      	beq.n	80012e2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	689a      	ldr	r2, [r3, #8]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	6899      	ldr	r1, [r3, #8]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	430a      	orrs	r2, r1
 80012bc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	6899      	ldr	r1, [r3, #8]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	430a      	orrs	r2, r1
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	e00f      	b.n	8001302 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001300:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 0202 	bic.w	r2, r2, #2
 8001310:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6899      	ldr	r1, [r3, #8]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	7e1b      	ldrb	r3, [r3, #24]
 800131c:	005a      	lsls	r2, r3, #1
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	430a      	orrs	r2, r1
 8001324:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f893 3020 	ldrb.w	r3, [r3, #32]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d01b      	beq.n	8001368 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800133e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	685a      	ldr	r2, [r3, #4]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800134e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6859      	ldr	r1, [r3, #4]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135a:	3b01      	subs	r3, #1
 800135c:	035a      	lsls	r2, r3, #13
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	430a      	orrs	r2, r1
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	e007      	b.n	8001378 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	685a      	ldr	r2, [r3, #4]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001376:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001386:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	69db      	ldr	r3, [r3, #28]
 8001392:	3b01      	subs	r3, #1
 8001394:	051a      	lsls	r2, r3, #20
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	430a      	orrs	r2, r1
 800139c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80013ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	6899      	ldr	r1, [r3, #8]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013ba:	025a      	lsls	r2, r3, #9
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	430a      	orrs	r2, r1
 80013c2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	689a      	ldr	r2, [r3, #8]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	6899      	ldr	r1, [r3, #8]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	029a      	lsls	r2, r3, #10
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	430a      	orrs	r2, r1
 80013e6:	609a      	str	r2, [r3, #8]
}
 80013e8:	bf00      	nop
 80013ea:	3714      	adds	r7, #20
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	40012300 	.word	0x40012300
 80013f8:	0f000001 	.word	0x0f000001

080013fc <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800140c:	2b01      	cmp	r3, #1
 800140e:	d101      	bne.n	8001414 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8001410:	2302      	movs	r3, #2
 8001412:	e17b      	b.n	800170c <HAL_ADCEx_InjectedConfigChannel+0x310>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2201      	movs	r2, #1
 8001418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b09      	cmp	r3, #9
 8001422:	d925      	bls.n	8001470 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	68d9      	ldr	r1, [r3, #12]
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	b29b      	uxth	r3, r3
 8001430:	461a      	mov	r2, r3
 8001432:	4613      	mov	r3, r2
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	4413      	add	r3, r2
 8001438:	3b1e      	subs	r3, #30
 800143a:	2207      	movs	r2, #7
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43da      	mvns	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	400a      	ands	r2, r1
 8001448:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	68d9      	ldr	r1, [r3, #12]
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	b29b      	uxth	r3, r3
 800145a:	4618      	mov	r0, r3
 800145c:	4603      	mov	r3, r0
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	4403      	add	r3, r0
 8001462:	3b1e      	subs	r3, #30
 8001464:	409a      	lsls	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	430a      	orrs	r2, r1
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	e022      	b.n	80014b6 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6919      	ldr	r1, [r3, #16]
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	b29b      	uxth	r3, r3
 800147c:	461a      	mov	r2, r3
 800147e:	4613      	mov	r3, r2
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	4413      	add	r3, r2
 8001484:	2207      	movs	r2, #7
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43da      	mvns	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	400a      	ands	r2, r1
 8001492:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6919      	ldr	r1, [r3, #16]
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	689a      	ldr	r2, [r3, #8]
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	4618      	mov	r0, r3
 80014a6:	4603      	mov	r3, r0
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	4403      	add	r3, r0
 80014ac:	409a      	lsls	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80014c4:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	3b01      	subs	r3, #1
 80014d2:	051a      	lsls	r2, r3, #20
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	430a      	orrs	r2, r1
 80014da:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	3303      	adds	r3, #3
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	461a      	mov	r2, r3
 80014f8:	4613      	mov	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	221f      	movs	r2, #31
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43da      	mvns	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	400a      	ands	r2, r1
 800150c:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	b29b      	uxth	r3, r3
 800151a:	4618      	mov	r0, r3
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	b2da      	uxtb	r2, r3
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	691b      	ldr	r3, [r3, #16]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	b2db      	uxtb	r3, r3
 800152c:	3303      	adds	r3, #3
 800152e:	b2db      	uxtb	r3, r3
 8001530:	461a      	mov	r2, r3
 8001532:	4613      	mov	r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	4413      	add	r3, r2
 8001538:	fa00 f203 	lsl.w	r2, r0, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	430a      	orrs	r2, r1
 8001542:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	4a73      	ldr	r2, [pc, #460]	; (8001718 <HAL_ADCEx_InjectedConfigChannel+0x31c>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d022      	beq.n	8001594 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800155c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6899      	ldr	r1, [r3, #8]
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	699a      	ldr	r2, [r3, #24]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	430a      	orrs	r2, r1
 800156e:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	689a      	ldr	r2, [r3, #8]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800157e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6899      	ldr	r1, [r3, #8]
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	69da      	ldr	r2, [r3, #28]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	430a      	orrs	r2, r1
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	e00f      	b.n	80015b4 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	689a      	ldr	r2, [r3, #8]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80015a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	689a      	ldr	r2, [r3, #8]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80015b2:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	7d5b      	ldrb	r3, [r3, #21]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d008      	beq.n	80015ce <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	e007      	b.n	80015de <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015dc:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	7d1b      	ldrb	r3, [r3, #20]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d008      	beq.n	80015f8 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	e007      	b.n	8001608 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001606:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2b02      	cmp	r3, #2
 800160e:	d017      	beq.n	8001640 <HAL_ADCEx_InjectedConfigChannel+0x244>
 8001610:	2b03      	cmp	r3, #3
 8001612:	d029      	beq.n	8001668 <HAL_ADCEx_InjectedConfigChannel+0x26c>
 8001614:	2b01      	cmp	r3, #1
 8001616:	d13b      	bne.n	8001690 <HAL_ADCEx_InjectedConfigChannel+0x294>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	6812      	ldr	r2, [r2, #0]
 8001622:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001626:	f023 030f 	bic.w	r3, r3, #15
 800162a:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6959      	ldr	r1, [r3, #20]
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	68da      	ldr	r2, [r3, #12]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	615a      	str	r2, [r3, #20]
      break;
 800163e:	e03b      	b.n	80016b8 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	6812      	ldr	r2, [r2, #0]
 800164a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800164e:	f023 030f 	bic.w	r3, r3, #15
 8001652:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6999      	ldr	r1, [r3, #24]
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	68da      	ldr	r2, [r3, #12]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	430a      	orrs	r2, r1
 8001664:	619a      	str	r2, [r3, #24]
      break;
 8001666:	e027      	b.n	80016b8 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	6812      	ldr	r2, [r2, #0]
 8001672:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001676:	f023 030f 	bic.w	r3, r3, #15
 800167a:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	69d9      	ldr	r1, [r3, #28]
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	68da      	ldr	r2, [r3, #12]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	430a      	orrs	r2, r1
 800168c:	61da      	str	r2, [r3, #28]
      break;
 800168e:	e013      	b.n	80016b8 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6a1b      	ldr	r3, [r3, #32]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	6812      	ldr	r2, [r2, #0]
 800169a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800169e:	f023 030f 	bic.w	r3, r3, #15
 80016a2:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6a19      	ldr	r1, [r3, #32]
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	68da      	ldr	r2, [r3, #12]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	430a      	orrs	r2, r1
 80016b4:	621a      	str	r2, [r3, #32]
      break;
 80016b6:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016b8:	4b18      	ldr	r3, [pc, #96]	; (800171c <HAL_ADCEx_InjectedConfigChannel+0x320>)
 80016ba:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a17      	ldr	r2, [pc, #92]	; (8001720 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d109      	bne.n	80016da <HAL_ADCEx_InjectedConfigChannel+0x2de>
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2b12      	cmp	r3, #18
 80016cc:	d105      	bne.n	80016da <HAL_ADCEx_InjectedConfigChannel+0x2de>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a10      	ldr	r2, [pc, #64]	; (8001720 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d10e      	bne.n	8001702 <HAL_ADCEx_InjectedConfigChannel+0x306>
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a0e      	ldr	r2, [pc, #56]	; (8001724 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d003      	beq.n	80016f6 <HAL_ADCEx_InjectedConfigChannel+0x2fa>
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2b11      	cmp	r3, #17
 80016f4:	d105      	bne.n	8001702 <HAL_ADCEx_InjectedConfigChannel+0x306>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	000f0001 	.word	0x000f0001
 800171c:	40012300 	.word	0x40012300
 8001720:	40012000 	.word	0x40012000
 8001724:	10000012 	.word	0x10000012

08001728 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001738:	4b0c      	ldr	r3, [pc, #48]	; (800176c <__NVIC_SetPriorityGrouping+0x44>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001744:	4013      	ands	r3, r2
 8001746:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001750:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800175a:	4a04      	ldr	r2, [pc, #16]	; (800176c <__NVIC_SetPriorityGrouping+0x44>)
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	60d3      	str	r3, [r2, #12]
}
 8001760:	bf00      	nop
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001774:	4b04      	ldr	r3, [pc, #16]	; (8001788 <__NVIC_GetPriorityGrouping+0x18>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	0a1b      	lsrs	r3, r3, #8
 800177a:	f003 0307 	and.w	r3, r3, #7
}
 800177e:	4618      	mov	r0, r3
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	6039      	str	r1, [r7, #0]
 8001796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179c:	2b00      	cmp	r3, #0
 800179e:	db0a      	blt.n	80017b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	490c      	ldr	r1, [pc, #48]	; (80017d8 <__NVIC_SetPriority+0x4c>)
 80017a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017aa:	0112      	lsls	r2, r2, #4
 80017ac:	b2d2      	uxtb	r2, r2
 80017ae:	440b      	add	r3, r1
 80017b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b4:	e00a      	b.n	80017cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	4908      	ldr	r1, [pc, #32]	; (80017dc <__NVIC_SetPriority+0x50>)
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	f003 030f 	and.w	r3, r3, #15
 80017c2:	3b04      	subs	r3, #4
 80017c4:	0112      	lsls	r2, r2, #4
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	440b      	add	r3, r1
 80017ca:	761a      	strb	r2, [r3, #24]
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000e100 	.word	0xe000e100
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b089      	sub	sp, #36	; 0x24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	f1c3 0307 	rsb	r3, r3, #7
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	bf28      	it	cs
 80017fe:	2304      	movcs	r3, #4
 8001800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3304      	adds	r3, #4
 8001806:	2b06      	cmp	r3, #6
 8001808:	d902      	bls.n	8001810 <NVIC_EncodePriority+0x30>
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3b03      	subs	r3, #3
 800180e:	e000      	b.n	8001812 <NVIC_EncodePriority+0x32>
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001814:	f04f 32ff 	mov.w	r2, #4294967295
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43da      	mvns	r2, r3
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	401a      	ands	r2, r3
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001828:	f04f 31ff 	mov.w	r1, #4294967295
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	fa01 f303 	lsl.w	r3, r1, r3
 8001832:	43d9      	mvns	r1, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001838:	4313      	orrs	r3, r2
         );
}
 800183a:	4618      	mov	r0, r3
 800183c:	3724      	adds	r7, #36	; 0x24
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
	...

08001848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3b01      	subs	r3, #1
 8001854:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001858:	d301      	bcc.n	800185e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800185a:	2301      	movs	r3, #1
 800185c:	e00f      	b.n	800187e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800185e:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <SysTick_Config+0x40>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3b01      	subs	r3, #1
 8001864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001866:	210f      	movs	r1, #15
 8001868:	f04f 30ff 	mov.w	r0, #4294967295
 800186c:	f7ff ff8e 	bl	800178c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <SysTick_Config+0x40>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001876:	4b04      	ldr	r3, [pc, #16]	; (8001888 <SysTick_Config+0x40>)
 8001878:	2207      	movs	r2, #7
 800187a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	e000e010 	.word	0xe000e010

0800188c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff ff47 	bl	8001728 <__NVIC_SetPriorityGrouping>
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b086      	sub	sp, #24
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	4603      	mov	r3, r0
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
 80018ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018b4:	f7ff ff5c 	bl	8001770 <__NVIC_GetPriorityGrouping>
 80018b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	68b9      	ldr	r1, [r7, #8]
 80018be:	6978      	ldr	r0, [r7, #20]
 80018c0:	f7ff ff8e 	bl	80017e0 <NVIC_EncodePriority>
 80018c4:	4602      	mov	r2, r0
 80018c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ca:	4611      	mov	r1, r2
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ff5d 	bl	800178c <__NVIC_SetPriority>
}
 80018d2:	bf00      	nop
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff ffb0 	bl	8001848 <SysTick_Config>
 80018e8:	4603      	mov	r3, r0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
	...

080018f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b089      	sub	sp, #36	; 0x24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001906:	2300      	movs	r3, #0
 8001908:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
 800190e:	e159      	b.n	8001bc4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001910:	2201      	movs	r2, #1
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	4013      	ands	r3, r2
 8001922:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	429a      	cmp	r2, r3
 800192a:	f040 8148 	bne.w	8001bbe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d00b      	beq.n	800194e <HAL_GPIO_Init+0x5a>
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b02      	cmp	r3, #2
 800193c:	d007      	beq.n	800194e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001942:	2b11      	cmp	r3, #17
 8001944:	d003      	beq.n	800194e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b12      	cmp	r3, #18
 800194c:	d130      	bne.n	80019b0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	2203      	movs	r2, #3
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4013      	ands	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	68da      	ldr	r2, [r3, #12]
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4313      	orrs	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001984:	2201      	movs	r2, #1
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	091b      	lsrs	r3, r3, #4
 800199a:	f003 0201 	and.w	r2, r3, #1
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	2203      	movs	r2, #3
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d003      	beq.n	80019f0 <HAL_GPIO_Init+0xfc>
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b12      	cmp	r3, #18
 80019ee:	d123      	bne.n	8001a38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	08da      	lsrs	r2, r3, #3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3208      	adds	r2, #8
 80019f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	220f      	movs	r2, #15
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4013      	ands	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	691a      	ldr	r2, [r3, #16]
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	08da      	lsrs	r2, r3, #3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3208      	adds	r2, #8
 8001a32:	69b9      	ldr	r1, [r7, #24]
 8001a34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	2203      	movs	r2, #3
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 0203 	and.w	r2, r3, #3
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 80a2 	beq.w	8001bbe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	4b56      	ldr	r3, [pc, #344]	; (8001bd8 <HAL_GPIO_Init+0x2e4>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	4a55      	ldr	r2, [pc, #340]	; (8001bd8 <HAL_GPIO_Init+0x2e4>)
 8001a84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a88:	6453      	str	r3, [r2, #68]	; 0x44
 8001a8a:	4b53      	ldr	r3, [pc, #332]	; (8001bd8 <HAL_GPIO_Init+0x2e4>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a96:	4a51      	ldr	r2, [pc, #324]	; (8001bdc <HAL_GPIO_Init+0x2e8>)
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	089b      	lsrs	r3, r3, #2
 8001a9c:	3302      	adds	r3, #2
 8001a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	220f      	movs	r2, #15
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a48      	ldr	r2, [pc, #288]	; (8001be0 <HAL_GPIO_Init+0x2ec>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d019      	beq.n	8001af6 <HAL_GPIO_Init+0x202>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a47      	ldr	r2, [pc, #284]	; (8001be4 <HAL_GPIO_Init+0x2f0>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d013      	beq.n	8001af2 <HAL_GPIO_Init+0x1fe>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a46      	ldr	r2, [pc, #280]	; (8001be8 <HAL_GPIO_Init+0x2f4>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d00d      	beq.n	8001aee <HAL_GPIO_Init+0x1fa>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a45      	ldr	r2, [pc, #276]	; (8001bec <HAL_GPIO_Init+0x2f8>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d007      	beq.n	8001aea <HAL_GPIO_Init+0x1f6>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a44      	ldr	r2, [pc, #272]	; (8001bf0 <HAL_GPIO_Init+0x2fc>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d101      	bne.n	8001ae6 <HAL_GPIO_Init+0x1f2>
 8001ae2:	2304      	movs	r3, #4
 8001ae4:	e008      	b.n	8001af8 <HAL_GPIO_Init+0x204>
 8001ae6:	2307      	movs	r3, #7
 8001ae8:	e006      	b.n	8001af8 <HAL_GPIO_Init+0x204>
 8001aea:	2303      	movs	r3, #3
 8001aec:	e004      	b.n	8001af8 <HAL_GPIO_Init+0x204>
 8001aee:	2302      	movs	r3, #2
 8001af0:	e002      	b.n	8001af8 <HAL_GPIO_Init+0x204>
 8001af2:	2301      	movs	r3, #1
 8001af4:	e000      	b.n	8001af8 <HAL_GPIO_Init+0x204>
 8001af6:	2300      	movs	r3, #0
 8001af8:	69fa      	ldr	r2, [r7, #28]
 8001afa:	f002 0203 	and.w	r2, r2, #3
 8001afe:	0092      	lsls	r2, r2, #2
 8001b00:	4093      	lsls	r3, r2
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b08:	4934      	ldr	r1, [pc, #208]	; (8001bdc <HAL_GPIO_Init+0x2e8>)
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	089b      	lsrs	r3, r3, #2
 8001b0e:	3302      	adds	r3, #2
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b16:	4b37      	ldr	r3, [pc, #220]	; (8001bf4 <HAL_GPIO_Init+0x300>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4013      	ands	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b3a:	4a2e      	ldr	r2, [pc, #184]	; (8001bf4 <HAL_GPIO_Init+0x300>)
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b40:	4b2c      	ldr	r3, [pc, #176]	; (8001bf4 <HAL_GPIO_Init+0x300>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d003      	beq.n	8001b64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b64:	4a23      	ldr	r2, [pc, #140]	; (8001bf4 <HAL_GPIO_Init+0x300>)
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b6a:	4b22      	ldr	r3, [pc, #136]	; (8001bf4 <HAL_GPIO_Init+0x300>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	43db      	mvns	r3, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4013      	ands	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b8e:	4a19      	ldr	r2, [pc, #100]	; (8001bf4 <HAL_GPIO_Init+0x300>)
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b94:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <HAL_GPIO_Init+0x300>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bb8:	4a0e      	ldr	r2, [pc, #56]	; (8001bf4 <HAL_GPIO_Init+0x300>)
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	61fb      	str	r3, [r7, #28]
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	2b0f      	cmp	r3, #15
 8001bc8:	f67f aea2 	bls.w	8001910 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bcc:	bf00      	nop
 8001bce:	3724      	adds	r7, #36	; 0x24
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40013800 	.word	0x40013800
 8001be0:	40020000 	.word	0x40020000
 8001be4:	40020400 	.word	0x40020400
 8001be8:	40020800 	.word	0x40020800
 8001bec:	40020c00 	.word	0x40020c00
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40013c00 	.word	0x40013c00

08001bf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	807b      	strh	r3, [r7, #2]
 8001c04:	4613      	mov	r3, r2
 8001c06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c08:	787b      	ldrb	r3, [r7, #1]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c0e:	887a      	ldrh	r2, [r7, #2]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c14:	e003      	b.n	8001c1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c16:	887b      	ldrh	r3, [r7, #2]
 8001c18:	041a      	lsls	r2, r3, #16
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	619a      	str	r2, [r3, #24]
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
	...

08001c2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e25b      	b.n	80020f6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d075      	beq.n	8001d36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c4a:	4ba3      	ldr	r3, [pc, #652]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 030c 	and.w	r3, r3, #12
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d00c      	beq.n	8001c70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c56:	4ba0      	ldr	r3, [pc, #640]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c5e:	2b08      	cmp	r3, #8
 8001c60:	d112      	bne.n	8001c88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c62:	4b9d      	ldr	r3, [pc, #628]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c6e:	d10b      	bne.n	8001c88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c70:	4b99      	ldr	r3, [pc, #612]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d05b      	beq.n	8001d34 <HAL_RCC_OscConfig+0x108>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d157      	bne.n	8001d34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e236      	b.n	80020f6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c90:	d106      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x74>
 8001c92:	4b91      	ldr	r3, [pc, #580]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a90      	ldr	r2, [pc, #576]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	e01d      	b.n	8001cdc <HAL_RCC_OscConfig+0xb0>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ca8:	d10c      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x98>
 8001caa:	4b8b      	ldr	r3, [pc, #556]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a8a      	ldr	r2, [pc, #552]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	4b88      	ldr	r3, [pc, #544]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a87      	ldr	r2, [pc, #540]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	e00b      	b.n	8001cdc <HAL_RCC_OscConfig+0xb0>
 8001cc4:	4b84      	ldr	r3, [pc, #528]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a83      	ldr	r2, [pc, #524]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cce:	6013      	str	r3, [r2, #0]
 8001cd0:	4b81      	ldr	r3, [pc, #516]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a80      	ldr	r2, [pc, #512]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001cd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d013      	beq.n	8001d0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce4:	f7ff f8ea 	bl	8000ebc <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cec:	f7ff f8e6 	bl	8000ebc <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b64      	cmp	r3, #100	; 0x64
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e1fb      	b.n	80020f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfe:	4b76      	ldr	r3, [pc, #472]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0xc0>
 8001d0a:	e014      	b.n	8001d36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0c:	f7ff f8d6 	bl	8000ebc <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d14:	f7ff f8d2 	bl	8000ebc <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b64      	cmp	r3, #100	; 0x64
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e1e7      	b.n	80020f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d26:	4b6c      	ldr	r3, [pc, #432]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f0      	bne.n	8001d14 <HAL_RCC_OscConfig+0xe8>
 8001d32:	e000      	b.n	8001d36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d063      	beq.n	8001e0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d42:	4b65      	ldr	r3, [pc, #404]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 030c 	and.w	r3, r3, #12
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00b      	beq.n	8001d66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d4e:	4b62      	ldr	r3, [pc, #392]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d56:	2b08      	cmp	r3, #8
 8001d58:	d11c      	bne.n	8001d94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d5a:	4b5f      	ldr	r3, [pc, #380]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d116      	bne.n	8001d94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d66:	4b5c      	ldr	r3, [pc, #368]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d005      	beq.n	8001d7e <HAL_RCC_OscConfig+0x152>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d001      	beq.n	8001d7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e1bb      	b.n	80020f6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7e:	4b56      	ldr	r3, [pc, #344]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	4952      	ldr	r1, [pc, #328]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d92:	e03a      	b.n	8001e0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d020      	beq.n	8001dde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d9c:	4b4f      	ldr	r3, [pc, #316]	; (8001edc <HAL_RCC_OscConfig+0x2b0>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da2:	f7ff f88b 	bl	8000ebc <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001daa:	f7ff f887 	bl	8000ebc <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e19c      	b.n	80020f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dbc:	4b46      	ldr	r3, [pc, #280]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0f0      	beq.n	8001daa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc8:	4b43      	ldr	r3, [pc, #268]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	4940      	ldr	r1, [pc, #256]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	600b      	str	r3, [r1, #0]
 8001ddc:	e015      	b.n	8001e0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dde:	4b3f      	ldr	r3, [pc, #252]	; (8001edc <HAL_RCC_OscConfig+0x2b0>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de4:	f7ff f86a 	bl	8000ebc <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dec:	f7ff f866 	bl	8000ebc <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e17b      	b.n	80020f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfe:	4b36      	ldr	r3, [pc, #216]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d030      	beq.n	8001e78 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d016      	beq.n	8001e4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e1e:	4b30      	ldr	r3, [pc, #192]	; (8001ee0 <HAL_RCC_OscConfig+0x2b4>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e24:	f7ff f84a 	bl	8000ebc <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e2c:	f7ff f846 	bl	8000ebc <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e15b      	b.n	80020f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3e:	4b26      	ldr	r3, [pc, #152]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0x200>
 8001e4a:	e015      	b.n	8001e78 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e4c:	4b24      	ldr	r3, [pc, #144]	; (8001ee0 <HAL_RCC_OscConfig+0x2b4>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e52:	f7ff f833 	bl	8000ebc <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e5a:	f7ff f82f 	bl	8000ebc <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e144      	b.n	80020f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001e6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1f0      	bne.n	8001e5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f000 80a0 	beq.w	8001fc6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e86:	2300      	movs	r3, #0
 8001e88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e8a:	4b13      	ldr	r3, [pc, #76]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d10f      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	4b0f      	ldr	r3, [pc, #60]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	4a0e      	ldr	r2, [pc, #56]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea6:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eae:	60bb      	str	r3, [r7, #8]
 8001eb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <HAL_RCC_OscConfig+0x2b8>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d121      	bne.n	8001f06 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ec2:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <HAL_RCC_OscConfig+0x2b8>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a07      	ldr	r2, [pc, #28]	; (8001ee4 <HAL_RCC_OscConfig+0x2b8>)
 8001ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ecc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ece:	f7fe fff5 	bl	8000ebc <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed4:	e011      	b.n	8001efa <HAL_RCC_OscConfig+0x2ce>
 8001ed6:	bf00      	nop
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	42470000 	.word	0x42470000
 8001ee0:	42470e80 	.word	0x42470e80
 8001ee4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee8:	f7fe ffe8 	bl	8000ebc <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e0fd      	b.n	80020f6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efa:	4b81      	ldr	r3, [pc, #516]	; (8002100 <HAL_RCC_OscConfig+0x4d4>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0f0      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d106      	bne.n	8001f1c <HAL_RCC_OscConfig+0x2f0>
 8001f0e:	4b7d      	ldr	r3, [pc, #500]	; (8002104 <HAL_RCC_OscConfig+0x4d8>)
 8001f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f12:	4a7c      	ldr	r2, [pc, #496]	; (8002104 <HAL_RCC_OscConfig+0x4d8>)
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	6713      	str	r3, [r2, #112]	; 0x70
 8001f1a:	e01c      	b.n	8001f56 <HAL_RCC_OscConfig+0x32a>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	2b05      	cmp	r3, #5
 8001f22:	d10c      	bne.n	8001f3e <HAL_RCC_OscConfig+0x312>
 8001f24:	4b77      	ldr	r3, [pc, #476]	; (8002104 <HAL_RCC_OscConfig+0x4d8>)
 8001f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f28:	4a76      	ldr	r2, [pc, #472]	; (8002104 <HAL_RCC_OscConfig+0x4d8>)
 8001f2a:	f043 0304 	orr.w	r3, r3, #4
 8001f2e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f30:	4b74      	ldr	r3, [pc, #464]	; (8002104 <HAL_RCC_OscConfig+0x4d8>)
 8001f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f34:	4a73      	ldr	r2, [pc, #460]	; (8002104 <HAL_RCC_OscConfig+0x4d8>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f3c:	e00b      	b.n	8001f56 <HAL_RCC_OscConfig+0x32a>
 8001f3e:	4b71      	ldr	r3, [pc, #452]	; (8002104 <HAL_RCC_OscConfig+0x4d8>)
 8001f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f42:	4a70      	ldr	r2, [pc, #448]	; (8002104 <HAL_RCC_OscConfig+0x4d8>)
 8001f44:	f023 0301 	bic.w	r3, r3, #1
 8001f48:	6713      	str	r3, [r2, #112]	; 0x70
 8001f4a:	4b6e      	ldr	r3, [pc, #440]	; (8002104 <HAL_RCC_OscConfig+0x4d8>)
 8001f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f4e:	4a6d      	ldr	r2, [pc, #436]	; (8002104 <HAL_RCC_OscConfig+0x4d8>)
 8001f50:	f023 0304 	bic.w	r3, r3, #4
 8001f54:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d015      	beq.n	8001f8a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f5e:	f7fe ffad 	bl	8000ebc <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f64:	e00a      	b.n	8001f7c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f66:	f7fe ffa9 	bl	8000ebc <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e0bc      	b.n	80020f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f7c:	4b61      	ldr	r3, [pc, #388]	; (8002104 <HAL_RCC_OscConfig+0x4d8>)
 8001f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0ee      	beq.n	8001f66 <HAL_RCC_OscConfig+0x33a>
 8001f88:	e014      	b.n	8001fb4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f8a:	f7fe ff97 	bl	8000ebc <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f90:	e00a      	b.n	8001fa8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f92:	f7fe ff93 	bl	8000ebc <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e0a6      	b.n	80020f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa8:	4b56      	ldr	r3, [pc, #344]	; (8002104 <HAL_RCC_OscConfig+0x4d8>)
 8001faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1ee      	bne.n	8001f92 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fb4:	7dfb      	ldrb	r3, [r7, #23]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d105      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fba:	4b52      	ldr	r3, [pc, #328]	; (8002104 <HAL_RCC_OscConfig+0x4d8>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	4a51      	ldr	r2, [pc, #324]	; (8002104 <HAL_RCC_OscConfig+0x4d8>)
 8001fc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 8092 	beq.w	80020f4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fd0:	4b4c      	ldr	r3, [pc, #304]	; (8002104 <HAL_RCC_OscConfig+0x4d8>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f003 030c 	and.w	r3, r3, #12
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d05c      	beq.n	8002096 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d141      	bne.n	8002068 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe4:	4b48      	ldr	r3, [pc, #288]	; (8002108 <HAL_RCC_OscConfig+0x4dc>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fea:	f7fe ff67 	bl	8000ebc <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff2:	f7fe ff63 	bl	8000ebc <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e078      	b.n	80020f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002004:	4b3f      	ldr	r3, [pc, #252]	; (8002104 <HAL_RCC_OscConfig+0x4d8>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1f0      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	69da      	ldr	r2, [r3, #28]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	431a      	orrs	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201e:	019b      	lsls	r3, r3, #6
 8002020:	431a      	orrs	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002026:	085b      	lsrs	r3, r3, #1
 8002028:	3b01      	subs	r3, #1
 800202a:	041b      	lsls	r3, r3, #16
 800202c:	431a      	orrs	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002032:	061b      	lsls	r3, r3, #24
 8002034:	4933      	ldr	r1, [pc, #204]	; (8002104 <HAL_RCC_OscConfig+0x4d8>)
 8002036:	4313      	orrs	r3, r2
 8002038:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800203a:	4b33      	ldr	r3, [pc, #204]	; (8002108 <HAL_RCC_OscConfig+0x4dc>)
 800203c:	2201      	movs	r2, #1
 800203e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002040:	f7fe ff3c 	bl	8000ebc <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002048:	f7fe ff38 	bl	8000ebc <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e04d      	b.n	80020f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800205a:	4b2a      	ldr	r3, [pc, #168]	; (8002104 <HAL_RCC_OscConfig+0x4d8>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0f0      	beq.n	8002048 <HAL_RCC_OscConfig+0x41c>
 8002066:	e045      	b.n	80020f4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002068:	4b27      	ldr	r3, [pc, #156]	; (8002108 <HAL_RCC_OscConfig+0x4dc>)
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206e:	f7fe ff25 	bl	8000ebc <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002076:	f7fe ff21 	bl	8000ebc <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e036      	b.n	80020f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002088:	4b1e      	ldr	r3, [pc, #120]	; (8002104 <HAL_RCC_OscConfig+0x4d8>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1f0      	bne.n	8002076 <HAL_RCC_OscConfig+0x44a>
 8002094:	e02e      	b.n	80020f4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d101      	bne.n	80020a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e029      	b.n	80020f6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020a2:	4b18      	ldr	r3, [pc, #96]	; (8002104 <HAL_RCC_OscConfig+0x4d8>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d11c      	bne.n	80020f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d115      	bne.n	80020f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020ca:	4013      	ands	r3, r2
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d10d      	bne.n	80020f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80020de:	429a      	cmp	r2, r3
 80020e0:	d106      	bne.n	80020f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d001      	beq.n	80020f4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e000      	b.n	80020f6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40007000 	.word	0x40007000
 8002104:	40023800 	.word	0x40023800
 8002108:	42470060 	.word	0x42470060

0800210c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0cc      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002120:	4b68      	ldr	r3, [pc, #416]	; (80022c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 030f 	and.w	r3, r3, #15
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d90c      	bls.n	8002148 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212e:	4b65      	ldr	r3, [pc, #404]	; (80022c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002136:	4b63      	ldr	r3, [pc, #396]	; (80022c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	429a      	cmp	r2, r3
 8002142:	d001      	beq.n	8002148 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e0b8      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d020      	beq.n	8002196 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	d005      	beq.n	800216c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002160:	4b59      	ldr	r3, [pc, #356]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	4a58      	ldr	r2, [pc, #352]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002166:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800216a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0308 	and.w	r3, r3, #8
 8002174:	2b00      	cmp	r3, #0
 8002176:	d005      	beq.n	8002184 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002178:	4b53      	ldr	r3, [pc, #332]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	4a52      	ldr	r2, [pc, #328]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 800217e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002182:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002184:	4b50      	ldr	r3, [pc, #320]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	494d      	ldr	r1, [pc, #308]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002192:	4313      	orrs	r3, r2
 8002194:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d044      	beq.n	800222c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d107      	bne.n	80021ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021aa:	4b47      	ldr	r3, [pc, #284]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d119      	bne.n	80021ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e07f      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d003      	beq.n	80021ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d107      	bne.n	80021da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ca:	4b3f      	ldr	r3, [pc, #252]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d109      	bne.n	80021ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e06f      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021da:	4b3b      	ldr	r3, [pc, #236]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e067      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ea:	4b37      	ldr	r3, [pc, #220]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f023 0203 	bic.w	r2, r3, #3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	4934      	ldr	r1, [pc, #208]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021fc:	f7fe fe5e 	bl	8000ebc <HAL_GetTick>
 8002200:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002202:	e00a      	b.n	800221a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002204:	f7fe fe5a 	bl	8000ebc <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002212:	4293      	cmp	r3, r2
 8002214:	d901      	bls.n	800221a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e04f      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221a:	4b2b      	ldr	r3, [pc, #172]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f003 020c 	and.w	r2, r3, #12
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	429a      	cmp	r2, r3
 800222a:	d1eb      	bne.n	8002204 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800222c:	4b25      	ldr	r3, [pc, #148]	; (80022c4 <HAL_RCC_ClockConfig+0x1b8>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 030f 	and.w	r3, r3, #15
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d20c      	bcs.n	8002254 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223a:	4b22      	ldr	r3, [pc, #136]	; (80022c4 <HAL_RCC_ClockConfig+0x1b8>)
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002242:	4b20      	ldr	r3, [pc, #128]	; (80022c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	429a      	cmp	r2, r3
 800224e:	d001      	beq.n	8002254 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e032      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	d008      	beq.n	8002272 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002260:	4b19      	ldr	r3, [pc, #100]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	4916      	ldr	r1, [pc, #88]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	4313      	orrs	r3, r2
 8002270:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b00      	cmp	r3, #0
 800227c:	d009      	beq.n	8002292 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800227e:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	490e      	ldr	r1, [pc, #56]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 800228e:	4313      	orrs	r3, r2
 8002290:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002292:	f000 f821 	bl	80022d8 <HAL_RCC_GetSysClockFreq>
 8002296:	4601      	mov	r1, r0
 8002298:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	091b      	lsrs	r3, r3, #4
 800229e:	f003 030f 	and.w	r3, r3, #15
 80022a2:	4a0a      	ldr	r2, [pc, #40]	; (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 80022a4:	5cd3      	ldrb	r3, [r2, r3]
 80022a6:	fa21 f303 	lsr.w	r3, r1, r3
 80022aa:	4a09      	ldr	r2, [pc, #36]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 80022ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022ae:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe fdbe 	bl	8000e34 <HAL_InitTick>

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40023c00 	.word	0x40023c00
 80022c8:	40023800 	.word	0x40023800
 80022cc:	080054b0 	.word	0x080054b0
 80022d0:	20000000 	.word	0x20000000
 80022d4:	20000004 	.word	0x20000004

080022d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022de:	2300      	movs	r3, #0
 80022e0:	607b      	str	r3, [r7, #4]
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	2300      	movs	r3, #0
 80022e8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80022ea:	2300      	movs	r3, #0
 80022ec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022ee:	4b50      	ldr	r3, [pc, #320]	; (8002430 <HAL_RCC_GetSysClockFreq+0x158>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 030c 	and.w	r3, r3, #12
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	d007      	beq.n	800230a <HAL_RCC_GetSysClockFreq+0x32>
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	d008      	beq.n	8002310 <HAL_RCC_GetSysClockFreq+0x38>
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f040 808d 	bne.w	800241e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002304:	4b4b      	ldr	r3, [pc, #300]	; (8002434 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002306:	60bb      	str	r3, [r7, #8]
       break;
 8002308:	e08c      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800230a:	4b4b      	ldr	r3, [pc, #300]	; (8002438 <HAL_RCC_GetSysClockFreq+0x160>)
 800230c:	60bb      	str	r3, [r7, #8]
      break;
 800230e:	e089      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002310:	4b47      	ldr	r3, [pc, #284]	; (8002430 <HAL_RCC_GetSysClockFreq+0x158>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002318:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800231a:	4b45      	ldr	r3, [pc, #276]	; (8002430 <HAL_RCC_GetSysClockFreq+0x158>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d023      	beq.n	800236e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002326:	4b42      	ldr	r3, [pc, #264]	; (8002430 <HAL_RCC_GetSysClockFreq+0x158>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	099b      	lsrs	r3, r3, #6
 800232c:	f04f 0400 	mov.w	r4, #0
 8002330:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	ea03 0501 	and.w	r5, r3, r1
 800233c:	ea04 0602 	and.w	r6, r4, r2
 8002340:	4a3d      	ldr	r2, [pc, #244]	; (8002438 <HAL_RCC_GetSysClockFreq+0x160>)
 8002342:	fb02 f106 	mul.w	r1, r2, r6
 8002346:	2200      	movs	r2, #0
 8002348:	fb02 f205 	mul.w	r2, r2, r5
 800234c:	440a      	add	r2, r1
 800234e:	493a      	ldr	r1, [pc, #232]	; (8002438 <HAL_RCC_GetSysClockFreq+0x160>)
 8002350:	fba5 0101 	umull	r0, r1, r5, r1
 8002354:	1853      	adds	r3, r2, r1
 8002356:	4619      	mov	r1, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f04f 0400 	mov.w	r4, #0
 800235e:	461a      	mov	r2, r3
 8002360:	4623      	mov	r3, r4
 8002362:	f7fd ff8d 	bl	8000280 <__aeabi_uldivmod>
 8002366:	4603      	mov	r3, r0
 8002368:	460c      	mov	r4, r1
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	e049      	b.n	8002402 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800236e:	4b30      	ldr	r3, [pc, #192]	; (8002430 <HAL_RCC_GetSysClockFreq+0x158>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	099b      	lsrs	r3, r3, #6
 8002374:	f04f 0400 	mov.w	r4, #0
 8002378:	f240 11ff 	movw	r1, #511	; 0x1ff
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	ea03 0501 	and.w	r5, r3, r1
 8002384:	ea04 0602 	and.w	r6, r4, r2
 8002388:	4629      	mov	r1, r5
 800238a:	4632      	mov	r2, r6
 800238c:	f04f 0300 	mov.w	r3, #0
 8002390:	f04f 0400 	mov.w	r4, #0
 8002394:	0154      	lsls	r4, r2, #5
 8002396:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800239a:	014b      	lsls	r3, r1, #5
 800239c:	4619      	mov	r1, r3
 800239e:	4622      	mov	r2, r4
 80023a0:	1b49      	subs	r1, r1, r5
 80023a2:	eb62 0206 	sbc.w	r2, r2, r6
 80023a6:	f04f 0300 	mov.w	r3, #0
 80023aa:	f04f 0400 	mov.w	r4, #0
 80023ae:	0194      	lsls	r4, r2, #6
 80023b0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80023b4:	018b      	lsls	r3, r1, #6
 80023b6:	1a5b      	subs	r3, r3, r1
 80023b8:	eb64 0402 	sbc.w	r4, r4, r2
 80023bc:	f04f 0100 	mov.w	r1, #0
 80023c0:	f04f 0200 	mov.w	r2, #0
 80023c4:	00e2      	lsls	r2, r4, #3
 80023c6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80023ca:	00d9      	lsls	r1, r3, #3
 80023cc:	460b      	mov	r3, r1
 80023ce:	4614      	mov	r4, r2
 80023d0:	195b      	adds	r3, r3, r5
 80023d2:	eb44 0406 	adc.w	r4, r4, r6
 80023d6:	f04f 0100 	mov.w	r1, #0
 80023da:	f04f 0200 	mov.w	r2, #0
 80023de:	02a2      	lsls	r2, r4, #10
 80023e0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80023e4:	0299      	lsls	r1, r3, #10
 80023e6:	460b      	mov	r3, r1
 80023e8:	4614      	mov	r4, r2
 80023ea:	4618      	mov	r0, r3
 80023ec:	4621      	mov	r1, r4
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f04f 0400 	mov.w	r4, #0
 80023f4:	461a      	mov	r2, r3
 80023f6:	4623      	mov	r3, r4
 80023f8:	f7fd ff42 	bl	8000280 <__aeabi_uldivmod>
 80023fc:	4603      	mov	r3, r0
 80023fe:	460c      	mov	r4, r1
 8002400:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002402:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <HAL_RCC_GetSysClockFreq+0x158>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	0c1b      	lsrs	r3, r3, #16
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	3301      	adds	r3, #1
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	fbb2 f3f3 	udiv	r3, r2, r3
 800241a:	60bb      	str	r3, [r7, #8]
      break;
 800241c:	e002      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800241e:	4b05      	ldr	r3, [pc, #20]	; (8002434 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002420:	60bb      	str	r3, [r7, #8]
      break;
 8002422:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002424:	68bb      	ldr	r3, [r7, #8]
}
 8002426:	4618      	mov	r0, r3
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800242e:	bf00      	nop
 8002430:	40023800 	.word	0x40023800
 8002434:	00f42400 	.word	0x00f42400
 8002438:	017d7840 	.word	0x017d7840

0800243c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002440:	4b03      	ldr	r3, [pc, #12]	; (8002450 <HAL_RCC_GetHCLKFreq+0x14>)
 8002442:	681b      	ldr	r3, [r3, #0]
}
 8002444:	4618      	mov	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	20000000 	.word	0x20000000

08002454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002458:	f7ff fff0 	bl	800243c <HAL_RCC_GetHCLKFreq>
 800245c:	4601      	mov	r1, r0
 800245e:	4b05      	ldr	r3, [pc, #20]	; (8002474 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	0a9b      	lsrs	r3, r3, #10
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	4a03      	ldr	r2, [pc, #12]	; (8002478 <HAL_RCC_GetPCLK1Freq+0x24>)
 800246a:	5cd3      	ldrb	r3, [r2, r3]
 800246c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002470:	4618      	mov	r0, r3
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40023800 	.word	0x40023800
 8002478:	080054c0 	.word	0x080054c0

0800247c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002480:	f7ff ffdc 	bl	800243c <HAL_RCC_GetHCLKFreq>
 8002484:	4601      	mov	r1, r0
 8002486:	4b05      	ldr	r3, [pc, #20]	; (800249c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	0b5b      	lsrs	r3, r3, #13
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	4a03      	ldr	r2, [pc, #12]	; (80024a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002492:	5cd3      	ldrb	r3, [r2, r3]
 8002494:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002498:	4618      	mov	r0, r3
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40023800 	.word	0x40023800
 80024a0:	080054c0 	.word	0x080054c0

080024a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e03f      	b.n	8002536 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d106      	bne.n	80024d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7fe fbae 	bl	8000c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2224      	movs	r2, #36	; 0x24
 80024d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 f9b1 	bl	8002850 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	691a      	ldr	r2, [r3, #16]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	695a      	ldr	r2, [r3, #20]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800250c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68da      	ldr	r2, [r3, #12]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800251c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2220      	movs	r2, #32
 8002528:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2220      	movs	r2, #32
 8002530:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b088      	sub	sp, #32
 8002542:	af02      	add	r7, sp, #8
 8002544:	60f8      	str	r0, [r7, #12]
 8002546:	60b9      	str	r1, [r7, #8]
 8002548:	603b      	str	r3, [r7, #0]
 800254a:	4613      	mov	r3, r2
 800254c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b20      	cmp	r3, #32
 800255c:	f040 8083 	bne.w	8002666 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d002      	beq.n	800256c <HAL_UART_Transmit+0x2e>
 8002566:	88fb      	ldrh	r3, [r7, #6]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e07b      	b.n	8002668 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002576:	2b01      	cmp	r3, #1
 8002578:	d101      	bne.n	800257e <HAL_UART_Transmit+0x40>
 800257a:	2302      	movs	r3, #2
 800257c:	e074      	b.n	8002668 <HAL_UART_Transmit+0x12a>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2221      	movs	r2, #33	; 0x21
 8002590:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002594:	f7fe fc92 	bl	8000ebc <HAL_GetTick>
 8002598:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	88fa      	ldrh	r2, [r7, #6]
 800259e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	88fa      	ldrh	r2, [r7, #6]
 80025a4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80025ae:	e042      	b.n	8002636 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	3b01      	subs	r3, #1
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025c6:	d122      	bne.n	800260e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	2200      	movs	r2, #0
 80025d0:	2180      	movs	r1, #128	; 0x80
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f000 f8f2 	bl	80027bc <UART_WaitOnFlagUntilTimeout>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e042      	b.n	8002668 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	461a      	mov	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025f4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d103      	bne.n	8002606 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	3302      	adds	r3, #2
 8002602:	60bb      	str	r3, [r7, #8]
 8002604:	e017      	b.n	8002636 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	3301      	adds	r3, #1
 800260a:	60bb      	str	r3, [r7, #8]
 800260c:	e013      	b.n	8002636 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	2200      	movs	r2, #0
 8002616:	2180      	movs	r1, #128	; 0x80
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f000 f8cf 	bl	80027bc <UART_WaitOnFlagUntilTimeout>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e01f      	b.n	8002668 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	1c5a      	adds	r2, r3, #1
 800262c:	60ba      	str	r2, [r7, #8]
 800262e:	781a      	ldrb	r2, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800263a:	b29b      	uxth	r3, r3
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1b7      	bne.n	80025b0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	2200      	movs	r2, #0
 8002648:	2140      	movs	r1, #64	; 0x40
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f000 f8b6 	bl	80027bc <UART_WaitOnFlagUntilTimeout>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e006      	b.n	8002668 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2220      	movs	r2, #32
 800265e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002662:	2300      	movs	r3, #0
 8002664:	e000      	b.n	8002668 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002666:	2302      	movs	r3, #2
  }
}
 8002668:	4618      	mov	r0, r3
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b088      	sub	sp, #32
 8002674:	af02      	add	r7, sp, #8
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	603b      	str	r3, [r7, #0]
 800267c:	4613      	mov	r3, r2
 800267e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002680:	2300      	movs	r3, #0
 8002682:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b20      	cmp	r3, #32
 800268e:	f040 8090 	bne.w	80027b2 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d002      	beq.n	800269e <HAL_UART_Receive+0x2e>
 8002698:	88fb      	ldrh	r3, [r7, #6]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e088      	b.n	80027b4 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d101      	bne.n	80026b0 <HAL_UART_Receive+0x40>
 80026ac:	2302      	movs	r3, #2
 80026ae:	e081      	b.n	80027b4 <HAL_UART_Receive+0x144>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2222      	movs	r2, #34	; 0x22
 80026c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80026c6:	f7fe fbf9 	bl	8000ebc <HAL_GetTick>
 80026ca:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	88fa      	ldrh	r2, [r7, #6]
 80026d0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	88fa      	ldrh	r2, [r7, #6]
 80026d6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80026e0:	e05c      	b.n	800279c <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	3b01      	subs	r3, #1
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026f8:	d12b      	bne.n	8002752 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	2200      	movs	r2, #0
 8002702:	2120      	movs	r1, #32
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f000 f859 	bl	80027bc <UART_WaitOnFlagUntilTimeout>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e04f      	b.n	80027b4 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10c      	bne.n	800273a <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	b29b      	uxth	r3, r3
 8002728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800272c:	b29a      	uxth	r2, r3
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	3302      	adds	r3, #2
 8002736:	60bb      	str	r3, [r7, #8]
 8002738:	e030      	b.n	800279c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	b29b      	uxth	r3, r3
 8002742:	b2db      	uxtb	r3, r3
 8002744:	b29a      	uxth	r2, r3
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	3301      	adds	r3, #1
 800274e:	60bb      	str	r3, [r7, #8]
 8002750:	e024      	b.n	800279c <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	2200      	movs	r2, #0
 800275a:	2120      	movs	r1, #32
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f000 f82d 	bl	80027bc <UART_WaitOnFlagUntilTimeout>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e023      	b.n	80027b4 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d108      	bne.n	8002786 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6859      	ldr	r1, [r3, #4]
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	1c5a      	adds	r2, r3, #1
 800277e:	60ba      	str	r2, [r7, #8]
 8002780:	b2ca      	uxtb	r2, r1
 8002782:	701a      	strb	r2, [r3, #0]
 8002784:	e00a      	b.n	800279c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	b2da      	uxtb	r2, r3
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	1c59      	adds	r1, r3, #1
 8002792:	60b9      	str	r1, [r7, #8]
 8002794:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d19d      	bne.n	80026e2 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2220      	movs	r2, #32
 80027aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80027ae:	2300      	movs	r3, #0
 80027b0:	e000      	b.n	80027b4 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80027b2:	2302      	movs	r3, #2
  }
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	603b      	str	r3, [r7, #0]
 80027c8:	4613      	mov	r3, r2
 80027ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027cc:	e02c      	b.n	8002828 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d4:	d028      	beq.n	8002828 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d007      	beq.n	80027ec <UART_WaitOnFlagUntilTimeout+0x30>
 80027dc:	f7fe fb6e 	bl	8000ebc <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d21d      	bcs.n	8002828 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80027fa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	695a      	ldr	r2, [r3, #20]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0201 	bic.w	r2, r2, #1
 800280a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2220      	movs	r2, #32
 8002810:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2220      	movs	r2, #32
 8002818:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e00f      	b.n	8002848 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	4013      	ands	r3, r2
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	429a      	cmp	r2, r3
 8002836:	bf0c      	ite	eq
 8002838:	2301      	moveq	r3, #1
 800283a:	2300      	movne	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	461a      	mov	r2, r3
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	429a      	cmp	r2, r3
 8002844:	d0c3      	beq.n	80027ce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002854:	b085      	sub	sp, #20
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	431a      	orrs	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	4313      	orrs	r3, r2
 8002886:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002892:	f023 030c 	bic.w	r3, r3, #12
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6812      	ldr	r2, [r2, #0]
 800289a:	68f9      	ldr	r1, [r7, #12]
 800289c:	430b      	orrs	r3, r1
 800289e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	699a      	ldr	r2, [r3, #24]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028be:	f040 818b 	bne.w	8002bd8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4ac1      	ldr	r2, [pc, #772]	; (8002bcc <UART_SetConfig+0x37c>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d005      	beq.n	80028d8 <UART_SetConfig+0x88>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4abf      	ldr	r2, [pc, #764]	; (8002bd0 <UART_SetConfig+0x380>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	f040 80bd 	bne.w	8002a52 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80028d8:	f7ff fdd0 	bl	800247c <HAL_RCC_GetPCLK2Freq>
 80028dc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	461d      	mov	r5, r3
 80028e2:	f04f 0600 	mov.w	r6, #0
 80028e6:	46a8      	mov	r8, r5
 80028e8:	46b1      	mov	r9, r6
 80028ea:	eb18 0308 	adds.w	r3, r8, r8
 80028ee:	eb49 0409 	adc.w	r4, r9, r9
 80028f2:	4698      	mov	r8, r3
 80028f4:	46a1      	mov	r9, r4
 80028f6:	eb18 0805 	adds.w	r8, r8, r5
 80028fa:	eb49 0906 	adc.w	r9, r9, r6
 80028fe:	f04f 0100 	mov.w	r1, #0
 8002902:	f04f 0200 	mov.w	r2, #0
 8002906:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800290a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800290e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002912:	4688      	mov	r8, r1
 8002914:	4691      	mov	r9, r2
 8002916:	eb18 0005 	adds.w	r0, r8, r5
 800291a:	eb49 0106 	adc.w	r1, r9, r6
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	461d      	mov	r5, r3
 8002924:	f04f 0600 	mov.w	r6, #0
 8002928:	196b      	adds	r3, r5, r5
 800292a:	eb46 0406 	adc.w	r4, r6, r6
 800292e:	461a      	mov	r2, r3
 8002930:	4623      	mov	r3, r4
 8002932:	f7fd fca5 	bl	8000280 <__aeabi_uldivmod>
 8002936:	4603      	mov	r3, r0
 8002938:	460c      	mov	r4, r1
 800293a:	461a      	mov	r2, r3
 800293c:	4ba5      	ldr	r3, [pc, #660]	; (8002bd4 <UART_SetConfig+0x384>)
 800293e:	fba3 2302 	umull	r2, r3, r3, r2
 8002942:	095b      	lsrs	r3, r3, #5
 8002944:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	461d      	mov	r5, r3
 800294c:	f04f 0600 	mov.w	r6, #0
 8002950:	46a9      	mov	r9, r5
 8002952:	46b2      	mov	sl, r6
 8002954:	eb19 0309 	adds.w	r3, r9, r9
 8002958:	eb4a 040a 	adc.w	r4, sl, sl
 800295c:	4699      	mov	r9, r3
 800295e:	46a2      	mov	sl, r4
 8002960:	eb19 0905 	adds.w	r9, r9, r5
 8002964:	eb4a 0a06 	adc.w	sl, sl, r6
 8002968:	f04f 0100 	mov.w	r1, #0
 800296c:	f04f 0200 	mov.w	r2, #0
 8002970:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002974:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002978:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800297c:	4689      	mov	r9, r1
 800297e:	4692      	mov	sl, r2
 8002980:	eb19 0005 	adds.w	r0, r9, r5
 8002984:	eb4a 0106 	adc.w	r1, sl, r6
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	461d      	mov	r5, r3
 800298e:	f04f 0600 	mov.w	r6, #0
 8002992:	196b      	adds	r3, r5, r5
 8002994:	eb46 0406 	adc.w	r4, r6, r6
 8002998:	461a      	mov	r2, r3
 800299a:	4623      	mov	r3, r4
 800299c:	f7fd fc70 	bl	8000280 <__aeabi_uldivmod>
 80029a0:	4603      	mov	r3, r0
 80029a2:	460c      	mov	r4, r1
 80029a4:	461a      	mov	r2, r3
 80029a6:	4b8b      	ldr	r3, [pc, #556]	; (8002bd4 <UART_SetConfig+0x384>)
 80029a8:	fba3 1302 	umull	r1, r3, r3, r2
 80029ac:	095b      	lsrs	r3, r3, #5
 80029ae:	2164      	movs	r1, #100	; 0x64
 80029b0:	fb01 f303 	mul.w	r3, r1, r3
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	3332      	adds	r3, #50	; 0x32
 80029ba:	4a86      	ldr	r2, [pc, #536]	; (8002bd4 <UART_SetConfig+0x384>)
 80029bc:	fba2 2303 	umull	r2, r3, r2, r3
 80029c0:	095b      	lsrs	r3, r3, #5
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80029c8:	4498      	add	r8, r3
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	461d      	mov	r5, r3
 80029ce:	f04f 0600 	mov.w	r6, #0
 80029d2:	46a9      	mov	r9, r5
 80029d4:	46b2      	mov	sl, r6
 80029d6:	eb19 0309 	adds.w	r3, r9, r9
 80029da:	eb4a 040a 	adc.w	r4, sl, sl
 80029de:	4699      	mov	r9, r3
 80029e0:	46a2      	mov	sl, r4
 80029e2:	eb19 0905 	adds.w	r9, r9, r5
 80029e6:	eb4a 0a06 	adc.w	sl, sl, r6
 80029ea:	f04f 0100 	mov.w	r1, #0
 80029ee:	f04f 0200 	mov.w	r2, #0
 80029f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80029fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80029fe:	4689      	mov	r9, r1
 8002a00:	4692      	mov	sl, r2
 8002a02:	eb19 0005 	adds.w	r0, r9, r5
 8002a06:	eb4a 0106 	adc.w	r1, sl, r6
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	461d      	mov	r5, r3
 8002a10:	f04f 0600 	mov.w	r6, #0
 8002a14:	196b      	adds	r3, r5, r5
 8002a16:	eb46 0406 	adc.w	r4, r6, r6
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	4623      	mov	r3, r4
 8002a1e:	f7fd fc2f 	bl	8000280 <__aeabi_uldivmod>
 8002a22:	4603      	mov	r3, r0
 8002a24:	460c      	mov	r4, r1
 8002a26:	461a      	mov	r2, r3
 8002a28:	4b6a      	ldr	r3, [pc, #424]	; (8002bd4 <UART_SetConfig+0x384>)
 8002a2a:	fba3 1302 	umull	r1, r3, r3, r2
 8002a2e:	095b      	lsrs	r3, r3, #5
 8002a30:	2164      	movs	r1, #100	; 0x64
 8002a32:	fb01 f303 	mul.w	r3, r1, r3
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	3332      	adds	r3, #50	; 0x32
 8002a3c:	4a65      	ldr	r2, [pc, #404]	; (8002bd4 <UART_SetConfig+0x384>)
 8002a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a42:	095b      	lsrs	r3, r3, #5
 8002a44:	f003 0207 	and.w	r2, r3, #7
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4442      	add	r2, r8
 8002a4e:	609a      	str	r2, [r3, #8]
 8002a50:	e26f      	b.n	8002f32 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a52:	f7ff fcff 	bl	8002454 <HAL_RCC_GetPCLK1Freq>
 8002a56:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	461d      	mov	r5, r3
 8002a5c:	f04f 0600 	mov.w	r6, #0
 8002a60:	46a8      	mov	r8, r5
 8002a62:	46b1      	mov	r9, r6
 8002a64:	eb18 0308 	adds.w	r3, r8, r8
 8002a68:	eb49 0409 	adc.w	r4, r9, r9
 8002a6c:	4698      	mov	r8, r3
 8002a6e:	46a1      	mov	r9, r4
 8002a70:	eb18 0805 	adds.w	r8, r8, r5
 8002a74:	eb49 0906 	adc.w	r9, r9, r6
 8002a78:	f04f 0100 	mov.w	r1, #0
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002a84:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002a88:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002a8c:	4688      	mov	r8, r1
 8002a8e:	4691      	mov	r9, r2
 8002a90:	eb18 0005 	adds.w	r0, r8, r5
 8002a94:	eb49 0106 	adc.w	r1, r9, r6
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	461d      	mov	r5, r3
 8002a9e:	f04f 0600 	mov.w	r6, #0
 8002aa2:	196b      	adds	r3, r5, r5
 8002aa4:	eb46 0406 	adc.w	r4, r6, r6
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	4623      	mov	r3, r4
 8002aac:	f7fd fbe8 	bl	8000280 <__aeabi_uldivmod>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	460c      	mov	r4, r1
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	4b47      	ldr	r3, [pc, #284]	; (8002bd4 <UART_SetConfig+0x384>)
 8002ab8:	fba3 2302 	umull	r2, r3, r3, r2
 8002abc:	095b      	lsrs	r3, r3, #5
 8002abe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	461d      	mov	r5, r3
 8002ac6:	f04f 0600 	mov.w	r6, #0
 8002aca:	46a9      	mov	r9, r5
 8002acc:	46b2      	mov	sl, r6
 8002ace:	eb19 0309 	adds.w	r3, r9, r9
 8002ad2:	eb4a 040a 	adc.w	r4, sl, sl
 8002ad6:	4699      	mov	r9, r3
 8002ad8:	46a2      	mov	sl, r4
 8002ada:	eb19 0905 	adds.w	r9, r9, r5
 8002ade:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ae2:	f04f 0100 	mov.w	r1, #0
 8002ae6:	f04f 0200 	mov.w	r2, #0
 8002aea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002aee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002af2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002af6:	4689      	mov	r9, r1
 8002af8:	4692      	mov	sl, r2
 8002afa:	eb19 0005 	adds.w	r0, r9, r5
 8002afe:	eb4a 0106 	adc.w	r1, sl, r6
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	461d      	mov	r5, r3
 8002b08:	f04f 0600 	mov.w	r6, #0
 8002b0c:	196b      	adds	r3, r5, r5
 8002b0e:	eb46 0406 	adc.w	r4, r6, r6
 8002b12:	461a      	mov	r2, r3
 8002b14:	4623      	mov	r3, r4
 8002b16:	f7fd fbb3 	bl	8000280 <__aeabi_uldivmod>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	460c      	mov	r4, r1
 8002b1e:	461a      	mov	r2, r3
 8002b20:	4b2c      	ldr	r3, [pc, #176]	; (8002bd4 <UART_SetConfig+0x384>)
 8002b22:	fba3 1302 	umull	r1, r3, r3, r2
 8002b26:	095b      	lsrs	r3, r3, #5
 8002b28:	2164      	movs	r1, #100	; 0x64
 8002b2a:	fb01 f303 	mul.w	r3, r1, r3
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	3332      	adds	r3, #50	; 0x32
 8002b34:	4a27      	ldr	r2, [pc, #156]	; (8002bd4 <UART_SetConfig+0x384>)
 8002b36:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3a:	095b      	lsrs	r3, r3, #5
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b42:	4498      	add	r8, r3
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	461d      	mov	r5, r3
 8002b48:	f04f 0600 	mov.w	r6, #0
 8002b4c:	46a9      	mov	r9, r5
 8002b4e:	46b2      	mov	sl, r6
 8002b50:	eb19 0309 	adds.w	r3, r9, r9
 8002b54:	eb4a 040a 	adc.w	r4, sl, sl
 8002b58:	4699      	mov	r9, r3
 8002b5a:	46a2      	mov	sl, r4
 8002b5c:	eb19 0905 	adds.w	r9, r9, r5
 8002b60:	eb4a 0a06 	adc.w	sl, sl, r6
 8002b64:	f04f 0100 	mov.w	r1, #0
 8002b68:	f04f 0200 	mov.w	r2, #0
 8002b6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b78:	4689      	mov	r9, r1
 8002b7a:	4692      	mov	sl, r2
 8002b7c:	eb19 0005 	adds.w	r0, r9, r5
 8002b80:	eb4a 0106 	adc.w	r1, sl, r6
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	461d      	mov	r5, r3
 8002b8a:	f04f 0600 	mov.w	r6, #0
 8002b8e:	196b      	adds	r3, r5, r5
 8002b90:	eb46 0406 	adc.w	r4, r6, r6
 8002b94:	461a      	mov	r2, r3
 8002b96:	4623      	mov	r3, r4
 8002b98:	f7fd fb72 	bl	8000280 <__aeabi_uldivmod>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	460c      	mov	r4, r1
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4b0c      	ldr	r3, [pc, #48]	; (8002bd4 <UART_SetConfig+0x384>)
 8002ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ba8:	095b      	lsrs	r3, r3, #5
 8002baa:	2164      	movs	r1, #100	; 0x64
 8002bac:	fb01 f303 	mul.w	r3, r1, r3
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	3332      	adds	r3, #50	; 0x32
 8002bb6:	4a07      	ldr	r2, [pc, #28]	; (8002bd4 <UART_SetConfig+0x384>)
 8002bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbc:	095b      	lsrs	r3, r3, #5
 8002bbe:	f003 0207 	and.w	r2, r3, #7
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4442      	add	r2, r8
 8002bc8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002bca:	e1b2      	b.n	8002f32 <UART_SetConfig+0x6e2>
 8002bcc:	40011000 	.word	0x40011000
 8002bd0:	40011400 	.word	0x40011400
 8002bd4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4ad7      	ldr	r2, [pc, #860]	; (8002f3c <UART_SetConfig+0x6ec>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d005      	beq.n	8002bee <UART_SetConfig+0x39e>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4ad6      	ldr	r2, [pc, #856]	; (8002f40 <UART_SetConfig+0x6f0>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	f040 80d1 	bne.w	8002d90 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bee:	f7ff fc45 	bl	800247c <HAL_RCC_GetPCLK2Freq>
 8002bf2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	469a      	mov	sl, r3
 8002bf8:	f04f 0b00 	mov.w	fp, #0
 8002bfc:	46d0      	mov	r8, sl
 8002bfe:	46d9      	mov	r9, fp
 8002c00:	eb18 0308 	adds.w	r3, r8, r8
 8002c04:	eb49 0409 	adc.w	r4, r9, r9
 8002c08:	4698      	mov	r8, r3
 8002c0a:	46a1      	mov	r9, r4
 8002c0c:	eb18 080a 	adds.w	r8, r8, sl
 8002c10:	eb49 090b 	adc.w	r9, r9, fp
 8002c14:	f04f 0100 	mov.w	r1, #0
 8002c18:	f04f 0200 	mov.w	r2, #0
 8002c1c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002c20:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002c24:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002c28:	4688      	mov	r8, r1
 8002c2a:	4691      	mov	r9, r2
 8002c2c:	eb1a 0508 	adds.w	r5, sl, r8
 8002c30:	eb4b 0609 	adc.w	r6, fp, r9
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	4619      	mov	r1, r3
 8002c3a:	f04f 0200 	mov.w	r2, #0
 8002c3e:	f04f 0300 	mov.w	r3, #0
 8002c42:	f04f 0400 	mov.w	r4, #0
 8002c46:	0094      	lsls	r4, r2, #2
 8002c48:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c4c:	008b      	lsls	r3, r1, #2
 8002c4e:	461a      	mov	r2, r3
 8002c50:	4623      	mov	r3, r4
 8002c52:	4628      	mov	r0, r5
 8002c54:	4631      	mov	r1, r6
 8002c56:	f7fd fb13 	bl	8000280 <__aeabi_uldivmod>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	460c      	mov	r4, r1
 8002c5e:	461a      	mov	r2, r3
 8002c60:	4bb8      	ldr	r3, [pc, #736]	; (8002f44 <UART_SetConfig+0x6f4>)
 8002c62:	fba3 2302 	umull	r2, r3, r3, r2
 8002c66:	095b      	lsrs	r3, r3, #5
 8002c68:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	469b      	mov	fp, r3
 8002c70:	f04f 0c00 	mov.w	ip, #0
 8002c74:	46d9      	mov	r9, fp
 8002c76:	46e2      	mov	sl, ip
 8002c78:	eb19 0309 	adds.w	r3, r9, r9
 8002c7c:	eb4a 040a 	adc.w	r4, sl, sl
 8002c80:	4699      	mov	r9, r3
 8002c82:	46a2      	mov	sl, r4
 8002c84:	eb19 090b 	adds.w	r9, r9, fp
 8002c88:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002c8c:	f04f 0100 	mov.w	r1, #0
 8002c90:	f04f 0200 	mov.w	r2, #0
 8002c94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ca0:	4689      	mov	r9, r1
 8002ca2:	4692      	mov	sl, r2
 8002ca4:	eb1b 0509 	adds.w	r5, fp, r9
 8002ca8:	eb4c 060a 	adc.w	r6, ip, sl
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	f04f 0300 	mov.w	r3, #0
 8002cba:	f04f 0400 	mov.w	r4, #0
 8002cbe:	0094      	lsls	r4, r2, #2
 8002cc0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002cc4:	008b      	lsls	r3, r1, #2
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	4623      	mov	r3, r4
 8002cca:	4628      	mov	r0, r5
 8002ccc:	4631      	mov	r1, r6
 8002cce:	f7fd fad7 	bl	8000280 <__aeabi_uldivmod>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	460c      	mov	r4, r1
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	4b9a      	ldr	r3, [pc, #616]	; (8002f44 <UART_SetConfig+0x6f4>)
 8002cda:	fba3 1302 	umull	r1, r3, r3, r2
 8002cde:	095b      	lsrs	r3, r3, #5
 8002ce0:	2164      	movs	r1, #100	; 0x64
 8002ce2:	fb01 f303 	mul.w	r3, r1, r3
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	011b      	lsls	r3, r3, #4
 8002cea:	3332      	adds	r3, #50	; 0x32
 8002cec:	4a95      	ldr	r2, [pc, #596]	; (8002f44 <UART_SetConfig+0x6f4>)
 8002cee:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf2:	095b      	lsrs	r3, r3, #5
 8002cf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cf8:	4498      	add	r8, r3
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	469b      	mov	fp, r3
 8002cfe:	f04f 0c00 	mov.w	ip, #0
 8002d02:	46d9      	mov	r9, fp
 8002d04:	46e2      	mov	sl, ip
 8002d06:	eb19 0309 	adds.w	r3, r9, r9
 8002d0a:	eb4a 040a 	adc.w	r4, sl, sl
 8002d0e:	4699      	mov	r9, r3
 8002d10:	46a2      	mov	sl, r4
 8002d12:	eb19 090b 	adds.w	r9, r9, fp
 8002d16:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002d1a:	f04f 0100 	mov.w	r1, #0
 8002d1e:	f04f 0200 	mov.w	r2, #0
 8002d22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d2e:	4689      	mov	r9, r1
 8002d30:	4692      	mov	sl, r2
 8002d32:	eb1b 0509 	adds.w	r5, fp, r9
 8002d36:	eb4c 060a 	adc.w	r6, ip, sl
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	4619      	mov	r1, r3
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	f04f 0400 	mov.w	r4, #0
 8002d4c:	0094      	lsls	r4, r2, #2
 8002d4e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d52:	008b      	lsls	r3, r1, #2
 8002d54:	461a      	mov	r2, r3
 8002d56:	4623      	mov	r3, r4
 8002d58:	4628      	mov	r0, r5
 8002d5a:	4631      	mov	r1, r6
 8002d5c:	f7fd fa90 	bl	8000280 <__aeabi_uldivmod>
 8002d60:	4603      	mov	r3, r0
 8002d62:	460c      	mov	r4, r1
 8002d64:	461a      	mov	r2, r3
 8002d66:	4b77      	ldr	r3, [pc, #476]	; (8002f44 <UART_SetConfig+0x6f4>)
 8002d68:	fba3 1302 	umull	r1, r3, r3, r2
 8002d6c:	095b      	lsrs	r3, r3, #5
 8002d6e:	2164      	movs	r1, #100	; 0x64
 8002d70:	fb01 f303 	mul.w	r3, r1, r3
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	011b      	lsls	r3, r3, #4
 8002d78:	3332      	adds	r3, #50	; 0x32
 8002d7a:	4a72      	ldr	r2, [pc, #456]	; (8002f44 <UART_SetConfig+0x6f4>)
 8002d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d80:	095b      	lsrs	r3, r3, #5
 8002d82:	f003 020f 	and.w	r2, r3, #15
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4442      	add	r2, r8
 8002d8c:	609a      	str	r2, [r3, #8]
 8002d8e:	e0d0      	b.n	8002f32 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d90:	f7ff fb60 	bl	8002454 <HAL_RCC_GetPCLK1Freq>
 8002d94:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	469a      	mov	sl, r3
 8002d9a:	f04f 0b00 	mov.w	fp, #0
 8002d9e:	46d0      	mov	r8, sl
 8002da0:	46d9      	mov	r9, fp
 8002da2:	eb18 0308 	adds.w	r3, r8, r8
 8002da6:	eb49 0409 	adc.w	r4, r9, r9
 8002daa:	4698      	mov	r8, r3
 8002dac:	46a1      	mov	r9, r4
 8002dae:	eb18 080a 	adds.w	r8, r8, sl
 8002db2:	eb49 090b 	adc.w	r9, r9, fp
 8002db6:	f04f 0100 	mov.w	r1, #0
 8002dba:	f04f 0200 	mov.w	r2, #0
 8002dbe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002dc2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002dc6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002dca:	4688      	mov	r8, r1
 8002dcc:	4691      	mov	r9, r2
 8002dce:	eb1a 0508 	adds.w	r5, sl, r8
 8002dd2:	eb4b 0609 	adc.w	r6, fp, r9
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	4619      	mov	r1, r3
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	f04f 0300 	mov.w	r3, #0
 8002de4:	f04f 0400 	mov.w	r4, #0
 8002de8:	0094      	lsls	r4, r2, #2
 8002dea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002dee:	008b      	lsls	r3, r1, #2
 8002df0:	461a      	mov	r2, r3
 8002df2:	4623      	mov	r3, r4
 8002df4:	4628      	mov	r0, r5
 8002df6:	4631      	mov	r1, r6
 8002df8:	f7fd fa42 	bl	8000280 <__aeabi_uldivmod>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	460c      	mov	r4, r1
 8002e00:	461a      	mov	r2, r3
 8002e02:	4b50      	ldr	r3, [pc, #320]	; (8002f44 <UART_SetConfig+0x6f4>)
 8002e04:	fba3 2302 	umull	r2, r3, r3, r2
 8002e08:	095b      	lsrs	r3, r3, #5
 8002e0a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	469b      	mov	fp, r3
 8002e12:	f04f 0c00 	mov.w	ip, #0
 8002e16:	46d9      	mov	r9, fp
 8002e18:	46e2      	mov	sl, ip
 8002e1a:	eb19 0309 	adds.w	r3, r9, r9
 8002e1e:	eb4a 040a 	adc.w	r4, sl, sl
 8002e22:	4699      	mov	r9, r3
 8002e24:	46a2      	mov	sl, r4
 8002e26:	eb19 090b 	adds.w	r9, r9, fp
 8002e2a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002e2e:	f04f 0100 	mov.w	r1, #0
 8002e32:	f04f 0200 	mov.w	r2, #0
 8002e36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e42:	4689      	mov	r9, r1
 8002e44:	4692      	mov	sl, r2
 8002e46:	eb1b 0509 	adds.w	r5, fp, r9
 8002e4a:	eb4c 060a 	adc.w	r6, ip, sl
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	4619      	mov	r1, r3
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	f04f 0300 	mov.w	r3, #0
 8002e5c:	f04f 0400 	mov.w	r4, #0
 8002e60:	0094      	lsls	r4, r2, #2
 8002e62:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e66:	008b      	lsls	r3, r1, #2
 8002e68:	461a      	mov	r2, r3
 8002e6a:	4623      	mov	r3, r4
 8002e6c:	4628      	mov	r0, r5
 8002e6e:	4631      	mov	r1, r6
 8002e70:	f7fd fa06 	bl	8000280 <__aeabi_uldivmod>
 8002e74:	4603      	mov	r3, r0
 8002e76:	460c      	mov	r4, r1
 8002e78:	461a      	mov	r2, r3
 8002e7a:	4b32      	ldr	r3, [pc, #200]	; (8002f44 <UART_SetConfig+0x6f4>)
 8002e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e80:	095b      	lsrs	r3, r3, #5
 8002e82:	2164      	movs	r1, #100	; 0x64
 8002e84:	fb01 f303 	mul.w	r3, r1, r3
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	011b      	lsls	r3, r3, #4
 8002e8c:	3332      	adds	r3, #50	; 0x32
 8002e8e:	4a2d      	ldr	r2, [pc, #180]	; (8002f44 <UART_SetConfig+0x6f4>)
 8002e90:	fba2 2303 	umull	r2, r3, r2, r3
 8002e94:	095b      	lsrs	r3, r3, #5
 8002e96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e9a:	4498      	add	r8, r3
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	469b      	mov	fp, r3
 8002ea0:	f04f 0c00 	mov.w	ip, #0
 8002ea4:	46d9      	mov	r9, fp
 8002ea6:	46e2      	mov	sl, ip
 8002ea8:	eb19 0309 	adds.w	r3, r9, r9
 8002eac:	eb4a 040a 	adc.w	r4, sl, sl
 8002eb0:	4699      	mov	r9, r3
 8002eb2:	46a2      	mov	sl, r4
 8002eb4:	eb19 090b 	adds.w	r9, r9, fp
 8002eb8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002ebc:	f04f 0100 	mov.w	r1, #0
 8002ec0:	f04f 0200 	mov.w	r2, #0
 8002ec4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ec8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ecc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ed0:	4689      	mov	r9, r1
 8002ed2:	4692      	mov	sl, r2
 8002ed4:	eb1b 0509 	adds.w	r5, fp, r9
 8002ed8:	eb4c 060a 	adc.w	r6, ip, sl
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	f04f 0200 	mov.w	r2, #0
 8002ee6:	f04f 0300 	mov.w	r3, #0
 8002eea:	f04f 0400 	mov.w	r4, #0
 8002eee:	0094      	lsls	r4, r2, #2
 8002ef0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002ef4:	008b      	lsls	r3, r1, #2
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	4623      	mov	r3, r4
 8002efa:	4628      	mov	r0, r5
 8002efc:	4631      	mov	r1, r6
 8002efe:	f7fd f9bf 	bl	8000280 <__aeabi_uldivmod>
 8002f02:	4603      	mov	r3, r0
 8002f04:	460c      	mov	r4, r1
 8002f06:	461a      	mov	r2, r3
 8002f08:	4b0e      	ldr	r3, [pc, #56]	; (8002f44 <UART_SetConfig+0x6f4>)
 8002f0a:	fba3 1302 	umull	r1, r3, r3, r2
 8002f0e:	095b      	lsrs	r3, r3, #5
 8002f10:	2164      	movs	r1, #100	; 0x64
 8002f12:	fb01 f303 	mul.w	r3, r1, r3
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	011b      	lsls	r3, r3, #4
 8002f1a:	3332      	adds	r3, #50	; 0x32
 8002f1c:	4a09      	ldr	r2, [pc, #36]	; (8002f44 <UART_SetConfig+0x6f4>)
 8002f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f22:	095b      	lsrs	r3, r3, #5
 8002f24:	f003 020f 	and.w	r2, r3, #15
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4442      	add	r2, r8
 8002f2e:	609a      	str	r2, [r3, #8]
}
 8002f30:	e7ff      	b.n	8002f32 <UART_SetConfig+0x6e2>
 8002f32:	bf00      	nop
 8002f34:	3714      	adds	r7, #20
 8002f36:	46bd      	mov	sp, r7
 8002f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f3c:	40011000 	.word	0x40011000
 8002f40:	40011400 	.word	0x40011400
 8002f44:	51eb851f 	.word	0x51eb851f

08002f48 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002f52:	2300      	movs	r3, #0
 8002f54:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002f56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f5a:	2b84      	cmp	r3, #132	; 0x84
 8002f5c:	d005      	beq.n	8002f6a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002f5e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	4413      	add	r3, r2
 8002f66:	3303      	adds	r3, #3
 8002f68:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3714      	adds	r7, #20
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002f7c:	f000 fada 	bl	8003534 <vTaskStartScheduler>
  
  return osOK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002f86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f88:	b089      	sub	sp, #36	; 0x24
 8002f8a:	af04      	add	r7, sp, #16
 8002f8c:	6078      	str	r0, [r7, #4]
 8002f8e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d020      	beq.n	8002fda <osThreadCreate+0x54>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d01c      	beq.n	8002fda <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685c      	ldr	r4, [r3, #4]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681d      	ldr	r5, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	691e      	ldr	r6, [r3, #16]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff ffc8 	bl	8002f48 <makeFreeRtosPriority>
 8002fb8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002fc2:	9202      	str	r2, [sp, #8]
 8002fc4:	9301      	str	r3, [sp, #4]
 8002fc6:	9100      	str	r1, [sp, #0]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	4632      	mov	r2, r6
 8002fcc:	4629      	mov	r1, r5
 8002fce:	4620      	mov	r0, r4
 8002fd0:	f000 f8ed 	bl	80031ae <xTaskCreateStatic>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	e01c      	b.n	8003014 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685c      	ldr	r4, [r3, #4]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002fe6:	b29e      	uxth	r6, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff ffaa 	bl	8002f48 <makeFreeRtosPriority>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	f107 030c 	add.w	r3, r7, #12
 8002ffa:	9301      	str	r3, [sp, #4]
 8002ffc:	9200      	str	r2, [sp, #0]
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	4632      	mov	r2, r6
 8003002:	4629      	mov	r1, r5
 8003004:	4620      	mov	r0, r4
 8003006:	f000 f92c 	bl	8003262 <xTaskCreate>
 800300a:	4603      	mov	r3, r0
 800300c:	2b01      	cmp	r3, #1
 800300e:	d001      	beq.n	8003014 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003010:	2300      	movs	r3, #0
 8003012:	e000      	b.n	8003016 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003014:	68fb      	ldr	r3, [r7, #12]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800301e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b084      	sub	sp, #16
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <osDelay+0x16>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	e000      	b.n	8003036 <osDelay+0x18>
 8003034:	2301      	movs	r3, #1
 8003036:	4618      	mov	r0, r3
 8003038:	f000 fa48 	bl	80034cc <vTaskDelay>
  
  return osOK;
 800303c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800303e:	4618      	mov	r0, r3
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f103 0208 	add.w	r2, r3, #8
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f04f 32ff 	mov.w	r2, #4294967295
 800305e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f103 0208 	add.w	r2, r3, #8
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f103 0208 	add.w	r2, r3, #8
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	1c5a      	adds	r2, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	601a      	str	r2, [r3, #0]
}
 80030dc:	bf00      	nop
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fe:	d103      	bne.n	8003108 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	e00c      	b.n	8003122 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	3308      	adds	r3, #8
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	e002      	b.n	8003116 <vListInsert+0x2e>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	429a      	cmp	r2, r3
 8003120:	d2f6      	bcs.n	8003110 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	1c5a      	adds	r2, r3, #1
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	601a      	str	r2, [r3, #0]
}
 800314e:	bf00      	nop
 8003150:	3714      	adds	r7, #20
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800315a:	b480      	push	{r7}
 800315c:	b085      	sub	sp, #20
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	6892      	ldr	r2, [r2, #8]
 8003170:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6852      	ldr	r2, [r2, #4]
 800317a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	429a      	cmp	r2, r3
 8003184:	d103      	bne.n	800318e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689a      	ldr	r2, [r3, #8]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	1e5a      	subs	r2, r3, #1
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b08e      	sub	sp, #56	; 0x38
 80031b2:	af04      	add	r7, sp, #16
 80031b4:	60f8      	str	r0, [r7, #12]
 80031b6:	60b9      	str	r1, [r7, #8]
 80031b8:	607a      	str	r2, [r7, #4]
 80031ba:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80031bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d109      	bne.n	80031d6 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80031c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c6:	f383 8811 	msr	BASEPRI, r3
 80031ca:	f3bf 8f6f 	isb	sy
 80031ce:	f3bf 8f4f 	dsb	sy
 80031d2:	623b      	str	r3, [r7, #32]
 80031d4:	e7fe      	b.n	80031d4 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80031d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d109      	bne.n	80031f0 <xTaskCreateStatic+0x42>
 80031dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e0:	f383 8811 	msr	BASEPRI, r3
 80031e4:	f3bf 8f6f 	isb	sy
 80031e8:	f3bf 8f4f 	dsb	sy
 80031ec:	61fb      	str	r3, [r7, #28]
 80031ee:	e7fe      	b.n	80031ee <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80031f0:	2354      	movs	r3, #84	; 0x54
 80031f2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	2b54      	cmp	r3, #84	; 0x54
 80031f8:	d009      	beq.n	800320e <xTaskCreateStatic+0x60>
 80031fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fe:	f383 8811 	msr	BASEPRI, r3
 8003202:	f3bf 8f6f 	isb	sy
 8003206:	f3bf 8f4f 	dsb	sy
 800320a:	61bb      	str	r3, [r7, #24]
 800320c:	e7fe      	b.n	800320c <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800320e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003212:	2b00      	cmp	r3, #0
 8003214:	d01e      	beq.n	8003254 <xTaskCreateStatic+0xa6>
 8003216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003218:	2b00      	cmp	r3, #0
 800321a:	d01b      	beq.n	8003254 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800321c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003224:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003228:	2202      	movs	r2, #2
 800322a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800322e:	2300      	movs	r3, #0
 8003230:	9303      	str	r3, [sp, #12]
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	9302      	str	r3, [sp, #8]
 8003236:	f107 0314 	add.w	r3, r7, #20
 800323a:	9301      	str	r3, [sp, #4]
 800323c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	68b9      	ldr	r1, [r7, #8]
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f000 f850 	bl	80032ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800324c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800324e:	f000 f8d3 	bl	80033f8 <prvAddNewTaskToReadyList>
 8003252:	e001      	b.n	8003258 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8003254:	2300      	movs	r3, #0
 8003256:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003258:	697b      	ldr	r3, [r7, #20]
	}
 800325a:	4618      	mov	r0, r3
 800325c:	3728      	adds	r7, #40	; 0x28
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003262:	b580      	push	{r7, lr}
 8003264:	b08c      	sub	sp, #48	; 0x30
 8003266:	af04      	add	r7, sp, #16
 8003268:	60f8      	str	r0, [r7, #12]
 800326a:	60b9      	str	r1, [r7, #8]
 800326c:	603b      	str	r3, [r7, #0]
 800326e:	4613      	mov	r3, r2
 8003270:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003272:	88fb      	ldrh	r3, [r7, #6]
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4618      	mov	r0, r3
 8003278:	f000 fecc 	bl	8004014 <pvPortMalloc>
 800327c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00e      	beq.n	80032a2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003284:	2054      	movs	r0, #84	; 0x54
 8003286:	f000 fec5 	bl	8004014 <pvPortMalloc>
 800328a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	631a      	str	r2, [r3, #48]	; 0x30
 8003298:	e005      	b.n	80032a6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800329a:	6978      	ldr	r0, [r7, #20]
 800329c:	f000 ff7c 	bl	8004198 <vPortFree>
 80032a0:	e001      	b.n	80032a6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80032a2:	2300      	movs	r3, #0
 80032a4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d017      	beq.n	80032dc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80032b4:	88fa      	ldrh	r2, [r7, #6]
 80032b6:	2300      	movs	r3, #0
 80032b8:	9303      	str	r3, [sp, #12]
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	9302      	str	r3, [sp, #8]
 80032be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c0:	9301      	str	r3, [sp, #4]
 80032c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	68b9      	ldr	r1, [r7, #8]
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 f80e 	bl	80032ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032d0:	69f8      	ldr	r0, [r7, #28]
 80032d2:	f000 f891 	bl	80033f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80032d6:	2301      	movs	r3, #1
 80032d8:	61bb      	str	r3, [r7, #24]
 80032da:	e002      	b.n	80032e2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80032dc:	f04f 33ff 	mov.w	r3, #4294967295
 80032e0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80032e2:	69bb      	ldr	r3, [r7, #24]
	}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3720      	adds	r7, #32
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b088      	sub	sp, #32
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
 80032f8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80032fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003304:	3b01      	subs	r3, #1
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	f023 0307 	bic.w	r3, r3, #7
 8003312:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	2b00      	cmp	r3, #0
 800331c:	d009      	beq.n	8003332 <prvInitialiseNewTask+0x46>
 800331e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003322:	f383 8811 	msr	BASEPRI, r3
 8003326:	f3bf 8f6f 	isb	sy
 800332a:	f3bf 8f4f 	dsb	sy
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	e7fe      	b.n	8003330 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d01f      	beq.n	8003378 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003338:	2300      	movs	r3, #0
 800333a:	61fb      	str	r3, [r7, #28]
 800333c:	e012      	b.n	8003364 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	4413      	add	r3, r2
 8003344:	7819      	ldrb	r1, [r3, #0]
 8003346:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	4413      	add	r3, r2
 800334c:	3334      	adds	r3, #52	; 0x34
 800334e:	460a      	mov	r2, r1
 8003350:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003352:	68ba      	ldr	r2, [r7, #8]
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	4413      	add	r3, r2
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d006      	beq.n	800336c <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	3301      	adds	r3, #1
 8003362:	61fb      	str	r3, [r7, #28]
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	2b0f      	cmp	r3, #15
 8003368:	d9e9      	bls.n	800333e <prvInitialiseNewTask+0x52>
 800336a:	e000      	b.n	800336e <prvInitialiseNewTask+0x82>
			{
				break;
 800336c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800336e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003376:	e003      	b.n	8003380 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337a:	2200      	movs	r2, #0
 800337c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003382:	2b06      	cmp	r3, #6
 8003384:	d901      	bls.n	800338a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003386:	2306      	movs	r3, #6
 8003388:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800338a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800338e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003394:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003398:	2200      	movs	r2, #0
 800339a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800339c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339e:	3304      	adds	r3, #4
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff fe70 	bl	8003086 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80033a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a8:	3318      	adds	r3, #24
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff fe6b 	bl	8003086 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80033b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033b4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b8:	f1c3 0207 	rsb	r2, r3, #7
 80033bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033be:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80033c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033c4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80033c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c8:	2200      	movs	r2, #0
 80033ca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80033cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	68f9      	ldr	r1, [r7, #12]
 80033d8:	69b8      	ldr	r0, [r7, #24]
 80033da:	f000 fc1b 	bl	8003c14 <pxPortInitialiseStack>
 80033de:	4602      	mov	r2, r0
 80033e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80033e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d002      	beq.n	80033f0 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80033ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80033f0:	bf00      	nop
 80033f2:	3720      	adds	r7, #32
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003400:	f000 fd2c 	bl	8003e5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003404:	4b2a      	ldr	r3, [pc, #168]	; (80034b0 <prvAddNewTaskToReadyList+0xb8>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	3301      	adds	r3, #1
 800340a:	4a29      	ldr	r2, [pc, #164]	; (80034b0 <prvAddNewTaskToReadyList+0xb8>)
 800340c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800340e:	4b29      	ldr	r3, [pc, #164]	; (80034b4 <prvAddNewTaskToReadyList+0xbc>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d109      	bne.n	800342a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003416:	4a27      	ldr	r2, [pc, #156]	; (80034b4 <prvAddNewTaskToReadyList+0xbc>)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800341c:	4b24      	ldr	r3, [pc, #144]	; (80034b0 <prvAddNewTaskToReadyList+0xb8>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d110      	bne.n	8003446 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003424:	f000 fab8 	bl	8003998 <prvInitialiseTaskLists>
 8003428:	e00d      	b.n	8003446 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800342a:	4b23      	ldr	r3, [pc, #140]	; (80034b8 <prvAddNewTaskToReadyList+0xc0>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d109      	bne.n	8003446 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003432:	4b20      	ldr	r3, [pc, #128]	; (80034b4 <prvAddNewTaskToReadyList+0xbc>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343c:	429a      	cmp	r2, r3
 800343e:	d802      	bhi.n	8003446 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003440:	4a1c      	ldr	r2, [pc, #112]	; (80034b4 <prvAddNewTaskToReadyList+0xbc>)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003446:	4b1d      	ldr	r3, [pc, #116]	; (80034bc <prvAddNewTaskToReadyList+0xc4>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	3301      	adds	r3, #1
 800344c:	4a1b      	ldr	r2, [pc, #108]	; (80034bc <prvAddNewTaskToReadyList+0xc4>)
 800344e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003454:	2201      	movs	r2, #1
 8003456:	409a      	lsls	r2, r3
 8003458:	4b19      	ldr	r3, [pc, #100]	; (80034c0 <prvAddNewTaskToReadyList+0xc8>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4313      	orrs	r3, r2
 800345e:	4a18      	ldr	r2, [pc, #96]	; (80034c0 <prvAddNewTaskToReadyList+0xc8>)
 8003460:	6013      	str	r3, [r2, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003466:	4613      	mov	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4413      	add	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4a15      	ldr	r2, [pc, #84]	; (80034c4 <prvAddNewTaskToReadyList+0xcc>)
 8003470:	441a      	add	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	3304      	adds	r3, #4
 8003476:	4619      	mov	r1, r3
 8003478:	4610      	mov	r0, r2
 800347a:	f7ff fe11 	bl	80030a0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800347e:	f000 fd1b 	bl	8003eb8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003482:	4b0d      	ldr	r3, [pc, #52]	; (80034b8 <prvAddNewTaskToReadyList+0xc0>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00e      	beq.n	80034a8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800348a:	4b0a      	ldr	r3, [pc, #40]	; (80034b4 <prvAddNewTaskToReadyList+0xbc>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003494:	429a      	cmp	r2, r3
 8003496:	d207      	bcs.n	80034a8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003498:	4b0b      	ldr	r3, [pc, #44]	; (80034c8 <prvAddNewTaskToReadyList+0xd0>)
 800349a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	f3bf 8f4f 	dsb	sy
 80034a4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034a8:	bf00      	nop
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	200003e8 	.word	0x200003e8
 80034b4:	200002e8 	.word	0x200002e8
 80034b8:	200003f4 	.word	0x200003f4
 80034bc:	20000404 	.word	0x20000404
 80034c0:	200003f0 	.word	0x200003f0
 80034c4:	200002ec 	.word	0x200002ec
 80034c8:	e000ed04 	.word	0xe000ed04

080034cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80034d4:	2300      	movs	r3, #0
 80034d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d016      	beq.n	800350c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80034de:	4b13      	ldr	r3, [pc, #76]	; (800352c <vTaskDelay+0x60>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d009      	beq.n	80034fa <vTaskDelay+0x2e>
 80034e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ea:	f383 8811 	msr	BASEPRI, r3
 80034ee:	f3bf 8f6f 	isb	sy
 80034f2:	f3bf 8f4f 	dsb	sy
 80034f6:	60bb      	str	r3, [r7, #8]
 80034f8:	e7fe      	b.n	80034f8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80034fa:	f000 f879 	bl	80035f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80034fe:	2100      	movs	r1, #0
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 fb21 	bl	8003b48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003506:	f000 f881 	bl	800360c <xTaskResumeAll>
 800350a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d107      	bne.n	8003522 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003512:	4b07      	ldr	r3, [pc, #28]	; (8003530 <vTaskDelay+0x64>)
 8003514:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	f3bf 8f4f 	dsb	sy
 800351e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003522:	bf00      	nop
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	20000410 	.word	0x20000410
 8003530:	e000ed04 	.word	0xe000ed04

08003534 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b08a      	sub	sp, #40	; 0x28
 8003538:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800353a:	2300      	movs	r3, #0
 800353c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800353e:	2300      	movs	r3, #0
 8003540:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003542:	463a      	mov	r2, r7
 8003544:	1d39      	adds	r1, r7, #4
 8003546:	f107 0308 	add.w	r3, r7, #8
 800354a:	4618      	mov	r0, r3
 800354c:	f7fd f818 	bl	8000580 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003550:	6839      	ldr	r1, [r7, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	9202      	str	r2, [sp, #8]
 8003558:	9301      	str	r3, [sp, #4]
 800355a:	2300      	movs	r3, #0
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	2300      	movs	r3, #0
 8003560:	460a      	mov	r2, r1
 8003562:	491d      	ldr	r1, [pc, #116]	; (80035d8 <vTaskStartScheduler+0xa4>)
 8003564:	481d      	ldr	r0, [pc, #116]	; (80035dc <vTaskStartScheduler+0xa8>)
 8003566:	f7ff fe22 	bl	80031ae <xTaskCreateStatic>
 800356a:	4602      	mov	r2, r0
 800356c:	4b1c      	ldr	r3, [pc, #112]	; (80035e0 <vTaskStartScheduler+0xac>)
 800356e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003570:	4b1b      	ldr	r3, [pc, #108]	; (80035e0 <vTaskStartScheduler+0xac>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d002      	beq.n	800357e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003578:	2301      	movs	r3, #1
 800357a:	617b      	str	r3, [r7, #20]
 800357c:	e001      	b.n	8003582 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800357e:	2300      	movs	r3, #0
 8003580:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d115      	bne.n	80035b4 <vTaskStartScheduler+0x80>
 8003588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800358c:	f383 8811 	msr	BASEPRI, r3
 8003590:	f3bf 8f6f 	isb	sy
 8003594:	f3bf 8f4f 	dsb	sy
 8003598:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800359a:	4b12      	ldr	r3, [pc, #72]	; (80035e4 <vTaskStartScheduler+0xb0>)
 800359c:	f04f 32ff 	mov.w	r2, #4294967295
 80035a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80035a2:	4b11      	ldr	r3, [pc, #68]	; (80035e8 <vTaskStartScheduler+0xb4>)
 80035a4:	2201      	movs	r2, #1
 80035a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80035a8:	4b10      	ldr	r3, [pc, #64]	; (80035ec <vTaskStartScheduler+0xb8>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80035ae:	f000 fbb7 	bl	8003d20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80035b2:	e00d      	b.n	80035d0 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ba:	d109      	bne.n	80035d0 <vTaskStartScheduler+0x9c>
 80035bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c0:	f383 8811 	msr	BASEPRI, r3
 80035c4:	f3bf 8f6f 	isb	sy
 80035c8:	f3bf 8f4f 	dsb	sy
 80035cc:	60fb      	str	r3, [r7, #12]
 80035ce:	e7fe      	b.n	80035ce <vTaskStartScheduler+0x9a>
}
 80035d0:	bf00      	nop
 80035d2:	3718      	adds	r7, #24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	080054a8 	.word	0x080054a8
 80035dc:	08003969 	.word	0x08003969
 80035e0:	2000040c 	.word	0x2000040c
 80035e4:	20000408 	.word	0x20000408
 80035e8:	200003f4 	.word	0x200003f4
 80035ec:	200003ec 	.word	0x200003ec

080035f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80035f4:	4b04      	ldr	r3, [pc, #16]	; (8003608 <vTaskSuspendAll+0x18>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	3301      	adds	r3, #1
 80035fa:	4a03      	ldr	r2, [pc, #12]	; (8003608 <vTaskSuspendAll+0x18>)
 80035fc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80035fe:	bf00      	nop
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	20000410 	.word	0x20000410

0800360c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003612:	2300      	movs	r3, #0
 8003614:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003616:	2300      	movs	r3, #0
 8003618:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800361a:	4b41      	ldr	r3, [pc, #260]	; (8003720 <xTaskResumeAll+0x114>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d109      	bne.n	8003636 <xTaskResumeAll+0x2a>
 8003622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003626:	f383 8811 	msr	BASEPRI, r3
 800362a:	f3bf 8f6f 	isb	sy
 800362e:	f3bf 8f4f 	dsb	sy
 8003632:	603b      	str	r3, [r7, #0]
 8003634:	e7fe      	b.n	8003634 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003636:	f000 fc11 	bl	8003e5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800363a:	4b39      	ldr	r3, [pc, #228]	; (8003720 <xTaskResumeAll+0x114>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	3b01      	subs	r3, #1
 8003640:	4a37      	ldr	r2, [pc, #220]	; (8003720 <xTaskResumeAll+0x114>)
 8003642:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003644:	4b36      	ldr	r3, [pc, #216]	; (8003720 <xTaskResumeAll+0x114>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d161      	bne.n	8003710 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800364c:	4b35      	ldr	r3, [pc, #212]	; (8003724 <xTaskResumeAll+0x118>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d05d      	beq.n	8003710 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003654:	e02e      	b.n	80036b4 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003656:	4b34      	ldr	r3, [pc, #208]	; (8003728 <xTaskResumeAll+0x11c>)
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	3318      	adds	r3, #24
 8003662:	4618      	mov	r0, r3
 8003664:	f7ff fd79 	bl	800315a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	3304      	adds	r3, #4
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff fd74 	bl	800315a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003676:	2201      	movs	r2, #1
 8003678:	409a      	lsls	r2, r3
 800367a:	4b2c      	ldr	r3, [pc, #176]	; (800372c <xTaskResumeAll+0x120>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4313      	orrs	r3, r2
 8003680:	4a2a      	ldr	r2, [pc, #168]	; (800372c <xTaskResumeAll+0x120>)
 8003682:	6013      	str	r3, [r2, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003688:	4613      	mov	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4413      	add	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4a27      	ldr	r2, [pc, #156]	; (8003730 <xTaskResumeAll+0x124>)
 8003692:	441a      	add	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	3304      	adds	r3, #4
 8003698:	4619      	mov	r1, r3
 800369a:	4610      	mov	r0, r2
 800369c:	f7ff fd00 	bl	80030a0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a4:	4b23      	ldr	r3, [pc, #140]	; (8003734 <xTaskResumeAll+0x128>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d302      	bcc.n	80036b4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80036ae:	4b22      	ldr	r3, [pc, #136]	; (8003738 <xTaskResumeAll+0x12c>)
 80036b0:	2201      	movs	r2, #1
 80036b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036b4:	4b1c      	ldr	r3, [pc, #112]	; (8003728 <xTaskResumeAll+0x11c>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1cc      	bne.n	8003656 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80036c2:	f000 fa03 	bl	8003acc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80036c6:	4b1d      	ldr	r3, [pc, #116]	; (800373c <xTaskResumeAll+0x130>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d010      	beq.n	80036f4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80036d2:	f000 f837 	bl	8003744 <xTaskIncrementTick>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d002      	beq.n	80036e2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80036dc:	4b16      	ldr	r3, [pc, #88]	; (8003738 <xTaskResumeAll+0x12c>)
 80036de:	2201      	movs	r2, #1
 80036e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3b01      	subs	r3, #1
 80036e6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f1      	bne.n	80036d2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80036ee:	4b13      	ldr	r3, [pc, #76]	; (800373c <xTaskResumeAll+0x130>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80036f4:	4b10      	ldr	r3, [pc, #64]	; (8003738 <xTaskResumeAll+0x12c>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d009      	beq.n	8003710 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80036fc:	2301      	movs	r3, #1
 80036fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003700:	4b0f      	ldr	r3, [pc, #60]	; (8003740 <xTaskResumeAll+0x134>)
 8003702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	f3bf 8f4f 	dsb	sy
 800370c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003710:	f000 fbd2 	bl	8003eb8 <vPortExitCritical>

	return xAlreadyYielded;
 8003714:	68bb      	ldr	r3, [r7, #8]
}
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	20000410 	.word	0x20000410
 8003724:	200003e8 	.word	0x200003e8
 8003728:	200003a8 	.word	0x200003a8
 800372c:	200003f0 	.word	0x200003f0
 8003730:	200002ec 	.word	0x200002ec
 8003734:	200002e8 	.word	0x200002e8
 8003738:	200003fc 	.word	0x200003fc
 800373c:	200003f8 	.word	0x200003f8
 8003740:	e000ed04 	.word	0xe000ed04

08003744 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800374a:	2300      	movs	r3, #0
 800374c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800374e:	4b4e      	ldr	r3, [pc, #312]	; (8003888 <xTaskIncrementTick+0x144>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	f040 8087 	bne.w	8003866 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003758:	4b4c      	ldr	r3, [pc, #304]	; (800388c <xTaskIncrementTick+0x148>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	3301      	adds	r3, #1
 800375e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003760:	4a4a      	ldr	r2, [pc, #296]	; (800388c <xTaskIncrementTick+0x148>)
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d11f      	bne.n	80037ac <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800376c:	4b48      	ldr	r3, [pc, #288]	; (8003890 <xTaskIncrementTick+0x14c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d009      	beq.n	800378a <xTaskIncrementTick+0x46>
 8003776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377a:	f383 8811 	msr	BASEPRI, r3
 800377e:	f3bf 8f6f 	isb	sy
 8003782:	f3bf 8f4f 	dsb	sy
 8003786:	603b      	str	r3, [r7, #0]
 8003788:	e7fe      	b.n	8003788 <xTaskIncrementTick+0x44>
 800378a:	4b41      	ldr	r3, [pc, #260]	; (8003890 <xTaskIncrementTick+0x14c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	60fb      	str	r3, [r7, #12]
 8003790:	4b40      	ldr	r3, [pc, #256]	; (8003894 <xTaskIncrementTick+0x150>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a3e      	ldr	r2, [pc, #248]	; (8003890 <xTaskIncrementTick+0x14c>)
 8003796:	6013      	str	r3, [r2, #0]
 8003798:	4a3e      	ldr	r2, [pc, #248]	; (8003894 <xTaskIncrementTick+0x150>)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	4b3e      	ldr	r3, [pc, #248]	; (8003898 <xTaskIncrementTick+0x154>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	3301      	adds	r3, #1
 80037a4:	4a3c      	ldr	r2, [pc, #240]	; (8003898 <xTaskIncrementTick+0x154>)
 80037a6:	6013      	str	r3, [r2, #0]
 80037a8:	f000 f990 	bl	8003acc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80037ac:	4b3b      	ldr	r3, [pc, #236]	; (800389c <xTaskIncrementTick+0x158>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d348      	bcc.n	8003848 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037b6:	4b36      	ldr	r3, [pc, #216]	; (8003890 <xTaskIncrementTick+0x14c>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d104      	bne.n	80037ca <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037c0:	4b36      	ldr	r3, [pc, #216]	; (800389c <xTaskIncrementTick+0x158>)
 80037c2:	f04f 32ff 	mov.w	r2, #4294967295
 80037c6:	601a      	str	r2, [r3, #0]
					break;
 80037c8:	e03e      	b.n	8003848 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037ca:	4b31      	ldr	r3, [pc, #196]	; (8003890 <xTaskIncrementTick+0x14c>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d203      	bcs.n	80037ea <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80037e2:	4a2e      	ldr	r2, [pc, #184]	; (800389c <xTaskIncrementTick+0x158>)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80037e8:	e02e      	b.n	8003848 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	3304      	adds	r3, #4
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff fcb3 	bl	800315a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d004      	beq.n	8003806 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	3318      	adds	r3, #24
 8003800:	4618      	mov	r0, r3
 8003802:	f7ff fcaa 	bl	800315a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380a:	2201      	movs	r2, #1
 800380c:	409a      	lsls	r2, r3
 800380e:	4b24      	ldr	r3, [pc, #144]	; (80038a0 <xTaskIncrementTick+0x15c>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4313      	orrs	r3, r2
 8003814:	4a22      	ldr	r2, [pc, #136]	; (80038a0 <xTaskIncrementTick+0x15c>)
 8003816:	6013      	str	r3, [r2, #0]
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800381c:	4613      	mov	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	4a1f      	ldr	r2, [pc, #124]	; (80038a4 <xTaskIncrementTick+0x160>)
 8003826:	441a      	add	r2, r3
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	3304      	adds	r3, #4
 800382c:	4619      	mov	r1, r3
 800382e:	4610      	mov	r0, r2
 8003830:	f7ff fc36 	bl	80030a0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003838:	4b1b      	ldr	r3, [pc, #108]	; (80038a8 <xTaskIncrementTick+0x164>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383e:	429a      	cmp	r2, r3
 8003840:	d3b9      	bcc.n	80037b6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003842:	2301      	movs	r3, #1
 8003844:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003846:	e7b6      	b.n	80037b6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003848:	4b17      	ldr	r3, [pc, #92]	; (80038a8 <xTaskIncrementTick+0x164>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800384e:	4915      	ldr	r1, [pc, #84]	; (80038a4 <xTaskIncrementTick+0x160>)
 8003850:	4613      	mov	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	440b      	add	r3, r1
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d907      	bls.n	8003870 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8003860:	2301      	movs	r3, #1
 8003862:	617b      	str	r3, [r7, #20]
 8003864:	e004      	b.n	8003870 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003866:	4b11      	ldr	r3, [pc, #68]	; (80038ac <xTaskIncrementTick+0x168>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	3301      	adds	r3, #1
 800386c:	4a0f      	ldr	r2, [pc, #60]	; (80038ac <xTaskIncrementTick+0x168>)
 800386e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003870:	4b0f      	ldr	r3, [pc, #60]	; (80038b0 <xTaskIncrementTick+0x16c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8003878:	2301      	movs	r3, #1
 800387a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800387c:	697b      	ldr	r3, [r7, #20]
}
 800387e:	4618      	mov	r0, r3
 8003880:	3718      	adds	r7, #24
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	20000410 	.word	0x20000410
 800388c:	200003ec 	.word	0x200003ec
 8003890:	200003a0 	.word	0x200003a0
 8003894:	200003a4 	.word	0x200003a4
 8003898:	20000400 	.word	0x20000400
 800389c:	20000408 	.word	0x20000408
 80038a0:	200003f0 	.word	0x200003f0
 80038a4:	200002ec 	.word	0x200002ec
 80038a8:	200002e8 	.word	0x200002e8
 80038ac:	200003f8 	.word	0x200003f8
 80038b0:	200003fc 	.word	0x200003fc

080038b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80038b4:	b480      	push	{r7}
 80038b6:	b087      	sub	sp, #28
 80038b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80038ba:	4b26      	ldr	r3, [pc, #152]	; (8003954 <vTaskSwitchContext+0xa0>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80038c2:	4b25      	ldr	r3, [pc, #148]	; (8003958 <vTaskSwitchContext+0xa4>)
 80038c4:	2201      	movs	r2, #1
 80038c6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80038c8:	e03e      	b.n	8003948 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80038ca:	4b23      	ldr	r3, [pc, #140]	; (8003958 <vTaskSwitchContext+0xa4>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038d0:	4b22      	ldr	r3, [pc, #136]	; (800395c <vTaskSwitchContext+0xa8>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	fab3 f383 	clz	r3, r3
 80038dc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80038de:	7afb      	ldrb	r3, [r7, #11]
 80038e0:	f1c3 031f 	rsb	r3, r3, #31
 80038e4:	617b      	str	r3, [r7, #20]
 80038e6:	491e      	ldr	r1, [pc, #120]	; (8003960 <vTaskSwitchContext+0xac>)
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	4613      	mov	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	440b      	add	r3, r1
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d109      	bne.n	800390e <vTaskSwitchContext+0x5a>
	__asm volatile
 80038fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fe:	f383 8811 	msr	BASEPRI, r3
 8003902:	f3bf 8f6f 	isb	sy
 8003906:	f3bf 8f4f 	dsb	sy
 800390a:	607b      	str	r3, [r7, #4]
 800390c:	e7fe      	b.n	800390c <vTaskSwitchContext+0x58>
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	4613      	mov	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4413      	add	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4a11      	ldr	r2, [pc, #68]	; (8003960 <vTaskSwitchContext+0xac>)
 800391a:	4413      	add	r3, r2
 800391c:	613b      	str	r3, [r7, #16]
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	605a      	str	r2, [r3, #4]
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	3308      	adds	r3, #8
 8003930:	429a      	cmp	r2, r3
 8003932:	d104      	bne.n	800393e <vTaskSwitchContext+0x8a>
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	605a      	str	r2, [r3, #4]
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	4a07      	ldr	r2, [pc, #28]	; (8003964 <vTaskSwitchContext+0xb0>)
 8003946:	6013      	str	r3, [r2, #0]
}
 8003948:	bf00      	nop
 800394a:	371c      	adds	r7, #28
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	20000410 	.word	0x20000410
 8003958:	200003fc 	.word	0x200003fc
 800395c:	200003f0 	.word	0x200003f0
 8003960:	200002ec 	.word	0x200002ec
 8003964:	200002e8 	.word	0x200002e8

08003968 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003970:	f000 f852 	bl	8003a18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003974:	4b06      	ldr	r3, [pc, #24]	; (8003990 <prvIdleTask+0x28>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d9f9      	bls.n	8003970 <prvIdleTask+0x8>
			{
				taskYIELD();
 800397c:	4b05      	ldr	r3, [pc, #20]	; (8003994 <prvIdleTask+0x2c>)
 800397e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	f3bf 8f4f 	dsb	sy
 8003988:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800398c:	e7f0      	b.n	8003970 <prvIdleTask+0x8>
 800398e:	bf00      	nop
 8003990:	200002ec 	.word	0x200002ec
 8003994:	e000ed04 	.word	0xe000ed04

08003998 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800399e:	2300      	movs	r3, #0
 80039a0:	607b      	str	r3, [r7, #4]
 80039a2:	e00c      	b.n	80039be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	4613      	mov	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4413      	add	r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	4a12      	ldr	r2, [pc, #72]	; (80039f8 <prvInitialiseTaskLists+0x60>)
 80039b0:	4413      	add	r3, r2
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7ff fb47 	bl	8003046 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3301      	adds	r3, #1
 80039bc:	607b      	str	r3, [r7, #4]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b06      	cmp	r3, #6
 80039c2:	d9ef      	bls.n	80039a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80039c4:	480d      	ldr	r0, [pc, #52]	; (80039fc <prvInitialiseTaskLists+0x64>)
 80039c6:	f7ff fb3e 	bl	8003046 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80039ca:	480d      	ldr	r0, [pc, #52]	; (8003a00 <prvInitialiseTaskLists+0x68>)
 80039cc:	f7ff fb3b 	bl	8003046 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80039d0:	480c      	ldr	r0, [pc, #48]	; (8003a04 <prvInitialiseTaskLists+0x6c>)
 80039d2:	f7ff fb38 	bl	8003046 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80039d6:	480c      	ldr	r0, [pc, #48]	; (8003a08 <prvInitialiseTaskLists+0x70>)
 80039d8:	f7ff fb35 	bl	8003046 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80039dc:	480b      	ldr	r0, [pc, #44]	; (8003a0c <prvInitialiseTaskLists+0x74>)
 80039de:	f7ff fb32 	bl	8003046 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80039e2:	4b0b      	ldr	r3, [pc, #44]	; (8003a10 <prvInitialiseTaskLists+0x78>)
 80039e4:	4a05      	ldr	r2, [pc, #20]	; (80039fc <prvInitialiseTaskLists+0x64>)
 80039e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80039e8:	4b0a      	ldr	r3, [pc, #40]	; (8003a14 <prvInitialiseTaskLists+0x7c>)
 80039ea:	4a05      	ldr	r2, [pc, #20]	; (8003a00 <prvInitialiseTaskLists+0x68>)
 80039ec:	601a      	str	r2, [r3, #0]
}
 80039ee:	bf00      	nop
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	200002ec 	.word	0x200002ec
 80039fc:	20000378 	.word	0x20000378
 8003a00:	2000038c 	.word	0x2000038c
 8003a04:	200003a8 	.word	0x200003a8
 8003a08:	200003bc 	.word	0x200003bc
 8003a0c:	200003d4 	.word	0x200003d4
 8003a10:	200003a0 	.word	0x200003a0
 8003a14:	200003a4 	.word	0x200003a4

08003a18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a1e:	e019      	b.n	8003a54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003a20:	f000 fa1c 	bl	8003e5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a24:	4b0f      	ldr	r3, [pc, #60]	; (8003a64 <prvCheckTasksWaitingTermination+0x4c>)
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3304      	adds	r3, #4
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7ff fb92 	bl	800315a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003a36:	4b0c      	ldr	r3, [pc, #48]	; (8003a68 <prvCheckTasksWaitingTermination+0x50>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	4a0a      	ldr	r2, [pc, #40]	; (8003a68 <prvCheckTasksWaitingTermination+0x50>)
 8003a3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003a40:	4b0a      	ldr	r3, [pc, #40]	; (8003a6c <prvCheckTasksWaitingTermination+0x54>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	3b01      	subs	r3, #1
 8003a46:	4a09      	ldr	r2, [pc, #36]	; (8003a6c <prvCheckTasksWaitingTermination+0x54>)
 8003a48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003a4a:	f000 fa35 	bl	8003eb8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f80e 	bl	8003a70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a54:	4b05      	ldr	r3, [pc, #20]	; (8003a6c <prvCheckTasksWaitingTermination+0x54>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1e1      	bne.n	8003a20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003a5c:	bf00      	nop
 8003a5e:	3708      	adds	r7, #8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	200003bc 	.word	0x200003bc
 8003a68:	200003e8 	.word	0x200003e8
 8003a6c:	200003d0 	.word	0x200003d0

08003a70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d108      	bne.n	8003a94 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 fb86 	bl	8004198 <vPortFree>
				vPortFree( pxTCB );
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 fb83 	bl	8004198 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003a92:	e017      	b.n	8003ac4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d103      	bne.n	8003aa6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 fb7a 	bl	8004198 <vPortFree>
	}
 8003aa4:	e00e      	b.n	8003ac4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d009      	beq.n	8003ac4 <prvDeleteTCB+0x54>
 8003ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab4:	f383 8811 	msr	BASEPRI, r3
 8003ab8:	f3bf 8f6f 	isb	sy
 8003abc:	f3bf 8f4f 	dsb	sy
 8003ac0:	60fb      	str	r3, [r7, #12]
 8003ac2:	e7fe      	b.n	8003ac2 <prvDeleteTCB+0x52>
	}
 8003ac4:	bf00      	nop
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ad2:	4b0c      	ldr	r3, [pc, #48]	; (8003b04 <prvResetNextTaskUnblockTime+0x38>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d104      	bne.n	8003ae6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003adc:	4b0a      	ldr	r3, [pc, #40]	; (8003b08 <prvResetNextTaskUnblockTime+0x3c>)
 8003ade:	f04f 32ff 	mov.w	r2, #4294967295
 8003ae2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003ae4:	e008      	b.n	8003af8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ae6:	4b07      	ldr	r3, [pc, #28]	; (8003b04 <prvResetNextTaskUnblockTime+0x38>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	4a04      	ldr	r2, [pc, #16]	; (8003b08 <prvResetNextTaskUnblockTime+0x3c>)
 8003af6:	6013      	str	r3, [r2, #0]
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	200003a0 	.word	0x200003a0
 8003b08:	20000408 	.word	0x20000408

08003b0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003b12:	4b0b      	ldr	r3, [pc, #44]	; (8003b40 <xTaskGetSchedulerState+0x34>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d102      	bne.n	8003b20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	607b      	str	r3, [r7, #4]
 8003b1e:	e008      	b.n	8003b32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b20:	4b08      	ldr	r3, [pc, #32]	; (8003b44 <xTaskGetSchedulerState+0x38>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d102      	bne.n	8003b2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003b28:	2302      	movs	r3, #2
 8003b2a:	607b      	str	r3, [r7, #4]
 8003b2c:	e001      	b.n	8003b32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003b32:	687b      	ldr	r3, [r7, #4]
	}
 8003b34:	4618      	mov	r0, r3
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	200003f4 	.word	0x200003f4
 8003b44:	20000410 	.word	0x20000410

08003b48 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003b52:	4b29      	ldr	r3, [pc, #164]	; (8003bf8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b58:	4b28      	ldr	r3, [pc, #160]	; (8003bfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff fafb 	bl	800315a <uxListRemove>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10b      	bne.n	8003b82 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003b6a:	4b24      	ldr	r3, [pc, #144]	; (8003bfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b70:	2201      	movs	r2, #1
 8003b72:	fa02 f303 	lsl.w	r3, r2, r3
 8003b76:	43da      	mvns	r2, r3
 8003b78:	4b21      	ldr	r3, [pc, #132]	; (8003c00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	4a20      	ldr	r2, [pc, #128]	; (8003c00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003b80:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b88:	d10a      	bne.n	8003ba0 <prvAddCurrentTaskToDelayedList+0x58>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d007      	beq.n	8003ba0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b90:	4b1a      	ldr	r3, [pc, #104]	; (8003bfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	3304      	adds	r3, #4
 8003b96:	4619      	mov	r1, r3
 8003b98:	481a      	ldr	r0, [pc, #104]	; (8003c04 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003b9a:	f7ff fa81 	bl	80030a0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003b9e:	e026      	b.n	8003bee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ba8:	4b14      	ldr	r3, [pc, #80]	; (8003bfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d209      	bcs.n	8003bcc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bb8:	4b13      	ldr	r3, [pc, #76]	; (8003c08 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	4b0f      	ldr	r3, [pc, #60]	; (8003bfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	3304      	adds	r3, #4
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	4610      	mov	r0, r2
 8003bc6:	f7ff fa8f 	bl	80030e8 <vListInsert>
}
 8003bca:	e010      	b.n	8003bee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bcc:	4b0f      	ldr	r3, [pc, #60]	; (8003c0c <prvAddCurrentTaskToDelayedList+0xc4>)
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	4b0a      	ldr	r3, [pc, #40]	; (8003bfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	3304      	adds	r3, #4
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	4610      	mov	r0, r2
 8003bda:	f7ff fa85 	bl	80030e8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003bde:	4b0c      	ldr	r3, [pc, #48]	; (8003c10 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d202      	bcs.n	8003bee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003be8:	4a09      	ldr	r2, [pc, #36]	; (8003c10 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	6013      	str	r3, [r2, #0]
}
 8003bee:	bf00      	nop
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	200003ec 	.word	0x200003ec
 8003bfc:	200002e8 	.word	0x200002e8
 8003c00:	200003f0 	.word	0x200003f0
 8003c04:	200003d4 	.word	0x200003d4
 8003c08:	200003a4 	.word	0x200003a4
 8003c0c:	200003a0 	.word	0x200003a0
 8003c10:	20000408 	.word	0x20000408

08003c14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	3b04      	subs	r3, #4
 8003c24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	3b04      	subs	r3, #4
 8003c32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	f023 0201 	bic.w	r2, r3, #1
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	3b04      	subs	r3, #4
 8003c42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003c44:	4a0c      	ldr	r2, [pc, #48]	; (8003c78 <pxPortInitialiseStack+0x64>)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	3b14      	subs	r3, #20
 8003c4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	3b04      	subs	r3, #4
 8003c5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f06f 0202 	mvn.w	r2, #2
 8003c62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	3b20      	subs	r3, #32
 8003c68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	08003c7d 	.word	0x08003c7d

08003c7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003c82:	2300      	movs	r3, #0
 8003c84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003c86:	4b11      	ldr	r3, [pc, #68]	; (8003ccc <prvTaskExitError+0x50>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c8e:	d009      	beq.n	8003ca4 <prvTaskExitError+0x28>
 8003c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c94:	f383 8811 	msr	BASEPRI, r3
 8003c98:	f3bf 8f6f 	isb	sy
 8003c9c:	f3bf 8f4f 	dsb	sy
 8003ca0:	60fb      	str	r3, [r7, #12]
 8003ca2:	e7fe      	b.n	8003ca2 <prvTaskExitError+0x26>
 8003ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca8:	f383 8811 	msr	BASEPRI, r3
 8003cac:	f3bf 8f6f 	isb	sy
 8003cb0:	f3bf 8f4f 	dsb	sy
 8003cb4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003cb6:	bf00      	nop
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d0fc      	beq.n	8003cb8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003cbe:	bf00      	nop
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	2000000c 	.word	0x2000000c

08003cd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003cd0:	4b07      	ldr	r3, [pc, #28]	; (8003cf0 <pxCurrentTCBConst2>)
 8003cd2:	6819      	ldr	r1, [r3, #0]
 8003cd4:	6808      	ldr	r0, [r1, #0]
 8003cd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cda:	f380 8809 	msr	PSP, r0
 8003cde:	f3bf 8f6f 	isb	sy
 8003ce2:	f04f 0000 	mov.w	r0, #0
 8003ce6:	f380 8811 	msr	BASEPRI, r0
 8003cea:	4770      	bx	lr
 8003cec:	f3af 8000 	nop.w

08003cf0 <pxCurrentTCBConst2>:
 8003cf0:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003cf4:	bf00      	nop
 8003cf6:	bf00      	nop

08003cf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003cf8:	4808      	ldr	r0, [pc, #32]	; (8003d1c <prvPortStartFirstTask+0x24>)
 8003cfa:	6800      	ldr	r0, [r0, #0]
 8003cfc:	6800      	ldr	r0, [r0, #0]
 8003cfe:	f380 8808 	msr	MSP, r0
 8003d02:	f04f 0000 	mov.w	r0, #0
 8003d06:	f380 8814 	msr	CONTROL, r0
 8003d0a:	b662      	cpsie	i
 8003d0c:	b661      	cpsie	f
 8003d0e:	f3bf 8f4f 	dsb	sy
 8003d12:	f3bf 8f6f 	isb	sy
 8003d16:	df00      	svc	0
 8003d18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003d1a:	bf00      	nop
 8003d1c:	e000ed08 	.word	0xe000ed08

08003d20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003d26:	4b44      	ldr	r3, [pc, #272]	; (8003e38 <xPortStartScheduler+0x118>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a44      	ldr	r2, [pc, #272]	; (8003e3c <xPortStartScheduler+0x11c>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d109      	bne.n	8003d44 <xPortStartScheduler+0x24>
 8003d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d34:	f383 8811 	msr	BASEPRI, r3
 8003d38:	f3bf 8f6f 	isb	sy
 8003d3c:	f3bf 8f4f 	dsb	sy
 8003d40:	613b      	str	r3, [r7, #16]
 8003d42:	e7fe      	b.n	8003d42 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003d44:	4b3c      	ldr	r3, [pc, #240]	; (8003e38 <xPortStartScheduler+0x118>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a3d      	ldr	r2, [pc, #244]	; (8003e40 <xPortStartScheduler+0x120>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d109      	bne.n	8003d62 <xPortStartScheduler+0x42>
 8003d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d52:	f383 8811 	msr	BASEPRI, r3
 8003d56:	f3bf 8f6f 	isb	sy
 8003d5a:	f3bf 8f4f 	dsb	sy
 8003d5e:	60fb      	str	r3, [r7, #12]
 8003d60:	e7fe      	b.n	8003d60 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003d62:	4b38      	ldr	r3, [pc, #224]	; (8003e44 <xPortStartScheduler+0x124>)
 8003d64:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	22ff      	movs	r2, #255	; 0xff
 8003d72:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003d7c:	78fb      	ldrb	r3, [r7, #3]
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	4b30      	ldr	r3, [pc, #192]	; (8003e48 <xPortStartScheduler+0x128>)
 8003d88:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003d8a:	4b30      	ldr	r3, [pc, #192]	; (8003e4c <xPortStartScheduler+0x12c>)
 8003d8c:	2207      	movs	r2, #7
 8003d8e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d90:	e009      	b.n	8003da6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003d92:	4b2e      	ldr	r3, [pc, #184]	; (8003e4c <xPortStartScheduler+0x12c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	3b01      	subs	r3, #1
 8003d98:	4a2c      	ldr	r2, [pc, #176]	; (8003e4c <xPortStartScheduler+0x12c>)
 8003d9a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003d9c:	78fb      	ldrb	r3, [r7, #3]
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003da6:	78fb      	ldrb	r3, [r7, #3]
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dae:	2b80      	cmp	r3, #128	; 0x80
 8003db0:	d0ef      	beq.n	8003d92 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003db2:	4b26      	ldr	r3, [pc, #152]	; (8003e4c <xPortStartScheduler+0x12c>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f1c3 0307 	rsb	r3, r3, #7
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	d009      	beq.n	8003dd2 <xPortStartScheduler+0xb2>
 8003dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc2:	f383 8811 	msr	BASEPRI, r3
 8003dc6:	f3bf 8f6f 	isb	sy
 8003dca:	f3bf 8f4f 	dsb	sy
 8003dce:	60bb      	str	r3, [r7, #8]
 8003dd0:	e7fe      	b.n	8003dd0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003dd2:	4b1e      	ldr	r3, [pc, #120]	; (8003e4c <xPortStartScheduler+0x12c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	021b      	lsls	r3, r3, #8
 8003dd8:	4a1c      	ldr	r2, [pc, #112]	; (8003e4c <xPortStartScheduler+0x12c>)
 8003dda:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003ddc:	4b1b      	ldr	r3, [pc, #108]	; (8003e4c <xPortStartScheduler+0x12c>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003de4:	4a19      	ldr	r2, [pc, #100]	; (8003e4c <xPortStartScheduler+0x12c>)
 8003de6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003df0:	4b17      	ldr	r3, [pc, #92]	; (8003e50 <xPortStartScheduler+0x130>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a16      	ldr	r2, [pc, #88]	; (8003e50 <xPortStartScheduler+0x130>)
 8003df6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003dfa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003dfc:	4b14      	ldr	r3, [pc, #80]	; (8003e50 <xPortStartScheduler+0x130>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a13      	ldr	r2, [pc, #76]	; (8003e50 <xPortStartScheduler+0x130>)
 8003e02:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003e06:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003e08:	f000 f8d6 	bl	8003fb8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003e0c:	4b11      	ldr	r3, [pc, #68]	; (8003e54 <xPortStartScheduler+0x134>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003e12:	f000 f8f5 	bl	8004000 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003e16:	4b10      	ldr	r3, [pc, #64]	; (8003e58 <xPortStartScheduler+0x138>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a0f      	ldr	r2, [pc, #60]	; (8003e58 <xPortStartScheduler+0x138>)
 8003e1c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003e20:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003e22:	f7ff ff69 	bl	8003cf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003e26:	f7ff fd45 	bl	80038b4 <vTaskSwitchContext>
	prvTaskExitError();
 8003e2a:	f7ff ff27 	bl	8003c7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3718      	adds	r7, #24
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	e000ed00 	.word	0xe000ed00
 8003e3c:	410fc271 	.word	0x410fc271
 8003e40:	410fc270 	.word	0x410fc270
 8003e44:	e000e400 	.word	0xe000e400
 8003e48:	20000414 	.word	0x20000414
 8003e4c:	20000418 	.word	0x20000418
 8003e50:	e000ed20 	.word	0xe000ed20
 8003e54:	2000000c 	.word	0x2000000c
 8003e58:	e000ef34 	.word	0xe000ef34

08003e5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e66:	f383 8811 	msr	BASEPRI, r3
 8003e6a:	f3bf 8f6f 	isb	sy
 8003e6e:	f3bf 8f4f 	dsb	sy
 8003e72:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003e74:	4b0e      	ldr	r3, [pc, #56]	; (8003eb0 <vPortEnterCritical+0x54>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	4a0d      	ldr	r2, [pc, #52]	; (8003eb0 <vPortEnterCritical+0x54>)
 8003e7c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003e7e:	4b0c      	ldr	r3, [pc, #48]	; (8003eb0 <vPortEnterCritical+0x54>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d10e      	bne.n	8003ea4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003e86:	4b0b      	ldr	r3, [pc, #44]	; (8003eb4 <vPortEnterCritical+0x58>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d009      	beq.n	8003ea4 <vPortEnterCritical+0x48>
 8003e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e94:	f383 8811 	msr	BASEPRI, r3
 8003e98:	f3bf 8f6f 	isb	sy
 8003e9c:	f3bf 8f4f 	dsb	sy
 8003ea0:	603b      	str	r3, [r7, #0]
 8003ea2:	e7fe      	b.n	8003ea2 <vPortEnterCritical+0x46>
	}
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	2000000c 	.word	0x2000000c
 8003eb4:	e000ed04 	.word	0xe000ed04

08003eb8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003ebe:	4b11      	ldr	r3, [pc, #68]	; (8003f04 <vPortExitCritical+0x4c>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d109      	bne.n	8003eda <vPortExitCritical+0x22>
 8003ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eca:	f383 8811 	msr	BASEPRI, r3
 8003ece:	f3bf 8f6f 	isb	sy
 8003ed2:	f3bf 8f4f 	dsb	sy
 8003ed6:	607b      	str	r3, [r7, #4]
 8003ed8:	e7fe      	b.n	8003ed8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003eda:	4b0a      	ldr	r3, [pc, #40]	; (8003f04 <vPortExitCritical+0x4c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	4a08      	ldr	r2, [pc, #32]	; (8003f04 <vPortExitCritical+0x4c>)
 8003ee2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003ee4:	4b07      	ldr	r3, [pc, #28]	; (8003f04 <vPortExitCritical+0x4c>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d104      	bne.n	8003ef6 <vPortExitCritical+0x3e>
 8003eec:	2300      	movs	r3, #0
 8003eee:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	2000000c 	.word	0x2000000c
	...

08003f10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003f10:	f3ef 8009 	mrs	r0, PSP
 8003f14:	f3bf 8f6f 	isb	sy
 8003f18:	4b15      	ldr	r3, [pc, #84]	; (8003f70 <pxCurrentTCBConst>)
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	f01e 0f10 	tst.w	lr, #16
 8003f20:	bf08      	it	eq
 8003f22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003f26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f2a:	6010      	str	r0, [r2, #0]
 8003f2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003f30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003f34:	f380 8811 	msr	BASEPRI, r0
 8003f38:	f3bf 8f4f 	dsb	sy
 8003f3c:	f3bf 8f6f 	isb	sy
 8003f40:	f7ff fcb8 	bl	80038b4 <vTaskSwitchContext>
 8003f44:	f04f 0000 	mov.w	r0, #0
 8003f48:	f380 8811 	msr	BASEPRI, r0
 8003f4c:	bc09      	pop	{r0, r3}
 8003f4e:	6819      	ldr	r1, [r3, #0]
 8003f50:	6808      	ldr	r0, [r1, #0]
 8003f52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f56:	f01e 0f10 	tst.w	lr, #16
 8003f5a:	bf08      	it	eq
 8003f5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003f60:	f380 8809 	msr	PSP, r0
 8003f64:	f3bf 8f6f 	isb	sy
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	f3af 8000 	nop.w

08003f70 <pxCurrentTCBConst>:
 8003f70:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003f74:	bf00      	nop
 8003f76:	bf00      	nop

08003f78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
	__asm volatile
 8003f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f82:	f383 8811 	msr	BASEPRI, r3
 8003f86:	f3bf 8f6f 	isb	sy
 8003f8a:	f3bf 8f4f 	dsb	sy
 8003f8e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003f90:	f7ff fbd8 	bl	8003744 <xTaskIncrementTick>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d003      	beq.n	8003fa2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003f9a:	4b06      	ldr	r3, [pc, #24]	; (8003fb4 <xPortSysTickHandler+0x3c>)
 8003f9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003fac:	bf00      	nop
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	e000ed04 	.word	0xe000ed04

08003fb8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003fbc:	4b0b      	ldr	r3, [pc, #44]	; (8003fec <vPortSetupTimerInterrupt+0x34>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003fc2:	4b0b      	ldr	r3, [pc, #44]	; (8003ff0 <vPortSetupTimerInterrupt+0x38>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003fc8:	4b0a      	ldr	r3, [pc, #40]	; (8003ff4 <vPortSetupTimerInterrupt+0x3c>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a0a      	ldr	r2, [pc, #40]	; (8003ff8 <vPortSetupTimerInterrupt+0x40>)
 8003fce:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd2:	099b      	lsrs	r3, r3, #6
 8003fd4:	4a09      	ldr	r2, [pc, #36]	; (8003ffc <vPortSetupTimerInterrupt+0x44>)
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003fda:	4b04      	ldr	r3, [pc, #16]	; (8003fec <vPortSetupTimerInterrupt+0x34>)
 8003fdc:	2207      	movs	r2, #7
 8003fde:	601a      	str	r2, [r3, #0]
}
 8003fe0:	bf00      	nop
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	e000e010 	.word	0xe000e010
 8003ff0:	e000e018 	.word	0xe000e018
 8003ff4:	20000000 	.word	0x20000000
 8003ff8:	10624dd3 	.word	0x10624dd3
 8003ffc:	e000e014 	.word	0xe000e014

08004000 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004000:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004010 <vPortEnableVFP+0x10>
 8004004:	6801      	ldr	r1, [r0, #0]
 8004006:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800400a:	6001      	str	r1, [r0, #0]
 800400c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800400e:	bf00      	nop
 8004010:	e000ed88 	.word	0xe000ed88

08004014 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b08a      	sub	sp, #40	; 0x28
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800401c:	2300      	movs	r3, #0
 800401e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004020:	f7ff fae6 	bl	80035f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004024:	4b57      	ldr	r3, [pc, #348]	; (8004184 <pvPortMalloc+0x170>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d101      	bne.n	8004030 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800402c:	f000 f90c 	bl	8004248 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004030:	4b55      	ldr	r3, [pc, #340]	; (8004188 <pvPortMalloc+0x174>)
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4013      	ands	r3, r2
 8004038:	2b00      	cmp	r3, #0
 800403a:	f040 808c 	bne.w	8004156 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d01c      	beq.n	800407e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004044:	2208      	movs	r2, #8
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4413      	add	r3, r2
 800404a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f003 0307 	and.w	r3, r3, #7
 8004052:	2b00      	cmp	r3, #0
 8004054:	d013      	beq.n	800407e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f023 0307 	bic.w	r3, r3, #7
 800405c:	3308      	adds	r3, #8
 800405e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f003 0307 	and.w	r3, r3, #7
 8004066:	2b00      	cmp	r3, #0
 8004068:	d009      	beq.n	800407e <pvPortMalloc+0x6a>
	__asm volatile
 800406a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406e:	f383 8811 	msr	BASEPRI, r3
 8004072:	f3bf 8f6f 	isb	sy
 8004076:	f3bf 8f4f 	dsb	sy
 800407a:	617b      	str	r3, [r7, #20]
 800407c:	e7fe      	b.n	800407c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d068      	beq.n	8004156 <pvPortMalloc+0x142>
 8004084:	4b41      	ldr	r3, [pc, #260]	; (800418c <pvPortMalloc+0x178>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	429a      	cmp	r2, r3
 800408c:	d863      	bhi.n	8004156 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800408e:	4b40      	ldr	r3, [pc, #256]	; (8004190 <pvPortMalloc+0x17c>)
 8004090:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004092:	4b3f      	ldr	r3, [pc, #252]	; (8004190 <pvPortMalloc+0x17c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004098:	e004      	b.n	80040a4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d903      	bls.n	80040b6 <pvPortMalloc+0xa2>
 80040ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1f1      	bne.n	800409a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80040b6:	4b33      	ldr	r3, [pc, #204]	; (8004184 <pvPortMalloc+0x170>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040bc:	429a      	cmp	r2, r3
 80040be:	d04a      	beq.n	8004156 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80040c0:	6a3b      	ldr	r3, [r7, #32]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2208      	movs	r2, #8
 80040c6:	4413      	add	r3, r2
 80040c8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	6a3b      	ldr	r3, [r7, #32]
 80040d0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	1ad2      	subs	r2, r2, r3
 80040da:	2308      	movs	r3, #8
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	429a      	cmp	r2, r3
 80040e0:	d91e      	bls.n	8004120 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80040e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4413      	add	r3, r2
 80040e8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d009      	beq.n	8004108 <pvPortMalloc+0xf4>
 80040f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f8:	f383 8811 	msr	BASEPRI, r3
 80040fc:	f3bf 8f6f 	isb	sy
 8004100:	f3bf 8f4f 	dsb	sy
 8004104:	613b      	str	r3, [r7, #16]
 8004106:	e7fe      	b.n	8004106 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	1ad2      	subs	r2, r2, r3
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800411a:	69b8      	ldr	r0, [r7, #24]
 800411c:	f000 f8f6 	bl	800430c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004120:	4b1a      	ldr	r3, [pc, #104]	; (800418c <pvPortMalloc+0x178>)
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	4a18      	ldr	r2, [pc, #96]	; (800418c <pvPortMalloc+0x178>)
 800412c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800412e:	4b17      	ldr	r3, [pc, #92]	; (800418c <pvPortMalloc+0x178>)
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	4b18      	ldr	r3, [pc, #96]	; (8004194 <pvPortMalloc+0x180>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	429a      	cmp	r2, r3
 8004138:	d203      	bcs.n	8004142 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800413a:	4b14      	ldr	r3, [pc, #80]	; (800418c <pvPortMalloc+0x178>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a15      	ldr	r2, [pc, #84]	; (8004194 <pvPortMalloc+0x180>)
 8004140:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	4b10      	ldr	r3, [pc, #64]	; (8004188 <pvPortMalloc+0x174>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	431a      	orrs	r2, r3
 800414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	2200      	movs	r2, #0
 8004154:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004156:	f7ff fa59 	bl	800360c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	2b00      	cmp	r3, #0
 8004162:	d009      	beq.n	8004178 <pvPortMalloc+0x164>
 8004164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004168:	f383 8811 	msr	BASEPRI, r3
 800416c:	f3bf 8f6f 	isb	sy
 8004170:	f3bf 8f4f 	dsb	sy
 8004174:	60fb      	str	r3, [r7, #12]
 8004176:	e7fe      	b.n	8004176 <pvPortMalloc+0x162>
	return pvReturn;
 8004178:	69fb      	ldr	r3, [r7, #28]
}
 800417a:	4618      	mov	r0, r3
 800417c:	3728      	adds	r7, #40	; 0x28
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	20004024 	.word	0x20004024
 8004188:	20004030 	.word	0x20004030
 800418c:	20004028 	.word	0x20004028
 8004190:	2000401c 	.word	0x2000401c
 8004194:	2000402c 	.word	0x2000402c

08004198 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d046      	beq.n	8004238 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80041aa:	2308      	movs	r3, #8
 80041ac:	425b      	negs	r3, r3
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	4413      	add	r3, r2
 80041b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	4b20      	ldr	r3, [pc, #128]	; (8004240 <vPortFree+0xa8>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4013      	ands	r3, r2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d109      	bne.n	80041da <vPortFree+0x42>
 80041c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ca:	f383 8811 	msr	BASEPRI, r3
 80041ce:	f3bf 8f6f 	isb	sy
 80041d2:	f3bf 8f4f 	dsb	sy
 80041d6:	60fb      	str	r3, [r7, #12]
 80041d8:	e7fe      	b.n	80041d8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d009      	beq.n	80041f6 <vPortFree+0x5e>
 80041e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e6:	f383 8811 	msr	BASEPRI, r3
 80041ea:	f3bf 8f6f 	isb	sy
 80041ee:	f3bf 8f4f 	dsb	sy
 80041f2:	60bb      	str	r3, [r7, #8]
 80041f4:	e7fe      	b.n	80041f4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	685a      	ldr	r2, [r3, #4]
 80041fa:	4b11      	ldr	r3, [pc, #68]	; (8004240 <vPortFree+0xa8>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4013      	ands	r3, r2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d019      	beq.n	8004238 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d115      	bne.n	8004238 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	4b0b      	ldr	r3, [pc, #44]	; (8004240 <vPortFree+0xa8>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	43db      	mvns	r3, r3
 8004216:	401a      	ands	r2, r3
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800421c:	f7ff f9e8 	bl	80035f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	4b07      	ldr	r3, [pc, #28]	; (8004244 <vPortFree+0xac>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4413      	add	r3, r2
 800422a:	4a06      	ldr	r2, [pc, #24]	; (8004244 <vPortFree+0xac>)
 800422c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800422e:	6938      	ldr	r0, [r7, #16]
 8004230:	f000 f86c 	bl	800430c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004234:	f7ff f9ea 	bl	800360c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004238:	bf00      	nop
 800423a:	3718      	adds	r7, #24
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	20004030 	.word	0x20004030
 8004244:	20004028 	.word	0x20004028

08004248 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800424e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004252:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004254:	4b27      	ldr	r3, [pc, #156]	; (80042f4 <prvHeapInit+0xac>)
 8004256:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f003 0307 	and.w	r3, r3, #7
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00c      	beq.n	800427c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	3307      	adds	r3, #7
 8004266:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f023 0307 	bic.w	r3, r3, #7
 800426e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	4a1f      	ldr	r2, [pc, #124]	; (80042f4 <prvHeapInit+0xac>)
 8004278:	4413      	add	r3, r2
 800427a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004280:	4a1d      	ldr	r2, [pc, #116]	; (80042f8 <prvHeapInit+0xb0>)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004286:	4b1c      	ldr	r3, [pc, #112]	; (80042f8 <prvHeapInit+0xb0>)
 8004288:	2200      	movs	r2, #0
 800428a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	4413      	add	r3, r2
 8004292:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004294:	2208      	movs	r2, #8
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	1a9b      	subs	r3, r3, r2
 800429a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f023 0307 	bic.w	r3, r3, #7
 80042a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4a15      	ldr	r2, [pc, #84]	; (80042fc <prvHeapInit+0xb4>)
 80042a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80042aa:	4b14      	ldr	r3, [pc, #80]	; (80042fc <prvHeapInit+0xb4>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2200      	movs	r2, #0
 80042b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80042b2:	4b12      	ldr	r3, [pc, #72]	; (80042fc <prvHeapInit+0xb4>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2200      	movs	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	1ad2      	subs	r2, r2, r3
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80042c8:	4b0c      	ldr	r3, [pc, #48]	; (80042fc <prvHeapInit+0xb4>)
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	4a0a      	ldr	r2, [pc, #40]	; (8004300 <prvHeapInit+0xb8>)
 80042d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	4a09      	ldr	r2, [pc, #36]	; (8004304 <prvHeapInit+0xbc>)
 80042de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80042e0:	4b09      	ldr	r3, [pc, #36]	; (8004308 <prvHeapInit+0xc0>)
 80042e2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80042e6:	601a      	str	r2, [r3, #0]
}
 80042e8:	bf00      	nop
 80042ea:	3714      	adds	r7, #20
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr
 80042f4:	2000041c 	.word	0x2000041c
 80042f8:	2000401c 	.word	0x2000401c
 80042fc:	20004024 	.word	0x20004024
 8004300:	2000402c 	.word	0x2000402c
 8004304:	20004028 	.word	0x20004028
 8004308:	20004030 	.word	0x20004030

0800430c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004314:	4b28      	ldr	r3, [pc, #160]	; (80043b8 <prvInsertBlockIntoFreeList+0xac>)
 8004316:	60fb      	str	r3, [r7, #12]
 8004318:	e002      	b.n	8004320 <prvInsertBlockIntoFreeList+0x14>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	60fb      	str	r3, [r7, #12]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	429a      	cmp	r2, r3
 8004328:	d8f7      	bhi.n	800431a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	4413      	add	r3, r2
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	429a      	cmp	r2, r3
 800433a:	d108      	bne.n	800434e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	441a      	add	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	441a      	add	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	429a      	cmp	r2, r3
 8004360:	d118      	bne.n	8004394 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	4b15      	ldr	r3, [pc, #84]	; (80043bc <prvInsertBlockIntoFreeList+0xb0>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	429a      	cmp	r2, r3
 800436c:	d00d      	beq.n	800438a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	441a      	add	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	e008      	b.n	800439c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800438a:	4b0c      	ldr	r3, [pc, #48]	; (80043bc <prvInsertBlockIntoFreeList+0xb0>)
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	601a      	str	r2, [r3, #0]
 8004392:	e003      	b.n	800439c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d002      	beq.n	80043aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043aa:	bf00      	nop
 80043ac:	3714      	adds	r7, #20
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	2000401c 	.word	0x2000401c
 80043bc:	20004024 	.word	0x20004024

080043c0 <__errno>:
 80043c0:	4b01      	ldr	r3, [pc, #4]	; (80043c8 <__errno+0x8>)
 80043c2:	6818      	ldr	r0, [r3, #0]
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	20000010 	.word	0x20000010

080043cc <__libc_init_array>:
 80043cc:	b570      	push	{r4, r5, r6, lr}
 80043ce:	4e0d      	ldr	r6, [pc, #52]	; (8004404 <__libc_init_array+0x38>)
 80043d0:	4c0d      	ldr	r4, [pc, #52]	; (8004408 <__libc_init_array+0x3c>)
 80043d2:	1ba4      	subs	r4, r4, r6
 80043d4:	10a4      	asrs	r4, r4, #2
 80043d6:	2500      	movs	r5, #0
 80043d8:	42a5      	cmp	r5, r4
 80043da:	d109      	bne.n	80043f0 <__libc_init_array+0x24>
 80043dc:	4e0b      	ldr	r6, [pc, #44]	; (800440c <__libc_init_array+0x40>)
 80043de:	4c0c      	ldr	r4, [pc, #48]	; (8004410 <__libc_init_array+0x44>)
 80043e0:	f001 f81e 	bl	8005420 <_init>
 80043e4:	1ba4      	subs	r4, r4, r6
 80043e6:	10a4      	asrs	r4, r4, #2
 80043e8:	2500      	movs	r5, #0
 80043ea:	42a5      	cmp	r5, r4
 80043ec:	d105      	bne.n	80043fa <__libc_init_array+0x2e>
 80043ee:	bd70      	pop	{r4, r5, r6, pc}
 80043f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043f4:	4798      	blx	r3
 80043f6:	3501      	adds	r5, #1
 80043f8:	e7ee      	b.n	80043d8 <__libc_init_array+0xc>
 80043fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043fe:	4798      	blx	r3
 8004400:	3501      	adds	r5, #1
 8004402:	e7f2      	b.n	80043ea <__libc_init_array+0x1e>
 8004404:	08005568 	.word	0x08005568
 8004408:	08005568 	.word	0x08005568
 800440c:	08005568 	.word	0x08005568
 8004410:	0800556c 	.word	0x0800556c

08004414 <memset>:
 8004414:	4402      	add	r2, r0
 8004416:	4603      	mov	r3, r0
 8004418:	4293      	cmp	r3, r2
 800441a:	d100      	bne.n	800441e <memset+0xa>
 800441c:	4770      	bx	lr
 800441e:	f803 1b01 	strb.w	r1, [r3], #1
 8004422:	e7f9      	b.n	8004418 <memset+0x4>

08004424 <iprintf>:
 8004424:	b40f      	push	{r0, r1, r2, r3}
 8004426:	4b0a      	ldr	r3, [pc, #40]	; (8004450 <iprintf+0x2c>)
 8004428:	b513      	push	{r0, r1, r4, lr}
 800442a:	681c      	ldr	r4, [r3, #0]
 800442c:	b124      	cbz	r4, 8004438 <iprintf+0x14>
 800442e:	69a3      	ldr	r3, [r4, #24]
 8004430:	b913      	cbnz	r3, 8004438 <iprintf+0x14>
 8004432:	4620      	mov	r0, r4
 8004434:	f000 fad0 	bl	80049d8 <__sinit>
 8004438:	ab05      	add	r3, sp, #20
 800443a:	9a04      	ldr	r2, [sp, #16]
 800443c:	68a1      	ldr	r1, [r4, #8]
 800443e:	9301      	str	r3, [sp, #4]
 8004440:	4620      	mov	r0, r4
 8004442:	f000 fc91 	bl	8004d68 <_vfiprintf_r>
 8004446:	b002      	add	sp, #8
 8004448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800444c:	b004      	add	sp, #16
 800444e:	4770      	bx	lr
 8004450:	20000010 	.word	0x20000010

08004454 <_puts_r>:
 8004454:	b570      	push	{r4, r5, r6, lr}
 8004456:	460e      	mov	r6, r1
 8004458:	4605      	mov	r5, r0
 800445a:	b118      	cbz	r0, 8004464 <_puts_r+0x10>
 800445c:	6983      	ldr	r3, [r0, #24]
 800445e:	b90b      	cbnz	r3, 8004464 <_puts_r+0x10>
 8004460:	f000 faba 	bl	80049d8 <__sinit>
 8004464:	69ab      	ldr	r3, [r5, #24]
 8004466:	68ac      	ldr	r4, [r5, #8]
 8004468:	b913      	cbnz	r3, 8004470 <_puts_r+0x1c>
 800446a:	4628      	mov	r0, r5
 800446c:	f000 fab4 	bl	80049d8 <__sinit>
 8004470:	4b23      	ldr	r3, [pc, #140]	; (8004500 <_puts_r+0xac>)
 8004472:	429c      	cmp	r4, r3
 8004474:	d117      	bne.n	80044a6 <_puts_r+0x52>
 8004476:	686c      	ldr	r4, [r5, #4]
 8004478:	89a3      	ldrh	r3, [r4, #12]
 800447a:	071b      	lsls	r3, r3, #28
 800447c:	d51d      	bpl.n	80044ba <_puts_r+0x66>
 800447e:	6923      	ldr	r3, [r4, #16]
 8004480:	b1db      	cbz	r3, 80044ba <_puts_r+0x66>
 8004482:	3e01      	subs	r6, #1
 8004484:	68a3      	ldr	r3, [r4, #8]
 8004486:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800448a:	3b01      	subs	r3, #1
 800448c:	60a3      	str	r3, [r4, #8]
 800448e:	b9e9      	cbnz	r1, 80044cc <_puts_r+0x78>
 8004490:	2b00      	cmp	r3, #0
 8004492:	da2e      	bge.n	80044f2 <_puts_r+0x9e>
 8004494:	4622      	mov	r2, r4
 8004496:	210a      	movs	r1, #10
 8004498:	4628      	mov	r0, r5
 800449a:	f000 f8ed 	bl	8004678 <__swbuf_r>
 800449e:	3001      	adds	r0, #1
 80044a0:	d011      	beq.n	80044c6 <_puts_r+0x72>
 80044a2:	200a      	movs	r0, #10
 80044a4:	e011      	b.n	80044ca <_puts_r+0x76>
 80044a6:	4b17      	ldr	r3, [pc, #92]	; (8004504 <_puts_r+0xb0>)
 80044a8:	429c      	cmp	r4, r3
 80044aa:	d101      	bne.n	80044b0 <_puts_r+0x5c>
 80044ac:	68ac      	ldr	r4, [r5, #8]
 80044ae:	e7e3      	b.n	8004478 <_puts_r+0x24>
 80044b0:	4b15      	ldr	r3, [pc, #84]	; (8004508 <_puts_r+0xb4>)
 80044b2:	429c      	cmp	r4, r3
 80044b4:	bf08      	it	eq
 80044b6:	68ec      	ldreq	r4, [r5, #12]
 80044b8:	e7de      	b.n	8004478 <_puts_r+0x24>
 80044ba:	4621      	mov	r1, r4
 80044bc:	4628      	mov	r0, r5
 80044be:	f000 f92d 	bl	800471c <__swsetup_r>
 80044c2:	2800      	cmp	r0, #0
 80044c4:	d0dd      	beq.n	8004482 <_puts_r+0x2e>
 80044c6:	f04f 30ff 	mov.w	r0, #4294967295
 80044ca:	bd70      	pop	{r4, r5, r6, pc}
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	da04      	bge.n	80044da <_puts_r+0x86>
 80044d0:	69a2      	ldr	r2, [r4, #24]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	dc06      	bgt.n	80044e4 <_puts_r+0x90>
 80044d6:	290a      	cmp	r1, #10
 80044d8:	d004      	beq.n	80044e4 <_puts_r+0x90>
 80044da:	6823      	ldr	r3, [r4, #0]
 80044dc:	1c5a      	adds	r2, r3, #1
 80044de:	6022      	str	r2, [r4, #0]
 80044e0:	7019      	strb	r1, [r3, #0]
 80044e2:	e7cf      	b.n	8004484 <_puts_r+0x30>
 80044e4:	4622      	mov	r2, r4
 80044e6:	4628      	mov	r0, r5
 80044e8:	f000 f8c6 	bl	8004678 <__swbuf_r>
 80044ec:	3001      	adds	r0, #1
 80044ee:	d1c9      	bne.n	8004484 <_puts_r+0x30>
 80044f0:	e7e9      	b.n	80044c6 <_puts_r+0x72>
 80044f2:	6823      	ldr	r3, [r4, #0]
 80044f4:	200a      	movs	r0, #10
 80044f6:	1c5a      	adds	r2, r3, #1
 80044f8:	6022      	str	r2, [r4, #0]
 80044fa:	7018      	strb	r0, [r3, #0]
 80044fc:	e7e5      	b.n	80044ca <_puts_r+0x76>
 80044fe:	bf00      	nop
 8004500:	080054ec 	.word	0x080054ec
 8004504:	0800550c 	.word	0x0800550c
 8004508:	080054cc 	.word	0x080054cc

0800450c <puts>:
 800450c:	4b02      	ldr	r3, [pc, #8]	; (8004518 <puts+0xc>)
 800450e:	4601      	mov	r1, r0
 8004510:	6818      	ldr	r0, [r3, #0]
 8004512:	f7ff bf9f 	b.w	8004454 <_puts_r>
 8004516:	bf00      	nop
 8004518:	20000010 	.word	0x20000010

0800451c <setvbuf>:
 800451c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004520:	461d      	mov	r5, r3
 8004522:	4b51      	ldr	r3, [pc, #324]	; (8004668 <setvbuf+0x14c>)
 8004524:	681e      	ldr	r6, [r3, #0]
 8004526:	4604      	mov	r4, r0
 8004528:	460f      	mov	r7, r1
 800452a:	4690      	mov	r8, r2
 800452c:	b126      	cbz	r6, 8004538 <setvbuf+0x1c>
 800452e:	69b3      	ldr	r3, [r6, #24]
 8004530:	b913      	cbnz	r3, 8004538 <setvbuf+0x1c>
 8004532:	4630      	mov	r0, r6
 8004534:	f000 fa50 	bl	80049d8 <__sinit>
 8004538:	4b4c      	ldr	r3, [pc, #304]	; (800466c <setvbuf+0x150>)
 800453a:	429c      	cmp	r4, r3
 800453c:	d152      	bne.n	80045e4 <setvbuf+0xc8>
 800453e:	6874      	ldr	r4, [r6, #4]
 8004540:	f1b8 0f02 	cmp.w	r8, #2
 8004544:	d006      	beq.n	8004554 <setvbuf+0x38>
 8004546:	f1b8 0f01 	cmp.w	r8, #1
 800454a:	f200 8089 	bhi.w	8004660 <setvbuf+0x144>
 800454e:	2d00      	cmp	r5, #0
 8004550:	f2c0 8086 	blt.w	8004660 <setvbuf+0x144>
 8004554:	4621      	mov	r1, r4
 8004556:	4630      	mov	r0, r6
 8004558:	f000 f9d4 	bl	8004904 <_fflush_r>
 800455c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800455e:	b141      	cbz	r1, 8004572 <setvbuf+0x56>
 8004560:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004564:	4299      	cmp	r1, r3
 8004566:	d002      	beq.n	800456e <setvbuf+0x52>
 8004568:	4630      	mov	r0, r6
 800456a:	f000 fb2b 	bl	8004bc4 <_free_r>
 800456e:	2300      	movs	r3, #0
 8004570:	6363      	str	r3, [r4, #52]	; 0x34
 8004572:	2300      	movs	r3, #0
 8004574:	61a3      	str	r3, [r4, #24]
 8004576:	6063      	str	r3, [r4, #4]
 8004578:	89a3      	ldrh	r3, [r4, #12]
 800457a:	061b      	lsls	r3, r3, #24
 800457c:	d503      	bpl.n	8004586 <setvbuf+0x6a>
 800457e:	6921      	ldr	r1, [r4, #16]
 8004580:	4630      	mov	r0, r6
 8004582:	f000 fb1f 	bl	8004bc4 <_free_r>
 8004586:	89a3      	ldrh	r3, [r4, #12]
 8004588:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800458c:	f023 0303 	bic.w	r3, r3, #3
 8004590:	f1b8 0f02 	cmp.w	r8, #2
 8004594:	81a3      	strh	r3, [r4, #12]
 8004596:	d05d      	beq.n	8004654 <setvbuf+0x138>
 8004598:	ab01      	add	r3, sp, #4
 800459a:	466a      	mov	r2, sp
 800459c:	4621      	mov	r1, r4
 800459e:	4630      	mov	r0, r6
 80045a0:	f000 faa4 	bl	8004aec <__swhatbuf_r>
 80045a4:	89a3      	ldrh	r3, [r4, #12]
 80045a6:	4318      	orrs	r0, r3
 80045a8:	81a0      	strh	r0, [r4, #12]
 80045aa:	bb2d      	cbnz	r5, 80045f8 <setvbuf+0xdc>
 80045ac:	9d00      	ldr	r5, [sp, #0]
 80045ae:	4628      	mov	r0, r5
 80045b0:	f000 fb00 	bl	8004bb4 <malloc>
 80045b4:	4607      	mov	r7, r0
 80045b6:	2800      	cmp	r0, #0
 80045b8:	d14e      	bne.n	8004658 <setvbuf+0x13c>
 80045ba:	f8dd 9000 	ldr.w	r9, [sp]
 80045be:	45a9      	cmp	r9, r5
 80045c0:	d13c      	bne.n	800463c <setvbuf+0x120>
 80045c2:	f04f 30ff 	mov.w	r0, #4294967295
 80045c6:	89a3      	ldrh	r3, [r4, #12]
 80045c8:	f043 0302 	orr.w	r3, r3, #2
 80045cc:	81a3      	strh	r3, [r4, #12]
 80045ce:	2300      	movs	r3, #0
 80045d0:	60a3      	str	r3, [r4, #8]
 80045d2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80045d6:	6023      	str	r3, [r4, #0]
 80045d8:	6123      	str	r3, [r4, #16]
 80045da:	2301      	movs	r3, #1
 80045dc:	6163      	str	r3, [r4, #20]
 80045de:	b003      	add	sp, #12
 80045e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80045e4:	4b22      	ldr	r3, [pc, #136]	; (8004670 <setvbuf+0x154>)
 80045e6:	429c      	cmp	r4, r3
 80045e8:	d101      	bne.n	80045ee <setvbuf+0xd2>
 80045ea:	68b4      	ldr	r4, [r6, #8]
 80045ec:	e7a8      	b.n	8004540 <setvbuf+0x24>
 80045ee:	4b21      	ldr	r3, [pc, #132]	; (8004674 <setvbuf+0x158>)
 80045f0:	429c      	cmp	r4, r3
 80045f2:	bf08      	it	eq
 80045f4:	68f4      	ldreq	r4, [r6, #12]
 80045f6:	e7a3      	b.n	8004540 <setvbuf+0x24>
 80045f8:	2f00      	cmp	r7, #0
 80045fa:	d0d8      	beq.n	80045ae <setvbuf+0x92>
 80045fc:	69b3      	ldr	r3, [r6, #24]
 80045fe:	b913      	cbnz	r3, 8004606 <setvbuf+0xea>
 8004600:	4630      	mov	r0, r6
 8004602:	f000 f9e9 	bl	80049d8 <__sinit>
 8004606:	f1b8 0f01 	cmp.w	r8, #1
 800460a:	bf08      	it	eq
 800460c:	89a3      	ldrheq	r3, [r4, #12]
 800460e:	6027      	str	r7, [r4, #0]
 8004610:	bf04      	itt	eq
 8004612:	f043 0301 	orreq.w	r3, r3, #1
 8004616:	81a3      	strheq	r3, [r4, #12]
 8004618:	89a3      	ldrh	r3, [r4, #12]
 800461a:	f013 0008 	ands.w	r0, r3, #8
 800461e:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8004622:	d01b      	beq.n	800465c <setvbuf+0x140>
 8004624:	f013 0001 	ands.w	r0, r3, #1
 8004628:	bf18      	it	ne
 800462a:	426d      	negne	r5, r5
 800462c:	f04f 0300 	mov.w	r3, #0
 8004630:	bf1d      	ittte	ne
 8004632:	60a3      	strne	r3, [r4, #8]
 8004634:	61a5      	strne	r5, [r4, #24]
 8004636:	4618      	movne	r0, r3
 8004638:	60a5      	streq	r5, [r4, #8]
 800463a:	e7d0      	b.n	80045de <setvbuf+0xc2>
 800463c:	4648      	mov	r0, r9
 800463e:	f000 fab9 	bl	8004bb4 <malloc>
 8004642:	4607      	mov	r7, r0
 8004644:	2800      	cmp	r0, #0
 8004646:	d0bc      	beq.n	80045c2 <setvbuf+0xa6>
 8004648:	89a3      	ldrh	r3, [r4, #12]
 800464a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800464e:	81a3      	strh	r3, [r4, #12]
 8004650:	464d      	mov	r5, r9
 8004652:	e7d3      	b.n	80045fc <setvbuf+0xe0>
 8004654:	2000      	movs	r0, #0
 8004656:	e7b6      	b.n	80045c6 <setvbuf+0xaa>
 8004658:	46a9      	mov	r9, r5
 800465a:	e7f5      	b.n	8004648 <setvbuf+0x12c>
 800465c:	60a0      	str	r0, [r4, #8]
 800465e:	e7be      	b.n	80045de <setvbuf+0xc2>
 8004660:	f04f 30ff 	mov.w	r0, #4294967295
 8004664:	e7bb      	b.n	80045de <setvbuf+0xc2>
 8004666:	bf00      	nop
 8004668:	20000010 	.word	0x20000010
 800466c:	080054ec 	.word	0x080054ec
 8004670:	0800550c 	.word	0x0800550c
 8004674:	080054cc 	.word	0x080054cc

08004678 <__swbuf_r>:
 8004678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800467a:	460e      	mov	r6, r1
 800467c:	4614      	mov	r4, r2
 800467e:	4605      	mov	r5, r0
 8004680:	b118      	cbz	r0, 800468a <__swbuf_r+0x12>
 8004682:	6983      	ldr	r3, [r0, #24]
 8004684:	b90b      	cbnz	r3, 800468a <__swbuf_r+0x12>
 8004686:	f000 f9a7 	bl	80049d8 <__sinit>
 800468a:	4b21      	ldr	r3, [pc, #132]	; (8004710 <__swbuf_r+0x98>)
 800468c:	429c      	cmp	r4, r3
 800468e:	d12a      	bne.n	80046e6 <__swbuf_r+0x6e>
 8004690:	686c      	ldr	r4, [r5, #4]
 8004692:	69a3      	ldr	r3, [r4, #24]
 8004694:	60a3      	str	r3, [r4, #8]
 8004696:	89a3      	ldrh	r3, [r4, #12]
 8004698:	071a      	lsls	r2, r3, #28
 800469a:	d52e      	bpl.n	80046fa <__swbuf_r+0x82>
 800469c:	6923      	ldr	r3, [r4, #16]
 800469e:	b363      	cbz	r3, 80046fa <__swbuf_r+0x82>
 80046a0:	6923      	ldr	r3, [r4, #16]
 80046a2:	6820      	ldr	r0, [r4, #0]
 80046a4:	1ac0      	subs	r0, r0, r3
 80046a6:	6963      	ldr	r3, [r4, #20]
 80046a8:	b2f6      	uxtb	r6, r6
 80046aa:	4283      	cmp	r3, r0
 80046ac:	4637      	mov	r7, r6
 80046ae:	dc04      	bgt.n	80046ba <__swbuf_r+0x42>
 80046b0:	4621      	mov	r1, r4
 80046b2:	4628      	mov	r0, r5
 80046b4:	f000 f926 	bl	8004904 <_fflush_r>
 80046b8:	bb28      	cbnz	r0, 8004706 <__swbuf_r+0x8e>
 80046ba:	68a3      	ldr	r3, [r4, #8]
 80046bc:	3b01      	subs	r3, #1
 80046be:	60a3      	str	r3, [r4, #8]
 80046c0:	6823      	ldr	r3, [r4, #0]
 80046c2:	1c5a      	adds	r2, r3, #1
 80046c4:	6022      	str	r2, [r4, #0]
 80046c6:	701e      	strb	r6, [r3, #0]
 80046c8:	6963      	ldr	r3, [r4, #20]
 80046ca:	3001      	adds	r0, #1
 80046cc:	4283      	cmp	r3, r0
 80046ce:	d004      	beq.n	80046da <__swbuf_r+0x62>
 80046d0:	89a3      	ldrh	r3, [r4, #12]
 80046d2:	07db      	lsls	r3, r3, #31
 80046d4:	d519      	bpl.n	800470a <__swbuf_r+0x92>
 80046d6:	2e0a      	cmp	r6, #10
 80046d8:	d117      	bne.n	800470a <__swbuf_r+0x92>
 80046da:	4621      	mov	r1, r4
 80046dc:	4628      	mov	r0, r5
 80046de:	f000 f911 	bl	8004904 <_fflush_r>
 80046e2:	b190      	cbz	r0, 800470a <__swbuf_r+0x92>
 80046e4:	e00f      	b.n	8004706 <__swbuf_r+0x8e>
 80046e6:	4b0b      	ldr	r3, [pc, #44]	; (8004714 <__swbuf_r+0x9c>)
 80046e8:	429c      	cmp	r4, r3
 80046ea:	d101      	bne.n	80046f0 <__swbuf_r+0x78>
 80046ec:	68ac      	ldr	r4, [r5, #8]
 80046ee:	e7d0      	b.n	8004692 <__swbuf_r+0x1a>
 80046f0:	4b09      	ldr	r3, [pc, #36]	; (8004718 <__swbuf_r+0xa0>)
 80046f2:	429c      	cmp	r4, r3
 80046f4:	bf08      	it	eq
 80046f6:	68ec      	ldreq	r4, [r5, #12]
 80046f8:	e7cb      	b.n	8004692 <__swbuf_r+0x1a>
 80046fa:	4621      	mov	r1, r4
 80046fc:	4628      	mov	r0, r5
 80046fe:	f000 f80d 	bl	800471c <__swsetup_r>
 8004702:	2800      	cmp	r0, #0
 8004704:	d0cc      	beq.n	80046a0 <__swbuf_r+0x28>
 8004706:	f04f 37ff 	mov.w	r7, #4294967295
 800470a:	4638      	mov	r0, r7
 800470c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800470e:	bf00      	nop
 8004710:	080054ec 	.word	0x080054ec
 8004714:	0800550c 	.word	0x0800550c
 8004718:	080054cc 	.word	0x080054cc

0800471c <__swsetup_r>:
 800471c:	4b32      	ldr	r3, [pc, #200]	; (80047e8 <__swsetup_r+0xcc>)
 800471e:	b570      	push	{r4, r5, r6, lr}
 8004720:	681d      	ldr	r5, [r3, #0]
 8004722:	4606      	mov	r6, r0
 8004724:	460c      	mov	r4, r1
 8004726:	b125      	cbz	r5, 8004732 <__swsetup_r+0x16>
 8004728:	69ab      	ldr	r3, [r5, #24]
 800472a:	b913      	cbnz	r3, 8004732 <__swsetup_r+0x16>
 800472c:	4628      	mov	r0, r5
 800472e:	f000 f953 	bl	80049d8 <__sinit>
 8004732:	4b2e      	ldr	r3, [pc, #184]	; (80047ec <__swsetup_r+0xd0>)
 8004734:	429c      	cmp	r4, r3
 8004736:	d10f      	bne.n	8004758 <__swsetup_r+0x3c>
 8004738:	686c      	ldr	r4, [r5, #4]
 800473a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800473e:	b29a      	uxth	r2, r3
 8004740:	0715      	lsls	r5, r2, #28
 8004742:	d42c      	bmi.n	800479e <__swsetup_r+0x82>
 8004744:	06d0      	lsls	r0, r2, #27
 8004746:	d411      	bmi.n	800476c <__swsetup_r+0x50>
 8004748:	2209      	movs	r2, #9
 800474a:	6032      	str	r2, [r6, #0]
 800474c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004750:	81a3      	strh	r3, [r4, #12]
 8004752:	f04f 30ff 	mov.w	r0, #4294967295
 8004756:	e03e      	b.n	80047d6 <__swsetup_r+0xba>
 8004758:	4b25      	ldr	r3, [pc, #148]	; (80047f0 <__swsetup_r+0xd4>)
 800475a:	429c      	cmp	r4, r3
 800475c:	d101      	bne.n	8004762 <__swsetup_r+0x46>
 800475e:	68ac      	ldr	r4, [r5, #8]
 8004760:	e7eb      	b.n	800473a <__swsetup_r+0x1e>
 8004762:	4b24      	ldr	r3, [pc, #144]	; (80047f4 <__swsetup_r+0xd8>)
 8004764:	429c      	cmp	r4, r3
 8004766:	bf08      	it	eq
 8004768:	68ec      	ldreq	r4, [r5, #12]
 800476a:	e7e6      	b.n	800473a <__swsetup_r+0x1e>
 800476c:	0751      	lsls	r1, r2, #29
 800476e:	d512      	bpl.n	8004796 <__swsetup_r+0x7a>
 8004770:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004772:	b141      	cbz	r1, 8004786 <__swsetup_r+0x6a>
 8004774:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004778:	4299      	cmp	r1, r3
 800477a:	d002      	beq.n	8004782 <__swsetup_r+0x66>
 800477c:	4630      	mov	r0, r6
 800477e:	f000 fa21 	bl	8004bc4 <_free_r>
 8004782:	2300      	movs	r3, #0
 8004784:	6363      	str	r3, [r4, #52]	; 0x34
 8004786:	89a3      	ldrh	r3, [r4, #12]
 8004788:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800478c:	81a3      	strh	r3, [r4, #12]
 800478e:	2300      	movs	r3, #0
 8004790:	6063      	str	r3, [r4, #4]
 8004792:	6923      	ldr	r3, [r4, #16]
 8004794:	6023      	str	r3, [r4, #0]
 8004796:	89a3      	ldrh	r3, [r4, #12]
 8004798:	f043 0308 	orr.w	r3, r3, #8
 800479c:	81a3      	strh	r3, [r4, #12]
 800479e:	6923      	ldr	r3, [r4, #16]
 80047a0:	b94b      	cbnz	r3, 80047b6 <__swsetup_r+0x9a>
 80047a2:	89a3      	ldrh	r3, [r4, #12]
 80047a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80047a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047ac:	d003      	beq.n	80047b6 <__swsetup_r+0x9a>
 80047ae:	4621      	mov	r1, r4
 80047b0:	4630      	mov	r0, r6
 80047b2:	f000 f9bf 	bl	8004b34 <__smakebuf_r>
 80047b6:	89a2      	ldrh	r2, [r4, #12]
 80047b8:	f012 0301 	ands.w	r3, r2, #1
 80047bc:	d00c      	beq.n	80047d8 <__swsetup_r+0xbc>
 80047be:	2300      	movs	r3, #0
 80047c0:	60a3      	str	r3, [r4, #8]
 80047c2:	6963      	ldr	r3, [r4, #20]
 80047c4:	425b      	negs	r3, r3
 80047c6:	61a3      	str	r3, [r4, #24]
 80047c8:	6923      	ldr	r3, [r4, #16]
 80047ca:	b953      	cbnz	r3, 80047e2 <__swsetup_r+0xc6>
 80047cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047d0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80047d4:	d1ba      	bne.n	800474c <__swsetup_r+0x30>
 80047d6:	bd70      	pop	{r4, r5, r6, pc}
 80047d8:	0792      	lsls	r2, r2, #30
 80047da:	bf58      	it	pl
 80047dc:	6963      	ldrpl	r3, [r4, #20]
 80047de:	60a3      	str	r3, [r4, #8]
 80047e0:	e7f2      	b.n	80047c8 <__swsetup_r+0xac>
 80047e2:	2000      	movs	r0, #0
 80047e4:	e7f7      	b.n	80047d6 <__swsetup_r+0xba>
 80047e6:	bf00      	nop
 80047e8:	20000010 	.word	0x20000010
 80047ec:	080054ec 	.word	0x080054ec
 80047f0:	0800550c 	.word	0x0800550c
 80047f4:	080054cc 	.word	0x080054cc

080047f8 <__sflush_r>:
 80047f8:	898a      	ldrh	r2, [r1, #12]
 80047fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047fe:	4605      	mov	r5, r0
 8004800:	0710      	lsls	r0, r2, #28
 8004802:	460c      	mov	r4, r1
 8004804:	d458      	bmi.n	80048b8 <__sflush_r+0xc0>
 8004806:	684b      	ldr	r3, [r1, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	dc05      	bgt.n	8004818 <__sflush_r+0x20>
 800480c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800480e:	2b00      	cmp	r3, #0
 8004810:	dc02      	bgt.n	8004818 <__sflush_r+0x20>
 8004812:	2000      	movs	r0, #0
 8004814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004818:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800481a:	2e00      	cmp	r6, #0
 800481c:	d0f9      	beq.n	8004812 <__sflush_r+0x1a>
 800481e:	2300      	movs	r3, #0
 8004820:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004824:	682f      	ldr	r7, [r5, #0]
 8004826:	6a21      	ldr	r1, [r4, #32]
 8004828:	602b      	str	r3, [r5, #0]
 800482a:	d032      	beq.n	8004892 <__sflush_r+0x9a>
 800482c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800482e:	89a3      	ldrh	r3, [r4, #12]
 8004830:	075a      	lsls	r2, r3, #29
 8004832:	d505      	bpl.n	8004840 <__sflush_r+0x48>
 8004834:	6863      	ldr	r3, [r4, #4]
 8004836:	1ac0      	subs	r0, r0, r3
 8004838:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800483a:	b10b      	cbz	r3, 8004840 <__sflush_r+0x48>
 800483c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800483e:	1ac0      	subs	r0, r0, r3
 8004840:	2300      	movs	r3, #0
 8004842:	4602      	mov	r2, r0
 8004844:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004846:	6a21      	ldr	r1, [r4, #32]
 8004848:	4628      	mov	r0, r5
 800484a:	47b0      	blx	r6
 800484c:	1c43      	adds	r3, r0, #1
 800484e:	89a3      	ldrh	r3, [r4, #12]
 8004850:	d106      	bne.n	8004860 <__sflush_r+0x68>
 8004852:	6829      	ldr	r1, [r5, #0]
 8004854:	291d      	cmp	r1, #29
 8004856:	d848      	bhi.n	80048ea <__sflush_r+0xf2>
 8004858:	4a29      	ldr	r2, [pc, #164]	; (8004900 <__sflush_r+0x108>)
 800485a:	40ca      	lsrs	r2, r1
 800485c:	07d6      	lsls	r6, r2, #31
 800485e:	d544      	bpl.n	80048ea <__sflush_r+0xf2>
 8004860:	2200      	movs	r2, #0
 8004862:	6062      	str	r2, [r4, #4]
 8004864:	04d9      	lsls	r1, r3, #19
 8004866:	6922      	ldr	r2, [r4, #16]
 8004868:	6022      	str	r2, [r4, #0]
 800486a:	d504      	bpl.n	8004876 <__sflush_r+0x7e>
 800486c:	1c42      	adds	r2, r0, #1
 800486e:	d101      	bne.n	8004874 <__sflush_r+0x7c>
 8004870:	682b      	ldr	r3, [r5, #0]
 8004872:	b903      	cbnz	r3, 8004876 <__sflush_r+0x7e>
 8004874:	6560      	str	r0, [r4, #84]	; 0x54
 8004876:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004878:	602f      	str	r7, [r5, #0]
 800487a:	2900      	cmp	r1, #0
 800487c:	d0c9      	beq.n	8004812 <__sflush_r+0x1a>
 800487e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004882:	4299      	cmp	r1, r3
 8004884:	d002      	beq.n	800488c <__sflush_r+0x94>
 8004886:	4628      	mov	r0, r5
 8004888:	f000 f99c 	bl	8004bc4 <_free_r>
 800488c:	2000      	movs	r0, #0
 800488e:	6360      	str	r0, [r4, #52]	; 0x34
 8004890:	e7c0      	b.n	8004814 <__sflush_r+0x1c>
 8004892:	2301      	movs	r3, #1
 8004894:	4628      	mov	r0, r5
 8004896:	47b0      	blx	r6
 8004898:	1c41      	adds	r1, r0, #1
 800489a:	d1c8      	bne.n	800482e <__sflush_r+0x36>
 800489c:	682b      	ldr	r3, [r5, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d0c5      	beq.n	800482e <__sflush_r+0x36>
 80048a2:	2b1d      	cmp	r3, #29
 80048a4:	d001      	beq.n	80048aa <__sflush_r+0xb2>
 80048a6:	2b16      	cmp	r3, #22
 80048a8:	d101      	bne.n	80048ae <__sflush_r+0xb6>
 80048aa:	602f      	str	r7, [r5, #0]
 80048ac:	e7b1      	b.n	8004812 <__sflush_r+0x1a>
 80048ae:	89a3      	ldrh	r3, [r4, #12]
 80048b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048b4:	81a3      	strh	r3, [r4, #12]
 80048b6:	e7ad      	b.n	8004814 <__sflush_r+0x1c>
 80048b8:	690f      	ldr	r7, [r1, #16]
 80048ba:	2f00      	cmp	r7, #0
 80048bc:	d0a9      	beq.n	8004812 <__sflush_r+0x1a>
 80048be:	0793      	lsls	r3, r2, #30
 80048c0:	680e      	ldr	r6, [r1, #0]
 80048c2:	bf08      	it	eq
 80048c4:	694b      	ldreq	r3, [r1, #20]
 80048c6:	600f      	str	r7, [r1, #0]
 80048c8:	bf18      	it	ne
 80048ca:	2300      	movne	r3, #0
 80048cc:	eba6 0807 	sub.w	r8, r6, r7
 80048d0:	608b      	str	r3, [r1, #8]
 80048d2:	f1b8 0f00 	cmp.w	r8, #0
 80048d6:	dd9c      	ble.n	8004812 <__sflush_r+0x1a>
 80048d8:	4643      	mov	r3, r8
 80048da:	463a      	mov	r2, r7
 80048dc:	6a21      	ldr	r1, [r4, #32]
 80048de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80048e0:	4628      	mov	r0, r5
 80048e2:	47b0      	blx	r6
 80048e4:	2800      	cmp	r0, #0
 80048e6:	dc06      	bgt.n	80048f6 <__sflush_r+0xfe>
 80048e8:	89a3      	ldrh	r3, [r4, #12]
 80048ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048ee:	81a3      	strh	r3, [r4, #12]
 80048f0:	f04f 30ff 	mov.w	r0, #4294967295
 80048f4:	e78e      	b.n	8004814 <__sflush_r+0x1c>
 80048f6:	4407      	add	r7, r0
 80048f8:	eba8 0800 	sub.w	r8, r8, r0
 80048fc:	e7e9      	b.n	80048d2 <__sflush_r+0xda>
 80048fe:	bf00      	nop
 8004900:	20400001 	.word	0x20400001

08004904 <_fflush_r>:
 8004904:	b538      	push	{r3, r4, r5, lr}
 8004906:	690b      	ldr	r3, [r1, #16]
 8004908:	4605      	mov	r5, r0
 800490a:	460c      	mov	r4, r1
 800490c:	b1db      	cbz	r3, 8004946 <_fflush_r+0x42>
 800490e:	b118      	cbz	r0, 8004918 <_fflush_r+0x14>
 8004910:	6983      	ldr	r3, [r0, #24]
 8004912:	b90b      	cbnz	r3, 8004918 <_fflush_r+0x14>
 8004914:	f000 f860 	bl	80049d8 <__sinit>
 8004918:	4b0c      	ldr	r3, [pc, #48]	; (800494c <_fflush_r+0x48>)
 800491a:	429c      	cmp	r4, r3
 800491c:	d109      	bne.n	8004932 <_fflush_r+0x2e>
 800491e:	686c      	ldr	r4, [r5, #4]
 8004920:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004924:	b17b      	cbz	r3, 8004946 <_fflush_r+0x42>
 8004926:	4621      	mov	r1, r4
 8004928:	4628      	mov	r0, r5
 800492a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800492e:	f7ff bf63 	b.w	80047f8 <__sflush_r>
 8004932:	4b07      	ldr	r3, [pc, #28]	; (8004950 <_fflush_r+0x4c>)
 8004934:	429c      	cmp	r4, r3
 8004936:	d101      	bne.n	800493c <_fflush_r+0x38>
 8004938:	68ac      	ldr	r4, [r5, #8]
 800493a:	e7f1      	b.n	8004920 <_fflush_r+0x1c>
 800493c:	4b05      	ldr	r3, [pc, #20]	; (8004954 <_fflush_r+0x50>)
 800493e:	429c      	cmp	r4, r3
 8004940:	bf08      	it	eq
 8004942:	68ec      	ldreq	r4, [r5, #12]
 8004944:	e7ec      	b.n	8004920 <_fflush_r+0x1c>
 8004946:	2000      	movs	r0, #0
 8004948:	bd38      	pop	{r3, r4, r5, pc}
 800494a:	bf00      	nop
 800494c:	080054ec 	.word	0x080054ec
 8004950:	0800550c 	.word	0x0800550c
 8004954:	080054cc 	.word	0x080054cc

08004958 <std>:
 8004958:	2300      	movs	r3, #0
 800495a:	b510      	push	{r4, lr}
 800495c:	4604      	mov	r4, r0
 800495e:	e9c0 3300 	strd	r3, r3, [r0]
 8004962:	6083      	str	r3, [r0, #8]
 8004964:	8181      	strh	r1, [r0, #12]
 8004966:	6643      	str	r3, [r0, #100]	; 0x64
 8004968:	81c2      	strh	r2, [r0, #14]
 800496a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800496e:	6183      	str	r3, [r0, #24]
 8004970:	4619      	mov	r1, r3
 8004972:	2208      	movs	r2, #8
 8004974:	305c      	adds	r0, #92	; 0x5c
 8004976:	f7ff fd4d 	bl	8004414 <memset>
 800497a:	4b05      	ldr	r3, [pc, #20]	; (8004990 <std+0x38>)
 800497c:	6263      	str	r3, [r4, #36]	; 0x24
 800497e:	4b05      	ldr	r3, [pc, #20]	; (8004994 <std+0x3c>)
 8004980:	62a3      	str	r3, [r4, #40]	; 0x28
 8004982:	4b05      	ldr	r3, [pc, #20]	; (8004998 <std+0x40>)
 8004984:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004986:	4b05      	ldr	r3, [pc, #20]	; (800499c <std+0x44>)
 8004988:	6224      	str	r4, [r4, #32]
 800498a:	6323      	str	r3, [r4, #48]	; 0x30
 800498c:	bd10      	pop	{r4, pc}
 800498e:	bf00      	nop
 8004990:	080052c5 	.word	0x080052c5
 8004994:	080052e7 	.word	0x080052e7
 8004998:	0800531f 	.word	0x0800531f
 800499c:	08005343 	.word	0x08005343

080049a0 <_cleanup_r>:
 80049a0:	4901      	ldr	r1, [pc, #4]	; (80049a8 <_cleanup_r+0x8>)
 80049a2:	f000 b885 	b.w	8004ab0 <_fwalk_reent>
 80049a6:	bf00      	nop
 80049a8:	08004905 	.word	0x08004905

080049ac <__sfmoreglue>:
 80049ac:	b570      	push	{r4, r5, r6, lr}
 80049ae:	1e4a      	subs	r2, r1, #1
 80049b0:	2568      	movs	r5, #104	; 0x68
 80049b2:	4355      	muls	r5, r2
 80049b4:	460e      	mov	r6, r1
 80049b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80049ba:	f000 f951 	bl	8004c60 <_malloc_r>
 80049be:	4604      	mov	r4, r0
 80049c0:	b140      	cbz	r0, 80049d4 <__sfmoreglue+0x28>
 80049c2:	2100      	movs	r1, #0
 80049c4:	e9c0 1600 	strd	r1, r6, [r0]
 80049c8:	300c      	adds	r0, #12
 80049ca:	60a0      	str	r0, [r4, #8]
 80049cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80049d0:	f7ff fd20 	bl	8004414 <memset>
 80049d4:	4620      	mov	r0, r4
 80049d6:	bd70      	pop	{r4, r5, r6, pc}

080049d8 <__sinit>:
 80049d8:	6983      	ldr	r3, [r0, #24]
 80049da:	b510      	push	{r4, lr}
 80049dc:	4604      	mov	r4, r0
 80049de:	bb33      	cbnz	r3, 8004a2e <__sinit+0x56>
 80049e0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80049e4:	6503      	str	r3, [r0, #80]	; 0x50
 80049e6:	4b12      	ldr	r3, [pc, #72]	; (8004a30 <__sinit+0x58>)
 80049e8:	4a12      	ldr	r2, [pc, #72]	; (8004a34 <__sinit+0x5c>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6282      	str	r2, [r0, #40]	; 0x28
 80049ee:	4298      	cmp	r0, r3
 80049f0:	bf04      	itt	eq
 80049f2:	2301      	moveq	r3, #1
 80049f4:	6183      	streq	r3, [r0, #24]
 80049f6:	f000 f81f 	bl	8004a38 <__sfp>
 80049fa:	6060      	str	r0, [r4, #4]
 80049fc:	4620      	mov	r0, r4
 80049fe:	f000 f81b 	bl	8004a38 <__sfp>
 8004a02:	60a0      	str	r0, [r4, #8]
 8004a04:	4620      	mov	r0, r4
 8004a06:	f000 f817 	bl	8004a38 <__sfp>
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	60e0      	str	r0, [r4, #12]
 8004a0e:	2104      	movs	r1, #4
 8004a10:	6860      	ldr	r0, [r4, #4]
 8004a12:	f7ff ffa1 	bl	8004958 <std>
 8004a16:	2201      	movs	r2, #1
 8004a18:	2109      	movs	r1, #9
 8004a1a:	68a0      	ldr	r0, [r4, #8]
 8004a1c:	f7ff ff9c 	bl	8004958 <std>
 8004a20:	2202      	movs	r2, #2
 8004a22:	2112      	movs	r1, #18
 8004a24:	68e0      	ldr	r0, [r4, #12]
 8004a26:	f7ff ff97 	bl	8004958 <std>
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	61a3      	str	r3, [r4, #24]
 8004a2e:	bd10      	pop	{r4, pc}
 8004a30:	080054c8 	.word	0x080054c8
 8004a34:	080049a1 	.word	0x080049a1

08004a38 <__sfp>:
 8004a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a3a:	4b1b      	ldr	r3, [pc, #108]	; (8004aa8 <__sfp+0x70>)
 8004a3c:	681e      	ldr	r6, [r3, #0]
 8004a3e:	69b3      	ldr	r3, [r6, #24]
 8004a40:	4607      	mov	r7, r0
 8004a42:	b913      	cbnz	r3, 8004a4a <__sfp+0x12>
 8004a44:	4630      	mov	r0, r6
 8004a46:	f7ff ffc7 	bl	80049d8 <__sinit>
 8004a4a:	3648      	adds	r6, #72	; 0x48
 8004a4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004a50:	3b01      	subs	r3, #1
 8004a52:	d503      	bpl.n	8004a5c <__sfp+0x24>
 8004a54:	6833      	ldr	r3, [r6, #0]
 8004a56:	b133      	cbz	r3, 8004a66 <__sfp+0x2e>
 8004a58:	6836      	ldr	r6, [r6, #0]
 8004a5a:	e7f7      	b.n	8004a4c <__sfp+0x14>
 8004a5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004a60:	b16d      	cbz	r5, 8004a7e <__sfp+0x46>
 8004a62:	3468      	adds	r4, #104	; 0x68
 8004a64:	e7f4      	b.n	8004a50 <__sfp+0x18>
 8004a66:	2104      	movs	r1, #4
 8004a68:	4638      	mov	r0, r7
 8004a6a:	f7ff ff9f 	bl	80049ac <__sfmoreglue>
 8004a6e:	6030      	str	r0, [r6, #0]
 8004a70:	2800      	cmp	r0, #0
 8004a72:	d1f1      	bne.n	8004a58 <__sfp+0x20>
 8004a74:	230c      	movs	r3, #12
 8004a76:	603b      	str	r3, [r7, #0]
 8004a78:	4604      	mov	r4, r0
 8004a7a:	4620      	mov	r0, r4
 8004a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a7e:	4b0b      	ldr	r3, [pc, #44]	; (8004aac <__sfp+0x74>)
 8004a80:	6665      	str	r5, [r4, #100]	; 0x64
 8004a82:	e9c4 5500 	strd	r5, r5, [r4]
 8004a86:	60a5      	str	r5, [r4, #8]
 8004a88:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004a8c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004a90:	2208      	movs	r2, #8
 8004a92:	4629      	mov	r1, r5
 8004a94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004a98:	f7ff fcbc 	bl	8004414 <memset>
 8004a9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004aa0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004aa4:	e7e9      	b.n	8004a7a <__sfp+0x42>
 8004aa6:	bf00      	nop
 8004aa8:	080054c8 	.word	0x080054c8
 8004aac:	ffff0001 	.word	0xffff0001

08004ab0 <_fwalk_reent>:
 8004ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ab4:	4680      	mov	r8, r0
 8004ab6:	4689      	mov	r9, r1
 8004ab8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004abc:	2600      	movs	r6, #0
 8004abe:	b914      	cbnz	r4, 8004ac6 <_fwalk_reent+0x16>
 8004ac0:	4630      	mov	r0, r6
 8004ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ac6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004aca:	3f01      	subs	r7, #1
 8004acc:	d501      	bpl.n	8004ad2 <_fwalk_reent+0x22>
 8004ace:	6824      	ldr	r4, [r4, #0]
 8004ad0:	e7f5      	b.n	8004abe <_fwalk_reent+0xe>
 8004ad2:	89ab      	ldrh	r3, [r5, #12]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d907      	bls.n	8004ae8 <_fwalk_reent+0x38>
 8004ad8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004adc:	3301      	adds	r3, #1
 8004ade:	d003      	beq.n	8004ae8 <_fwalk_reent+0x38>
 8004ae0:	4629      	mov	r1, r5
 8004ae2:	4640      	mov	r0, r8
 8004ae4:	47c8      	blx	r9
 8004ae6:	4306      	orrs	r6, r0
 8004ae8:	3568      	adds	r5, #104	; 0x68
 8004aea:	e7ee      	b.n	8004aca <_fwalk_reent+0x1a>

08004aec <__swhatbuf_r>:
 8004aec:	b570      	push	{r4, r5, r6, lr}
 8004aee:	460e      	mov	r6, r1
 8004af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004af4:	2900      	cmp	r1, #0
 8004af6:	b096      	sub	sp, #88	; 0x58
 8004af8:	4614      	mov	r4, r2
 8004afa:	461d      	mov	r5, r3
 8004afc:	da07      	bge.n	8004b0e <__swhatbuf_r+0x22>
 8004afe:	2300      	movs	r3, #0
 8004b00:	602b      	str	r3, [r5, #0]
 8004b02:	89b3      	ldrh	r3, [r6, #12]
 8004b04:	061a      	lsls	r2, r3, #24
 8004b06:	d410      	bmi.n	8004b2a <__swhatbuf_r+0x3e>
 8004b08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b0c:	e00e      	b.n	8004b2c <__swhatbuf_r+0x40>
 8004b0e:	466a      	mov	r2, sp
 8004b10:	f000 fc3e 	bl	8005390 <_fstat_r>
 8004b14:	2800      	cmp	r0, #0
 8004b16:	dbf2      	blt.n	8004afe <__swhatbuf_r+0x12>
 8004b18:	9a01      	ldr	r2, [sp, #4]
 8004b1a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004b1e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004b22:	425a      	negs	r2, r3
 8004b24:	415a      	adcs	r2, r3
 8004b26:	602a      	str	r2, [r5, #0]
 8004b28:	e7ee      	b.n	8004b08 <__swhatbuf_r+0x1c>
 8004b2a:	2340      	movs	r3, #64	; 0x40
 8004b2c:	2000      	movs	r0, #0
 8004b2e:	6023      	str	r3, [r4, #0]
 8004b30:	b016      	add	sp, #88	; 0x58
 8004b32:	bd70      	pop	{r4, r5, r6, pc}

08004b34 <__smakebuf_r>:
 8004b34:	898b      	ldrh	r3, [r1, #12]
 8004b36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b38:	079d      	lsls	r5, r3, #30
 8004b3a:	4606      	mov	r6, r0
 8004b3c:	460c      	mov	r4, r1
 8004b3e:	d507      	bpl.n	8004b50 <__smakebuf_r+0x1c>
 8004b40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004b44:	6023      	str	r3, [r4, #0]
 8004b46:	6123      	str	r3, [r4, #16]
 8004b48:	2301      	movs	r3, #1
 8004b4a:	6163      	str	r3, [r4, #20]
 8004b4c:	b002      	add	sp, #8
 8004b4e:	bd70      	pop	{r4, r5, r6, pc}
 8004b50:	ab01      	add	r3, sp, #4
 8004b52:	466a      	mov	r2, sp
 8004b54:	f7ff ffca 	bl	8004aec <__swhatbuf_r>
 8004b58:	9900      	ldr	r1, [sp, #0]
 8004b5a:	4605      	mov	r5, r0
 8004b5c:	4630      	mov	r0, r6
 8004b5e:	f000 f87f 	bl	8004c60 <_malloc_r>
 8004b62:	b948      	cbnz	r0, 8004b78 <__smakebuf_r+0x44>
 8004b64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b68:	059a      	lsls	r2, r3, #22
 8004b6a:	d4ef      	bmi.n	8004b4c <__smakebuf_r+0x18>
 8004b6c:	f023 0303 	bic.w	r3, r3, #3
 8004b70:	f043 0302 	orr.w	r3, r3, #2
 8004b74:	81a3      	strh	r3, [r4, #12]
 8004b76:	e7e3      	b.n	8004b40 <__smakebuf_r+0xc>
 8004b78:	4b0d      	ldr	r3, [pc, #52]	; (8004bb0 <__smakebuf_r+0x7c>)
 8004b7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004b7c:	89a3      	ldrh	r3, [r4, #12]
 8004b7e:	6020      	str	r0, [r4, #0]
 8004b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b84:	81a3      	strh	r3, [r4, #12]
 8004b86:	9b00      	ldr	r3, [sp, #0]
 8004b88:	6163      	str	r3, [r4, #20]
 8004b8a:	9b01      	ldr	r3, [sp, #4]
 8004b8c:	6120      	str	r0, [r4, #16]
 8004b8e:	b15b      	cbz	r3, 8004ba8 <__smakebuf_r+0x74>
 8004b90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b94:	4630      	mov	r0, r6
 8004b96:	f000 fc0d 	bl	80053b4 <_isatty_r>
 8004b9a:	b128      	cbz	r0, 8004ba8 <__smakebuf_r+0x74>
 8004b9c:	89a3      	ldrh	r3, [r4, #12]
 8004b9e:	f023 0303 	bic.w	r3, r3, #3
 8004ba2:	f043 0301 	orr.w	r3, r3, #1
 8004ba6:	81a3      	strh	r3, [r4, #12]
 8004ba8:	89a3      	ldrh	r3, [r4, #12]
 8004baa:	431d      	orrs	r5, r3
 8004bac:	81a5      	strh	r5, [r4, #12]
 8004bae:	e7cd      	b.n	8004b4c <__smakebuf_r+0x18>
 8004bb0:	080049a1 	.word	0x080049a1

08004bb4 <malloc>:
 8004bb4:	4b02      	ldr	r3, [pc, #8]	; (8004bc0 <malloc+0xc>)
 8004bb6:	4601      	mov	r1, r0
 8004bb8:	6818      	ldr	r0, [r3, #0]
 8004bba:	f000 b851 	b.w	8004c60 <_malloc_r>
 8004bbe:	bf00      	nop
 8004bc0:	20000010 	.word	0x20000010

08004bc4 <_free_r>:
 8004bc4:	b538      	push	{r3, r4, r5, lr}
 8004bc6:	4605      	mov	r5, r0
 8004bc8:	2900      	cmp	r1, #0
 8004bca:	d045      	beq.n	8004c58 <_free_r+0x94>
 8004bcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bd0:	1f0c      	subs	r4, r1, #4
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	bfb8      	it	lt
 8004bd6:	18e4      	addlt	r4, r4, r3
 8004bd8:	f000 fc0e 	bl	80053f8 <__malloc_lock>
 8004bdc:	4a1f      	ldr	r2, [pc, #124]	; (8004c5c <_free_r+0x98>)
 8004bde:	6813      	ldr	r3, [r2, #0]
 8004be0:	4610      	mov	r0, r2
 8004be2:	b933      	cbnz	r3, 8004bf2 <_free_r+0x2e>
 8004be4:	6063      	str	r3, [r4, #4]
 8004be6:	6014      	str	r4, [r2, #0]
 8004be8:	4628      	mov	r0, r5
 8004bea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bee:	f000 bc04 	b.w	80053fa <__malloc_unlock>
 8004bf2:	42a3      	cmp	r3, r4
 8004bf4:	d90c      	bls.n	8004c10 <_free_r+0x4c>
 8004bf6:	6821      	ldr	r1, [r4, #0]
 8004bf8:	1862      	adds	r2, r4, r1
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	bf04      	itt	eq
 8004bfe:	681a      	ldreq	r2, [r3, #0]
 8004c00:	685b      	ldreq	r3, [r3, #4]
 8004c02:	6063      	str	r3, [r4, #4]
 8004c04:	bf04      	itt	eq
 8004c06:	1852      	addeq	r2, r2, r1
 8004c08:	6022      	streq	r2, [r4, #0]
 8004c0a:	6004      	str	r4, [r0, #0]
 8004c0c:	e7ec      	b.n	8004be8 <_free_r+0x24>
 8004c0e:	4613      	mov	r3, r2
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	b10a      	cbz	r2, 8004c18 <_free_r+0x54>
 8004c14:	42a2      	cmp	r2, r4
 8004c16:	d9fa      	bls.n	8004c0e <_free_r+0x4a>
 8004c18:	6819      	ldr	r1, [r3, #0]
 8004c1a:	1858      	adds	r0, r3, r1
 8004c1c:	42a0      	cmp	r0, r4
 8004c1e:	d10b      	bne.n	8004c38 <_free_r+0x74>
 8004c20:	6820      	ldr	r0, [r4, #0]
 8004c22:	4401      	add	r1, r0
 8004c24:	1858      	adds	r0, r3, r1
 8004c26:	4282      	cmp	r2, r0
 8004c28:	6019      	str	r1, [r3, #0]
 8004c2a:	d1dd      	bne.n	8004be8 <_free_r+0x24>
 8004c2c:	6810      	ldr	r0, [r2, #0]
 8004c2e:	6852      	ldr	r2, [r2, #4]
 8004c30:	605a      	str	r2, [r3, #4]
 8004c32:	4401      	add	r1, r0
 8004c34:	6019      	str	r1, [r3, #0]
 8004c36:	e7d7      	b.n	8004be8 <_free_r+0x24>
 8004c38:	d902      	bls.n	8004c40 <_free_r+0x7c>
 8004c3a:	230c      	movs	r3, #12
 8004c3c:	602b      	str	r3, [r5, #0]
 8004c3e:	e7d3      	b.n	8004be8 <_free_r+0x24>
 8004c40:	6820      	ldr	r0, [r4, #0]
 8004c42:	1821      	adds	r1, r4, r0
 8004c44:	428a      	cmp	r2, r1
 8004c46:	bf04      	itt	eq
 8004c48:	6811      	ldreq	r1, [r2, #0]
 8004c4a:	6852      	ldreq	r2, [r2, #4]
 8004c4c:	6062      	str	r2, [r4, #4]
 8004c4e:	bf04      	itt	eq
 8004c50:	1809      	addeq	r1, r1, r0
 8004c52:	6021      	streq	r1, [r4, #0]
 8004c54:	605c      	str	r4, [r3, #4]
 8004c56:	e7c7      	b.n	8004be8 <_free_r+0x24>
 8004c58:	bd38      	pop	{r3, r4, r5, pc}
 8004c5a:	bf00      	nop
 8004c5c:	20004034 	.word	0x20004034

08004c60 <_malloc_r>:
 8004c60:	b570      	push	{r4, r5, r6, lr}
 8004c62:	1ccd      	adds	r5, r1, #3
 8004c64:	f025 0503 	bic.w	r5, r5, #3
 8004c68:	3508      	adds	r5, #8
 8004c6a:	2d0c      	cmp	r5, #12
 8004c6c:	bf38      	it	cc
 8004c6e:	250c      	movcc	r5, #12
 8004c70:	2d00      	cmp	r5, #0
 8004c72:	4606      	mov	r6, r0
 8004c74:	db01      	blt.n	8004c7a <_malloc_r+0x1a>
 8004c76:	42a9      	cmp	r1, r5
 8004c78:	d903      	bls.n	8004c82 <_malloc_r+0x22>
 8004c7a:	230c      	movs	r3, #12
 8004c7c:	6033      	str	r3, [r6, #0]
 8004c7e:	2000      	movs	r0, #0
 8004c80:	bd70      	pop	{r4, r5, r6, pc}
 8004c82:	f000 fbb9 	bl	80053f8 <__malloc_lock>
 8004c86:	4a21      	ldr	r2, [pc, #132]	; (8004d0c <_malloc_r+0xac>)
 8004c88:	6814      	ldr	r4, [r2, #0]
 8004c8a:	4621      	mov	r1, r4
 8004c8c:	b991      	cbnz	r1, 8004cb4 <_malloc_r+0x54>
 8004c8e:	4c20      	ldr	r4, [pc, #128]	; (8004d10 <_malloc_r+0xb0>)
 8004c90:	6823      	ldr	r3, [r4, #0]
 8004c92:	b91b      	cbnz	r3, 8004c9c <_malloc_r+0x3c>
 8004c94:	4630      	mov	r0, r6
 8004c96:	f000 fb05 	bl	80052a4 <_sbrk_r>
 8004c9a:	6020      	str	r0, [r4, #0]
 8004c9c:	4629      	mov	r1, r5
 8004c9e:	4630      	mov	r0, r6
 8004ca0:	f000 fb00 	bl	80052a4 <_sbrk_r>
 8004ca4:	1c43      	adds	r3, r0, #1
 8004ca6:	d124      	bne.n	8004cf2 <_malloc_r+0x92>
 8004ca8:	230c      	movs	r3, #12
 8004caa:	6033      	str	r3, [r6, #0]
 8004cac:	4630      	mov	r0, r6
 8004cae:	f000 fba4 	bl	80053fa <__malloc_unlock>
 8004cb2:	e7e4      	b.n	8004c7e <_malloc_r+0x1e>
 8004cb4:	680b      	ldr	r3, [r1, #0]
 8004cb6:	1b5b      	subs	r3, r3, r5
 8004cb8:	d418      	bmi.n	8004cec <_malloc_r+0x8c>
 8004cba:	2b0b      	cmp	r3, #11
 8004cbc:	d90f      	bls.n	8004cde <_malloc_r+0x7e>
 8004cbe:	600b      	str	r3, [r1, #0]
 8004cc0:	50cd      	str	r5, [r1, r3]
 8004cc2:	18cc      	adds	r4, r1, r3
 8004cc4:	4630      	mov	r0, r6
 8004cc6:	f000 fb98 	bl	80053fa <__malloc_unlock>
 8004cca:	f104 000b 	add.w	r0, r4, #11
 8004cce:	1d23      	adds	r3, r4, #4
 8004cd0:	f020 0007 	bic.w	r0, r0, #7
 8004cd4:	1ac3      	subs	r3, r0, r3
 8004cd6:	d0d3      	beq.n	8004c80 <_malloc_r+0x20>
 8004cd8:	425a      	negs	r2, r3
 8004cda:	50e2      	str	r2, [r4, r3]
 8004cdc:	e7d0      	b.n	8004c80 <_malloc_r+0x20>
 8004cde:	428c      	cmp	r4, r1
 8004ce0:	684b      	ldr	r3, [r1, #4]
 8004ce2:	bf16      	itet	ne
 8004ce4:	6063      	strne	r3, [r4, #4]
 8004ce6:	6013      	streq	r3, [r2, #0]
 8004ce8:	460c      	movne	r4, r1
 8004cea:	e7eb      	b.n	8004cc4 <_malloc_r+0x64>
 8004cec:	460c      	mov	r4, r1
 8004cee:	6849      	ldr	r1, [r1, #4]
 8004cf0:	e7cc      	b.n	8004c8c <_malloc_r+0x2c>
 8004cf2:	1cc4      	adds	r4, r0, #3
 8004cf4:	f024 0403 	bic.w	r4, r4, #3
 8004cf8:	42a0      	cmp	r0, r4
 8004cfa:	d005      	beq.n	8004d08 <_malloc_r+0xa8>
 8004cfc:	1a21      	subs	r1, r4, r0
 8004cfe:	4630      	mov	r0, r6
 8004d00:	f000 fad0 	bl	80052a4 <_sbrk_r>
 8004d04:	3001      	adds	r0, #1
 8004d06:	d0cf      	beq.n	8004ca8 <_malloc_r+0x48>
 8004d08:	6025      	str	r5, [r4, #0]
 8004d0a:	e7db      	b.n	8004cc4 <_malloc_r+0x64>
 8004d0c:	20004034 	.word	0x20004034
 8004d10:	20004038 	.word	0x20004038

08004d14 <__sfputc_r>:
 8004d14:	6893      	ldr	r3, [r2, #8]
 8004d16:	3b01      	subs	r3, #1
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	b410      	push	{r4}
 8004d1c:	6093      	str	r3, [r2, #8]
 8004d1e:	da08      	bge.n	8004d32 <__sfputc_r+0x1e>
 8004d20:	6994      	ldr	r4, [r2, #24]
 8004d22:	42a3      	cmp	r3, r4
 8004d24:	db01      	blt.n	8004d2a <__sfputc_r+0x16>
 8004d26:	290a      	cmp	r1, #10
 8004d28:	d103      	bne.n	8004d32 <__sfputc_r+0x1e>
 8004d2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d2e:	f7ff bca3 	b.w	8004678 <__swbuf_r>
 8004d32:	6813      	ldr	r3, [r2, #0]
 8004d34:	1c58      	adds	r0, r3, #1
 8004d36:	6010      	str	r0, [r2, #0]
 8004d38:	7019      	strb	r1, [r3, #0]
 8004d3a:	4608      	mov	r0, r1
 8004d3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <__sfputs_r>:
 8004d42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d44:	4606      	mov	r6, r0
 8004d46:	460f      	mov	r7, r1
 8004d48:	4614      	mov	r4, r2
 8004d4a:	18d5      	adds	r5, r2, r3
 8004d4c:	42ac      	cmp	r4, r5
 8004d4e:	d101      	bne.n	8004d54 <__sfputs_r+0x12>
 8004d50:	2000      	movs	r0, #0
 8004d52:	e007      	b.n	8004d64 <__sfputs_r+0x22>
 8004d54:	463a      	mov	r2, r7
 8004d56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d5a:	4630      	mov	r0, r6
 8004d5c:	f7ff ffda 	bl	8004d14 <__sfputc_r>
 8004d60:	1c43      	adds	r3, r0, #1
 8004d62:	d1f3      	bne.n	8004d4c <__sfputs_r+0xa>
 8004d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d68 <_vfiprintf_r>:
 8004d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d6c:	460c      	mov	r4, r1
 8004d6e:	b09d      	sub	sp, #116	; 0x74
 8004d70:	4617      	mov	r7, r2
 8004d72:	461d      	mov	r5, r3
 8004d74:	4606      	mov	r6, r0
 8004d76:	b118      	cbz	r0, 8004d80 <_vfiprintf_r+0x18>
 8004d78:	6983      	ldr	r3, [r0, #24]
 8004d7a:	b90b      	cbnz	r3, 8004d80 <_vfiprintf_r+0x18>
 8004d7c:	f7ff fe2c 	bl	80049d8 <__sinit>
 8004d80:	4b7c      	ldr	r3, [pc, #496]	; (8004f74 <_vfiprintf_r+0x20c>)
 8004d82:	429c      	cmp	r4, r3
 8004d84:	d158      	bne.n	8004e38 <_vfiprintf_r+0xd0>
 8004d86:	6874      	ldr	r4, [r6, #4]
 8004d88:	89a3      	ldrh	r3, [r4, #12]
 8004d8a:	0718      	lsls	r0, r3, #28
 8004d8c:	d55e      	bpl.n	8004e4c <_vfiprintf_r+0xe4>
 8004d8e:	6923      	ldr	r3, [r4, #16]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d05b      	beq.n	8004e4c <_vfiprintf_r+0xe4>
 8004d94:	2300      	movs	r3, #0
 8004d96:	9309      	str	r3, [sp, #36]	; 0x24
 8004d98:	2320      	movs	r3, #32
 8004d9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d9e:	2330      	movs	r3, #48	; 0x30
 8004da0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004da4:	9503      	str	r5, [sp, #12]
 8004da6:	f04f 0b01 	mov.w	fp, #1
 8004daa:	46b8      	mov	r8, r7
 8004dac:	4645      	mov	r5, r8
 8004dae:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004db2:	b10b      	cbz	r3, 8004db8 <_vfiprintf_r+0x50>
 8004db4:	2b25      	cmp	r3, #37	; 0x25
 8004db6:	d154      	bne.n	8004e62 <_vfiprintf_r+0xfa>
 8004db8:	ebb8 0a07 	subs.w	sl, r8, r7
 8004dbc:	d00b      	beq.n	8004dd6 <_vfiprintf_r+0x6e>
 8004dbe:	4653      	mov	r3, sl
 8004dc0:	463a      	mov	r2, r7
 8004dc2:	4621      	mov	r1, r4
 8004dc4:	4630      	mov	r0, r6
 8004dc6:	f7ff ffbc 	bl	8004d42 <__sfputs_r>
 8004dca:	3001      	adds	r0, #1
 8004dcc:	f000 80c2 	beq.w	8004f54 <_vfiprintf_r+0x1ec>
 8004dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dd2:	4453      	add	r3, sl
 8004dd4:	9309      	str	r3, [sp, #36]	; 0x24
 8004dd6:	f898 3000 	ldrb.w	r3, [r8]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f000 80ba 	beq.w	8004f54 <_vfiprintf_r+0x1ec>
 8004de0:	2300      	movs	r3, #0
 8004de2:	f04f 32ff 	mov.w	r2, #4294967295
 8004de6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004dea:	9304      	str	r3, [sp, #16]
 8004dec:	9307      	str	r3, [sp, #28]
 8004dee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004df2:	931a      	str	r3, [sp, #104]	; 0x68
 8004df4:	46a8      	mov	r8, r5
 8004df6:	2205      	movs	r2, #5
 8004df8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004dfc:	485e      	ldr	r0, [pc, #376]	; (8004f78 <_vfiprintf_r+0x210>)
 8004dfe:	f7fb f9ef 	bl	80001e0 <memchr>
 8004e02:	9b04      	ldr	r3, [sp, #16]
 8004e04:	bb78      	cbnz	r0, 8004e66 <_vfiprintf_r+0xfe>
 8004e06:	06d9      	lsls	r1, r3, #27
 8004e08:	bf44      	itt	mi
 8004e0a:	2220      	movmi	r2, #32
 8004e0c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004e10:	071a      	lsls	r2, r3, #28
 8004e12:	bf44      	itt	mi
 8004e14:	222b      	movmi	r2, #43	; 0x2b
 8004e16:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004e1a:	782a      	ldrb	r2, [r5, #0]
 8004e1c:	2a2a      	cmp	r2, #42	; 0x2a
 8004e1e:	d02a      	beq.n	8004e76 <_vfiprintf_r+0x10e>
 8004e20:	9a07      	ldr	r2, [sp, #28]
 8004e22:	46a8      	mov	r8, r5
 8004e24:	2000      	movs	r0, #0
 8004e26:	250a      	movs	r5, #10
 8004e28:	4641      	mov	r1, r8
 8004e2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e2e:	3b30      	subs	r3, #48	; 0x30
 8004e30:	2b09      	cmp	r3, #9
 8004e32:	d969      	bls.n	8004f08 <_vfiprintf_r+0x1a0>
 8004e34:	b360      	cbz	r0, 8004e90 <_vfiprintf_r+0x128>
 8004e36:	e024      	b.n	8004e82 <_vfiprintf_r+0x11a>
 8004e38:	4b50      	ldr	r3, [pc, #320]	; (8004f7c <_vfiprintf_r+0x214>)
 8004e3a:	429c      	cmp	r4, r3
 8004e3c:	d101      	bne.n	8004e42 <_vfiprintf_r+0xda>
 8004e3e:	68b4      	ldr	r4, [r6, #8]
 8004e40:	e7a2      	b.n	8004d88 <_vfiprintf_r+0x20>
 8004e42:	4b4f      	ldr	r3, [pc, #316]	; (8004f80 <_vfiprintf_r+0x218>)
 8004e44:	429c      	cmp	r4, r3
 8004e46:	bf08      	it	eq
 8004e48:	68f4      	ldreq	r4, [r6, #12]
 8004e4a:	e79d      	b.n	8004d88 <_vfiprintf_r+0x20>
 8004e4c:	4621      	mov	r1, r4
 8004e4e:	4630      	mov	r0, r6
 8004e50:	f7ff fc64 	bl	800471c <__swsetup_r>
 8004e54:	2800      	cmp	r0, #0
 8004e56:	d09d      	beq.n	8004d94 <_vfiprintf_r+0x2c>
 8004e58:	f04f 30ff 	mov.w	r0, #4294967295
 8004e5c:	b01d      	add	sp, #116	; 0x74
 8004e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e62:	46a8      	mov	r8, r5
 8004e64:	e7a2      	b.n	8004dac <_vfiprintf_r+0x44>
 8004e66:	4a44      	ldr	r2, [pc, #272]	; (8004f78 <_vfiprintf_r+0x210>)
 8004e68:	1a80      	subs	r0, r0, r2
 8004e6a:	fa0b f000 	lsl.w	r0, fp, r0
 8004e6e:	4318      	orrs	r0, r3
 8004e70:	9004      	str	r0, [sp, #16]
 8004e72:	4645      	mov	r5, r8
 8004e74:	e7be      	b.n	8004df4 <_vfiprintf_r+0x8c>
 8004e76:	9a03      	ldr	r2, [sp, #12]
 8004e78:	1d11      	adds	r1, r2, #4
 8004e7a:	6812      	ldr	r2, [r2, #0]
 8004e7c:	9103      	str	r1, [sp, #12]
 8004e7e:	2a00      	cmp	r2, #0
 8004e80:	db01      	blt.n	8004e86 <_vfiprintf_r+0x11e>
 8004e82:	9207      	str	r2, [sp, #28]
 8004e84:	e004      	b.n	8004e90 <_vfiprintf_r+0x128>
 8004e86:	4252      	negs	r2, r2
 8004e88:	f043 0302 	orr.w	r3, r3, #2
 8004e8c:	9207      	str	r2, [sp, #28]
 8004e8e:	9304      	str	r3, [sp, #16]
 8004e90:	f898 3000 	ldrb.w	r3, [r8]
 8004e94:	2b2e      	cmp	r3, #46	; 0x2e
 8004e96:	d10e      	bne.n	8004eb6 <_vfiprintf_r+0x14e>
 8004e98:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004e9c:	2b2a      	cmp	r3, #42	; 0x2a
 8004e9e:	d138      	bne.n	8004f12 <_vfiprintf_r+0x1aa>
 8004ea0:	9b03      	ldr	r3, [sp, #12]
 8004ea2:	1d1a      	adds	r2, r3, #4
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	9203      	str	r2, [sp, #12]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	bfb8      	it	lt
 8004eac:	f04f 33ff 	movlt.w	r3, #4294967295
 8004eb0:	f108 0802 	add.w	r8, r8, #2
 8004eb4:	9305      	str	r3, [sp, #20]
 8004eb6:	4d33      	ldr	r5, [pc, #204]	; (8004f84 <_vfiprintf_r+0x21c>)
 8004eb8:	f898 1000 	ldrb.w	r1, [r8]
 8004ebc:	2203      	movs	r2, #3
 8004ebe:	4628      	mov	r0, r5
 8004ec0:	f7fb f98e 	bl	80001e0 <memchr>
 8004ec4:	b140      	cbz	r0, 8004ed8 <_vfiprintf_r+0x170>
 8004ec6:	2340      	movs	r3, #64	; 0x40
 8004ec8:	1b40      	subs	r0, r0, r5
 8004eca:	fa03 f000 	lsl.w	r0, r3, r0
 8004ece:	9b04      	ldr	r3, [sp, #16]
 8004ed0:	4303      	orrs	r3, r0
 8004ed2:	f108 0801 	add.w	r8, r8, #1
 8004ed6:	9304      	str	r3, [sp, #16]
 8004ed8:	f898 1000 	ldrb.w	r1, [r8]
 8004edc:	482a      	ldr	r0, [pc, #168]	; (8004f88 <_vfiprintf_r+0x220>)
 8004ede:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ee2:	2206      	movs	r2, #6
 8004ee4:	f108 0701 	add.w	r7, r8, #1
 8004ee8:	f7fb f97a 	bl	80001e0 <memchr>
 8004eec:	2800      	cmp	r0, #0
 8004eee:	d037      	beq.n	8004f60 <_vfiprintf_r+0x1f8>
 8004ef0:	4b26      	ldr	r3, [pc, #152]	; (8004f8c <_vfiprintf_r+0x224>)
 8004ef2:	bb1b      	cbnz	r3, 8004f3c <_vfiprintf_r+0x1d4>
 8004ef4:	9b03      	ldr	r3, [sp, #12]
 8004ef6:	3307      	adds	r3, #7
 8004ef8:	f023 0307 	bic.w	r3, r3, #7
 8004efc:	3308      	adds	r3, #8
 8004efe:	9303      	str	r3, [sp, #12]
 8004f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f02:	444b      	add	r3, r9
 8004f04:	9309      	str	r3, [sp, #36]	; 0x24
 8004f06:	e750      	b.n	8004daa <_vfiprintf_r+0x42>
 8004f08:	fb05 3202 	mla	r2, r5, r2, r3
 8004f0c:	2001      	movs	r0, #1
 8004f0e:	4688      	mov	r8, r1
 8004f10:	e78a      	b.n	8004e28 <_vfiprintf_r+0xc0>
 8004f12:	2300      	movs	r3, #0
 8004f14:	f108 0801 	add.w	r8, r8, #1
 8004f18:	9305      	str	r3, [sp, #20]
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	250a      	movs	r5, #10
 8004f1e:	4640      	mov	r0, r8
 8004f20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f24:	3a30      	subs	r2, #48	; 0x30
 8004f26:	2a09      	cmp	r2, #9
 8004f28:	d903      	bls.n	8004f32 <_vfiprintf_r+0x1ca>
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d0c3      	beq.n	8004eb6 <_vfiprintf_r+0x14e>
 8004f2e:	9105      	str	r1, [sp, #20]
 8004f30:	e7c1      	b.n	8004eb6 <_vfiprintf_r+0x14e>
 8004f32:	fb05 2101 	mla	r1, r5, r1, r2
 8004f36:	2301      	movs	r3, #1
 8004f38:	4680      	mov	r8, r0
 8004f3a:	e7f0      	b.n	8004f1e <_vfiprintf_r+0x1b6>
 8004f3c:	ab03      	add	r3, sp, #12
 8004f3e:	9300      	str	r3, [sp, #0]
 8004f40:	4622      	mov	r2, r4
 8004f42:	4b13      	ldr	r3, [pc, #76]	; (8004f90 <_vfiprintf_r+0x228>)
 8004f44:	a904      	add	r1, sp, #16
 8004f46:	4630      	mov	r0, r6
 8004f48:	f3af 8000 	nop.w
 8004f4c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004f50:	4681      	mov	r9, r0
 8004f52:	d1d5      	bne.n	8004f00 <_vfiprintf_r+0x198>
 8004f54:	89a3      	ldrh	r3, [r4, #12]
 8004f56:	065b      	lsls	r3, r3, #25
 8004f58:	f53f af7e 	bmi.w	8004e58 <_vfiprintf_r+0xf0>
 8004f5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f5e:	e77d      	b.n	8004e5c <_vfiprintf_r+0xf4>
 8004f60:	ab03      	add	r3, sp, #12
 8004f62:	9300      	str	r3, [sp, #0]
 8004f64:	4622      	mov	r2, r4
 8004f66:	4b0a      	ldr	r3, [pc, #40]	; (8004f90 <_vfiprintf_r+0x228>)
 8004f68:	a904      	add	r1, sp, #16
 8004f6a:	4630      	mov	r0, r6
 8004f6c:	f000 f888 	bl	8005080 <_printf_i>
 8004f70:	e7ec      	b.n	8004f4c <_vfiprintf_r+0x1e4>
 8004f72:	bf00      	nop
 8004f74:	080054ec 	.word	0x080054ec
 8004f78:	0800552c 	.word	0x0800552c
 8004f7c:	0800550c 	.word	0x0800550c
 8004f80:	080054cc 	.word	0x080054cc
 8004f84:	08005532 	.word	0x08005532
 8004f88:	08005536 	.word	0x08005536
 8004f8c:	00000000 	.word	0x00000000
 8004f90:	08004d43 	.word	0x08004d43

08004f94 <_printf_common>:
 8004f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f98:	4691      	mov	r9, r2
 8004f9a:	461f      	mov	r7, r3
 8004f9c:	688a      	ldr	r2, [r1, #8]
 8004f9e:	690b      	ldr	r3, [r1, #16]
 8004fa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	bfb8      	it	lt
 8004fa8:	4613      	movlt	r3, r2
 8004faa:	f8c9 3000 	str.w	r3, [r9]
 8004fae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004fb2:	4606      	mov	r6, r0
 8004fb4:	460c      	mov	r4, r1
 8004fb6:	b112      	cbz	r2, 8004fbe <_printf_common+0x2a>
 8004fb8:	3301      	adds	r3, #1
 8004fba:	f8c9 3000 	str.w	r3, [r9]
 8004fbe:	6823      	ldr	r3, [r4, #0]
 8004fc0:	0699      	lsls	r1, r3, #26
 8004fc2:	bf42      	ittt	mi
 8004fc4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004fc8:	3302      	addmi	r3, #2
 8004fca:	f8c9 3000 	strmi.w	r3, [r9]
 8004fce:	6825      	ldr	r5, [r4, #0]
 8004fd0:	f015 0506 	ands.w	r5, r5, #6
 8004fd4:	d107      	bne.n	8004fe6 <_printf_common+0x52>
 8004fd6:	f104 0a19 	add.w	sl, r4, #25
 8004fda:	68e3      	ldr	r3, [r4, #12]
 8004fdc:	f8d9 2000 	ldr.w	r2, [r9]
 8004fe0:	1a9b      	subs	r3, r3, r2
 8004fe2:	42ab      	cmp	r3, r5
 8004fe4:	dc28      	bgt.n	8005038 <_printf_common+0xa4>
 8004fe6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004fea:	6822      	ldr	r2, [r4, #0]
 8004fec:	3300      	adds	r3, #0
 8004fee:	bf18      	it	ne
 8004ff0:	2301      	movne	r3, #1
 8004ff2:	0692      	lsls	r2, r2, #26
 8004ff4:	d42d      	bmi.n	8005052 <_printf_common+0xbe>
 8004ff6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ffa:	4639      	mov	r1, r7
 8004ffc:	4630      	mov	r0, r6
 8004ffe:	47c0      	blx	r8
 8005000:	3001      	adds	r0, #1
 8005002:	d020      	beq.n	8005046 <_printf_common+0xb2>
 8005004:	6823      	ldr	r3, [r4, #0]
 8005006:	68e5      	ldr	r5, [r4, #12]
 8005008:	f8d9 2000 	ldr.w	r2, [r9]
 800500c:	f003 0306 	and.w	r3, r3, #6
 8005010:	2b04      	cmp	r3, #4
 8005012:	bf08      	it	eq
 8005014:	1aad      	subeq	r5, r5, r2
 8005016:	68a3      	ldr	r3, [r4, #8]
 8005018:	6922      	ldr	r2, [r4, #16]
 800501a:	bf0c      	ite	eq
 800501c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005020:	2500      	movne	r5, #0
 8005022:	4293      	cmp	r3, r2
 8005024:	bfc4      	itt	gt
 8005026:	1a9b      	subgt	r3, r3, r2
 8005028:	18ed      	addgt	r5, r5, r3
 800502a:	f04f 0900 	mov.w	r9, #0
 800502e:	341a      	adds	r4, #26
 8005030:	454d      	cmp	r5, r9
 8005032:	d11a      	bne.n	800506a <_printf_common+0xd6>
 8005034:	2000      	movs	r0, #0
 8005036:	e008      	b.n	800504a <_printf_common+0xb6>
 8005038:	2301      	movs	r3, #1
 800503a:	4652      	mov	r2, sl
 800503c:	4639      	mov	r1, r7
 800503e:	4630      	mov	r0, r6
 8005040:	47c0      	blx	r8
 8005042:	3001      	adds	r0, #1
 8005044:	d103      	bne.n	800504e <_printf_common+0xba>
 8005046:	f04f 30ff 	mov.w	r0, #4294967295
 800504a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800504e:	3501      	adds	r5, #1
 8005050:	e7c3      	b.n	8004fda <_printf_common+0x46>
 8005052:	18e1      	adds	r1, r4, r3
 8005054:	1c5a      	adds	r2, r3, #1
 8005056:	2030      	movs	r0, #48	; 0x30
 8005058:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800505c:	4422      	add	r2, r4
 800505e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005062:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005066:	3302      	adds	r3, #2
 8005068:	e7c5      	b.n	8004ff6 <_printf_common+0x62>
 800506a:	2301      	movs	r3, #1
 800506c:	4622      	mov	r2, r4
 800506e:	4639      	mov	r1, r7
 8005070:	4630      	mov	r0, r6
 8005072:	47c0      	blx	r8
 8005074:	3001      	adds	r0, #1
 8005076:	d0e6      	beq.n	8005046 <_printf_common+0xb2>
 8005078:	f109 0901 	add.w	r9, r9, #1
 800507c:	e7d8      	b.n	8005030 <_printf_common+0x9c>
	...

08005080 <_printf_i>:
 8005080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005084:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005088:	460c      	mov	r4, r1
 800508a:	7e09      	ldrb	r1, [r1, #24]
 800508c:	b085      	sub	sp, #20
 800508e:	296e      	cmp	r1, #110	; 0x6e
 8005090:	4617      	mov	r7, r2
 8005092:	4606      	mov	r6, r0
 8005094:	4698      	mov	r8, r3
 8005096:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005098:	f000 80b3 	beq.w	8005202 <_printf_i+0x182>
 800509c:	d822      	bhi.n	80050e4 <_printf_i+0x64>
 800509e:	2963      	cmp	r1, #99	; 0x63
 80050a0:	d036      	beq.n	8005110 <_printf_i+0x90>
 80050a2:	d80a      	bhi.n	80050ba <_printf_i+0x3a>
 80050a4:	2900      	cmp	r1, #0
 80050a6:	f000 80b9 	beq.w	800521c <_printf_i+0x19c>
 80050aa:	2958      	cmp	r1, #88	; 0x58
 80050ac:	f000 8083 	beq.w	80051b6 <_printf_i+0x136>
 80050b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050b4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80050b8:	e032      	b.n	8005120 <_printf_i+0xa0>
 80050ba:	2964      	cmp	r1, #100	; 0x64
 80050bc:	d001      	beq.n	80050c2 <_printf_i+0x42>
 80050be:	2969      	cmp	r1, #105	; 0x69
 80050c0:	d1f6      	bne.n	80050b0 <_printf_i+0x30>
 80050c2:	6820      	ldr	r0, [r4, #0]
 80050c4:	6813      	ldr	r3, [r2, #0]
 80050c6:	0605      	lsls	r5, r0, #24
 80050c8:	f103 0104 	add.w	r1, r3, #4
 80050cc:	d52a      	bpl.n	8005124 <_printf_i+0xa4>
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6011      	str	r1, [r2, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	da03      	bge.n	80050de <_printf_i+0x5e>
 80050d6:	222d      	movs	r2, #45	; 0x2d
 80050d8:	425b      	negs	r3, r3
 80050da:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80050de:	486f      	ldr	r0, [pc, #444]	; (800529c <_printf_i+0x21c>)
 80050e0:	220a      	movs	r2, #10
 80050e2:	e039      	b.n	8005158 <_printf_i+0xd8>
 80050e4:	2973      	cmp	r1, #115	; 0x73
 80050e6:	f000 809d 	beq.w	8005224 <_printf_i+0x1a4>
 80050ea:	d808      	bhi.n	80050fe <_printf_i+0x7e>
 80050ec:	296f      	cmp	r1, #111	; 0x6f
 80050ee:	d020      	beq.n	8005132 <_printf_i+0xb2>
 80050f0:	2970      	cmp	r1, #112	; 0x70
 80050f2:	d1dd      	bne.n	80050b0 <_printf_i+0x30>
 80050f4:	6823      	ldr	r3, [r4, #0]
 80050f6:	f043 0320 	orr.w	r3, r3, #32
 80050fa:	6023      	str	r3, [r4, #0]
 80050fc:	e003      	b.n	8005106 <_printf_i+0x86>
 80050fe:	2975      	cmp	r1, #117	; 0x75
 8005100:	d017      	beq.n	8005132 <_printf_i+0xb2>
 8005102:	2978      	cmp	r1, #120	; 0x78
 8005104:	d1d4      	bne.n	80050b0 <_printf_i+0x30>
 8005106:	2378      	movs	r3, #120	; 0x78
 8005108:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800510c:	4864      	ldr	r0, [pc, #400]	; (80052a0 <_printf_i+0x220>)
 800510e:	e055      	b.n	80051bc <_printf_i+0x13c>
 8005110:	6813      	ldr	r3, [r2, #0]
 8005112:	1d19      	adds	r1, r3, #4
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	6011      	str	r1, [r2, #0]
 8005118:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800511c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005120:	2301      	movs	r3, #1
 8005122:	e08c      	b.n	800523e <_printf_i+0x1be>
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	6011      	str	r1, [r2, #0]
 8005128:	f010 0f40 	tst.w	r0, #64	; 0x40
 800512c:	bf18      	it	ne
 800512e:	b21b      	sxthne	r3, r3
 8005130:	e7cf      	b.n	80050d2 <_printf_i+0x52>
 8005132:	6813      	ldr	r3, [r2, #0]
 8005134:	6825      	ldr	r5, [r4, #0]
 8005136:	1d18      	adds	r0, r3, #4
 8005138:	6010      	str	r0, [r2, #0]
 800513a:	0628      	lsls	r0, r5, #24
 800513c:	d501      	bpl.n	8005142 <_printf_i+0xc2>
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	e002      	b.n	8005148 <_printf_i+0xc8>
 8005142:	0668      	lsls	r0, r5, #25
 8005144:	d5fb      	bpl.n	800513e <_printf_i+0xbe>
 8005146:	881b      	ldrh	r3, [r3, #0]
 8005148:	4854      	ldr	r0, [pc, #336]	; (800529c <_printf_i+0x21c>)
 800514a:	296f      	cmp	r1, #111	; 0x6f
 800514c:	bf14      	ite	ne
 800514e:	220a      	movne	r2, #10
 8005150:	2208      	moveq	r2, #8
 8005152:	2100      	movs	r1, #0
 8005154:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005158:	6865      	ldr	r5, [r4, #4]
 800515a:	60a5      	str	r5, [r4, #8]
 800515c:	2d00      	cmp	r5, #0
 800515e:	f2c0 8095 	blt.w	800528c <_printf_i+0x20c>
 8005162:	6821      	ldr	r1, [r4, #0]
 8005164:	f021 0104 	bic.w	r1, r1, #4
 8005168:	6021      	str	r1, [r4, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d13d      	bne.n	80051ea <_printf_i+0x16a>
 800516e:	2d00      	cmp	r5, #0
 8005170:	f040 808e 	bne.w	8005290 <_printf_i+0x210>
 8005174:	4665      	mov	r5, ip
 8005176:	2a08      	cmp	r2, #8
 8005178:	d10b      	bne.n	8005192 <_printf_i+0x112>
 800517a:	6823      	ldr	r3, [r4, #0]
 800517c:	07db      	lsls	r3, r3, #31
 800517e:	d508      	bpl.n	8005192 <_printf_i+0x112>
 8005180:	6923      	ldr	r3, [r4, #16]
 8005182:	6862      	ldr	r2, [r4, #4]
 8005184:	429a      	cmp	r2, r3
 8005186:	bfde      	ittt	le
 8005188:	2330      	movle	r3, #48	; 0x30
 800518a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800518e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005192:	ebac 0305 	sub.w	r3, ip, r5
 8005196:	6123      	str	r3, [r4, #16]
 8005198:	f8cd 8000 	str.w	r8, [sp]
 800519c:	463b      	mov	r3, r7
 800519e:	aa03      	add	r2, sp, #12
 80051a0:	4621      	mov	r1, r4
 80051a2:	4630      	mov	r0, r6
 80051a4:	f7ff fef6 	bl	8004f94 <_printf_common>
 80051a8:	3001      	adds	r0, #1
 80051aa:	d14d      	bne.n	8005248 <_printf_i+0x1c8>
 80051ac:	f04f 30ff 	mov.w	r0, #4294967295
 80051b0:	b005      	add	sp, #20
 80051b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80051b6:	4839      	ldr	r0, [pc, #228]	; (800529c <_printf_i+0x21c>)
 80051b8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80051bc:	6813      	ldr	r3, [r2, #0]
 80051be:	6821      	ldr	r1, [r4, #0]
 80051c0:	1d1d      	adds	r5, r3, #4
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	6015      	str	r5, [r2, #0]
 80051c6:	060a      	lsls	r2, r1, #24
 80051c8:	d50b      	bpl.n	80051e2 <_printf_i+0x162>
 80051ca:	07ca      	lsls	r2, r1, #31
 80051cc:	bf44      	itt	mi
 80051ce:	f041 0120 	orrmi.w	r1, r1, #32
 80051d2:	6021      	strmi	r1, [r4, #0]
 80051d4:	b91b      	cbnz	r3, 80051de <_printf_i+0x15e>
 80051d6:	6822      	ldr	r2, [r4, #0]
 80051d8:	f022 0220 	bic.w	r2, r2, #32
 80051dc:	6022      	str	r2, [r4, #0]
 80051de:	2210      	movs	r2, #16
 80051e0:	e7b7      	b.n	8005152 <_printf_i+0xd2>
 80051e2:	064d      	lsls	r5, r1, #25
 80051e4:	bf48      	it	mi
 80051e6:	b29b      	uxthmi	r3, r3
 80051e8:	e7ef      	b.n	80051ca <_printf_i+0x14a>
 80051ea:	4665      	mov	r5, ip
 80051ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80051f0:	fb02 3311 	mls	r3, r2, r1, r3
 80051f4:	5cc3      	ldrb	r3, [r0, r3]
 80051f6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80051fa:	460b      	mov	r3, r1
 80051fc:	2900      	cmp	r1, #0
 80051fe:	d1f5      	bne.n	80051ec <_printf_i+0x16c>
 8005200:	e7b9      	b.n	8005176 <_printf_i+0xf6>
 8005202:	6813      	ldr	r3, [r2, #0]
 8005204:	6825      	ldr	r5, [r4, #0]
 8005206:	6961      	ldr	r1, [r4, #20]
 8005208:	1d18      	adds	r0, r3, #4
 800520a:	6010      	str	r0, [r2, #0]
 800520c:	0628      	lsls	r0, r5, #24
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	d501      	bpl.n	8005216 <_printf_i+0x196>
 8005212:	6019      	str	r1, [r3, #0]
 8005214:	e002      	b.n	800521c <_printf_i+0x19c>
 8005216:	066a      	lsls	r2, r5, #25
 8005218:	d5fb      	bpl.n	8005212 <_printf_i+0x192>
 800521a:	8019      	strh	r1, [r3, #0]
 800521c:	2300      	movs	r3, #0
 800521e:	6123      	str	r3, [r4, #16]
 8005220:	4665      	mov	r5, ip
 8005222:	e7b9      	b.n	8005198 <_printf_i+0x118>
 8005224:	6813      	ldr	r3, [r2, #0]
 8005226:	1d19      	adds	r1, r3, #4
 8005228:	6011      	str	r1, [r2, #0]
 800522a:	681d      	ldr	r5, [r3, #0]
 800522c:	6862      	ldr	r2, [r4, #4]
 800522e:	2100      	movs	r1, #0
 8005230:	4628      	mov	r0, r5
 8005232:	f7fa ffd5 	bl	80001e0 <memchr>
 8005236:	b108      	cbz	r0, 800523c <_printf_i+0x1bc>
 8005238:	1b40      	subs	r0, r0, r5
 800523a:	6060      	str	r0, [r4, #4]
 800523c:	6863      	ldr	r3, [r4, #4]
 800523e:	6123      	str	r3, [r4, #16]
 8005240:	2300      	movs	r3, #0
 8005242:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005246:	e7a7      	b.n	8005198 <_printf_i+0x118>
 8005248:	6923      	ldr	r3, [r4, #16]
 800524a:	462a      	mov	r2, r5
 800524c:	4639      	mov	r1, r7
 800524e:	4630      	mov	r0, r6
 8005250:	47c0      	blx	r8
 8005252:	3001      	adds	r0, #1
 8005254:	d0aa      	beq.n	80051ac <_printf_i+0x12c>
 8005256:	6823      	ldr	r3, [r4, #0]
 8005258:	079b      	lsls	r3, r3, #30
 800525a:	d413      	bmi.n	8005284 <_printf_i+0x204>
 800525c:	68e0      	ldr	r0, [r4, #12]
 800525e:	9b03      	ldr	r3, [sp, #12]
 8005260:	4298      	cmp	r0, r3
 8005262:	bfb8      	it	lt
 8005264:	4618      	movlt	r0, r3
 8005266:	e7a3      	b.n	80051b0 <_printf_i+0x130>
 8005268:	2301      	movs	r3, #1
 800526a:	464a      	mov	r2, r9
 800526c:	4639      	mov	r1, r7
 800526e:	4630      	mov	r0, r6
 8005270:	47c0      	blx	r8
 8005272:	3001      	adds	r0, #1
 8005274:	d09a      	beq.n	80051ac <_printf_i+0x12c>
 8005276:	3501      	adds	r5, #1
 8005278:	68e3      	ldr	r3, [r4, #12]
 800527a:	9a03      	ldr	r2, [sp, #12]
 800527c:	1a9b      	subs	r3, r3, r2
 800527e:	42ab      	cmp	r3, r5
 8005280:	dcf2      	bgt.n	8005268 <_printf_i+0x1e8>
 8005282:	e7eb      	b.n	800525c <_printf_i+0x1dc>
 8005284:	2500      	movs	r5, #0
 8005286:	f104 0919 	add.w	r9, r4, #25
 800528a:	e7f5      	b.n	8005278 <_printf_i+0x1f8>
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1ac      	bne.n	80051ea <_printf_i+0x16a>
 8005290:	7803      	ldrb	r3, [r0, #0]
 8005292:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005296:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800529a:	e76c      	b.n	8005176 <_printf_i+0xf6>
 800529c:	0800553d 	.word	0x0800553d
 80052a0:	0800554e 	.word	0x0800554e

080052a4 <_sbrk_r>:
 80052a4:	b538      	push	{r3, r4, r5, lr}
 80052a6:	4c06      	ldr	r4, [pc, #24]	; (80052c0 <_sbrk_r+0x1c>)
 80052a8:	2300      	movs	r3, #0
 80052aa:	4605      	mov	r5, r0
 80052ac:	4608      	mov	r0, r1
 80052ae:	6023      	str	r3, [r4, #0]
 80052b0:	f7fb fd28 	bl	8000d04 <_sbrk>
 80052b4:	1c43      	adds	r3, r0, #1
 80052b6:	d102      	bne.n	80052be <_sbrk_r+0x1a>
 80052b8:	6823      	ldr	r3, [r4, #0]
 80052ba:	b103      	cbz	r3, 80052be <_sbrk_r+0x1a>
 80052bc:	602b      	str	r3, [r5, #0]
 80052be:	bd38      	pop	{r3, r4, r5, pc}
 80052c0:	2000457c 	.word	0x2000457c

080052c4 <__sread>:
 80052c4:	b510      	push	{r4, lr}
 80052c6:	460c      	mov	r4, r1
 80052c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052cc:	f000 f896 	bl	80053fc <_read_r>
 80052d0:	2800      	cmp	r0, #0
 80052d2:	bfab      	itete	ge
 80052d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80052d6:	89a3      	ldrhlt	r3, [r4, #12]
 80052d8:	181b      	addge	r3, r3, r0
 80052da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80052de:	bfac      	ite	ge
 80052e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80052e2:	81a3      	strhlt	r3, [r4, #12]
 80052e4:	bd10      	pop	{r4, pc}

080052e6 <__swrite>:
 80052e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052ea:	461f      	mov	r7, r3
 80052ec:	898b      	ldrh	r3, [r1, #12]
 80052ee:	05db      	lsls	r3, r3, #23
 80052f0:	4605      	mov	r5, r0
 80052f2:	460c      	mov	r4, r1
 80052f4:	4616      	mov	r6, r2
 80052f6:	d505      	bpl.n	8005304 <__swrite+0x1e>
 80052f8:	2302      	movs	r3, #2
 80052fa:	2200      	movs	r2, #0
 80052fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005300:	f000 f868 	bl	80053d4 <_lseek_r>
 8005304:	89a3      	ldrh	r3, [r4, #12]
 8005306:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800530a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800530e:	81a3      	strh	r3, [r4, #12]
 8005310:	4632      	mov	r2, r6
 8005312:	463b      	mov	r3, r7
 8005314:	4628      	mov	r0, r5
 8005316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800531a:	f000 b817 	b.w	800534c <_write_r>

0800531e <__sseek>:
 800531e:	b510      	push	{r4, lr}
 8005320:	460c      	mov	r4, r1
 8005322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005326:	f000 f855 	bl	80053d4 <_lseek_r>
 800532a:	1c43      	adds	r3, r0, #1
 800532c:	89a3      	ldrh	r3, [r4, #12]
 800532e:	bf15      	itete	ne
 8005330:	6560      	strne	r0, [r4, #84]	; 0x54
 8005332:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005336:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800533a:	81a3      	strheq	r3, [r4, #12]
 800533c:	bf18      	it	ne
 800533e:	81a3      	strhne	r3, [r4, #12]
 8005340:	bd10      	pop	{r4, pc}

08005342 <__sclose>:
 8005342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005346:	f000 b813 	b.w	8005370 <_close_r>
	...

0800534c <_write_r>:
 800534c:	b538      	push	{r3, r4, r5, lr}
 800534e:	4c07      	ldr	r4, [pc, #28]	; (800536c <_write_r+0x20>)
 8005350:	4605      	mov	r5, r0
 8005352:	4608      	mov	r0, r1
 8005354:	4611      	mov	r1, r2
 8005356:	2200      	movs	r2, #0
 8005358:	6022      	str	r2, [r4, #0]
 800535a:	461a      	mov	r2, r3
 800535c:	f7fb fb5e 	bl	8000a1c <_write>
 8005360:	1c43      	adds	r3, r0, #1
 8005362:	d102      	bne.n	800536a <_write_r+0x1e>
 8005364:	6823      	ldr	r3, [r4, #0]
 8005366:	b103      	cbz	r3, 800536a <_write_r+0x1e>
 8005368:	602b      	str	r3, [r5, #0]
 800536a:	bd38      	pop	{r3, r4, r5, pc}
 800536c:	2000457c 	.word	0x2000457c

08005370 <_close_r>:
 8005370:	b538      	push	{r3, r4, r5, lr}
 8005372:	4c06      	ldr	r4, [pc, #24]	; (800538c <_close_r+0x1c>)
 8005374:	2300      	movs	r3, #0
 8005376:	4605      	mov	r5, r0
 8005378:	4608      	mov	r0, r1
 800537a:	6023      	str	r3, [r4, #0]
 800537c:	f7fb fb7a 	bl	8000a74 <_close>
 8005380:	1c43      	adds	r3, r0, #1
 8005382:	d102      	bne.n	800538a <_close_r+0x1a>
 8005384:	6823      	ldr	r3, [r4, #0]
 8005386:	b103      	cbz	r3, 800538a <_close_r+0x1a>
 8005388:	602b      	str	r3, [r5, #0]
 800538a:	bd38      	pop	{r3, r4, r5, pc}
 800538c:	2000457c 	.word	0x2000457c

08005390 <_fstat_r>:
 8005390:	b538      	push	{r3, r4, r5, lr}
 8005392:	4c07      	ldr	r4, [pc, #28]	; (80053b0 <_fstat_r+0x20>)
 8005394:	2300      	movs	r3, #0
 8005396:	4605      	mov	r5, r0
 8005398:	4608      	mov	r0, r1
 800539a:	4611      	mov	r1, r2
 800539c:	6023      	str	r3, [r4, #0]
 800539e:	f7fb fbb9 	bl	8000b14 <_fstat>
 80053a2:	1c43      	adds	r3, r0, #1
 80053a4:	d102      	bne.n	80053ac <_fstat_r+0x1c>
 80053a6:	6823      	ldr	r3, [r4, #0]
 80053a8:	b103      	cbz	r3, 80053ac <_fstat_r+0x1c>
 80053aa:	602b      	str	r3, [r5, #0]
 80053ac:	bd38      	pop	{r3, r4, r5, pc}
 80053ae:	bf00      	nop
 80053b0:	2000457c 	.word	0x2000457c

080053b4 <_isatty_r>:
 80053b4:	b538      	push	{r3, r4, r5, lr}
 80053b6:	4c06      	ldr	r4, [pc, #24]	; (80053d0 <_isatty_r+0x1c>)
 80053b8:	2300      	movs	r3, #0
 80053ba:	4605      	mov	r5, r0
 80053bc:	4608      	mov	r0, r1
 80053be:	6023      	str	r3, [r4, #0]
 80053c0:	f7fb fb16 	bl	80009f0 <_isatty>
 80053c4:	1c43      	adds	r3, r0, #1
 80053c6:	d102      	bne.n	80053ce <_isatty_r+0x1a>
 80053c8:	6823      	ldr	r3, [r4, #0]
 80053ca:	b103      	cbz	r3, 80053ce <_isatty_r+0x1a>
 80053cc:	602b      	str	r3, [r5, #0]
 80053ce:	bd38      	pop	{r3, r4, r5, pc}
 80053d0:	2000457c 	.word	0x2000457c

080053d4 <_lseek_r>:
 80053d4:	b538      	push	{r3, r4, r5, lr}
 80053d6:	4c07      	ldr	r4, [pc, #28]	; (80053f4 <_lseek_r+0x20>)
 80053d8:	4605      	mov	r5, r0
 80053da:	4608      	mov	r0, r1
 80053dc:	4611      	mov	r1, r2
 80053de:	2200      	movs	r2, #0
 80053e0:	6022      	str	r2, [r4, #0]
 80053e2:	461a      	mov	r2, r3
 80053e4:	f7fb fb5d 	bl	8000aa2 <_lseek>
 80053e8:	1c43      	adds	r3, r0, #1
 80053ea:	d102      	bne.n	80053f2 <_lseek_r+0x1e>
 80053ec:	6823      	ldr	r3, [r4, #0]
 80053ee:	b103      	cbz	r3, 80053f2 <_lseek_r+0x1e>
 80053f0:	602b      	str	r3, [r5, #0]
 80053f2:	bd38      	pop	{r3, r4, r5, pc}
 80053f4:	2000457c 	.word	0x2000457c

080053f8 <__malloc_lock>:
 80053f8:	4770      	bx	lr

080053fa <__malloc_unlock>:
 80053fa:	4770      	bx	lr

080053fc <_read_r>:
 80053fc:	b538      	push	{r3, r4, r5, lr}
 80053fe:	4c07      	ldr	r4, [pc, #28]	; (800541c <_read_r+0x20>)
 8005400:	4605      	mov	r5, r0
 8005402:	4608      	mov	r0, r1
 8005404:	4611      	mov	r1, r2
 8005406:	2200      	movs	r2, #0
 8005408:	6022      	str	r2, [r4, #0]
 800540a:	461a      	mov	r2, r3
 800540c:	f7fb fb5a 	bl	8000ac4 <_read>
 8005410:	1c43      	adds	r3, r0, #1
 8005412:	d102      	bne.n	800541a <_read_r+0x1e>
 8005414:	6823      	ldr	r3, [r4, #0]
 8005416:	b103      	cbz	r3, 800541a <_read_r+0x1e>
 8005418:	602b      	str	r3, [r5, #0]
 800541a:	bd38      	pop	{r3, r4, r5, pc}
 800541c:	2000457c 	.word	0x2000457c

08005420 <_init>:
 8005420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005422:	bf00      	nop
 8005424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005426:	bc08      	pop	{r3}
 8005428:	469e      	mov	lr, r3
 800542a:	4770      	bx	lr

0800542c <_fini>:
 800542c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800542e:	bf00      	nop
 8005430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005432:	bc08      	pop	{r3}
 8005434:	469e      	mov	lr, r3
 8005436:	4770      	bx	lr
