
Jeffs Hardware Testbed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003de8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003f88  08003f88  00013f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ff8  08003ff8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003ff8  08003ff8  00013ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004000  08004000  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004000  08004000  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004004  08004004  00014004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000044f8  20000010  08004018  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004508  08004018  00024508  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fdef  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002714  00000000  00000000  0002fe2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c78  00000000  00000000  00032548  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b40  00000000  00000000  000331c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017faa  00000000  00000000  00033d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bb65  00000000  00000000  0004bcaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00092af4  00000000  00000000  0005780f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ea303  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003198  00000000  00000000  000ea380  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003f70 	.word	0x08003f70

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08003f70 	.word	0x08003f70

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <vApplicationGetIdleTaskMemory+0x2c>)
 80004f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	4a06      	ldr	r2, [pc, #24]	; (8000510 <vApplicationGetIdleTaskMemory+0x30>)
 80004f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	2000002c 	.word	0x2000002c
 8000510:	20000080 	.word	0x20000080

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b0aa      	sub	sp, #168	; 0xa8
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fabd 	bl	8000a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f83d 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f957 	bl	80007d4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000526:	f000 f897 	bl	8000658 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800052a:	f000 f929 	bl	8000780 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  genericDevice_t button = MS5607_init(0,0,0);
 800052e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000532:	2300      	movs	r3, #0
 8000534:	2200      	movs	r2, #0
 8000536:	2100      	movs	r1, #0
 8000538:	f002 f9b0 	bl	800289c <MS5607_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of myTask01 */
  osThreadStaticDef(myTask01, StartDefaultTask, osPriorityNormal, 0, 128, myTask01Buffer, &myTask01ControlBlock);
 800053c:	4b13      	ldr	r3, [pc, #76]	; (800058c <main+0x78>)
 800053e:	f107 041c 	add.w	r4, r7, #28
 8000542:	461d      	mov	r5, r3
 8000544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000548:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800054c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask01Handle = osThreadCreate(osThread(myTask01), NULL);
 8000550:	f107 031c 	add.w	r3, r7, #28
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f002 fab4 	bl	8002ac4 <osThreadCreate>
 800055c:	4602      	mov	r2, r0
 800055e:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <main+0x7c>)
 8000560:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask02 */
  osThreadStaticDef(myTask02, StartTask02, osPriorityRealtime, 0, 128, myTask02Buffer, &myTask02ControlBlock);
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <main+0x80>)
 8000564:	463c      	mov	r4, r7
 8000566:	461d      	mov	r5, r3
 8000568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800056a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800056c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000570:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000574:	463b      	mov	r3, r7
 8000576:	2100      	movs	r1, #0
 8000578:	4618      	mov	r0, r3
 800057a:	f002 faa3 	bl	8002ac4 <osThreadCreate>
 800057e:	4602      	mov	r2, r0
 8000580:	4b05      	ldr	r3, [pc, #20]	; (8000598 <main+0x84>)
 8000582:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000584:	f002 fa97 	bl	8002ab6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000588:	e7fe      	b.n	8000588 <main+0x74>
 800058a:	bf00      	nop
 800058c:	08003f94 	.word	0x08003f94
 8000590:	2000426c 	.word	0x2000426c
 8000594:	08003fbc 	.word	0x08003fbc
 8000598:	20004068 	.word	0x20004068

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b094      	sub	sp, #80	; 0x50
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 0320 	add.w	r3, r7, #32
 80005a6:	2230      	movs	r2, #48	; 0x30
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f003 fcd7 	bl	8003f5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c0:	2300      	movs	r3, #0
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	4b22      	ldr	r3, [pc, #136]	; (8000650 <SystemClock_Config+0xb4>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	4a21      	ldr	r2, [pc, #132]	; (8000650 <SystemClock_Config+0xb4>)
 80005ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ce:	6413      	str	r3, [r2, #64]	; 0x40
 80005d0:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <SystemClock_Config+0xb4>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005dc:	2300      	movs	r3, #0
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	4b1c      	ldr	r3, [pc, #112]	; (8000654 <SystemClock_Config+0xb8>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a1b      	ldr	r2, [pc, #108]	; (8000654 <SystemClock_Config+0xb8>)
 80005e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005ea:	6013      	str	r3, [r2, #0]
 80005ec:	4b19      	ldr	r3, [pc, #100]	; (8000654 <SystemClock_Config+0xb8>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f8:	2302      	movs	r3, #2
 80005fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005fc:	2301      	movs	r3, #1
 80005fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000600:	2310      	movs	r3, #16
 8000602:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000604:	2300      	movs	r3, #0
 8000606:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000608:	f107 0320 	add.w	r3, r7, #32
 800060c:	4618      	mov	r0, r3
 800060e:	f001 f93f 	bl	8001890 <HAL_RCC_OscConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000618:	f000 f91e 	bl	8000858 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061c:	230f      	movs	r3, #15
 800061e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000620:	2300      	movs	r3, #0
 8000622:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f001 fb9a 	bl	8001d70 <HAL_RCC_ClockConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000642:	f000 f909 	bl	8000858 <Error_Handler>
  }
}
 8000646:	bf00      	nop
 8000648:	3750      	adds	r7, #80	; 0x50
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40023800 	.word	0x40023800
 8000654:	40007000 	.word	0x40007000

08000658 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08c      	sub	sp, #48	; 0x30
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800066c:	463b      	mov	r3, r7
 800066e:	2220      	movs	r2, #32
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f003 fc73 	bl	8003f5e <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000678:	4b3d      	ldr	r3, [pc, #244]	; (8000770 <MX_ADC1_Init+0x118>)
 800067a:	4a3e      	ldr	r2, [pc, #248]	; (8000774 <MX_ADC1_Init+0x11c>)
 800067c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800067e:	4b3c      	ldr	r3, [pc, #240]	; (8000770 <MX_ADC1_Init+0x118>)
 8000680:	2200      	movs	r2, #0
 8000682:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000684:	4b3a      	ldr	r3, [pc, #232]	; (8000770 <MX_ADC1_Init+0x118>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800068a:	4b39      	ldr	r3, [pc, #228]	; (8000770 <MX_ADC1_Init+0x118>)
 800068c:	2201      	movs	r2, #1
 800068e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000690:	4b37      	ldr	r3, [pc, #220]	; (8000770 <MX_ADC1_Init+0x118>)
 8000692:	2200      	movs	r2, #0
 8000694:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000696:	4b36      	ldr	r3, [pc, #216]	; (8000770 <MX_ADC1_Init+0x118>)
 8000698:	2200      	movs	r2, #0
 800069a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800069e:	4b34      	ldr	r3, [pc, #208]	; (8000770 <MX_ADC1_Init+0x118>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006a4:	4b32      	ldr	r3, [pc, #200]	; (8000770 <MX_ADC1_Init+0x118>)
 80006a6:	4a34      	ldr	r2, [pc, #208]	; (8000778 <MX_ADC1_Init+0x120>)
 80006a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006aa:	4b31      	ldr	r3, [pc, #196]	; (8000770 <MX_ADC1_Init+0x118>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80006b0:	4b2f      	ldr	r3, [pc, #188]	; (8000770 <MX_ADC1_Init+0x118>)
 80006b2:	2202      	movs	r2, #2
 80006b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006b6:	4b2e      	ldr	r3, [pc, #184]	; (8000770 <MX_ADC1_Init+0x118>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006be:	4b2c      	ldr	r3, [pc, #176]	; (8000770 <MX_ADC1_Init+0x118>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006c4:	482a      	ldr	r0, [pc, #168]	; (8000770 <MX_ADC1_Init+0x118>)
 80006c6:	f000 fa59 	bl	8000b7c <HAL_ADC_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 80006d0:	f000 f8c2 	bl	8000858 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 80006d8:	2301      	movs	r3, #1
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006dc:	2300      	movs	r3, #0
 80006de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e0:	f107 0320 	add.w	r3, r7, #32
 80006e4:	4619      	mov	r1, r3
 80006e6:	4822      	ldr	r0, [pc, #136]	; (8000770 <MX_ADC1_Init+0x118>)
 80006e8:	f000 fa8c 	bl	8000c04 <HAL_ADC_ConfigChannel>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80006f2:	f000 f8b1 	bl	8000858 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006f6:	2301      	movs	r3, #1
 80006f8:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 2;
 80006fa:	2302      	movs	r3, #2
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006fe:	f107 0320 	add.w	r3, r7, #32
 8000702:	4619      	mov	r1, r3
 8000704:	481a      	ldr	r0, [pc, #104]	; (8000770 <MX_ADC1_Init+0x118>)
 8000706:	f000 fa7d 	bl	8000c04 <HAL_ADC_ConfigChannel>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8000710:	f000 f8a2 	bl	8000858 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8000714:	2306      	movs	r3, #6
 8000716:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8000718:	2301      	movs	r3, #1
 800071a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 2;
 800071c:	2302      	movs	r3, #2
 800071e:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000720:	2300      	movs	r3, #0
 8000722:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8000724:	2300      	movs	r3, #0
 8000726:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000728:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_ADC1_Init+0x124>)
 800072a:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800072c:	2300      	movs	r3, #0
 800072e:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000730:	2300      	movs	r3, #0
 8000732:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000738:	463b      	mov	r3, r7
 800073a:	4619      	mov	r1, r3
 800073c:	480c      	ldr	r0, [pc, #48]	; (8000770 <MX_ADC1_Init+0x118>)
 800073e:	f000 fc8f 	bl	8001060 <HAL_ADCEx_InjectedConfigChannel>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8000748:	f000 f886 	bl	8000858 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 800074c:	2307      	movs	r3, #7
 800074e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 8000750:	2302      	movs	r3, #2
 8000752:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000754:	463b      	mov	r3, r7
 8000756:	4619      	mov	r1, r3
 8000758:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_ADC1_Init+0x118>)
 800075a:	f000 fc81 	bl	8001060 <HAL_ADCEx_InjectedConfigChannel>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 8000764:	f000 f878 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000768:	bf00      	nop
 800076a:	3730      	adds	r7, #48	; 0x30
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20004020 	.word	0x20004020
 8000774:	40012000 	.word	0x40012000
 8000778:	0f000001 	.word	0x0f000001
 800077c:	000f0001 	.word	0x000f0001

08000780 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000784:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 8000786:	4a12      	ldr	r2, [pc, #72]	; (80007d0 <MX_USART2_UART_Init+0x50>)
 8000788:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 800078c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000790:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 80007a6:	220c      	movs	r2, #12
 80007a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_USART2_UART_Init+0x4c>)
 80007b8:	f001 fca6 	bl	8002108 <HAL_UART_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007c2:	f000 f849 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20004270 	.word	0x20004270
 80007d0:	40004400 	.word	0x40004400

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e8:	2300      	movs	r3, #0
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	4b10      	ldr	r3, [pc, #64]	; (8000830 <MX_GPIO_Init+0x5c>)
 80007ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f0:	4a0f      	ldr	r2, [pc, #60]	; (8000830 <MX_GPIO_Init+0x5c>)
 80007f2:	f043 0301 	orr.w	r3, r3, #1
 80007f6:	6313      	str	r3, [r2, #48]	; 0x30
 80007f8:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <MX_GPIO_Init+0x5c>)
 80007fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fc:	f003 0301 	and.w	r3, r3, #1
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	2120      	movs	r1, #32
 8000808:	480a      	ldr	r0, [pc, #40]	; (8000834 <MX_GPIO_Init+0x60>)
 800080a:	f001 f827 	bl	800185c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800080e:	2320      	movs	r3, #32
 8000810:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	4619      	mov	r1, r3
 8000822:	4804      	ldr	r0, [pc, #16]	; (8000834 <MX_GPIO_Init+0x60>)
 8000824:	f000 fe98 	bl	8001558 <HAL_GPIO_Init>

}
 8000828:	bf00      	nop
 800082a:	3718      	adds	r7, #24
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40023800 	.word	0x40023800
 8000834:	40020000 	.word	0x40020000

08000838 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000840:	2001      	movs	r0, #1
 8000842:	f002 f98b 	bl	8002b5c <osDelay>
 8000846:	e7fb      	b.n	8000840 <StartDefaultTask+0x8>

08000848 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000850:	2001      	movs	r0, #1
 8000852:	f002 f983 	bl	8002b5c <osDelay>
 8000856:	e7fb      	b.n	8000850 <StartTask02+0x8>

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800085e:	e7fe      	b.n	800085e <Error_Handler+0x6>

08000860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <HAL_MspInit+0x54>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086e:	4a11      	ldr	r2, [pc, #68]	; (80008b4 <HAL_MspInit+0x54>)
 8000870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000874:	6453      	str	r3, [r2, #68]	; 0x44
 8000876:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <HAL_MspInit+0x54>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	603b      	str	r3, [r7, #0]
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <HAL_MspInit+0x54>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088a:	4a0a      	ldr	r2, [pc, #40]	; (80008b4 <HAL_MspInit+0x54>)
 800088c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000890:	6413      	str	r3, [r2, #64]	; 0x40
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <HAL_MspInit+0x54>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	210f      	movs	r1, #15
 80008a2:	f06f 0001 	mvn.w	r0, #1
 80008a6:	f000 fe2e 	bl	8001506 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40023800 	.word	0x40023800

080008b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	; 0x28
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a17      	ldr	r2, [pc, #92]	; (8000934 <HAL_ADC_MspInit+0x7c>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d127      	bne.n	800092a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	4b16      	ldr	r3, [pc, #88]	; (8000938 <HAL_ADC_MspInit+0x80>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e2:	4a15      	ldr	r2, [pc, #84]	; (8000938 <HAL_ADC_MspInit+0x80>)
 80008e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008e8:	6453      	str	r3, [r2, #68]	; 0x44
 80008ea:	4b13      	ldr	r3, [pc, #76]	; (8000938 <HAL_ADC_MspInit+0x80>)
 80008ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <HAL_ADC_MspInit+0x80>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a0e      	ldr	r2, [pc, #56]	; (8000938 <HAL_ADC_MspInit+0x80>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <HAL_ADC_MspInit+0x80>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = ADC1_Pin|ADC2_Pin|ADCI1_Pin|ADCI2_Pin;
 8000912:	23c3      	movs	r3, #195	; 0xc3
 8000914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000916:	2303      	movs	r3, #3
 8000918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	4619      	mov	r1, r3
 8000924:	4805      	ldr	r0, [pc, #20]	; (800093c <HAL_ADC_MspInit+0x84>)
 8000926:	f000 fe17 	bl	8001558 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800092a:	bf00      	nop
 800092c:	3728      	adds	r7, #40	; 0x28
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40012000 	.word	0x40012000
 8000938:	40023800 	.word	0x40023800
 800093c:	40020000 	.word	0x40020000

08000940 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08a      	sub	sp, #40	; 0x28
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a19      	ldr	r2, [pc, #100]	; (80009c4 <HAL_UART_MspInit+0x84>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d12b      	bne.n	80009ba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <HAL_UART_MspInit+0x88>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	4a17      	ldr	r2, [pc, #92]	; (80009c8 <HAL_UART_MspInit+0x88>)
 800096c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000970:	6413      	str	r3, [r2, #64]	; 0x40
 8000972:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <HAL_UART_MspInit+0x88>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <HAL_UART_MspInit+0x88>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a10      	ldr	r2, [pc, #64]	; (80009c8 <HAL_UART_MspInit+0x88>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <HAL_UART_MspInit+0x88>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800099a:	230c      	movs	r3, #12
 800099c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2302      	movs	r3, #2
 80009a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a6:	2303      	movs	r3, #3
 80009a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009aa:	2307      	movs	r3, #7
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	4619      	mov	r1, r3
 80009b4:	4805      	ldr	r0, [pc, #20]	; (80009cc <HAL_UART_MspInit+0x8c>)
 80009b6:	f000 fdcf 	bl	8001558 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009ba:	bf00      	nop
 80009bc:	3728      	adds	r7, #40	; 0x28
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40004400 	.word	0x40004400
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40020000 	.word	0x40020000

080009d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <NMI_Handler+0x4>

080009d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <HardFault_Handler+0x4>

080009dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <MemManage_Handler+0x4>

080009e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <BusFault_Handler+0x4>

080009e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <UsageFault_Handler+0x4>

080009ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a00:	f000 f89c 	bl	8000b3c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a04:	f002 fe22 	bl	800364c <xTaskGetSchedulerState>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d001      	beq.n	8000a12 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a0e:	f003 f853 	bl	8003ab8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <SystemInit+0x28>)
 8000a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a22:	4a07      	ldr	r2, [pc, #28]	; (8000a40 <SystemInit+0x28>)
 8000a24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a2c:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <SystemInit+0x28>)
 8000a2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a32:	609a      	str	r2, [r3, #8]
#endif
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a7c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a4a:	e003      	b.n	8000a54 <LoopCopyDataInit>

08000a4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a52:	3104      	adds	r1, #4

08000a54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a54:	480b      	ldr	r0, [pc, #44]	; (8000a84 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a5c:	d3f6      	bcc.n	8000a4c <CopyDataInit>
  ldr  r2, =_sbss
 8000a5e:	4a0b      	ldr	r2, [pc, #44]	; (8000a8c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a60:	e002      	b.n	8000a68 <LoopFillZerobss>

08000a62 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a62:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a64:	f842 3b04 	str.w	r3, [r2], #4

08000a68 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a68:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a6c:	d3f9      	bcc.n	8000a62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a6e:	f7ff ffd3 	bl	8000a18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a72:	f003 fa45 	bl	8003f00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a76:	f7ff fd4d 	bl	8000514 <main>
  bx  lr    
 8000a7a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a7c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a80:	08004008 	.word	0x08004008
  ldr  r0, =_sdata
 8000a84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a88:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000a8c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000a90:	20004508 	.word	0x20004508

08000a94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a94:	e7fe      	b.n	8000a94 <ADC_IRQHandler>
	...

08000a98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <HAL_Init+0x40>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a0d      	ldr	r2, [pc, #52]	; (8000ad8 <HAL_Init+0x40>)
 8000aa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <HAL_Init+0x40>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <HAL_Init+0x40>)
 8000aae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ab2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <HAL_Init+0x40>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a07      	ldr	r2, [pc, #28]	; (8000ad8 <HAL_Init+0x40>)
 8000aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000abe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac0:	2003      	movs	r0, #3
 8000ac2:	f000 fd15 	bl	80014f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac6:	200f      	movs	r0, #15
 8000ac8:	f000 f808 	bl	8000adc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000acc:	f7ff fec8 	bl	8000860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40023c00 	.word	0x40023c00

08000adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <HAL_InitTick+0x54>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <HAL_InitTick+0x58>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	4619      	mov	r1, r3
 8000aee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afa:	4618      	mov	r0, r3
 8000afc:	f000 fd1f 	bl	800153e <HAL_SYSTICK_Config>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	e00e      	b.n	8000b28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2b0f      	cmp	r3, #15
 8000b0e:	d80a      	bhi.n	8000b26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b10:	2200      	movs	r2, #0
 8000b12:	6879      	ldr	r1, [r7, #4]
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295
 8000b18:	f000 fcf5 	bl	8001506 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b1c:	4a06      	ldr	r2, [pc, #24]	; (8000b38 <HAL_InitTick+0x5c>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b22:	2300      	movs	r3, #0
 8000b24:	e000      	b.n	8000b28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000000 	.word	0x20000000
 8000b34:	20000008 	.word	0x20000008
 8000b38:	20000004 	.word	0x20000004

08000b3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_IncTick+0x20>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_IncTick+0x24>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <HAL_IncTick+0x24>)
 8000b4e:	6013      	str	r3, [r2, #0]
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	20000008 	.word	0x20000008
 8000b60:	20004504 	.word	0x20004504

08000b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return uwTick;
 8000b68:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <HAL_GetTick+0x14>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	20004504 	.word	0x20004504

08000b7c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b84:	2300      	movs	r3, #0
 8000b86:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d101      	bne.n	8000b92 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e033      	b.n	8000bfa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d109      	bne.n	8000bae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff fe8c 	bl	80008b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	f003 0310 	and.w	r3, r3, #16
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d118      	bne.n	8000bec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000bc2:	f023 0302 	bic.w	r3, r3, #2
 8000bc6:	f043 0202 	orr.w	r2, r3, #2
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f000 f94a 	bl	8000e68 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	f023 0303 	bic.w	r3, r3, #3
 8000be2:	f043 0201 	orr.w	r2, r3, #1
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	641a      	str	r2, [r3, #64]	; 0x40
 8000bea:	e001      	b.n	8000bf0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000bec:	2301      	movs	r3, #1
 8000bee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d101      	bne.n	8000c20 <HAL_ADC_ConfigChannel+0x1c>
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	e113      	b.n	8000e48 <HAL_ADC_ConfigChannel+0x244>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2201      	movs	r2, #1
 8000c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b09      	cmp	r3, #9
 8000c2e:	d925      	bls.n	8000c7c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	68d9      	ldr	r1, [r3, #12]
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4613      	mov	r3, r2
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	4413      	add	r3, r2
 8000c44:	3b1e      	subs	r3, #30
 8000c46:	2207      	movs	r2, #7
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	43da      	mvns	r2, r3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	400a      	ands	r2, r1
 8000c54:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	68d9      	ldr	r1, [r3, #12]
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	689a      	ldr	r2, [r3, #8]
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	4618      	mov	r0, r3
 8000c68:	4603      	mov	r3, r0
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	4403      	add	r3, r0
 8000c6e:	3b1e      	subs	r3, #30
 8000c70:	409a      	lsls	r2, r3
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	430a      	orrs	r2, r1
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	e022      	b.n	8000cc2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	6919      	ldr	r1, [r3, #16]
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	4413      	add	r3, r2
 8000c90:	2207      	movs	r2, #7
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	43da      	mvns	r2, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	400a      	ands	r2, r1
 8000c9e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	6919      	ldr	r1, [r3, #16]
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	689a      	ldr	r2, [r3, #8]
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	4403      	add	r3, r0
 8000cb8:	409a      	lsls	r2, r3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	430a      	orrs	r2, r1
 8000cc0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	2b06      	cmp	r3, #6
 8000cc8:	d824      	bhi.n	8000d14 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685a      	ldr	r2, [r3, #4]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	3b05      	subs	r3, #5
 8000cdc:	221f      	movs	r2, #31
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43da      	mvns	r2, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	400a      	ands	r2, r1
 8000cea:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685a      	ldr	r2, [r3, #4]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	4413      	add	r3, r2
 8000d04:	3b05      	subs	r3, #5
 8000d06:	fa00 f203 	lsl.w	r2, r0, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	635a      	str	r2, [r3, #52]	; 0x34
 8000d12:	e04c      	b.n	8000dae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	2b0c      	cmp	r3, #12
 8000d1a:	d824      	bhi.n	8000d66 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685a      	ldr	r2, [r3, #4]
 8000d26:	4613      	mov	r3, r2
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	4413      	add	r3, r2
 8000d2c:	3b23      	subs	r3, #35	; 0x23
 8000d2e:	221f      	movs	r2, #31
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	43da      	mvns	r2, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	400a      	ands	r2, r1
 8000d3c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685a      	ldr	r2, [r3, #4]
 8000d50:	4613      	mov	r3, r2
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	4413      	add	r3, r2
 8000d56:	3b23      	subs	r3, #35	; 0x23
 8000d58:	fa00 f203 	lsl.w	r2, r0, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	430a      	orrs	r2, r1
 8000d62:	631a      	str	r2, [r3, #48]	; 0x30
 8000d64:	e023      	b.n	8000dae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685a      	ldr	r2, [r3, #4]
 8000d70:	4613      	mov	r3, r2
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	4413      	add	r3, r2
 8000d76:	3b41      	subs	r3, #65	; 0x41
 8000d78:	221f      	movs	r2, #31
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43da      	mvns	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	400a      	ands	r2, r1
 8000d86:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	4618      	mov	r0, r3
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685a      	ldr	r2, [r3, #4]
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	4413      	add	r3, r2
 8000da0:	3b41      	subs	r3, #65	; 0x41
 8000da2:	fa00 f203 	lsl.w	r2, r0, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	430a      	orrs	r2, r1
 8000dac:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000dae:	4b29      	ldr	r3, [pc, #164]	; (8000e54 <HAL_ADC_ConfigChannel+0x250>)
 8000db0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a28      	ldr	r2, [pc, #160]	; (8000e58 <HAL_ADC_ConfigChannel+0x254>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d10f      	bne.n	8000ddc <HAL_ADC_ConfigChannel+0x1d8>
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b12      	cmp	r3, #18
 8000dc2:	d10b      	bne.n	8000ddc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a1d      	ldr	r2, [pc, #116]	; (8000e58 <HAL_ADC_ConfigChannel+0x254>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d12b      	bne.n	8000e3e <HAL_ADC_ConfigChannel+0x23a>
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a1c      	ldr	r2, [pc, #112]	; (8000e5c <HAL_ADC_ConfigChannel+0x258>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d003      	beq.n	8000df8 <HAL_ADC_ConfigChannel+0x1f4>
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b11      	cmp	r3, #17
 8000df6:	d122      	bne.n	8000e3e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a11      	ldr	r2, [pc, #68]	; (8000e5c <HAL_ADC_ConfigChannel+0x258>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d111      	bne.n	8000e3e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <HAL_ADC_ConfigChannel+0x25c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a11      	ldr	r2, [pc, #68]	; (8000e64 <HAL_ADC_ConfigChannel+0x260>)
 8000e20:	fba2 2303 	umull	r2, r3, r2, r3
 8000e24:	0c9a      	lsrs	r2, r3, #18
 8000e26:	4613      	mov	r3, r2
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	4413      	add	r3, r2
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000e30:	e002      	b.n	8000e38 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	3b01      	subs	r3, #1
 8000e36:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d1f9      	bne.n	8000e32 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	40012300 	.word	0x40012300
 8000e58:	40012000 	.word	0x40012000
 8000e5c:	10000012 	.word	0x10000012
 8000e60:	20000000 	.word	0x20000000
 8000e64:	431bde83 	.word	0x431bde83

08000e68 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e70:	4b79      	ldr	r3, [pc, #484]	; (8001058 <ADC_Init+0x1f0>)
 8000e72:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	685a      	ldr	r2, [r3, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	431a      	orrs	r2, r3
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	685a      	ldr	r2, [r3, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	6859      	ldr	r1, [r3, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	691b      	ldr	r3, [r3, #16]
 8000ea8:	021a      	lsls	r2, r3, #8
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	685a      	ldr	r2, [r3, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000ec0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	6859      	ldr	r1, [r3, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	689a      	ldr	r2, [r3, #8]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	689a      	ldr	r2, [r3, #8]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ee2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	6899      	ldr	r1, [r3, #8]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	68da      	ldr	r2, [r3, #12]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	430a      	orrs	r2, r1
 8000ef4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000efa:	4a58      	ldr	r2, [pc, #352]	; (800105c <ADC_Init+0x1f4>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d022      	beq.n	8000f46 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	689a      	ldr	r2, [r3, #8]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f0e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	6899      	ldr	r1, [r3, #8]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	689a      	ldr	r2, [r3, #8]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000f30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	6899      	ldr	r1, [r3, #8]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	430a      	orrs	r2, r1
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	e00f      	b.n	8000f66 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	689a      	ldr	r2, [r3, #8]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	689a      	ldr	r2, [r3, #8]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000f64:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	689a      	ldr	r2, [r3, #8]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f022 0202 	bic.w	r2, r2, #2
 8000f74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	6899      	ldr	r1, [r3, #8]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	7e1b      	ldrb	r3, [r3, #24]
 8000f80:	005a      	lsls	r2, r3, #1
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	430a      	orrs	r2, r1
 8000f88:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d01b      	beq.n	8000fcc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	685a      	ldr	r2, [r3, #4]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000fa2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	685a      	ldr	r2, [r3, #4]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000fb2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	6859      	ldr	r1, [r3, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	035a      	lsls	r2, r3, #13
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	e007      	b.n	8000fdc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	685a      	ldr	r2, [r3, #4]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000fda:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000fea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	051a      	lsls	r2, r3, #20
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	430a      	orrs	r2, r1
 8001000:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	689a      	ldr	r2, [r3, #8]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001010:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	6899      	ldr	r1, [r3, #8]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800101e:	025a      	lsls	r2, r3, #9
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	430a      	orrs	r2, r1
 8001026:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	689a      	ldr	r2, [r3, #8]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001036:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	6899      	ldr	r1, [r3, #8]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	029a      	lsls	r2, r3, #10
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	430a      	orrs	r2, r1
 800104a:	609a      	str	r2, [r3, #8]
}
 800104c:	bf00      	nop
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	40012300 	.word	0x40012300
 800105c:	0f000001 	.word	0x0f000001

08001060 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001070:	2b01      	cmp	r3, #1
 8001072:	d101      	bne.n	8001078 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8001074:	2302      	movs	r3, #2
 8001076:	e17b      	b.n	8001370 <HAL_ADCEx_InjectedConfigChannel+0x310>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2201      	movs	r2, #1
 800107c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b09      	cmp	r3, #9
 8001086:	d925      	bls.n	80010d4 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	68d9      	ldr	r1, [r3, #12]
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	b29b      	uxth	r3, r3
 8001094:	461a      	mov	r2, r3
 8001096:	4613      	mov	r3, r2
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	4413      	add	r3, r2
 800109c:	3b1e      	subs	r3, #30
 800109e:	2207      	movs	r2, #7
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43da      	mvns	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	400a      	ands	r2, r1
 80010ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	68d9      	ldr	r1, [r3, #12]
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	b29b      	uxth	r3, r3
 80010be:	4618      	mov	r0, r3
 80010c0:	4603      	mov	r3, r0
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	4403      	add	r3, r0
 80010c6:	3b1e      	subs	r3, #30
 80010c8:	409a      	lsls	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	430a      	orrs	r2, r1
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	e022      	b.n	800111a <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	6919      	ldr	r1, [r3, #16]
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	b29b      	uxth	r3, r3
 80010e0:	461a      	mov	r2, r3
 80010e2:	4613      	mov	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4413      	add	r3, r2
 80010e8:	2207      	movs	r2, #7
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43da      	mvns	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	400a      	ands	r2, r1
 80010f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	6919      	ldr	r1, [r3, #16]
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	689a      	ldr	r2, [r3, #8]
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	b29b      	uxth	r3, r3
 8001108:	4618      	mov	r0, r3
 800110a:	4603      	mov	r3, r0
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	4403      	add	r3, r0
 8001110:	409a      	lsls	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	430a      	orrs	r2, r1
 8001118:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001128:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	691b      	ldr	r3, [r3, #16]
 8001134:	3b01      	subs	r3, #1
 8001136:	051a      	lsls	r2, r3, #20
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	430a      	orrs	r2, r1
 800113e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	691b      	ldr	r3, [r3, #16]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	b2db      	uxtb	r3, r3
 8001156:	3303      	adds	r3, #3
 8001158:	b2db      	uxtb	r3, r3
 800115a:	461a      	mov	r2, r3
 800115c:	4613      	mov	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	221f      	movs	r2, #31
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43da      	mvns	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	400a      	ands	r2, r1
 8001170:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	b29b      	uxth	r3, r3
 800117e:	4618      	mov	r0, r3
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	b2da      	uxtb	r2, r3
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	691b      	ldr	r3, [r3, #16]
 800118a:	b2db      	uxtb	r3, r3
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	b2db      	uxtb	r3, r3
 8001190:	3303      	adds	r3, #3
 8001192:	b2db      	uxtb	r3, r3
 8001194:	461a      	mov	r2, r3
 8001196:	4613      	mov	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	fa00 f203 	lsl.w	r2, r0, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	430a      	orrs	r2, r1
 80011a6:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a73      	ldr	r2, [pc, #460]	; (800137c <HAL_ADCEx_InjectedConfigChannel+0x31c>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d022      	beq.n	80011f8 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	689a      	ldr	r2, [r3, #8]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80011c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6899      	ldr	r1, [r3, #8]
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	699a      	ldr	r2, [r3, #24]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	430a      	orrs	r2, r1
 80011d2:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80011e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	6899      	ldr	r1, [r3, #8]
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	69da      	ldr	r2, [r3, #28]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	430a      	orrs	r2, r1
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	e00f      	b.n	8001218 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	689a      	ldr	r2, [r3, #8]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001206:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	689a      	ldr	r2, [r3, #8]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001216:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	7d5b      	ldrb	r3, [r3, #21]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d008      	beq.n	8001232 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	685a      	ldr	r2, [r3, #4]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	e007      	b.n	8001242 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	685a      	ldr	r2, [r3, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001240:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	7d1b      	ldrb	r3, [r3, #20]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d008      	beq.n	800125c <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	685a      	ldr	r2, [r3, #4]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	e007      	b.n	800126c <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	685a      	ldr	r2, [r3, #4]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800126a:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	2b02      	cmp	r3, #2
 8001272:	d017      	beq.n	80012a4 <HAL_ADCEx_InjectedConfigChannel+0x244>
 8001274:	2b03      	cmp	r3, #3
 8001276:	d029      	beq.n	80012cc <HAL_ADCEx_InjectedConfigChannel+0x26c>
 8001278:	2b01      	cmp	r3, #1
 800127a:	d13b      	bne.n	80012f4 <HAL_ADCEx_InjectedConfigChannel+0x294>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	6812      	ldr	r2, [r2, #0]
 8001286:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800128a:	f023 030f 	bic.w	r3, r3, #15
 800128e:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	6959      	ldr	r1, [r3, #20]
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	68da      	ldr	r2, [r3, #12]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	430a      	orrs	r2, r1
 80012a0:	615a      	str	r2, [r3, #20]
      break;
 80012a2:	e03b      	b.n	800131c <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	6812      	ldr	r2, [r2, #0]
 80012ae:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80012b2:	f023 030f 	bic.w	r3, r3, #15
 80012b6:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	6999      	ldr	r1, [r3, #24]
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	68da      	ldr	r2, [r3, #12]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	430a      	orrs	r2, r1
 80012c8:	619a      	str	r2, [r3, #24]
      break;
 80012ca:	e027      	b.n	800131c <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	6812      	ldr	r2, [r2, #0]
 80012d6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80012da:	f023 030f 	bic.w	r3, r3, #15
 80012de:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	69d9      	ldr	r1, [r3, #28]
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	68da      	ldr	r2, [r3, #12]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	430a      	orrs	r2, r1
 80012f0:	61da      	str	r2, [r3, #28]
      break;
 80012f2:	e013      	b.n	800131c <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6a1b      	ldr	r3, [r3, #32]
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	6812      	ldr	r2, [r2, #0]
 80012fe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001302:	f023 030f 	bic.w	r3, r3, #15
 8001306:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	6a19      	ldr	r1, [r3, #32]
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	68da      	ldr	r2, [r3, #12]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	430a      	orrs	r2, r1
 8001318:	621a      	str	r2, [r3, #32]
      break;
 800131a:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800131c:	4b18      	ldr	r3, [pc, #96]	; (8001380 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 800131e:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a17      	ldr	r2, [pc, #92]	; (8001384 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d109      	bne.n	800133e <HAL_ADCEx_InjectedConfigChannel+0x2de>
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2b12      	cmp	r3, #18
 8001330:	d105      	bne.n	800133e <HAL_ADCEx_InjectedConfigChannel+0x2de>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a10      	ldr	r2, [pc, #64]	; (8001384 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d10e      	bne.n	8001366 <HAL_ADCEx_InjectedConfigChannel+0x306>
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a0e      	ldr	r2, [pc, #56]	; (8001388 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d003      	beq.n	800135a <HAL_ADCEx_InjectedConfigChannel+0x2fa>
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b11      	cmp	r3, #17
 8001358:	d105      	bne.n	8001366 <HAL_ADCEx_InjectedConfigChannel+0x306>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	000f0001 	.word	0x000f0001
 8001380:	40012300 	.word	0x40012300
 8001384:	40012000 	.word	0x40012000
 8001388:	10000012 	.word	0x10000012

0800138c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800139c:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <__NVIC_SetPriorityGrouping+0x44>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013a8:	4013      	ands	r3, r2
 80013aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013be:	4a04      	ldr	r2, [pc, #16]	; (80013d0 <__NVIC_SetPriorityGrouping+0x44>)
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	60d3      	str	r3, [r2, #12]
}
 80013c4:	bf00      	nop
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d8:	4b04      	ldr	r3, [pc, #16]	; (80013ec <__NVIC_GetPriorityGrouping+0x18>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	0a1b      	lsrs	r3, r3, #8
 80013de:	f003 0307 	and.w	r3, r3, #7
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	6039      	str	r1, [r7, #0]
 80013fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001400:	2b00      	cmp	r3, #0
 8001402:	db0a      	blt.n	800141a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	b2da      	uxtb	r2, r3
 8001408:	490c      	ldr	r1, [pc, #48]	; (800143c <__NVIC_SetPriority+0x4c>)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	0112      	lsls	r2, r2, #4
 8001410:	b2d2      	uxtb	r2, r2
 8001412:	440b      	add	r3, r1
 8001414:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001418:	e00a      	b.n	8001430 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	b2da      	uxtb	r2, r3
 800141e:	4908      	ldr	r1, [pc, #32]	; (8001440 <__NVIC_SetPriority+0x50>)
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	f003 030f 	and.w	r3, r3, #15
 8001426:	3b04      	subs	r3, #4
 8001428:	0112      	lsls	r2, r2, #4
 800142a:	b2d2      	uxtb	r2, r2
 800142c:	440b      	add	r3, r1
 800142e:	761a      	strb	r2, [r3, #24]
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	e000e100 	.word	0xe000e100
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001444:	b480      	push	{r7}
 8001446:	b089      	sub	sp, #36	; 0x24
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	f1c3 0307 	rsb	r3, r3, #7
 800145e:	2b04      	cmp	r3, #4
 8001460:	bf28      	it	cs
 8001462:	2304      	movcs	r3, #4
 8001464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3304      	adds	r3, #4
 800146a:	2b06      	cmp	r3, #6
 800146c:	d902      	bls.n	8001474 <NVIC_EncodePriority+0x30>
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3b03      	subs	r3, #3
 8001472:	e000      	b.n	8001476 <NVIC_EncodePriority+0x32>
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001478:	f04f 32ff 	mov.w	r2, #4294967295
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43da      	mvns	r2, r3
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	401a      	ands	r2, r3
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800148c:	f04f 31ff 	mov.w	r1, #4294967295
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	fa01 f303 	lsl.w	r3, r1, r3
 8001496:	43d9      	mvns	r1, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800149c:	4313      	orrs	r3, r2
         );
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3724      	adds	r7, #36	; 0x24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
	...

080014ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014bc:	d301      	bcc.n	80014c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014be:	2301      	movs	r3, #1
 80014c0:	e00f      	b.n	80014e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c2:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <SysTick_Config+0x40>)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ca:	210f      	movs	r1, #15
 80014cc:	f04f 30ff 	mov.w	r0, #4294967295
 80014d0:	f7ff ff8e 	bl	80013f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d4:	4b05      	ldr	r3, [pc, #20]	; (80014ec <SysTick_Config+0x40>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014da:	4b04      	ldr	r3, [pc, #16]	; (80014ec <SysTick_Config+0x40>)
 80014dc:	2207      	movs	r2, #7
 80014de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	e000e010 	.word	0xe000e010

080014f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff ff47 	bl	800138c <__NVIC_SetPriorityGrouping>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001506:	b580      	push	{r7, lr}
 8001508:	b086      	sub	sp, #24
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	60b9      	str	r1, [r7, #8]
 8001510:	607a      	str	r2, [r7, #4]
 8001512:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001518:	f7ff ff5c 	bl	80013d4 <__NVIC_GetPriorityGrouping>
 800151c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	68b9      	ldr	r1, [r7, #8]
 8001522:	6978      	ldr	r0, [r7, #20]
 8001524:	f7ff ff8e 	bl	8001444 <NVIC_EncodePriority>
 8001528:	4602      	mov	r2, r0
 800152a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800152e:	4611      	mov	r1, r2
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff5d 	bl	80013f0 <__NVIC_SetPriority>
}
 8001536:	bf00      	nop
 8001538:	3718      	adds	r7, #24
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff ffb0 	bl	80014ac <SysTick_Config>
 800154c:	4603      	mov	r3, r0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001558:	b480      	push	{r7}
 800155a:	b089      	sub	sp, #36	; 0x24
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800156a:	2300      	movs	r3, #0
 800156c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
 8001572:	e159      	b.n	8001828 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001574:	2201      	movs	r2, #1
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	697a      	ldr	r2, [r7, #20]
 8001584:	4013      	ands	r3, r2
 8001586:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	429a      	cmp	r2, r3
 800158e:	f040 8148 	bne.w	8001822 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d00b      	beq.n	80015b2 <HAL_GPIO_Init+0x5a>
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d007      	beq.n	80015b2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015a6:	2b11      	cmp	r3, #17
 80015a8:	d003      	beq.n	80015b2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b12      	cmp	r3, #18
 80015b0:	d130      	bne.n	8001614 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	2203      	movs	r2, #3
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43db      	mvns	r3, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4013      	ands	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	68da      	ldr	r2, [r3, #12]
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4313      	orrs	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015e8:	2201      	movs	r2, #1
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4013      	ands	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	091b      	lsrs	r3, r3, #4
 80015fe:	f003 0201 	and.w	r2, r3, #1
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4313      	orrs	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	2203      	movs	r2, #3
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4013      	ands	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	2b02      	cmp	r3, #2
 800164a:	d003      	beq.n	8001654 <HAL_GPIO_Init+0xfc>
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	2b12      	cmp	r3, #18
 8001652:	d123      	bne.n	800169c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	08da      	lsrs	r2, r3, #3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3208      	adds	r2, #8
 800165c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001660:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	f003 0307 	and.w	r3, r3, #7
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	220f      	movs	r2, #15
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	43db      	mvns	r3, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4013      	ands	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	691a      	ldr	r2, [r3, #16]
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4313      	orrs	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	08da      	lsrs	r2, r3, #3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3208      	adds	r2, #8
 8001696:	69b9      	ldr	r1, [r7, #24]
 8001698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	2203      	movs	r2, #3
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4013      	ands	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 0203 	and.w	r2, r3, #3
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f000 80a2 	beq.w	8001822 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	4b56      	ldr	r3, [pc, #344]	; (800183c <HAL_GPIO_Init+0x2e4>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	4a55      	ldr	r2, [pc, #340]	; (800183c <HAL_GPIO_Init+0x2e4>)
 80016e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ec:	6453      	str	r3, [r2, #68]	; 0x44
 80016ee:	4b53      	ldr	r3, [pc, #332]	; (800183c <HAL_GPIO_Init+0x2e4>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016fa:	4a51      	ldr	r2, [pc, #324]	; (8001840 <HAL_GPIO_Init+0x2e8>)
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	089b      	lsrs	r3, r3, #2
 8001700:	3302      	adds	r3, #2
 8001702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001706:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	f003 0303 	and.w	r3, r3, #3
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	220f      	movs	r2, #15
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4013      	ands	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a48      	ldr	r2, [pc, #288]	; (8001844 <HAL_GPIO_Init+0x2ec>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d019      	beq.n	800175a <HAL_GPIO_Init+0x202>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a47      	ldr	r2, [pc, #284]	; (8001848 <HAL_GPIO_Init+0x2f0>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d013      	beq.n	8001756 <HAL_GPIO_Init+0x1fe>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a46      	ldr	r2, [pc, #280]	; (800184c <HAL_GPIO_Init+0x2f4>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d00d      	beq.n	8001752 <HAL_GPIO_Init+0x1fa>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a45      	ldr	r2, [pc, #276]	; (8001850 <HAL_GPIO_Init+0x2f8>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d007      	beq.n	800174e <HAL_GPIO_Init+0x1f6>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a44      	ldr	r2, [pc, #272]	; (8001854 <HAL_GPIO_Init+0x2fc>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d101      	bne.n	800174a <HAL_GPIO_Init+0x1f2>
 8001746:	2304      	movs	r3, #4
 8001748:	e008      	b.n	800175c <HAL_GPIO_Init+0x204>
 800174a:	2307      	movs	r3, #7
 800174c:	e006      	b.n	800175c <HAL_GPIO_Init+0x204>
 800174e:	2303      	movs	r3, #3
 8001750:	e004      	b.n	800175c <HAL_GPIO_Init+0x204>
 8001752:	2302      	movs	r3, #2
 8001754:	e002      	b.n	800175c <HAL_GPIO_Init+0x204>
 8001756:	2301      	movs	r3, #1
 8001758:	e000      	b.n	800175c <HAL_GPIO_Init+0x204>
 800175a:	2300      	movs	r3, #0
 800175c:	69fa      	ldr	r2, [r7, #28]
 800175e:	f002 0203 	and.w	r2, r2, #3
 8001762:	0092      	lsls	r2, r2, #2
 8001764:	4093      	lsls	r3, r2
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4313      	orrs	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800176c:	4934      	ldr	r1, [pc, #208]	; (8001840 <HAL_GPIO_Init+0x2e8>)
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	089b      	lsrs	r3, r3, #2
 8001772:	3302      	adds	r3, #2
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800177a:	4b37      	ldr	r3, [pc, #220]	; (8001858 <HAL_GPIO_Init+0x300>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	43db      	mvns	r3, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4013      	ands	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d003      	beq.n	800179e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	4313      	orrs	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800179e:	4a2e      	ldr	r2, [pc, #184]	; (8001858 <HAL_GPIO_Init+0x300>)
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017a4:	4b2c      	ldr	r3, [pc, #176]	; (8001858 <HAL_GPIO_Init+0x300>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	43db      	mvns	r3, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4013      	ands	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d003      	beq.n	80017c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017c8:	4a23      	ldr	r2, [pc, #140]	; (8001858 <HAL_GPIO_Init+0x300>)
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017ce:	4b22      	ldr	r3, [pc, #136]	; (8001858 <HAL_GPIO_Init+0x300>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	43db      	mvns	r3, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4013      	ands	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017f2:	4a19      	ldr	r2, [pc, #100]	; (8001858 <HAL_GPIO_Init+0x300>)
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017f8:	4b17      	ldr	r3, [pc, #92]	; (8001858 <HAL_GPIO_Init+0x300>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	43db      	mvns	r3, r3
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4013      	ands	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d003      	beq.n	800181c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	4313      	orrs	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800181c:	4a0e      	ldr	r2, [pc, #56]	; (8001858 <HAL_GPIO_Init+0x300>)
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	3301      	adds	r3, #1
 8001826:	61fb      	str	r3, [r7, #28]
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	2b0f      	cmp	r3, #15
 800182c:	f67f aea2 	bls.w	8001574 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001830:	bf00      	nop
 8001832:	3724      	adds	r7, #36	; 0x24
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	40023800 	.word	0x40023800
 8001840:	40013800 	.word	0x40013800
 8001844:	40020000 	.word	0x40020000
 8001848:	40020400 	.word	0x40020400
 800184c:	40020800 	.word	0x40020800
 8001850:	40020c00 	.word	0x40020c00
 8001854:	40021000 	.word	0x40021000
 8001858:	40013c00 	.word	0x40013c00

0800185c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	807b      	strh	r3, [r7, #2]
 8001868:	4613      	mov	r3, r2
 800186a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800186c:	787b      	ldrb	r3, [r7, #1]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001872:	887a      	ldrh	r2, [r7, #2]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001878:	e003      	b.n	8001882 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800187a:	887b      	ldrh	r3, [r7, #2]
 800187c:	041a      	lsls	r2, r3, #16
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	619a      	str	r2, [r3, #24]
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
	...

08001890 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e25b      	b.n	8001d5a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d075      	beq.n	800199a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018ae:	4ba3      	ldr	r3, [pc, #652]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f003 030c 	and.w	r3, r3, #12
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	d00c      	beq.n	80018d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ba:	4ba0      	ldr	r3, [pc, #640]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018c2:	2b08      	cmp	r3, #8
 80018c4:	d112      	bne.n	80018ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018c6:	4b9d      	ldr	r3, [pc, #628]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018d2:	d10b      	bne.n	80018ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d4:	4b99      	ldr	r3, [pc, #612]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d05b      	beq.n	8001998 <HAL_RCC_OscConfig+0x108>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d157      	bne.n	8001998 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e236      	b.n	8001d5a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018f4:	d106      	bne.n	8001904 <HAL_RCC_OscConfig+0x74>
 80018f6:	4b91      	ldr	r3, [pc, #580]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a90      	ldr	r2, [pc, #576]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80018fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	e01d      	b.n	8001940 <HAL_RCC_OscConfig+0xb0>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800190c:	d10c      	bne.n	8001928 <HAL_RCC_OscConfig+0x98>
 800190e:	4b8b      	ldr	r3, [pc, #556]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a8a      	ldr	r2, [pc, #552]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001914:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	4b88      	ldr	r3, [pc, #544]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a87      	ldr	r2, [pc, #540]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	e00b      	b.n	8001940 <HAL_RCC_OscConfig+0xb0>
 8001928:	4b84      	ldr	r3, [pc, #528]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a83      	ldr	r2, [pc, #524]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 800192e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	4b81      	ldr	r3, [pc, #516]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a80      	ldr	r2, [pc, #512]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 800193a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800193e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d013      	beq.n	8001970 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001948:	f7ff f90c 	bl	8000b64 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001950:	f7ff f908 	bl	8000b64 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b64      	cmp	r3, #100	; 0x64
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e1fb      	b.n	8001d5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001962:	4b76      	ldr	r3, [pc, #472]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d0f0      	beq.n	8001950 <HAL_RCC_OscConfig+0xc0>
 800196e:	e014      	b.n	800199a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001970:	f7ff f8f8 	bl	8000b64 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001978:	f7ff f8f4 	bl	8000b64 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b64      	cmp	r3, #100	; 0x64
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e1e7      	b.n	8001d5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800198a:	4b6c      	ldr	r3, [pc, #432]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_OscConfig+0xe8>
 8001996:	e000      	b.n	800199a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001998:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d063      	beq.n	8001a6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019a6:	4b65      	ldr	r3, [pc, #404]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 030c 	and.w	r3, r3, #12
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00b      	beq.n	80019ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019b2:	4b62      	ldr	r3, [pc, #392]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019ba:	2b08      	cmp	r3, #8
 80019bc:	d11c      	bne.n	80019f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019be:	4b5f      	ldr	r3, [pc, #380]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d116      	bne.n	80019f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ca:	4b5c      	ldr	r3, [pc, #368]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d005      	beq.n	80019e2 <HAL_RCC_OscConfig+0x152>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d001      	beq.n	80019e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e1bb      	b.n	8001d5a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e2:	4b56      	ldr	r3, [pc, #344]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	4952      	ldr	r1, [pc, #328]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f6:	e03a      	b.n	8001a6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d020      	beq.n	8001a42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a00:	4b4f      	ldr	r3, [pc, #316]	; (8001b40 <HAL_RCC_OscConfig+0x2b0>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a06:	f7ff f8ad 	bl	8000b64 <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a0e:	f7ff f8a9 	bl	8000b64 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e19c      	b.n	8001d5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a20:	4b46      	ldr	r3, [pc, #280]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0f0      	beq.n	8001a0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2c:	4b43      	ldr	r3, [pc, #268]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	4940      	ldr	r1, [pc, #256]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	600b      	str	r3, [r1, #0]
 8001a40:	e015      	b.n	8001a6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a42:	4b3f      	ldr	r3, [pc, #252]	; (8001b40 <HAL_RCC_OscConfig+0x2b0>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a48:	f7ff f88c 	bl	8000b64 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a50:	f7ff f888 	bl	8000b64 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e17b      	b.n	8001d5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a62:	4b36      	ldr	r3, [pc, #216]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f0      	bne.n	8001a50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d030      	beq.n	8001adc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d016      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a82:	4b30      	ldr	r3, [pc, #192]	; (8001b44 <HAL_RCC_OscConfig+0x2b4>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a88:	f7ff f86c 	bl	8000b64 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a90:	f7ff f868 	bl	8000b64 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e15b      	b.n	8001d5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa2:	4b26      	ldr	r3, [pc, #152]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0f0      	beq.n	8001a90 <HAL_RCC_OscConfig+0x200>
 8001aae:	e015      	b.n	8001adc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ab0:	4b24      	ldr	r3, [pc, #144]	; (8001b44 <HAL_RCC_OscConfig+0x2b4>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab6:	f7ff f855 	bl	8000b64 <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001abc:	e008      	b.n	8001ad0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001abe:	f7ff f851 	bl	8000b64 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e144      	b.n	8001d5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad0:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001ad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1f0      	bne.n	8001abe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 80a0 	beq.w	8001c2a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aea:	2300      	movs	r3, #0
 8001aec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aee:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10f      	bne.n	8001b1a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	4a0e      	ldr	r2, [pc, #56]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b08:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0a:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b16:	2301      	movs	r3, #1
 8001b18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_RCC_OscConfig+0x2b8>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d121      	bne.n	8001b6a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b26:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <HAL_RCC_OscConfig+0x2b8>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a07      	ldr	r2, [pc, #28]	; (8001b48 <HAL_RCC_OscConfig+0x2b8>)
 8001b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b32:	f7ff f817 	bl	8000b64 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b38:	e011      	b.n	8001b5e <HAL_RCC_OscConfig+0x2ce>
 8001b3a:	bf00      	nop
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	42470000 	.word	0x42470000
 8001b44:	42470e80 	.word	0x42470e80
 8001b48:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b4c:	f7ff f80a 	bl	8000b64 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e0fd      	b.n	8001d5a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b5e:	4b81      	ldr	r3, [pc, #516]	; (8001d64 <HAL_RCC_OscConfig+0x4d4>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d106      	bne.n	8001b80 <HAL_RCC_OscConfig+0x2f0>
 8001b72:	4b7d      	ldr	r3, [pc, #500]	; (8001d68 <HAL_RCC_OscConfig+0x4d8>)
 8001b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b76:	4a7c      	ldr	r2, [pc, #496]	; (8001d68 <HAL_RCC_OscConfig+0x4d8>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b7e:	e01c      	b.n	8001bba <HAL_RCC_OscConfig+0x32a>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	2b05      	cmp	r3, #5
 8001b86:	d10c      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x312>
 8001b88:	4b77      	ldr	r3, [pc, #476]	; (8001d68 <HAL_RCC_OscConfig+0x4d8>)
 8001b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8c:	4a76      	ldr	r2, [pc, #472]	; (8001d68 <HAL_RCC_OscConfig+0x4d8>)
 8001b8e:	f043 0304 	orr.w	r3, r3, #4
 8001b92:	6713      	str	r3, [r2, #112]	; 0x70
 8001b94:	4b74      	ldr	r3, [pc, #464]	; (8001d68 <HAL_RCC_OscConfig+0x4d8>)
 8001b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b98:	4a73      	ldr	r2, [pc, #460]	; (8001d68 <HAL_RCC_OscConfig+0x4d8>)
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001ba0:	e00b      	b.n	8001bba <HAL_RCC_OscConfig+0x32a>
 8001ba2:	4b71      	ldr	r3, [pc, #452]	; (8001d68 <HAL_RCC_OscConfig+0x4d8>)
 8001ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba6:	4a70      	ldr	r2, [pc, #448]	; (8001d68 <HAL_RCC_OscConfig+0x4d8>)
 8001ba8:	f023 0301 	bic.w	r3, r3, #1
 8001bac:	6713      	str	r3, [r2, #112]	; 0x70
 8001bae:	4b6e      	ldr	r3, [pc, #440]	; (8001d68 <HAL_RCC_OscConfig+0x4d8>)
 8001bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb2:	4a6d      	ldr	r2, [pc, #436]	; (8001d68 <HAL_RCC_OscConfig+0x4d8>)
 8001bb4:	f023 0304 	bic.w	r3, r3, #4
 8001bb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d015      	beq.n	8001bee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc2:	f7fe ffcf 	bl	8000b64 <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc8:	e00a      	b.n	8001be0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bca:	f7fe ffcb 	bl	8000b64 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e0bc      	b.n	8001d5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be0:	4b61      	ldr	r3, [pc, #388]	; (8001d68 <HAL_RCC_OscConfig+0x4d8>)
 8001be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0ee      	beq.n	8001bca <HAL_RCC_OscConfig+0x33a>
 8001bec:	e014      	b.n	8001c18 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bee:	f7fe ffb9 	bl	8000b64 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf4:	e00a      	b.n	8001c0c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bf6:	f7fe ffb5 	bl	8000b64 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e0a6      	b.n	8001d5a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c0c:	4b56      	ldr	r3, [pc, #344]	; (8001d68 <HAL_RCC_OscConfig+0x4d8>)
 8001c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1ee      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c18:	7dfb      	ldrb	r3, [r7, #23]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d105      	bne.n	8001c2a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c1e:	4b52      	ldr	r3, [pc, #328]	; (8001d68 <HAL_RCC_OscConfig+0x4d8>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	4a51      	ldr	r2, [pc, #324]	; (8001d68 <HAL_RCC_OscConfig+0x4d8>)
 8001c24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 8092 	beq.w	8001d58 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c34:	4b4c      	ldr	r3, [pc, #304]	; (8001d68 <HAL_RCC_OscConfig+0x4d8>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 030c 	and.w	r3, r3, #12
 8001c3c:	2b08      	cmp	r3, #8
 8001c3e:	d05c      	beq.n	8001cfa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d141      	bne.n	8001ccc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c48:	4b48      	ldr	r3, [pc, #288]	; (8001d6c <HAL_RCC_OscConfig+0x4dc>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4e:	f7fe ff89 	bl	8000b64 <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c56:	f7fe ff85 	bl	8000b64 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e078      	b.n	8001d5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c68:	4b3f      	ldr	r3, [pc, #252]	; (8001d68 <HAL_RCC_OscConfig+0x4d8>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1f0      	bne.n	8001c56 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	69da      	ldr	r2, [r3, #28]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c82:	019b      	lsls	r3, r3, #6
 8001c84:	431a      	orrs	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8a:	085b      	lsrs	r3, r3, #1
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	041b      	lsls	r3, r3, #16
 8001c90:	431a      	orrs	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c96:	061b      	lsls	r3, r3, #24
 8001c98:	4933      	ldr	r1, [pc, #204]	; (8001d68 <HAL_RCC_OscConfig+0x4d8>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c9e:	4b33      	ldr	r3, [pc, #204]	; (8001d6c <HAL_RCC_OscConfig+0x4dc>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca4:	f7fe ff5e 	bl	8000b64 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cac:	f7fe ff5a 	bl	8000b64 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e04d      	b.n	8001d5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cbe:	4b2a      	ldr	r3, [pc, #168]	; (8001d68 <HAL_RCC_OscConfig+0x4d8>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0f0      	beq.n	8001cac <HAL_RCC_OscConfig+0x41c>
 8001cca:	e045      	b.n	8001d58 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ccc:	4b27      	ldr	r3, [pc, #156]	; (8001d6c <HAL_RCC_OscConfig+0x4dc>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd2:	f7fe ff47 	bl	8000b64 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cda:	f7fe ff43 	bl	8000b64 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e036      	b.n	8001d5a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cec:	4b1e      	ldr	r3, [pc, #120]	; (8001d68 <HAL_RCC_OscConfig+0x4d8>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1f0      	bne.n	8001cda <HAL_RCC_OscConfig+0x44a>
 8001cf8:	e02e      	b.n	8001d58 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d101      	bne.n	8001d06 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e029      	b.n	8001d5a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d06:	4b18      	ldr	r3, [pc, #96]	; (8001d68 <HAL_RCC_OscConfig+0x4d8>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d11c      	bne.n	8001d54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d115      	bne.n	8001d54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d2e:	4013      	ands	r3, r2
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d10d      	bne.n	8001d54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d106      	bne.n	8001d54 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d001      	beq.n	8001d58 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e000      	b.n	8001d5a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40007000 	.word	0x40007000
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	42470060 	.word	0x42470060

08001d70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d101      	bne.n	8001d84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e0cc      	b.n	8001f1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d84:	4b68      	ldr	r3, [pc, #416]	; (8001f28 <HAL_RCC_ClockConfig+0x1b8>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 030f 	and.w	r3, r3, #15
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d90c      	bls.n	8001dac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d92:	4b65      	ldr	r3, [pc, #404]	; (8001f28 <HAL_RCC_ClockConfig+0x1b8>)
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d9a:	4b63      	ldr	r3, [pc, #396]	; (8001f28 <HAL_RCC_ClockConfig+0x1b8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d001      	beq.n	8001dac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e0b8      	b.n	8001f1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d020      	beq.n	8001dfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d005      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dc4:	4b59      	ldr	r3, [pc, #356]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	4a58      	ldr	r2, [pc, #352]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001dca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001dce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0308 	and.w	r3, r3, #8
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d005      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ddc:	4b53      	ldr	r3, [pc, #332]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	4a52      	ldr	r2, [pc, #328]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001de2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001de6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001de8:	4b50      	ldr	r3, [pc, #320]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	494d      	ldr	r1, [pc, #308]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d044      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d107      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0e:	4b47      	ldr	r3, [pc, #284]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d119      	bne.n	8001e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e07f      	b.n	8001f1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d003      	beq.n	8001e2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e2a:	2b03      	cmp	r3, #3
 8001e2c:	d107      	bne.n	8001e3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e2e:	4b3f      	ldr	r3, [pc, #252]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d109      	bne.n	8001e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e06f      	b.n	8001f1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e3e:	4b3b      	ldr	r3, [pc, #236]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e067      	b.n	8001f1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e4e:	4b37      	ldr	r3, [pc, #220]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f023 0203 	bic.w	r2, r3, #3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	4934      	ldr	r1, [pc, #208]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e60:	f7fe fe80 	bl	8000b64 <HAL_GetTick>
 8001e64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e66:	e00a      	b.n	8001e7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e68:	f7fe fe7c 	bl	8000b64 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e04f      	b.n	8001f1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e7e:	4b2b      	ldr	r3, [pc, #172]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 020c 	and.w	r2, r3, #12
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d1eb      	bne.n	8001e68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e90:	4b25      	ldr	r3, [pc, #148]	; (8001f28 <HAL_RCC_ClockConfig+0x1b8>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 030f 	and.w	r3, r3, #15
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d20c      	bcs.n	8001eb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9e:	4b22      	ldr	r3, [pc, #136]	; (8001f28 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea6:	4b20      	ldr	r3, [pc, #128]	; (8001f28 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 030f 	and.w	r3, r3, #15
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d001      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e032      	b.n	8001f1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d008      	beq.n	8001ed6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ec4:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	4916      	ldr	r1, [pc, #88]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0308 	and.w	r3, r3, #8
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d009      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ee2:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	490e      	ldr	r1, [pc, #56]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ef6:	f000 f821 	bl	8001f3c <HAL_RCC_GetSysClockFreq>
 8001efa:	4601      	mov	r1, r0
 8001efc:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <HAL_RCC_ClockConfig+0x1bc>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	091b      	lsrs	r3, r3, #4
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	4a0a      	ldr	r2, [pc, #40]	; (8001f30 <HAL_RCC_ClockConfig+0x1c0>)
 8001f08:	5cd3      	ldrb	r3, [r2, r3]
 8001f0a:	fa21 f303 	lsr.w	r3, r1, r3
 8001f0e:	4a09      	ldr	r2, [pc, #36]	; (8001f34 <HAL_RCC_ClockConfig+0x1c4>)
 8001f10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f12:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <HAL_RCC_ClockConfig+0x1c8>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe fde0 	bl	8000adc <HAL_InitTick>

  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40023c00 	.word	0x40023c00
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	08003fe0 	.word	0x08003fe0
 8001f34:	20000000 	.word	0x20000000
 8001f38:	20000004 	.word	0x20000004

08001f3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	607b      	str	r3, [r7, #4]
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f52:	4b50      	ldr	r3, [pc, #320]	; (8002094 <HAL_RCC_GetSysClockFreq+0x158>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f003 030c 	and.w	r3, r3, #12
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	d007      	beq.n	8001f6e <HAL_RCC_GetSysClockFreq+0x32>
 8001f5e:	2b08      	cmp	r3, #8
 8001f60:	d008      	beq.n	8001f74 <HAL_RCC_GetSysClockFreq+0x38>
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f040 808d 	bne.w	8002082 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f68:	4b4b      	ldr	r3, [pc, #300]	; (8002098 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001f6a:	60bb      	str	r3, [r7, #8]
       break;
 8001f6c:	e08c      	b.n	8002088 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f6e:	4b4b      	ldr	r3, [pc, #300]	; (800209c <HAL_RCC_GetSysClockFreq+0x160>)
 8001f70:	60bb      	str	r3, [r7, #8]
      break;
 8001f72:	e089      	b.n	8002088 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f74:	4b47      	ldr	r3, [pc, #284]	; (8002094 <HAL_RCC_GetSysClockFreq+0x158>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f7c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f7e:	4b45      	ldr	r3, [pc, #276]	; (8002094 <HAL_RCC_GetSysClockFreq+0x158>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d023      	beq.n	8001fd2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f8a:	4b42      	ldr	r3, [pc, #264]	; (8002094 <HAL_RCC_GetSysClockFreq+0x158>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	099b      	lsrs	r3, r3, #6
 8001f90:	f04f 0400 	mov.w	r4, #0
 8001f94:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f98:	f04f 0200 	mov.w	r2, #0
 8001f9c:	ea03 0501 	and.w	r5, r3, r1
 8001fa0:	ea04 0602 	and.w	r6, r4, r2
 8001fa4:	4a3d      	ldr	r2, [pc, #244]	; (800209c <HAL_RCC_GetSysClockFreq+0x160>)
 8001fa6:	fb02 f106 	mul.w	r1, r2, r6
 8001faa:	2200      	movs	r2, #0
 8001fac:	fb02 f205 	mul.w	r2, r2, r5
 8001fb0:	440a      	add	r2, r1
 8001fb2:	493a      	ldr	r1, [pc, #232]	; (800209c <HAL_RCC_GetSysClockFreq+0x160>)
 8001fb4:	fba5 0101 	umull	r0, r1, r5, r1
 8001fb8:	1853      	adds	r3, r2, r1
 8001fba:	4619      	mov	r1, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f04f 0400 	mov.w	r4, #0
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	4623      	mov	r3, r4
 8001fc6:	f7fe f90b 	bl	80001e0 <__aeabi_uldivmod>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	460c      	mov	r4, r1
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	e049      	b.n	8002066 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fd2:	4b30      	ldr	r3, [pc, #192]	; (8002094 <HAL_RCC_GetSysClockFreq+0x158>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	099b      	lsrs	r3, r3, #6
 8001fd8:	f04f 0400 	mov.w	r4, #0
 8001fdc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001fe0:	f04f 0200 	mov.w	r2, #0
 8001fe4:	ea03 0501 	and.w	r5, r3, r1
 8001fe8:	ea04 0602 	and.w	r6, r4, r2
 8001fec:	4629      	mov	r1, r5
 8001fee:	4632      	mov	r2, r6
 8001ff0:	f04f 0300 	mov.w	r3, #0
 8001ff4:	f04f 0400 	mov.w	r4, #0
 8001ff8:	0154      	lsls	r4, r2, #5
 8001ffa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ffe:	014b      	lsls	r3, r1, #5
 8002000:	4619      	mov	r1, r3
 8002002:	4622      	mov	r2, r4
 8002004:	1b49      	subs	r1, r1, r5
 8002006:	eb62 0206 	sbc.w	r2, r2, r6
 800200a:	f04f 0300 	mov.w	r3, #0
 800200e:	f04f 0400 	mov.w	r4, #0
 8002012:	0194      	lsls	r4, r2, #6
 8002014:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002018:	018b      	lsls	r3, r1, #6
 800201a:	1a5b      	subs	r3, r3, r1
 800201c:	eb64 0402 	sbc.w	r4, r4, r2
 8002020:	f04f 0100 	mov.w	r1, #0
 8002024:	f04f 0200 	mov.w	r2, #0
 8002028:	00e2      	lsls	r2, r4, #3
 800202a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800202e:	00d9      	lsls	r1, r3, #3
 8002030:	460b      	mov	r3, r1
 8002032:	4614      	mov	r4, r2
 8002034:	195b      	adds	r3, r3, r5
 8002036:	eb44 0406 	adc.w	r4, r4, r6
 800203a:	f04f 0100 	mov.w	r1, #0
 800203e:	f04f 0200 	mov.w	r2, #0
 8002042:	02a2      	lsls	r2, r4, #10
 8002044:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002048:	0299      	lsls	r1, r3, #10
 800204a:	460b      	mov	r3, r1
 800204c:	4614      	mov	r4, r2
 800204e:	4618      	mov	r0, r3
 8002050:	4621      	mov	r1, r4
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f04f 0400 	mov.w	r4, #0
 8002058:	461a      	mov	r2, r3
 800205a:	4623      	mov	r3, r4
 800205c:	f7fe f8c0 	bl	80001e0 <__aeabi_uldivmod>
 8002060:	4603      	mov	r3, r0
 8002062:	460c      	mov	r4, r1
 8002064:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002066:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <HAL_RCC_GetSysClockFreq+0x158>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	0c1b      	lsrs	r3, r3, #16
 800206c:	f003 0303 	and.w	r3, r3, #3
 8002070:	3301      	adds	r3, #1
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	fbb2 f3f3 	udiv	r3, r2, r3
 800207e:	60bb      	str	r3, [r7, #8]
      break;
 8002080:	e002      	b.n	8002088 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002082:	4b05      	ldr	r3, [pc, #20]	; (8002098 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002084:	60bb      	str	r3, [r7, #8]
      break;
 8002086:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002088:	68bb      	ldr	r3, [r7, #8]
}
 800208a:	4618      	mov	r0, r3
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002092:	bf00      	nop
 8002094:	40023800 	.word	0x40023800
 8002098:	00f42400 	.word	0x00f42400
 800209c:	017d7840 	.word	0x017d7840

080020a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020a4:	4b03      	ldr	r3, [pc, #12]	; (80020b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80020a6:	681b      	ldr	r3, [r3, #0]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	20000000 	.word	0x20000000

080020b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020bc:	f7ff fff0 	bl	80020a0 <HAL_RCC_GetHCLKFreq>
 80020c0:	4601      	mov	r1, r0
 80020c2:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	0a9b      	lsrs	r3, r3, #10
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	4a03      	ldr	r2, [pc, #12]	; (80020dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80020ce:	5cd3      	ldrb	r3, [r2, r3]
 80020d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40023800 	.word	0x40023800
 80020dc:	08003ff0 	.word	0x08003ff0

080020e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020e4:	f7ff ffdc 	bl	80020a0 <HAL_RCC_GetHCLKFreq>
 80020e8:	4601      	mov	r1, r0
 80020ea:	4b05      	ldr	r3, [pc, #20]	; (8002100 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	0b5b      	lsrs	r3, r3, #13
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	4a03      	ldr	r2, [pc, #12]	; (8002104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020f6:	5cd3      	ldrb	r3, [r2, r3]
 80020f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40023800 	.word	0x40023800
 8002104:	08003ff0 	.word	0x08003ff0

08002108 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e03f      	b.n	800219a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d106      	bne.n	8002134 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7fe fc06 	bl	8000940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2224      	movs	r2, #36	; 0x24
 8002138:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68da      	ldr	r2, [r3, #12]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800214a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 f829 	bl	80021a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	691a      	ldr	r2, [r3, #16]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002160:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	695a      	ldr	r2, [r3, #20]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002170:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68da      	ldr	r2, [r3, #12]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002180:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2220      	movs	r2, #32
 800218c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2220      	movs	r2, #32
 8002194:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021a8:	b085      	sub	sp, #20
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68da      	ldr	r2, [r3, #12]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	431a      	orrs	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	4313      	orrs	r3, r2
 80021da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80021e6:	f023 030c 	bic.w	r3, r3, #12
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6812      	ldr	r2, [r2, #0]
 80021ee:	68f9      	ldr	r1, [r7, #12]
 80021f0:	430b      	orrs	r3, r1
 80021f2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	699a      	ldr	r2, [r3, #24]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002212:	f040 818b 	bne.w	800252c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4ac1      	ldr	r2, [pc, #772]	; (8002520 <UART_SetConfig+0x37c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d005      	beq.n	800222c <UART_SetConfig+0x88>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4abf      	ldr	r2, [pc, #764]	; (8002524 <UART_SetConfig+0x380>)
 8002226:	4293      	cmp	r3, r2
 8002228:	f040 80bd 	bne.w	80023a6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800222c:	f7ff ff58 	bl	80020e0 <HAL_RCC_GetPCLK2Freq>
 8002230:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	461d      	mov	r5, r3
 8002236:	f04f 0600 	mov.w	r6, #0
 800223a:	46a8      	mov	r8, r5
 800223c:	46b1      	mov	r9, r6
 800223e:	eb18 0308 	adds.w	r3, r8, r8
 8002242:	eb49 0409 	adc.w	r4, r9, r9
 8002246:	4698      	mov	r8, r3
 8002248:	46a1      	mov	r9, r4
 800224a:	eb18 0805 	adds.w	r8, r8, r5
 800224e:	eb49 0906 	adc.w	r9, r9, r6
 8002252:	f04f 0100 	mov.w	r1, #0
 8002256:	f04f 0200 	mov.w	r2, #0
 800225a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800225e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002262:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002266:	4688      	mov	r8, r1
 8002268:	4691      	mov	r9, r2
 800226a:	eb18 0005 	adds.w	r0, r8, r5
 800226e:	eb49 0106 	adc.w	r1, r9, r6
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	461d      	mov	r5, r3
 8002278:	f04f 0600 	mov.w	r6, #0
 800227c:	196b      	adds	r3, r5, r5
 800227e:	eb46 0406 	adc.w	r4, r6, r6
 8002282:	461a      	mov	r2, r3
 8002284:	4623      	mov	r3, r4
 8002286:	f7fd ffab 	bl	80001e0 <__aeabi_uldivmod>
 800228a:	4603      	mov	r3, r0
 800228c:	460c      	mov	r4, r1
 800228e:	461a      	mov	r2, r3
 8002290:	4ba5      	ldr	r3, [pc, #660]	; (8002528 <UART_SetConfig+0x384>)
 8002292:	fba3 2302 	umull	r2, r3, r3, r2
 8002296:	095b      	lsrs	r3, r3, #5
 8002298:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	461d      	mov	r5, r3
 80022a0:	f04f 0600 	mov.w	r6, #0
 80022a4:	46a9      	mov	r9, r5
 80022a6:	46b2      	mov	sl, r6
 80022a8:	eb19 0309 	adds.w	r3, r9, r9
 80022ac:	eb4a 040a 	adc.w	r4, sl, sl
 80022b0:	4699      	mov	r9, r3
 80022b2:	46a2      	mov	sl, r4
 80022b4:	eb19 0905 	adds.w	r9, r9, r5
 80022b8:	eb4a 0a06 	adc.w	sl, sl, r6
 80022bc:	f04f 0100 	mov.w	r1, #0
 80022c0:	f04f 0200 	mov.w	r2, #0
 80022c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80022cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80022d0:	4689      	mov	r9, r1
 80022d2:	4692      	mov	sl, r2
 80022d4:	eb19 0005 	adds.w	r0, r9, r5
 80022d8:	eb4a 0106 	adc.w	r1, sl, r6
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	461d      	mov	r5, r3
 80022e2:	f04f 0600 	mov.w	r6, #0
 80022e6:	196b      	adds	r3, r5, r5
 80022e8:	eb46 0406 	adc.w	r4, r6, r6
 80022ec:	461a      	mov	r2, r3
 80022ee:	4623      	mov	r3, r4
 80022f0:	f7fd ff76 	bl	80001e0 <__aeabi_uldivmod>
 80022f4:	4603      	mov	r3, r0
 80022f6:	460c      	mov	r4, r1
 80022f8:	461a      	mov	r2, r3
 80022fa:	4b8b      	ldr	r3, [pc, #556]	; (8002528 <UART_SetConfig+0x384>)
 80022fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002300:	095b      	lsrs	r3, r3, #5
 8002302:	2164      	movs	r1, #100	; 0x64
 8002304:	fb01 f303 	mul.w	r3, r1, r3
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	3332      	adds	r3, #50	; 0x32
 800230e:	4a86      	ldr	r2, [pc, #536]	; (8002528 <UART_SetConfig+0x384>)
 8002310:	fba2 2303 	umull	r2, r3, r2, r3
 8002314:	095b      	lsrs	r3, r3, #5
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800231c:	4498      	add	r8, r3
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	461d      	mov	r5, r3
 8002322:	f04f 0600 	mov.w	r6, #0
 8002326:	46a9      	mov	r9, r5
 8002328:	46b2      	mov	sl, r6
 800232a:	eb19 0309 	adds.w	r3, r9, r9
 800232e:	eb4a 040a 	adc.w	r4, sl, sl
 8002332:	4699      	mov	r9, r3
 8002334:	46a2      	mov	sl, r4
 8002336:	eb19 0905 	adds.w	r9, r9, r5
 800233a:	eb4a 0a06 	adc.w	sl, sl, r6
 800233e:	f04f 0100 	mov.w	r1, #0
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800234a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800234e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002352:	4689      	mov	r9, r1
 8002354:	4692      	mov	sl, r2
 8002356:	eb19 0005 	adds.w	r0, r9, r5
 800235a:	eb4a 0106 	adc.w	r1, sl, r6
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	461d      	mov	r5, r3
 8002364:	f04f 0600 	mov.w	r6, #0
 8002368:	196b      	adds	r3, r5, r5
 800236a:	eb46 0406 	adc.w	r4, r6, r6
 800236e:	461a      	mov	r2, r3
 8002370:	4623      	mov	r3, r4
 8002372:	f7fd ff35 	bl	80001e0 <__aeabi_uldivmod>
 8002376:	4603      	mov	r3, r0
 8002378:	460c      	mov	r4, r1
 800237a:	461a      	mov	r2, r3
 800237c:	4b6a      	ldr	r3, [pc, #424]	; (8002528 <UART_SetConfig+0x384>)
 800237e:	fba3 1302 	umull	r1, r3, r3, r2
 8002382:	095b      	lsrs	r3, r3, #5
 8002384:	2164      	movs	r1, #100	; 0x64
 8002386:	fb01 f303 	mul.w	r3, r1, r3
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	3332      	adds	r3, #50	; 0x32
 8002390:	4a65      	ldr	r2, [pc, #404]	; (8002528 <UART_SetConfig+0x384>)
 8002392:	fba2 2303 	umull	r2, r3, r2, r3
 8002396:	095b      	lsrs	r3, r3, #5
 8002398:	f003 0207 	and.w	r2, r3, #7
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4442      	add	r2, r8
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	e26f      	b.n	8002886 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80023a6:	f7ff fe87 	bl	80020b8 <HAL_RCC_GetPCLK1Freq>
 80023aa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	461d      	mov	r5, r3
 80023b0:	f04f 0600 	mov.w	r6, #0
 80023b4:	46a8      	mov	r8, r5
 80023b6:	46b1      	mov	r9, r6
 80023b8:	eb18 0308 	adds.w	r3, r8, r8
 80023bc:	eb49 0409 	adc.w	r4, r9, r9
 80023c0:	4698      	mov	r8, r3
 80023c2:	46a1      	mov	r9, r4
 80023c4:	eb18 0805 	adds.w	r8, r8, r5
 80023c8:	eb49 0906 	adc.w	r9, r9, r6
 80023cc:	f04f 0100 	mov.w	r1, #0
 80023d0:	f04f 0200 	mov.w	r2, #0
 80023d4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80023d8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80023dc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80023e0:	4688      	mov	r8, r1
 80023e2:	4691      	mov	r9, r2
 80023e4:	eb18 0005 	adds.w	r0, r8, r5
 80023e8:	eb49 0106 	adc.w	r1, r9, r6
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	461d      	mov	r5, r3
 80023f2:	f04f 0600 	mov.w	r6, #0
 80023f6:	196b      	adds	r3, r5, r5
 80023f8:	eb46 0406 	adc.w	r4, r6, r6
 80023fc:	461a      	mov	r2, r3
 80023fe:	4623      	mov	r3, r4
 8002400:	f7fd feee 	bl	80001e0 <__aeabi_uldivmod>
 8002404:	4603      	mov	r3, r0
 8002406:	460c      	mov	r4, r1
 8002408:	461a      	mov	r2, r3
 800240a:	4b47      	ldr	r3, [pc, #284]	; (8002528 <UART_SetConfig+0x384>)
 800240c:	fba3 2302 	umull	r2, r3, r3, r2
 8002410:	095b      	lsrs	r3, r3, #5
 8002412:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	461d      	mov	r5, r3
 800241a:	f04f 0600 	mov.w	r6, #0
 800241e:	46a9      	mov	r9, r5
 8002420:	46b2      	mov	sl, r6
 8002422:	eb19 0309 	adds.w	r3, r9, r9
 8002426:	eb4a 040a 	adc.w	r4, sl, sl
 800242a:	4699      	mov	r9, r3
 800242c:	46a2      	mov	sl, r4
 800242e:	eb19 0905 	adds.w	r9, r9, r5
 8002432:	eb4a 0a06 	adc.w	sl, sl, r6
 8002436:	f04f 0100 	mov.w	r1, #0
 800243a:	f04f 0200 	mov.w	r2, #0
 800243e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002442:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002446:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800244a:	4689      	mov	r9, r1
 800244c:	4692      	mov	sl, r2
 800244e:	eb19 0005 	adds.w	r0, r9, r5
 8002452:	eb4a 0106 	adc.w	r1, sl, r6
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	461d      	mov	r5, r3
 800245c:	f04f 0600 	mov.w	r6, #0
 8002460:	196b      	adds	r3, r5, r5
 8002462:	eb46 0406 	adc.w	r4, r6, r6
 8002466:	461a      	mov	r2, r3
 8002468:	4623      	mov	r3, r4
 800246a:	f7fd feb9 	bl	80001e0 <__aeabi_uldivmod>
 800246e:	4603      	mov	r3, r0
 8002470:	460c      	mov	r4, r1
 8002472:	461a      	mov	r2, r3
 8002474:	4b2c      	ldr	r3, [pc, #176]	; (8002528 <UART_SetConfig+0x384>)
 8002476:	fba3 1302 	umull	r1, r3, r3, r2
 800247a:	095b      	lsrs	r3, r3, #5
 800247c:	2164      	movs	r1, #100	; 0x64
 800247e:	fb01 f303 	mul.w	r3, r1, r3
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	3332      	adds	r3, #50	; 0x32
 8002488:	4a27      	ldr	r2, [pc, #156]	; (8002528 <UART_SetConfig+0x384>)
 800248a:	fba2 2303 	umull	r2, r3, r2, r3
 800248e:	095b      	lsrs	r3, r3, #5
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002496:	4498      	add	r8, r3
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	461d      	mov	r5, r3
 800249c:	f04f 0600 	mov.w	r6, #0
 80024a0:	46a9      	mov	r9, r5
 80024a2:	46b2      	mov	sl, r6
 80024a4:	eb19 0309 	adds.w	r3, r9, r9
 80024a8:	eb4a 040a 	adc.w	r4, sl, sl
 80024ac:	4699      	mov	r9, r3
 80024ae:	46a2      	mov	sl, r4
 80024b0:	eb19 0905 	adds.w	r9, r9, r5
 80024b4:	eb4a 0a06 	adc.w	sl, sl, r6
 80024b8:	f04f 0100 	mov.w	r1, #0
 80024bc:	f04f 0200 	mov.w	r2, #0
 80024c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80024c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80024cc:	4689      	mov	r9, r1
 80024ce:	4692      	mov	sl, r2
 80024d0:	eb19 0005 	adds.w	r0, r9, r5
 80024d4:	eb4a 0106 	adc.w	r1, sl, r6
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	461d      	mov	r5, r3
 80024de:	f04f 0600 	mov.w	r6, #0
 80024e2:	196b      	adds	r3, r5, r5
 80024e4:	eb46 0406 	adc.w	r4, r6, r6
 80024e8:	461a      	mov	r2, r3
 80024ea:	4623      	mov	r3, r4
 80024ec:	f7fd fe78 	bl	80001e0 <__aeabi_uldivmod>
 80024f0:	4603      	mov	r3, r0
 80024f2:	460c      	mov	r4, r1
 80024f4:	461a      	mov	r2, r3
 80024f6:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <UART_SetConfig+0x384>)
 80024f8:	fba3 1302 	umull	r1, r3, r3, r2
 80024fc:	095b      	lsrs	r3, r3, #5
 80024fe:	2164      	movs	r1, #100	; 0x64
 8002500:	fb01 f303 	mul.w	r3, r1, r3
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	3332      	adds	r3, #50	; 0x32
 800250a:	4a07      	ldr	r2, [pc, #28]	; (8002528 <UART_SetConfig+0x384>)
 800250c:	fba2 2303 	umull	r2, r3, r2, r3
 8002510:	095b      	lsrs	r3, r3, #5
 8002512:	f003 0207 	and.w	r2, r3, #7
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4442      	add	r2, r8
 800251c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800251e:	e1b2      	b.n	8002886 <UART_SetConfig+0x6e2>
 8002520:	40011000 	.word	0x40011000
 8002524:	40011400 	.word	0x40011400
 8002528:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4ad7      	ldr	r2, [pc, #860]	; (8002890 <UART_SetConfig+0x6ec>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d005      	beq.n	8002542 <UART_SetConfig+0x39e>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4ad6      	ldr	r2, [pc, #856]	; (8002894 <UART_SetConfig+0x6f0>)
 800253c:	4293      	cmp	r3, r2
 800253e:	f040 80d1 	bne.w	80026e4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002542:	f7ff fdcd 	bl	80020e0 <HAL_RCC_GetPCLK2Freq>
 8002546:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	469a      	mov	sl, r3
 800254c:	f04f 0b00 	mov.w	fp, #0
 8002550:	46d0      	mov	r8, sl
 8002552:	46d9      	mov	r9, fp
 8002554:	eb18 0308 	adds.w	r3, r8, r8
 8002558:	eb49 0409 	adc.w	r4, r9, r9
 800255c:	4698      	mov	r8, r3
 800255e:	46a1      	mov	r9, r4
 8002560:	eb18 080a 	adds.w	r8, r8, sl
 8002564:	eb49 090b 	adc.w	r9, r9, fp
 8002568:	f04f 0100 	mov.w	r1, #0
 800256c:	f04f 0200 	mov.w	r2, #0
 8002570:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002574:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002578:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800257c:	4688      	mov	r8, r1
 800257e:	4691      	mov	r9, r2
 8002580:	eb1a 0508 	adds.w	r5, sl, r8
 8002584:	eb4b 0609 	adc.w	r6, fp, r9
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	4619      	mov	r1, r3
 800258e:	f04f 0200 	mov.w	r2, #0
 8002592:	f04f 0300 	mov.w	r3, #0
 8002596:	f04f 0400 	mov.w	r4, #0
 800259a:	0094      	lsls	r4, r2, #2
 800259c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80025a0:	008b      	lsls	r3, r1, #2
 80025a2:	461a      	mov	r2, r3
 80025a4:	4623      	mov	r3, r4
 80025a6:	4628      	mov	r0, r5
 80025a8:	4631      	mov	r1, r6
 80025aa:	f7fd fe19 	bl	80001e0 <__aeabi_uldivmod>
 80025ae:	4603      	mov	r3, r0
 80025b0:	460c      	mov	r4, r1
 80025b2:	461a      	mov	r2, r3
 80025b4:	4bb8      	ldr	r3, [pc, #736]	; (8002898 <UART_SetConfig+0x6f4>)
 80025b6:	fba3 2302 	umull	r2, r3, r3, r2
 80025ba:	095b      	lsrs	r3, r3, #5
 80025bc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	469b      	mov	fp, r3
 80025c4:	f04f 0c00 	mov.w	ip, #0
 80025c8:	46d9      	mov	r9, fp
 80025ca:	46e2      	mov	sl, ip
 80025cc:	eb19 0309 	adds.w	r3, r9, r9
 80025d0:	eb4a 040a 	adc.w	r4, sl, sl
 80025d4:	4699      	mov	r9, r3
 80025d6:	46a2      	mov	sl, r4
 80025d8:	eb19 090b 	adds.w	r9, r9, fp
 80025dc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80025e0:	f04f 0100 	mov.w	r1, #0
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80025f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80025f4:	4689      	mov	r9, r1
 80025f6:	4692      	mov	sl, r2
 80025f8:	eb1b 0509 	adds.w	r5, fp, r9
 80025fc:	eb4c 060a 	adc.w	r6, ip, sl
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	4619      	mov	r1, r3
 8002606:	f04f 0200 	mov.w	r2, #0
 800260a:	f04f 0300 	mov.w	r3, #0
 800260e:	f04f 0400 	mov.w	r4, #0
 8002612:	0094      	lsls	r4, r2, #2
 8002614:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002618:	008b      	lsls	r3, r1, #2
 800261a:	461a      	mov	r2, r3
 800261c:	4623      	mov	r3, r4
 800261e:	4628      	mov	r0, r5
 8002620:	4631      	mov	r1, r6
 8002622:	f7fd fddd 	bl	80001e0 <__aeabi_uldivmod>
 8002626:	4603      	mov	r3, r0
 8002628:	460c      	mov	r4, r1
 800262a:	461a      	mov	r2, r3
 800262c:	4b9a      	ldr	r3, [pc, #616]	; (8002898 <UART_SetConfig+0x6f4>)
 800262e:	fba3 1302 	umull	r1, r3, r3, r2
 8002632:	095b      	lsrs	r3, r3, #5
 8002634:	2164      	movs	r1, #100	; 0x64
 8002636:	fb01 f303 	mul.w	r3, r1, r3
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	3332      	adds	r3, #50	; 0x32
 8002640:	4a95      	ldr	r2, [pc, #596]	; (8002898 <UART_SetConfig+0x6f4>)
 8002642:	fba2 2303 	umull	r2, r3, r2, r3
 8002646:	095b      	lsrs	r3, r3, #5
 8002648:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800264c:	4498      	add	r8, r3
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	469b      	mov	fp, r3
 8002652:	f04f 0c00 	mov.w	ip, #0
 8002656:	46d9      	mov	r9, fp
 8002658:	46e2      	mov	sl, ip
 800265a:	eb19 0309 	adds.w	r3, r9, r9
 800265e:	eb4a 040a 	adc.w	r4, sl, sl
 8002662:	4699      	mov	r9, r3
 8002664:	46a2      	mov	sl, r4
 8002666:	eb19 090b 	adds.w	r9, r9, fp
 800266a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800266e:	f04f 0100 	mov.w	r1, #0
 8002672:	f04f 0200 	mov.w	r2, #0
 8002676:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800267a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800267e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002682:	4689      	mov	r9, r1
 8002684:	4692      	mov	sl, r2
 8002686:	eb1b 0509 	adds.w	r5, fp, r9
 800268a:	eb4c 060a 	adc.w	r6, ip, sl
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	4619      	mov	r1, r3
 8002694:	f04f 0200 	mov.w	r2, #0
 8002698:	f04f 0300 	mov.w	r3, #0
 800269c:	f04f 0400 	mov.w	r4, #0
 80026a0:	0094      	lsls	r4, r2, #2
 80026a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80026a6:	008b      	lsls	r3, r1, #2
 80026a8:	461a      	mov	r2, r3
 80026aa:	4623      	mov	r3, r4
 80026ac:	4628      	mov	r0, r5
 80026ae:	4631      	mov	r1, r6
 80026b0:	f7fd fd96 	bl	80001e0 <__aeabi_uldivmod>
 80026b4:	4603      	mov	r3, r0
 80026b6:	460c      	mov	r4, r1
 80026b8:	461a      	mov	r2, r3
 80026ba:	4b77      	ldr	r3, [pc, #476]	; (8002898 <UART_SetConfig+0x6f4>)
 80026bc:	fba3 1302 	umull	r1, r3, r3, r2
 80026c0:	095b      	lsrs	r3, r3, #5
 80026c2:	2164      	movs	r1, #100	; 0x64
 80026c4:	fb01 f303 	mul.w	r3, r1, r3
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	011b      	lsls	r3, r3, #4
 80026cc:	3332      	adds	r3, #50	; 0x32
 80026ce:	4a72      	ldr	r2, [pc, #456]	; (8002898 <UART_SetConfig+0x6f4>)
 80026d0:	fba2 2303 	umull	r2, r3, r2, r3
 80026d4:	095b      	lsrs	r3, r3, #5
 80026d6:	f003 020f 	and.w	r2, r3, #15
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4442      	add	r2, r8
 80026e0:	609a      	str	r2, [r3, #8]
 80026e2:	e0d0      	b.n	8002886 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80026e4:	f7ff fce8 	bl	80020b8 <HAL_RCC_GetPCLK1Freq>
 80026e8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	469a      	mov	sl, r3
 80026ee:	f04f 0b00 	mov.w	fp, #0
 80026f2:	46d0      	mov	r8, sl
 80026f4:	46d9      	mov	r9, fp
 80026f6:	eb18 0308 	adds.w	r3, r8, r8
 80026fa:	eb49 0409 	adc.w	r4, r9, r9
 80026fe:	4698      	mov	r8, r3
 8002700:	46a1      	mov	r9, r4
 8002702:	eb18 080a 	adds.w	r8, r8, sl
 8002706:	eb49 090b 	adc.w	r9, r9, fp
 800270a:	f04f 0100 	mov.w	r1, #0
 800270e:	f04f 0200 	mov.w	r2, #0
 8002712:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002716:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800271a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800271e:	4688      	mov	r8, r1
 8002720:	4691      	mov	r9, r2
 8002722:	eb1a 0508 	adds.w	r5, sl, r8
 8002726:	eb4b 0609 	adc.w	r6, fp, r9
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	4619      	mov	r1, r3
 8002730:	f04f 0200 	mov.w	r2, #0
 8002734:	f04f 0300 	mov.w	r3, #0
 8002738:	f04f 0400 	mov.w	r4, #0
 800273c:	0094      	lsls	r4, r2, #2
 800273e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002742:	008b      	lsls	r3, r1, #2
 8002744:	461a      	mov	r2, r3
 8002746:	4623      	mov	r3, r4
 8002748:	4628      	mov	r0, r5
 800274a:	4631      	mov	r1, r6
 800274c:	f7fd fd48 	bl	80001e0 <__aeabi_uldivmod>
 8002750:	4603      	mov	r3, r0
 8002752:	460c      	mov	r4, r1
 8002754:	461a      	mov	r2, r3
 8002756:	4b50      	ldr	r3, [pc, #320]	; (8002898 <UART_SetConfig+0x6f4>)
 8002758:	fba3 2302 	umull	r2, r3, r3, r2
 800275c:	095b      	lsrs	r3, r3, #5
 800275e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	469b      	mov	fp, r3
 8002766:	f04f 0c00 	mov.w	ip, #0
 800276a:	46d9      	mov	r9, fp
 800276c:	46e2      	mov	sl, ip
 800276e:	eb19 0309 	adds.w	r3, r9, r9
 8002772:	eb4a 040a 	adc.w	r4, sl, sl
 8002776:	4699      	mov	r9, r3
 8002778:	46a2      	mov	sl, r4
 800277a:	eb19 090b 	adds.w	r9, r9, fp
 800277e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002782:	f04f 0100 	mov.w	r1, #0
 8002786:	f04f 0200 	mov.w	r2, #0
 800278a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800278e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002792:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002796:	4689      	mov	r9, r1
 8002798:	4692      	mov	sl, r2
 800279a:	eb1b 0509 	adds.w	r5, fp, r9
 800279e:	eb4c 060a 	adc.w	r6, ip, sl
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	4619      	mov	r1, r3
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	f04f 0300 	mov.w	r3, #0
 80027b0:	f04f 0400 	mov.w	r4, #0
 80027b4:	0094      	lsls	r4, r2, #2
 80027b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80027ba:	008b      	lsls	r3, r1, #2
 80027bc:	461a      	mov	r2, r3
 80027be:	4623      	mov	r3, r4
 80027c0:	4628      	mov	r0, r5
 80027c2:	4631      	mov	r1, r6
 80027c4:	f7fd fd0c 	bl	80001e0 <__aeabi_uldivmod>
 80027c8:	4603      	mov	r3, r0
 80027ca:	460c      	mov	r4, r1
 80027cc:	461a      	mov	r2, r3
 80027ce:	4b32      	ldr	r3, [pc, #200]	; (8002898 <UART_SetConfig+0x6f4>)
 80027d0:	fba3 1302 	umull	r1, r3, r3, r2
 80027d4:	095b      	lsrs	r3, r3, #5
 80027d6:	2164      	movs	r1, #100	; 0x64
 80027d8:	fb01 f303 	mul.w	r3, r1, r3
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	3332      	adds	r3, #50	; 0x32
 80027e2:	4a2d      	ldr	r2, [pc, #180]	; (8002898 <UART_SetConfig+0x6f4>)
 80027e4:	fba2 2303 	umull	r2, r3, r2, r3
 80027e8:	095b      	lsrs	r3, r3, #5
 80027ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027ee:	4498      	add	r8, r3
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	469b      	mov	fp, r3
 80027f4:	f04f 0c00 	mov.w	ip, #0
 80027f8:	46d9      	mov	r9, fp
 80027fa:	46e2      	mov	sl, ip
 80027fc:	eb19 0309 	adds.w	r3, r9, r9
 8002800:	eb4a 040a 	adc.w	r4, sl, sl
 8002804:	4699      	mov	r9, r3
 8002806:	46a2      	mov	sl, r4
 8002808:	eb19 090b 	adds.w	r9, r9, fp
 800280c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002810:	f04f 0100 	mov.w	r1, #0
 8002814:	f04f 0200 	mov.w	r2, #0
 8002818:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800281c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002820:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002824:	4689      	mov	r9, r1
 8002826:	4692      	mov	sl, r2
 8002828:	eb1b 0509 	adds.w	r5, fp, r9
 800282c:	eb4c 060a 	adc.w	r6, ip, sl
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	4619      	mov	r1, r3
 8002836:	f04f 0200 	mov.w	r2, #0
 800283a:	f04f 0300 	mov.w	r3, #0
 800283e:	f04f 0400 	mov.w	r4, #0
 8002842:	0094      	lsls	r4, r2, #2
 8002844:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002848:	008b      	lsls	r3, r1, #2
 800284a:	461a      	mov	r2, r3
 800284c:	4623      	mov	r3, r4
 800284e:	4628      	mov	r0, r5
 8002850:	4631      	mov	r1, r6
 8002852:	f7fd fcc5 	bl	80001e0 <__aeabi_uldivmod>
 8002856:	4603      	mov	r3, r0
 8002858:	460c      	mov	r4, r1
 800285a:	461a      	mov	r2, r3
 800285c:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <UART_SetConfig+0x6f4>)
 800285e:	fba3 1302 	umull	r1, r3, r3, r2
 8002862:	095b      	lsrs	r3, r3, #5
 8002864:	2164      	movs	r1, #100	; 0x64
 8002866:	fb01 f303 	mul.w	r3, r1, r3
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	011b      	lsls	r3, r3, #4
 800286e:	3332      	adds	r3, #50	; 0x32
 8002870:	4a09      	ldr	r2, [pc, #36]	; (8002898 <UART_SetConfig+0x6f4>)
 8002872:	fba2 2303 	umull	r2, r3, r2, r3
 8002876:	095b      	lsrs	r3, r3, #5
 8002878:	f003 020f 	and.w	r2, r3, #15
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4442      	add	r2, r8
 8002882:	609a      	str	r2, [r3, #8]
}
 8002884:	e7ff      	b.n	8002886 <UART_SetConfig+0x6e2>
 8002886:	bf00      	nop
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002890:	40011000 	.word	0x40011000
 8002894:	40011400 	.word	0x40011400
 8002898:	51eb851f 	.word	0x51eb851f

0800289c <MS5607_init>:
 *      Author: Jeff
 */

#include "MS5607.h"

genericDevice_t MS5607_init(SPI_HandleTypeDef *bus, GPIO_TypeDef *port, uint16_t pin) {
 800289c:	b5b0      	push	{r4, r5, r7, lr}
 800289e:	b0ae      	sub	sp, #184	; 0xb8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
 80028a8:	807b      	strh	r3, [r7, #2]
	/** Define MS5607 Struct **/
	MS5607_t _bmp = {0};
 80028aa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80028ae:	2238      	movs	r2, #56	; 0x38
 80028b0:	2100      	movs	r1, #0
 80028b2:	4618      	mov	r0, r3
 80028b4:	f001 fb53 	bl	8003f5e <memset>
	genericDevice_t gBMP = {0};
 80028b8:	f107 0310 	add.w	r3, r7, #16
 80028bc:	2270      	movs	r2, #112	; 0x70
 80028be:	2100      	movs	r1, #0
 80028c0:	4618      	mov	r0, r3
 80028c2:	f001 fb4c 	bl	8003f5e <memset>

	gBMP.deviceType = BMP_MS5607;
 80028c6:	2303      	movs	r3, #3
 80028c8:	743b      	strb	r3, [r7, #16]
	gBMP.read = MS5607_read;
 80028ca:	4b16      	ldr	r3, [pc, #88]	; (8002924 <MS5607_init+0x88>)
 80028cc:	617b      	str	r3, [r7, #20]
	gBMP.device.MS5607 = _bmp;
 80028ce:	f107 0418 	add.w	r4, r7, #24
 80028d2:	f107 0580 	add.w	r5, r7, #128	; 0x80
 80028d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80028e6:	e884 0003 	stmia.w	r4, {r0, r1}
//#ifndef __NO_HAL_SPI
	gBMP.interface.SPI.bus = bus;
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	66bb      	str	r3, [r7, #104]	; 0x68
	gBMP.interface.SPI.port = port;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	66fb      	str	r3, [r7, #108]	; 0x6c
	gBMP.interface.SPI.pin = pin;
 80028f2:	887b      	ldrh	r3, [r7, #2]
 80028f4:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
	gBMP.interface.SPI.timeout = HAL_MAX_DELAY;
 80028f8:	f04f 33ff 	mov.w	r3, #4294967295
 80028fc:	677b      	str	r3, [r7, #116]	; 0x74

//#endif
	gBMP.hasUpdate = true;
 80028fe:	2301      	movs	r3, #1
 8002900:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
	gBMP.lock = false;
 8002904:	2300      	movs	r3, #0
 8002906:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a

	HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
#endif
	// Update with all values

	return gBMP;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	4618      	mov	r0, r3
 800290e:	f107 0310 	add.w	r3, r7, #16
 8002912:	2270      	movs	r2, #112	; 0x70
 8002914:	4619      	mov	r1, r3
 8002916:	f001 fb17 	bl	8003f48 <memcpy>
}
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	37b8      	adds	r7, #184	; 0xb8
 800291e:	46bd      	mov	sp, r7
 8002920:	bdb0      	pop	{r4, r5, r7, pc}
 8002922:	bf00      	nop
 8002924:	08002929 	.word	0x08002929

08002928 <MS5607_read>:

HAL_StatusTypeDef MS5607_read(genericDevice_t* device) {
 8002928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
	MS5607_t* bmp = &(device->device.MS5607);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3308      	adds	r3, #8
 8002934:	60fb      	str	r3, [r7, #12]



	while(device->lock) retryTakeDelay(DEFAULT_TAKE_DELAY);
 8002936:	e002      	b.n	800293e <MS5607_read+0x16>
 8002938:	2032      	movs	r0, #50	; 0x32
 800293a:	f000 f899 	bl	8002a70 <retryTakeDelay>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1f7      	bne.n	8002938 <MS5607_read+0x10>
	device->lock = true;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	//unlockSPI(device);
#endif

	//Calculate calibrated pressure
	//T = D2 - TREF = D2 - C5 * 2 ^ 8
	bmp->deltaT = bmp->digitalTemp - bmp->tref * 256;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	8912      	ldrh	r2, [r2, #8]
 8002958:	0212      	lsls	r2, r2, #8
 800295a:	1a9b      	subs	r3, r3, r2
 800295c:	461a      	mov	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	615a      	str	r2, [r3, #20]
	//TEMP = 20°C + dT* TEMPSENS = 2000 + dT * C6 / 2 ^ 23
	bmp->temp = 2000 + bmp->deltaT * bmp->tempsens / 8388608;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	8952      	ldrh	r2, [r2, #10]
 800296a:	fb02 f303 	mul.w	r3, r2, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	da02      	bge.n	8002978 <MS5607_read+0x50>
 8002972:	4a3d      	ldr	r2, [pc, #244]	; (8002a68 <MS5607_read+0x140>)
 8002974:	441a      	add	r2, r3
 8002976:	4613      	mov	r3, r2
 8002978:	15db      	asrs	r3, r3, #23
 800297a:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	619a      	str	r2, [r3, #24]
	//OFF = OFFT1 + TCO* dT = C2 * 2 ^ 17 + (C4 * dT) / 2 ^ 6
	bmp->off = bmp->offt1 * 131072 + (bmp->tco * bmp->deltaT) / 64;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	885b      	ldrh	r3, [r3, #2]
 8002986:	045a      	lsls	r2, r3, #17
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	88db      	ldrh	r3, [r3, #6]
 800298c:	4619      	mov	r1, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	fb03 f301 	mul.w	r3, r3, r1
 8002996:	2b00      	cmp	r3, #0
 8002998:	da00      	bge.n	800299c <MS5607_read+0x74>
 800299a:	333f      	adds	r3, #63	; 0x3f
 800299c:	119b      	asrs	r3, r3, #6
 800299e:	4413      	add	r3, r2
 80029a0:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	e9c2 3408 	strd	r3, r4, [r2, #32]
	//SENS = SENST1 + TCS * dT = C1 * 2 ^ 16 + (C3 * dT) / 2 ^ 7
	bmp->sens = bmp->senst1 * 65536 + (bmp->tcs * bmp->deltaT) / 128;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	041a      	lsls	r2, r3, #16
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	889b      	ldrh	r3, [r3, #4]
 80029b4:	4619      	mov	r1, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	fb03 f301 	mul.w	r3, r3, r1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	da00      	bge.n	80029c4 <MS5607_read+0x9c>
 80029c2:	337f      	adds	r3, #127	; 0x7f
 80029c4:	11db      	asrs	r3, r3, #7
 80029c6:	4413      	add	r3, r2
 80029c8:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	//P = D1 * SENS - OFF = (D1 * SENS / 2 ^ 21 - OFF) / 2 ^ 15
	bmp->pressure = (bmp->digitalPres * bmp->sens / 2097152 - bmp->off) / 32768; //This is the magic number in mbar
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	4619      	mov	r1, r3
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 80029e2:	fb03 f502 	mul.w	r5, r3, r2
 80029e6:	fb01 f004 	mul.w	r0, r1, r4
 80029ea:	4428      	add	r0, r5
 80029ec:	fba1 3403 	umull	r3, r4, r1, r3
 80029f0:	1902      	adds	r2, r0, r4
 80029f2:	4614      	mov	r4, r2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f174 0200 	sbcs.w	r2, r4, #0
 80029fa:	da05      	bge.n	8002a08 <MS5607_read+0xe0>
 80029fc:	491b      	ldr	r1, [pc, #108]	; (8002a6c <MS5607_read+0x144>)
 80029fe:	f04f 0200 	mov.w	r2, #0
 8002a02:	185b      	adds	r3, r3, r1
 8002a04:	eb44 0402 	adc.w	r4, r4, r2
 8002a08:	f04f 0100 	mov.w	r1, #0
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	0d59      	lsrs	r1, r3, #21
 8002a12:	ea41 21c4 	orr.w	r1, r1, r4, lsl #11
 8002a16:	1562      	asrs	r2, r4, #21
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	e9d3 5608 	ldrd	r5, r6, [r3, #32]
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4614      	mov	r4, r2
 8002a22:	1b5b      	subs	r3, r3, r5
 8002a24:	eb64 0406 	sbc.w	r4, r4, r6
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f174 0200 	sbcs.w	r2, r4, #0
 8002a2e:	da06      	bge.n	8002a3e <MS5607_read+0x116>
 8002a30:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002a34:	f04f 0200 	mov.w	r2, #0
 8002a38:	185b      	adds	r3, r3, r1
 8002a3a:	eb44 0402 	adc.w	r4, r4, r2
 8002a3e:	f04f 0100 	mov.w	r1, #0
 8002a42:	f04f 0200 	mov.w	r2, #0
 8002a46:	0bd9      	lsrs	r1, r3, #15
 8002a48:	ea41 4144 	orr.w	r1, r1, r4, lsl #17
 8002a4c:	13e2      	asrs	r2, r4, #15
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4614      	mov	r4, r2
 8002a52:	461a      	mov	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	631a      	str	r2, [r3, #48]	; 0x30

	return device->state;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3714      	adds	r7, #20
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a66:	bf00      	nop
 8002a68:	007fffff 	.word	0x007fffff
 8002a6c:	001fffff 	.word	0x001fffff

08002a70 <retryTakeDelay>:
 * @retval None
 *
 * @author Jeff Kaji
 * @date 12/28/2020
 */
void retryTakeDelay(TickType_t length) {
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
#ifndef HARDWARE_EMULATOR
	vTaskDelay(length);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 fac7 	bl	800300c <vTaskDelay>
#endif
}
 8002a7e:	bf00      	nop
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b085      	sub	sp, #20
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002a90:	2300      	movs	r3, #0
 8002a92:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002a94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a98:	2b84      	cmp	r3, #132	; 0x84
 8002a9a:	d005      	beq.n	8002aa8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002a9c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3303      	adds	r3, #3
 8002aa6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002aba:	f000 fadb 	bl	8003074 <vTaskStartScheduler>
  
  return osOK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ac6:	b089      	sub	sp, #36	; 0x24
 8002ac8:	af04      	add	r7, sp, #16
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d020      	beq.n	8002b18 <osThreadCreate+0x54>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d01c      	beq.n	8002b18 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685c      	ldr	r4, [r3, #4]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681d      	ldr	r5, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691e      	ldr	r6, [r3, #16]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff ffc8 	bl	8002a86 <makeFreeRtosPriority>
 8002af6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b00:	9202      	str	r2, [sp, #8]
 8002b02:	9301      	str	r3, [sp, #4]
 8002b04:	9100      	str	r1, [sp, #0]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	4632      	mov	r2, r6
 8002b0a:	4629      	mov	r1, r5
 8002b0c:	4620      	mov	r0, r4
 8002b0e:	f000 f8ed 	bl	8002cec <xTaskCreateStatic>
 8002b12:	4603      	mov	r3, r0
 8002b14:	60fb      	str	r3, [r7, #12]
 8002b16:	e01c      	b.n	8002b52 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685c      	ldr	r4, [r3, #4]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b24:	b29e      	uxth	r6, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff ffaa 	bl	8002a86 <makeFreeRtosPriority>
 8002b32:	4602      	mov	r2, r0
 8002b34:	f107 030c 	add.w	r3, r7, #12
 8002b38:	9301      	str	r3, [sp, #4]
 8002b3a:	9200      	str	r2, [sp, #0]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	4632      	mov	r2, r6
 8002b40:	4629      	mov	r1, r5
 8002b42:	4620      	mov	r0, r4
 8002b44:	f000 f92c 	bl	8002da0 <xTaskCreate>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d001      	beq.n	8002b52 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	e000      	b.n	8002b54 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002b52:	68fb      	ldr	r3, [r7, #12]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b5c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <osDelay+0x16>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	e000      	b.n	8002b74 <osDelay+0x18>
 8002b72:	2301      	movs	r3, #1
 8002b74:	4618      	mov	r0, r3
 8002b76:	f000 fa49 	bl	800300c <vTaskDelay>
  
  return osOK;
 8002b7a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f103 0208 	add.w	r2, r3, #8
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f04f 32ff 	mov.w	r2, #4294967295
 8002b9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f103 0208 	add.w	r2, r3, #8
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f103 0208 	add.w	r2, r3, #8
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002bde:	b480      	push	{r7}
 8002be0:	b085      	sub	sp, #20
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
 8002be6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	1c5a      	adds	r2, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	601a      	str	r2, [r3, #0]
}
 8002c1a:	bf00      	nop
 8002c1c:	3714      	adds	r7, #20
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c26:	b480      	push	{r7}
 8002c28:	b085      	sub	sp, #20
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
 8002c2e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c3c:	d103      	bne.n	8002c46 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	e00c      	b.n	8002c60 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	3308      	adds	r3, #8
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	e002      	b.n	8002c54 <vListInsert+0x2e>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68ba      	ldr	r2, [r7, #8]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d2f6      	bcs.n	8002c4e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	1c5a      	adds	r2, r3, #1
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	601a      	str	r2, [r3, #0]
}
 8002c8c:	bf00      	nop
 8002c8e:	3714      	adds	r7, #20
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6892      	ldr	r2, [r2, #8]
 8002cae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6852      	ldr	r2, [r2, #4]
 8002cb8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d103      	bne.n	8002ccc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	1e5a      	subs	r2, r3, #1
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08e      	sub	sp, #56	; 0x38
 8002cf0:	af04      	add	r7, sp, #16
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
 8002cf8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d109      	bne.n	8002d14 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d04:	f383 8811 	msr	BASEPRI, r3
 8002d08:	f3bf 8f6f 	isb	sy
 8002d0c:	f3bf 8f4f 	dsb	sy
 8002d10:	623b      	str	r3, [r7, #32]
 8002d12:	e7fe      	b.n	8002d12 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d109      	bne.n	8002d2e <xTaskCreateStatic+0x42>
 8002d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d1e:	f383 8811 	msr	BASEPRI, r3
 8002d22:	f3bf 8f6f 	isb	sy
 8002d26:	f3bf 8f4f 	dsb	sy
 8002d2a:	61fb      	str	r3, [r7, #28]
 8002d2c:	e7fe      	b.n	8002d2c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002d2e:	2354      	movs	r3, #84	; 0x54
 8002d30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	2b54      	cmp	r3, #84	; 0x54
 8002d36:	d009      	beq.n	8002d4c <xTaskCreateStatic+0x60>
 8002d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d3c:	f383 8811 	msr	BASEPRI, r3
 8002d40:	f3bf 8f6f 	isb	sy
 8002d44:	f3bf 8f4f 	dsb	sy
 8002d48:	61bb      	str	r3, [r7, #24]
 8002d4a:	e7fe      	b.n	8002d4a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002d4c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d01e      	beq.n	8002d92 <xTaskCreateStatic+0xa6>
 8002d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d01b      	beq.n	8002d92 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d5c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d62:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	2202      	movs	r2, #2
 8002d68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	9303      	str	r3, [sp, #12]
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	9302      	str	r3, [sp, #8]
 8002d74:	f107 0314 	add.w	r3, r7, #20
 8002d78:	9301      	str	r3, [sp, #4]
 8002d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	68b9      	ldr	r1, [r7, #8]
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 f850 	bl	8002e2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d8c:	f000 f8d4 	bl	8002f38 <prvAddNewTaskToReadyList>
 8002d90:	e001      	b.n	8002d96 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8002d92:	2300      	movs	r3, #0
 8002d94:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002d96:	697b      	ldr	r3, [r7, #20]
	}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3728      	adds	r7, #40	; 0x28
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b08c      	sub	sp, #48	; 0x30
 8002da4:	af04      	add	r7, sp, #16
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	603b      	str	r3, [r7, #0]
 8002dac:	4613      	mov	r3, r2
 8002dae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002db0:	88fb      	ldrh	r3, [r7, #6]
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 fecd 	bl	8003b54 <pvPortMalloc>
 8002dba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00e      	beq.n	8002de0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002dc2:	2054      	movs	r0, #84	; 0x54
 8002dc4:	f000 fec6 	bl	8003b54 <pvPortMalloc>
 8002dc8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	631a      	str	r2, [r3, #48]	; 0x30
 8002dd6:	e005      	b.n	8002de4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002dd8:	6978      	ldr	r0, [r7, #20]
 8002dda:	f000 ff7d 	bl	8003cd8 <vPortFree>
 8002dde:	e001      	b.n	8002de4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002de0:	2300      	movs	r3, #0
 8002de2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d017      	beq.n	8002e1a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002df2:	88fa      	ldrh	r2, [r7, #6]
 8002df4:	2300      	movs	r3, #0
 8002df6:	9303      	str	r3, [sp, #12]
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	9302      	str	r3, [sp, #8]
 8002dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfe:	9301      	str	r3, [sp, #4]
 8002e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	68b9      	ldr	r1, [r7, #8]
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 f80e 	bl	8002e2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e0e:	69f8      	ldr	r0, [r7, #28]
 8002e10:	f000 f892 	bl	8002f38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002e14:	2301      	movs	r3, #1
 8002e16:	61bb      	str	r3, [r7, #24]
 8002e18:	e002      	b.n	8002e20 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e1e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002e20:	69bb      	ldr	r3, [r7, #24]
	}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3720      	adds	r7, #32
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b088      	sub	sp, #32
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	60f8      	str	r0, [r7, #12]
 8002e32:	60b9      	str	r1, [r7, #8]
 8002e34:	607a      	str	r2, [r7, #4]
 8002e36:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e42:	3b01      	subs	r3, #1
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	f023 0307 	bic.w	r3, r3, #7
 8002e50:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d009      	beq.n	8002e70 <prvInitialiseNewTask+0x46>
 8002e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e60:	f383 8811 	msr	BASEPRI, r3
 8002e64:	f3bf 8f6f 	isb	sy
 8002e68:	f3bf 8f4f 	dsb	sy
 8002e6c:	617b      	str	r3, [r7, #20]
 8002e6e:	e7fe      	b.n	8002e6e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d01f      	beq.n	8002eb6 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e76:	2300      	movs	r3, #0
 8002e78:	61fb      	str	r3, [r7, #28]
 8002e7a:	e012      	b.n	8002ea2 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	4413      	add	r3, r2
 8002e82:	7819      	ldrb	r1, [r3, #0]
 8002e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	4413      	add	r3, r2
 8002e8a:	3334      	adds	r3, #52	; 0x34
 8002e8c:	460a      	mov	r2, r1
 8002e8e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	4413      	add	r3, r2
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d006      	beq.n	8002eaa <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	61fb      	str	r3, [r7, #28]
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	2b0f      	cmp	r3, #15
 8002ea6:	d9e9      	bls.n	8002e7c <prvInitialiseNewTask+0x52>
 8002ea8:	e000      	b.n	8002eac <prvInitialiseNewTask+0x82>
			{
				break;
 8002eaa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002eb4:	e003      	b.n	8002ebe <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec0:	2b06      	cmp	r3, #6
 8002ec2:	d901      	bls.n	8002ec8 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ec4:	2306      	movs	r3, #6
 8002ec6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ecc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ed2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002edc:	3304      	adds	r3, #4
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff fe70 	bl	8002bc4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee6:	3318      	adds	r3, #24
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff fe6b 	bl	8002bc4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ef2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef6:	f1c3 0207 	rsb	r2, r3, #7
 8002efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f02:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f06:	2200      	movs	r2, #0
 8002f08:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	68f9      	ldr	r1, [r7, #12]
 8002f16:	69b8      	ldr	r0, [r7, #24]
 8002f18:	f000 fc1c 	bl	8003754 <pxPortInitialiseStack>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f20:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d002      	beq.n	8002f2e <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f2e:	bf00      	nop
 8002f30:	3720      	adds	r7, #32
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
	...

08002f38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002f40:	f000 fd2c 	bl	800399c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002f44:	4b2a      	ldr	r3, [pc, #168]	; (8002ff0 <prvAddNewTaskToReadyList+0xb8>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	4a29      	ldr	r2, [pc, #164]	; (8002ff0 <prvAddNewTaskToReadyList+0xb8>)
 8002f4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002f4e:	4b29      	ldr	r3, [pc, #164]	; (8002ff4 <prvAddNewTaskToReadyList+0xbc>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d109      	bne.n	8002f6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002f56:	4a27      	ldr	r2, [pc, #156]	; (8002ff4 <prvAddNewTaskToReadyList+0xbc>)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f5c:	4b24      	ldr	r3, [pc, #144]	; (8002ff0 <prvAddNewTaskToReadyList+0xb8>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d110      	bne.n	8002f86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002f64:	f000 fab8 	bl	80034d8 <prvInitialiseTaskLists>
 8002f68:	e00d      	b.n	8002f86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002f6a:	4b23      	ldr	r3, [pc, #140]	; (8002ff8 <prvAddNewTaskToReadyList+0xc0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d109      	bne.n	8002f86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f72:	4b20      	ldr	r3, [pc, #128]	; (8002ff4 <prvAddNewTaskToReadyList+0xbc>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d802      	bhi.n	8002f86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002f80:	4a1c      	ldr	r2, [pc, #112]	; (8002ff4 <prvAddNewTaskToReadyList+0xbc>)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002f86:	4b1d      	ldr	r3, [pc, #116]	; (8002ffc <prvAddNewTaskToReadyList+0xc4>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	4a1b      	ldr	r2, [pc, #108]	; (8002ffc <prvAddNewTaskToReadyList+0xc4>)
 8002f8e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f94:	2201      	movs	r2, #1
 8002f96:	409a      	lsls	r2, r3
 8002f98:	4b19      	ldr	r3, [pc, #100]	; (8003000 <prvAddNewTaskToReadyList+0xc8>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	4a18      	ldr	r2, [pc, #96]	; (8003000 <prvAddNewTaskToReadyList+0xc8>)
 8002fa0:	6013      	str	r3, [r2, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4413      	add	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4a15      	ldr	r2, [pc, #84]	; (8003004 <prvAddNewTaskToReadyList+0xcc>)
 8002fb0:	441a      	add	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	4610      	mov	r0, r2
 8002fba:	f7ff fe10 	bl	8002bde <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002fbe:	f000 fd1b 	bl	80039f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002fc2:	4b0d      	ldr	r3, [pc, #52]	; (8002ff8 <prvAddNewTaskToReadyList+0xc0>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00e      	beq.n	8002fe8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002fca:	4b0a      	ldr	r3, [pc, #40]	; (8002ff4 <prvAddNewTaskToReadyList+0xbc>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d207      	bcs.n	8002fe8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002fd8:	4b0b      	ldr	r3, [pc, #44]	; (8003008 <prvAddNewTaskToReadyList+0xd0>)
 8002fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	f3bf 8f4f 	dsb	sy
 8002fe4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002fe8:	bf00      	nop
 8002fea:	3708      	adds	r7, #8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	20000380 	.word	0x20000380
 8002ff4:	20000280 	.word	0x20000280
 8002ff8:	2000038c 	.word	0x2000038c
 8002ffc:	2000039c 	.word	0x2000039c
 8003000:	20000388 	.word	0x20000388
 8003004:	20000284 	.word	0x20000284
 8003008:	e000ed04 	.word	0xe000ed04

0800300c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003014:	2300      	movs	r3, #0
 8003016:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d016      	beq.n	800304c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800301e:	4b13      	ldr	r3, [pc, #76]	; (800306c <vTaskDelay+0x60>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d009      	beq.n	800303a <vTaskDelay+0x2e>
 8003026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800302a:	f383 8811 	msr	BASEPRI, r3
 800302e:	f3bf 8f6f 	isb	sy
 8003032:	f3bf 8f4f 	dsb	sy
 8003036:	60bb      	str	r3, [r7, #8]
 8003038:	e7fe      	b.n	8003038 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800303a:	f000 f879 	bl	8003130 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800303e:	2100      	movs	r1, #0
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 fb21 	bl	8003688 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003046:	f000 f881 	bl	800314c <xTaskResumeAll>
 800304a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d107      	bne.n	8003062 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003052:	4b07      	ldr	r3, [pc, #28]	; (8003070 <vTaskDelay+0x64>)
 8003054:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	f3bf 8f4f 	dsb	sy
 800305e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003062:	bf00      	nop
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	200003a8 	.word	0x200003a8
 8003070:	e000ed04 	.word	0xe000ed04

08003074 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b08a      	sub	sp, #40	; 0x28
 8003078:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800307a:	2300      	movs	r3, #0
 800307c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800307e:	2300      	movs	r3, #0
 8003080:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003082:	463a      	mov	r2, r7
 8003084:	1d39      	adds	r1, r7, #4
 8003086:	f107 0308 	add.w	r3, r7, #8
 800308a:	4618      	mov	r0, r3
 800308c:	f7fd fa28 	bl	80004e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003090:	6839      	ldr	r1, [r7, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	9202      	str	r2, [sp, #8]
 8003098:	9301      	str	r3, [sp, #4]
 800309a:	2300      	movs	r3, #0
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	2300      	movs	r3, #0
 80030a0:	460a      	mov	r2, r1
 80030a2:	491d      	ldr	r1, [pc, #116]	; (8003118 <vTaskStartScheduler+0xa4>)
 80030a4:	481d      	ldr	r0, [pc, #116]	; (800311c <vTaskStartScheduler+0xa8>)
 80030a6:	f7ff fe21 	bl	8002cec <xTaskCreateStatic>
 80030aa:	4602      	mov	r2, r0
 80030ac:	4b1c      	ldr	r3, [pc, #112]	; (8003120 <vTaskStartScheduler+0xac>)
 80030ae:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80030b0:	4b1b      	ldr	r3, [pc, #108]	; (8003120 <vTaskStartScheduler+0xac>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80030b8:	2301      	movs	r3, #1
 80030ba:	617b      	str	r3, [r7, #20]
 80030bc:	e001      	b.n	80030c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80030be:	2300      	movs	r3, #0
 80030c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d115      	bne.n	80030f4 <vTaskStartScheduler+0x80>
 80030c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030cc:	f383 8811 	msr	BASEPRI, r3
 80030d0:	f3bf 8f6f 	isb	sy
 80030d4:	f3bf 8f4f 	dsb	sy
 80030d8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80030da:	4b12      	ldr	r3, [pc, #72]	; (8003124 <vTaskStartScheduler+0xb0>)
 80030dc:	f04f 32ff 	mov.w	r2, #4294967295
 80030e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80030e2:	4b11      	ldr	r3, [pc, #68]	; (8003128 <vTaskStartScheduler+0xb4>)
 80030e4:	2201      	movs	r2, #1
 80030e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80030e8:	4b10      	ldr	r3, [pc, #64]	; (800312c <vTaskStartScheduler+0xb8>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80030ee:	f000 fbb7 	bl	8003860 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80030f2:	e00d      	b.n	8003110 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fa:	d109      	bne.n	8003110 <vTaskStartScheduler+0x9c>
 80030fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003100:	f383 8811 	msr	BASEPRI, r3
 8003104:	f3bf 8f6f 	isb	sy
 8003108:	f3bf 8f4f 	dsb	sy
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	e7fe      	b.n	800310e <vTaskStartScheduler+0x9a>
}
 8003110:	bf00      	nop
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	08003fd8 	.word	0x08003fd8
 800311c:	080034a9 	.word	0x080034a9
 8003120:	200003a4 	.word	0x200003a4
 8003124:	200003a0 	.word	0x200003a0
 8003128:	2000038c 	.word	0x2000038c
 800312c:	20000384 	.word	0x20000384

08003130 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003134:	4b04      	ldr	r3, [pc, #16]	; (8003148 <vTaskSuspendAll+0x18>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	3301      	adds	r3, #1
 800313a:	4a03      	ldr	r2, [pc, #12]	; (8003148 <vTaskSuspendAll+0x18>)
 800313c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800313e:	bf00      	nop
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	200003a8 	.word	0x200003a8

0800314c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003152:	2300      	movs	r3, #0
 8003154:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003156:	2300      	movs	r3, #0
 8003158:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800315a:	4b41      	ldr	r3, [pc, #260]	; (8003260 <xTaskResumeAll+0x114>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d109      	bne.n	8003176 <xTaskResumeAll+0x2a>
 8003162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003166:	f383 8811 	msr	BASEPRI, r3
 800316a:	f3bf 8f6f 	isb	sy
 800316e:	f3bf 8f4f 	dsb	sy
 8003172:	603b      	str	r3, [r7, #0]
 8003174:	e7fe      	b.n	8003174 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003176:	f000 fc11 	bl	800399c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800317a:	4b39      	ldr	r3, [pc, #228]	; (8003260 <xTaskResumeAll+0x114>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	3b01      	subs	r3, #1
 8003180:	4a37      	ldr	r2, [pc, #220]	; (8003260 <xTaskResumeAll+0x114>)
 8003182:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003184:	4b36      	ldr	r3, [pc, #216]	; (8003260 <xTaskResumeAll+0x114>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d161      	bne.n	8003250 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800318c:	4b35      	ldr	r3, [pc, #212]	; (8003264 <xTaskResumeAll+0x118>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d05d      	beq.n	8003250 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003194:	e02e      	b.n	80031f4 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003196:	4b34      	ldr	r3, [pc, #208]	; (8003268 <xTaskResumeAll+0x11c>)
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	3318      	adds	r3, #24
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff fd78 	bl	8002c98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	3304      	adds	r3, #4
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff fd73 	bl	8002c98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b6:	2201      	movs	r2, #1
 80031b8:	409a      	lsls	r2, r3
 80031ba:	4b2c      	ldr	r3, [pc, #176]	; (800326c <xTaskResumeAll+0x120>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4313      	orrs	r3, r2
 80031c0:	4a2a      	ldr	r2, [pc, #168]	; (800326c <xTaskResumeAll+0x120>)
 80031c2:	6013      	str	r3, [r2, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c8:	4613      	mov	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4a27      	ldr	r2, [pc, #156]	; (8003270 <xTaskResumeAll+0x124>)
 80031d2:	441a      	add	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	3304      	adds	r3, #4
 80031d8:	4619      	mov	r1, r3
 80031da:	4610      	mov	r0, r2
 80031dc:	f7ff fcff 	bl	8002bde <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e4:	4b23      	ldr	r3, [pc, #140]	; (8003274 <xTaskResumeAll+0x128>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d302      	bcc.n	80031f4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80031ee:	4b22      	ldr	r3, [pc, #136]	; (8003278 <xTaskResumeAll+0x12c>)
 80031f0:	2201      	movs	r2, #1
 80031f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031f4:	4b1c      	ldr	r3, [pc, #112]	; (8003268 <xTaskResumeAll+0x11c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1cc      	bne.n	8003196 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003202:	f000 fa03 	bl	800360c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003206:	4b1d      	ldr	r3, [pc, #116]	; (800327c <xTaskResumeAll+0x130>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d010      	beq.n	8003234 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003212:	f000 f837 	bl	8003284 <xTaskIncrementTick>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d002      	beq.n	8003222 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800321c:	4b16      	ldr	r3, [pc, #88]	; (8003278 <xTaskResumeAll+0x12c>)
 800321e:	2201      	movs	r2, #1
 8003220:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3b01      	subs	r3, #1
 8003226:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f1      	bne.n	8003212 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800322e:	4b13      	ldr	r3, [pc, #76]	; (800327c <xTaskResumeAll+0x130>)
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003234:	4b10      	ldr	r3, [pc, #64]	; (8003278 <xTaskResumeAll+0x12c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d009      	beq.n	8003250 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800323c:	2301      	movs	r3, #1
 800323e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003240:	4b0f      	ldr	r3, [pc, #60]	; (8003280 <xTaskResumeAll+0x134>)
 8003242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	f3bf 8f4f 	dsb	sy
 800324c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003250:	f000 fbd2 	bl	80039f8 <vPortExitCritical>

	return xAlreadyYielded;
 8003254:	68bb      	ldr	r3, [r7, #8]
}
 8003256:	4618      	mov	r0, r3
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	200003a8 	.word	0x200003a8
 8003264:	20000380 	.word	0x20000380
 8003268:	20000340 	.word	0x20000340
 800326c:	20000388 	.word	0x20000388
 8003270:	20000284 	.word	0x20000284
 8003274:	20000280 	.word	0x20000280
 8003278:	20000394 	.word	0x20000394
 800327c:	20000390 	.word	0x20000390
 8003280:	e000ed04 	.word	0xe000ed04

08003284 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800328a:	2300      	movs	r3, #0
 800328c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800328e:	4b4e      	ldr	r3, [pc, #312]	; (80033c8 <xTaskIncrementTick+0x144>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	f040 8087 	bne.w	80033a6 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003298:	4b4c      	ldr	r3, [pc, #304]	; (80033cc <xTaskIncrementTick+0x148>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	3301      	adds	r3, #1
 800329e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80032a0:	4a4a      	ldr	r2, [pc, #296]	; (80033cc <xTaskIncrementTick+0x148>)
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d11f      	bne.n	80032ec <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80032ac:	4b48      	ldr	r3, [pc, #288]	; (80033d0 <xTaskIncrementTick+0x14c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d009      	beq.n	80032ca <xTaskIncrementTick+0x46>
 80032b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ba:	f383 8811 	msr	BASEPRI, r3
 80032be:	f3bf 8f6f 	isb	sy
 80032c2:	f3bf 8f4f 	dsb	sy
 80032c6:	603b      	str	r3, [r7, #0]
 80032c8:	e7fe      	b.n	80032c8 <xTaskIncrementTick+0x44>
 80032ca:	4b41      	ldr	r3, [pc, #260]	; (80033d0 <xTaskIncrementTick+0x14c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	4b40      	ldr	r3, [pc, #256]	; (80033d4 <xTaskIncrementTick+0x150>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a3e      	ldr	r2, [pc, #248]	; (80033d0 <xTaskIncrementTick+0x14c>)
 80032d6:	6013      	str	r3, [r2, #0]
 80032d8:	4a3e      	ldr	r2, [pc, #248]	; (80033d4 <xTaskIncrementTick+0x150>)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6013      	str	r3, [r2, #0]
 80032de:	4b3e      	ldr	r3, [pc, #248]	; (80033d8 <xTaskIncrementTick+0x154>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	3301      	adds	r3, #1
 80032e4:	4a3c      	ldr	r2, [pc, #240]	; (80033d8 <xTaskIncrementTick+0x154>)
 80032e6:	6013      	str	r3, [r2, #0]
 80032e8:	f000 f990 	bl	800360c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80032ec:	4b3b      	ldr	r3, [pc, #236]	; (80033dc <xTaskIncrementTick+0x158>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d348      	bcc.n	8003388 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032f6:	4b36      	ldr	r3, [pc, #216]	; (80033d0 <xTaskIncrementTick+0x14c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d104      	bne.n	800330a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003300:	4b36      	ldr	r3, [pc, #216]	; (80033dc <xTaskIncrementTick+0x158>)
 8003302:	f04f 32ff 	mov.w	r2, #4294967295
 8003306:	601a      	str	r2, [r3, #0]
					break;
 8003308:	e03e      	b.n	8003388 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800330a:	4b31      	ldr	r3, [pc, #196]	; (80033d0 <xTaskIncrementTick+0x14c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	429a      	cmp	r2, r3
 8003320:	d203      	bcs.n	800332a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003322:	4a2e      	ldr	r2, [pc, #184]	; (80033dc <xTaskIncrementTick+0x158>)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003328:	e02e      	b.n	8003388 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	3304      	adds	r3, #4
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff fcb2 	bl	8002c98 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003338:	2b00      	cmp	r3, #0
 800333a:	d004      	beq.n	8003346 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	3318      	adds	r3, #24
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff fca9 	bl	8002c98 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334a:	2201      	movs	r2, #1
 800334c:	409a      	lsls	r2, r3
 800334e:	4b24      	ldr	r3, [pc, #144]	; (80033e0 <xTaskIncrementTick+0x15c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4313      	orrs	r3, r2
 8003354:	4a22      	ldr	r2, [pc, #136]	; (80033e0 <xTaskIncrementTick+0x15c>)
 8003356:	6013      	str	r3, [r2, #0]
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800335c:	4613      	mov	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4a1f      	ldr	r2, [pc, #124]	; (80033e4 <xTaskIncrementTick+0x160>)
 8003366:	441a      	add	r2, r3
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	3304      	adds	r3, #4
 800336c:	4619      	mov	r1, r3
 800336e:	4610      	mov	r0, r2
 8003370:	f7ff fc35 	bl	8002bde <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003378:	4b1b      	ldr	r3, [pc, #108]	; (80033e8 <xTaskIncrementTick+0x164>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337e:	429a      	cmp	r2, r3
 8003380:	d3b9      	bcc.n	80032f6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003382:	2301      	movs	r3, #1
 8003384:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003386:	e7b6      	b.n	80032f6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003388:	4b17      	ldr	r3, [pc, #92]	; (80033e8 <xTaskIncrementTick+0x164>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800338e:	4915      	ldr	r1, [pc, #84]	; (80033e4 <xTaskIncrementTick+0x160>)
 8003390:	4613      	mov	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4413      	add	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d907      	bls.n	80033b0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80033a0:	2301      	movs	r3, #1
 80033a2:	617b      	str	r3, [r7, #20]
 80033a4:	e004      	b.n	80033b0 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80033a6:	4b11      	ldr	r3, [pc, #68]	; (80033ec <xTaskIncrementTick+0x168>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	3301      	adds	r3, #1
 80033ac:	4a0f      	ldr	r2, [pc, #60]	; (80033ec <xTaskIncrementTick+0x168>)
 80033ae:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80033b0:	4b0f      	ldr	r3, [pc, #60]	; (80033f0 <xTaskIncrementTick+0x16c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80033b8:	2301      	movs	r3, #1
 80033ba:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80033bc:	697b      	ldr	r3, [r7, #20]
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3718      	adds	r7, #24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	200003a8 	.word	0x200003a8
 80033cc:	20000384 	.word	0x20000384
 80033d0:	20000338 	.word	0x20000338
 80033d4:	2000033c 	.word	0x2000033c
 80033d8:	20000398 	.word	0x20000398
 80033dc:	200003a0 	.word	0x200003a0
 80033e0:	20000388 	.word	0x20000388
 80033e4:	20000284 	.word	0x20000284
 80033e8:	20000280 	.word	0x20000280
 80033ec:	20000390 	.word	0x20000390
 80033f0:	20000394 	.word	0x20000394

080033f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80033f4:	b480      	push	{r7}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80033fa:	4b26      	ldr	r3, [pc, #152]	; (8003494 <vTaskSwitchContext+0xa0>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003402:	4b25      	ldr	r3, [pc, #148]	; (8003498 <vTaskSwitchContext+0xa4>)
 8003404:	2201      	movs	r2, #1
 8003406:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003408:	e03e      	b.n	8003488 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800340a:	4b23      	ldr	r3, [pc, #140]	; (8003498 <vTaskSwitchContext+0xa4>)
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003410:	4b22      	ldr	r3, [pc, #136]	; (800349c <vTaskSwitchContext+0xa8>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	fab3 f383 	clz	r3, r3
 800341c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800341e:	7afb      	ldrb	r3, [r7, #11]
 8003420:	f1c3 031f 	rsb	r3, r3, #31
 8003424:	617b      	str	r3, [r7, #20]
 8003426:	491e      	ldr	r1, [pc, #120]	; (80034a0 <vTaskSwitchContext+0xac>)
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	4613      	mov	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	440b      	add	r3, r1
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d109      	bne.n	800344e <vTaskSwitchContext+0x5a>
	__asm volatile
 800343a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800343e:	f383 8811 	msr	BASEPRI, r3
 8003442:	f3bf 8f6f 	isb	sy
 8003446:	f3bf 8f4f 	dsb	sy
 800344a:	607b      	str	r3, [r7, #4]
 800344c:	e7fe      	b.n	800344c <vTaskSwitchContext+0x58>
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	4613      	mov	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4a11      	ldr	r2, [pc, #68]	; (80034a0 <vTaskSwitchContext+0xac>)
 800345a:	4413      	add	r3, r2
 800345c:	613b      	str	r3, [r7, #16]
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	605a      	str	r2, [r3, #4]
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	3308      	adds	r3, #8
 8003470:	429a      	cmp	r2, r3
 8003472:	d104      	bne.n	800347e <vTaskSwitchContext+0x8a>
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	605a      	str	r2, [r3, #4]
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	4a07      	ldr	r2, [pc, #28]	; (80034a4 <vTaskSwitchContext+0xb0>)
 8003486:	6013      	str	r3, [r2, #0]
}
 8003488:	bf00      	nop
 800348a:	371c      	adds	r7, #28
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	200003a8 	.word	0x200003a8
 8003498:	20000394 	.word	0x20000394
 800349c:	20000388 	.word	0x20000388
 80034a0:	20000284 	.word	0x20000284
 80034a4:	20000280 	.word	0x20000280

080034a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80034b0:	f000 f852 	bl	8003558 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80034b4:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <prvIdleTask+0x28>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d9f9      	bls.n	80034b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80034bc:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <prvIdleTask+0x2c>)
 80034be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	f3bf 8f4f 	dsb	sy
 80034c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80034cc:	e7f0      	b.n	80034b0 <prvIdleTask+0x8>
 80034ce:	bf00      	nop
 80034d0:	20000284 	.word	0x20000284
 80034d4:	e000ed04 	.word	0xe000ed04

080034d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80034de:	2300      	movs	r3, #0
 80034e0:	607b      	str	r3, [r7, #4]
 80034e2:	e00c      	b.n	80034fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	4613      	mov	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4413      	add	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4a12      	ldr	r2, [pc, #72]	; (8003538 <prvInitialiseTaskLists+0x60>)
 80034f0:	4413      	add	r3, r2
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7ff fb46 	bl	8002b84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3301      	adds	r3, #1
 80034fc:	607b      	str	r3, [r7, #4]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b06      	cmp	r3, #6
 8003502:	d9ef      	bls.n	80034e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003504:	480d      	ldr	r0, [pc, #52]	; (800353c <prvInitialiseTaskLists+0x64>)
 8003506:	f7ff fb3d 	bl	8002b84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800350a:	480d      	ldr	r0, [pc, #52]	; (8003540 <prvInitialiseTaskLists+0x68>)
 800350c:	f7ff fb3a 	bl	8002b84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003510:	480c      	ldr	r0, [pc, #48]	; (8003544 <prvInitialiseTaskLists+0x6c>)
 8003512:	f7ff fb37 	bl	8002b84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003516:	480c      	ldr	r0, [pc, #48]	; (8003548 <prvInitialiseTaskLists+0x70>)
 8003518:	f7ff fb34 	bl	8002b84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800351c:	480b      	ldr	r0, [pc, #44]	; (800354c <prvInitialiseTaskLists+0x74>)
 800351e:	f7ff fb31 	bl	8002b84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003522:	4b0b      	ldr	r3, [pc, #44]	; (8003550 <prvInitialiseTaskLists+0x78>)
 8003524:	4a05      	ldr	r2, [pc, #20]	; (800353c <prvInitialiseTaskLists+0x64>)
 8003526:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003528:	4b0a      	ldr	r3, [pc, #40]	; (8003554 <prvInitialiseTaskLists+0x7c>)
 800352a:	4a05      	ldr	r2, [pc, #20]	; (8003540 <prvInitialiseTaskLists+0x68>)
 800352c:	601a      	str	r2, [r3, #0]
}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	20000284 	.word	0x20000284
 800353c:	20000310 	.word	0x20000310
 8003540:	20000324 	.word	0x20000324
 8003544:	20000340 	.word	0x20000340
 8003548:	20000354 	.word	0x20000354
 800354c:	2000036c 	.word	0x2000036c
 8003550:	20000338 	.word	0x20000338
 8003554:	2000033c 	.word	0x2000033c

08003558 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800355e:	e019      	b.n	8003594 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003560:	f000 fa1c 	bl	800399c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003564:	4b0f      	ldr	r3, [pc, #60]	; (80035a4 <prvCheckTasksWaitingTermination+0x4c>)
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3304      	adds	r3, #4
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff fb91 	bl	8002c98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003576:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <prvCheckTasksWaitingTermination+0x50>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	3b01      	subs	r3, #1
 800357c:	4a0a      	ldr	r2, [pc, #40]	; (80035a8 <prvCheckTasksWaitingTermination+0x50>)
 800357e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003580:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <prvCheckTasksWaitingTermination+0x54>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	3b01      	subs	r3, #1
 8003586:	4a09      	ldr	r2, [pc, #36]	; (80035ac <prvCheckTasksWaitingTermination+0x54>)
 8003588:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800358a:	f000 fa35 	bl	80039f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f80e 	bl	80035b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003594:	4b05      	ldr	r3, [pc, #20]	; (80035ac <prvCheckTasksWaitingTermination+0x54>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1e1      	bne.n	8003560 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800359c:	bf00      	nop
 800359e:	3708      	adds	r7, #8
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	20000354 	.word	0x20000354
 80035a8:	20000380 	.word	0x20000380
 80035ac:	20000368 	.word	0x20000368

080035b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d108      	bne.n	80035d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 fb86 	bl	8003cd8 <vPortFree>
				vPortFree( pxTCB );
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 fb83 	bl	8003cd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80035d2:	e017      	b.n	8003604 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d103      	bne.n	80035e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 fb7a 	bl	8003cd8 <vPortFree>
	}
 80035e4:	e00e      	b.n	8003604 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d009      	beq.n	8003604 <prvDeleteTCB+0x54>
 80035f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f4:	f383 8811 	msr	BASEPRI, r3
 80035f8:	f3bf 8f6f 	isb	sy
 80035fc:	f3bf 8f4f 	dsb	sy
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	e7fe      	b.n	8003602 <prvDeleteTCB+0x52>
	}
 8003604:	bf00      	nop
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003612:	4b0c      	ldr	r3, [pc, #48]	; (8003644 <prvResetNextTaskUnblockTime+0x38>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d104      	bne.n	8003626 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800361c:	4b0a      	ldr	r3, [pc, #40]	; (8003648 <prvResetNextTaskUnblockTime+0x3c>)
 800361e:	f04f 32ff 	mov.w	r2, #4294967295
 8003622:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003624:	e008      	b.n	8003638 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003626:	4b07      	ldr	r3, [pc, #28]	; (8003644 <prvResetNextTaskUnblockTime+0x38>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	4a04      	ldr	r2, [pc, #16]	; (8003648 <prvResetNextTaskUnblockTime+0x3c>)
 8003636:	6013      	str	r3, [r2, #0]
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	20000338 	.word	0x20000338
 8003648:	200003a0 	.word	0x200003a0

0800364c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003652:	4b0b      	ldr	r3, [pc, #44]	; (8003680 <xTaskGetSchedulerState+0x34>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d102      	bne.n	8003660 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800365a:	2301      	movs	r3, #1
 800365c:	607b      	str	r3, [r7, #4]
 800365e:	e008      	b.n	8003672 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003660:	4b08      	ldr	r3, [pc, #32]	; (8003684 <xTaskGetSchedulerState+0x38>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d102      	bne.n	800366e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003668:	2302      	movs	r3, #2
 800366a:	607b      	str	r3, [r7, #4]
 800366c:	e001      	b.n	8003672 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800366e:	2300      	movs	r3, #0
 8003670:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003672:	687b      	ldr	r3, [r7, #4]
	}
 8003674:	4618      	mov	r0, r3
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	2000038c 	.word	0x2000038c
 8003684:	200003a8 	.word	0x200003a8

08003688 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003692:	4b29      	ldr	r3, [pc, #164]	; (8003738 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003698:	4b28      	ldr	r3, [pc, #160]	; (800373c <prvAddCurrentTaskToDelayedList+0xb4>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	3304      	adds	r3, #4
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff fafa 	bl	8002c98 <uxListRemove>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10b      	bne.n	80036c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80036aa:	4b24      	ldr	r3, [pc, #144]	; (800373c <prvAddCurrentTaskToDelayedList+0xb4>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b0:	2201      	movs	r2, #1
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	43da      	mvns	r2, r3
 80036b8:	4b21      	ldr	r3, [pc, #132]	; (8003740 <prvAddCurrentTaskToDelayedList+0xb8>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4013      	ands	r3, r2
 80036be:	4a20      	ldr	r2, [pc, #128]	; (8003740 <prvAddCurrentTaskToDelayedList+0xb8>)
 80036c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c8:	d10a      	bne.n	80036e0 <prvAddCurrentTaskToDelayedList+0x58>
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d007      	beq.n	80036e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80036d0:	4b1a      	ldr	r3, [pc, #104]	; (800373c <prvAddCurrentTaskToDelayedList+0xb4>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	3304      	adds	r3, #4
 80036d6:	4619      	mov	r1, r3
 80036d8:	481a      	ldr	r0, [pc, #104]	; (8003744 <prvAddCurrentTaskToDelayedList+0xbc>)
 80036da:	f7ff fa80 	bl	8002bde <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80036de:	e026      	b.n	800372e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4413      	add	r3, r2
 80036e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80036e8:	4b14      	ldr	r3, [pc, #80]	; (800373c <prvAddCurrentTaskToDelayedList+0xb4>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d209      	bcs.n	800370c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80036f8:	4b13      	ldr	r3, [pc, #76]	; (8003748 <prvAddCurrentTaskToDelayedList+0xc0>)
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	4b0f      	ldr	r3, [pc, #60]	; (800373c <prvAddCurrentTaskToDelayedList+0xb4>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	3304      	adds	r3, #4
 8003702:	4619      	mov	r1, r3
 8003704:	4610      	mov	r0, r2
 8003706:	f7ff fa8e 	bl	8002c26 <vListInsert>
}
 800370a:	e010      	b.n	800372e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800370c:	4b0f      	ldr	r3, [pc, #60]	; (800374c <prvAddCurrentTaskToDelayedList+0xc4>)
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	4b0a      	ldr	r3, [pc, #40]	; (800373c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	3304      	adds	r3, #4
 8003716:	4619      	mov	r1, r3
 8003718:	4610      	mov	r0, r2
 800371a:	f7ff fa84 	bl	8002c26 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800371e:	4b0c      	ldr	r3, [pc, #48]	; (8003750 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	429a      	cmp	r2, r3
 8003726:	d202      	bcs.n	800372e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003728:	4a09      	ldr	r2, [pc, #36]	; (8003750 <prvAddCurrentTaskToDelayedList+0xc8>)
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	6013      	str	r3, [r2, #0]
}
 800372e:	bf00      	nop
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	20000384 	.word	0x20000384
 800373c:	20000280 	.word	0x20000280
 8003740:	20000388 	.word	0x20000388
 8003744:	2000036c 	.word	0x2000036c
 8003748:	2000033c 	.word	0x2000033c
 800374c:	20000338 	.word	0x20000338
 8003750:	200003a0 	.word	0x200003a0

08003754 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	3b04      	subs	r3, #4
 8003764:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800376c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	3b04      	subs	r3, #4
 8003772:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	f023 0201 	bic.w	r2, r3, #1
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	3b04      	subs	r3, #4
 8003782:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003784:	4a0c      	ldr	r2, [pc, #48]	; (80037b8 <pxPortInitialiseStack+0x64>)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	3b14      	subs	r3, #20
 800378e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	3b04      	subs	r3, #4
 800379a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f06f 0202 	mvn.w	r2, #2
 80037a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	3b20      	subs	r3, #32
 80037a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80037aa:	68fb      	ldr	r3, [r7, #12]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3714      	adds	r7, #20
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	080037bd 	.word	0x080037bd

080037bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80037c2:	2300      	movs	r3, #0
 80037c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80037c6:	4b11      	ldr	r3, [pc, #68]	; (800380c <prvTaskExitError+0x50>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ce:	d009      	beq.n	80037e4 <prvTaskExitError+0x28>
 80037d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d4:	f383 8811 	msr	BASEPRI, r3
 80037d8:	f3bf 8f6f 	isb	sy
 80037dc:	f3bf 8f4f 	dsb	sy
 80037e0:	60fb      	str	r3, [r7, #12]
 80037e2:	e7fe      	b.n	80037e2 <prvTaskExitError+0x26>
 80037e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e8:	f383 8811 	msr	BASEPRI, r3
 80037ec:	f3bf 8f6f 	isb	sy
 80037f0:	f3bf 8f4f 	dsb	sy
 80037f4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80037f6:	bf00      	nop
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0fc      	beq.n	80037f8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80037fe:	bf00      	nop
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	2000000c 	.word	0x2000000c

08003810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003810:	4b07      	ldr	r3, [pc, #28]	; (8003830 <pxCurrentTCBConst2>)
 8003812:	6819      	ldr	r1, [r3, #0]
 8003814:	6808      	ldr	r0, [r1, #0]
 8003816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800381a:	f380 8809 	msr	PSP, r0
 800381e:	f3bf 8f6f 	isb	sy
 8003822:	f04f 0000 	mov.w	r0, #0
 8003826:	f380 8811 	msr	BASEPRI, r0
 800382a:	4770      	bx	lr
 800382c:	f3af 8000 	nop.w

08003830 <pxCurrentTCBConst2>:
 8003830:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003834:	bf00      	nop
 8003836:	bf00      	nop

08003838 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003838:	4808      	ldr	r0, [pc, #32]	; (800385c <prvPortStartFirstTask+0x24>)
 800383a:	6800      	ldr	r0, [r0, #0]
 800383c:	6800      	ldr	r0, [r0, #0]
 800383e:	f380 8808 	msr	MSP, r0
 8003842:	f04f 0000 	mov.w	r0, #0
 8003846:	f380 8814 	msr	CONTROL, r0
 800384a:	b662      	cpsie	i
 800384c:	b661      	cpsie	f
 800384e:	f3bf 8f4f 	dsb	sy
 8003852:	f3bf 8f6f 	isb	sy
 8003856:	df00      	svc	0
 8003858:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800385a:	bf00      	nop
 800385c:	e000ed08 	.word	0xe000ed08

08003860 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003866:	4b44      	ldr	r3, [pc, #272]	; (8003978 <xPortStartScheduler+0x118>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a44      	ldr	r2, [pc, #272]	; (800397c <xPortStartScheduler+0x11c>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d109      	bne.n	8003884 <xPortStartScheduler+0x24>
 8003870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003874:	f383 8811 	msr	BASEPRI, r3
 8003878:	f3bf 8f6f 	isb	sy
 800387c:	f3bf 8f4f 	dsb	sy
 8003880:	613b      	str	r3, [r7, #16]
 8003882:	e7fe      	b.n	8003882 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003884:	4b3c      	ldr	r3, [pc, #240]	; (8003978 <xPortStartScheduler+0x118>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a3d      	ldr	r2, [pc, #244]	; (8003980 <xPortStartScheduler+0x120>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d109      	bne.n	80038a2 <xPortStartScheduler+0x42>
 800388e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003892:	f383 8811 	msr	BASEPRI, r3
 8003896:	f3bf 8f6f 	isb	sy
 800389a:	f3bf 8f4f 	dsb	sy
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	e7fe      	b.n	80038a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80038a2:	4b38      	ldr	r3, [pc, #224]	; (8003984 <xPortStartScheduler+0x124>)
 80038a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	22ff      	movs	r2, #255	; 0xff
 80038b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80038bc:	78fb      	ldrb	r3, [r7, #3]
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	4b30      	ldr	r3, [pc, #192]	; (8003988 <xPortStartScheduler+0x128>)
 80038c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80038ca:	4b30      	ldr	r3, [pc, #192]	; (800398c <xPortStartScheduler+0x12c>)
 80038cc:	2207      	movs	r2, #7
 80038ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80038d0:	e009      	b.n	80038e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80038d2:	4b2e      	ldr	r3, [pc, #184]	; (800398c <xPortStartScheduler+0x12c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	3b01      	subs	r3, #1
 80038d8:	4a2c      	ldr	r2, [pc, #176]	; (800398c <xPortStartScheduler+0x12c>)
 80038da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80038dc:	78fb      	ldrb	r3, [r7, #3]
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80038e6:	78fb      	ldrb	r3, [r7, #3]
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ee:	2b80      	cmp	r3, #128	; 0x80
 80038f0:	d0ef      	beq.n	80038d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80038f2:	4b26      	ldr	r3, [pc, #152]	; (800398c <xPortStartScheduler+0x12c>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f1c3 0307 	rsb	r3, r3, #7
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	d009      	beq.n	8003912 <xPortStartScheduler+0xb2>
 80038fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003902:	f383 8811 	msr	BASEPRI, r3
 8003906:	f3bf 8f6f 	isb	sy
 800390a:	f3bf 8f4f 	dsb	sy
 800390e:	60bb      	str	r3, [r7, #8]
 8003910:	e7fe      	b.n	8003910 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003912:	4b1e      	ldr	r3, [pc, #120]	; (800398c <xPortStartScheduler+0x12c>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	021b      	lsls	r3, r3, #8
 8003918:	4a1c      	ldr	r2, [pc, #112]	; (800398c <xPortStartScheduler+0x12c>)
 800391a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800391c:	4b1b      	ldr	r3, [pc, #108]	; (800398c <xPortStartScheduler+0x12c>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003924:	4a19      	ldr	r2, [pc, #100]	; (800398c <xPortStartScheduler+0x12c>)
 8003926:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	b2da      	uxtb	r2, r3
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003930:	4b17      	ldr	r3, [pc, #92]	; (8003990 <xPortStartScheduler+0x130>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a16      	ldr	r2, [pc, #88]	; (8003990 <xPortStartScheduler+0x130>)
 8003936:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800393a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800393c:	4b14      	ldr	r3, [pc, #80]	; (8003990 <xPortStartScheduler+0x130>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a13      	ldr	r2, [pc, #76]	; (8003990 <xPortStartScheduler+0x130>)
 8003942:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003946:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003948:	f000 f8d6 	bl	8003af8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800394c:	4b11      	ldr	r3, [pc, #68]	; (8003994 <xPortStartScheduler+0x134>)
 800394e:	2200      	movs	r2, #0
 8003950:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003952:	f000 f8f5 	bl	8003b40 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003956:	4b10      	ldr	r3, [pc, #64]	; (8003998 <xPortStartScheduler+0x138>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a0f      	ldr	r2, [pc, #60]	; (8003998 <xPortStartScheduler+0x138>)
 800395c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003960:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003962:	f7ff ff69 	bl	8003838 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003966:	f7ff fd45 	bl	80033f4 <vTaskSwitchContext>
	prvTaskExitError();
 800396a:	f7ff ff27 	bl	80037bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3718      	adds	r7, #24
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	e000ed00 	.word	0xe000ed00
 800397c:	410fc271 	.word	0x410fc271
 8003980:	410fc270 	.word	0x410fc270
 8003984:	e000e400 	.word	0xe000e400
 8003988:	200003ac 	.word	0x200003ac
 800398c:	200003b0 	.word	0x200003b0
 8003990:	e000ed20 	.word	0xe000ed20
 8003994:	2000000c 	.word	0x2000000c
 8003998:	e000ef34 	.word	0xe000ef34

0800399c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a6:	f383 8811 	msr	BASEPRI, r3
 80039aa:	f3bf 8f6f 	isb	sy
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80039b4:	4b0e      	ldr	r3, [pc, #56]	; (80039f0 <vPortEnterCritical+0x54>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	3301      	adds	r3, #1
 80039ba:	4a0d      	ldr	r2, [pc, #52]	; (80039f0 <vPortEnterCritical+0x54>)
 80039bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80039be:	4b0c      	ldr	r3, [pc, #48]	; (80039f0 <vPortEnterCritical+0x54>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d10e      	bne.n	80039e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80039c6:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <vPortEnterCritical+0x58>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d009      	beq.n	80039e4 <vPortEnterCritical+0x48>
 80039d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d4:	f383 8811 	msr	BASEPRI, r3
 80039d8:	f3bf 8f6f 	isb	sy
 80039dc:	f3bf 8f4f 	dsb	sy
 80039e0:	603b      	str	r3, [r7, #0]
 80039e2:	e7fe      	b.n	80039e2 <vPortEnterCritical+0x46>
	}
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	2000000c 	.word	0x2000000c
 80039f4:	e000ed04 	.word	0xe000ed04

080039f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80039fe:	4b11      	ldr	r3, [pc, #68]	; (8003a44 <vPortExitCritical+0x4c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d109      	bne.n	8003a1a <vPortExitCritical+0x22>
 8003a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0a:	f383 8811 	msr	BASEPRI, r3
 8003a0e:	f3bf 8f6f 	isb	sy
 8003a12:	f3bf 8f4f 	dsb	sy
 8003a16:	607b      	str	r3, [r7, #4]
 8003a18:	e7fe      	b.n	8003a18 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003a1a:	4b0a      	ldr	r3, [pc, #40]	; (8003a44 <vPortExitCritical+0x4c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	4a08      	ldr	r2, [pc, #32]	; (8003a44 <vPortExitCritical+0x4c>)
 8003a22:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003a24:	4b07      	ldr	r3, [pc, #28]	; (8003a44 <vPortExitCritical+0x4c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d104      	bne.n	8003a36 <vPortExitCritical+0x3e>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	2000000c 	.word	0x2000000c
	...

08003a50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003a50:	f3ef 8009 	mrs	r0, PSP
 8003a54:	f3bf 8f6f 	isb	sy
 8003a58:	4b15      	ldr	r3, [pc, #84]	; (8003ab0 <pxCurrentTCBConst>)
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	f01e 0f10 	tst.w	lr, #16
 8003a60:	bf08      	it	eq
 8003a62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003a66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a6a:	6010      	str	r0, [r2, #0]
 8003a6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003a70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003a74:	f380 8811 	msr	BASEPRI, r0
 8003a78:	f3bf 8f4f 	dsb	sy
 8003a7c:	f3bf 8f6f 	isb	sy
 8003a80:	f7ff fcb8 	bl	80033f4 <vTaskSwitchContext>
 8003a84:	f04f 0000 	mov.w	r0, #0
 8003a88:	f380 8811 	msr	BASEPRI, r0
 8003a8c:	bc09      	pop	{r0, r3}
 8003a8e:	6819      	ldr	r1, [r3, #0]
 8003a90:	6808      	ldr	r0, [r1, #0]
 8003a92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a96:	f01e 0f10 	tst.w	lr, #16
 8003a9a:	bf08      	it	eq
 8003a9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003aa0:	f380 8809 	msr	PSP, r0
 8003aa4:	f3bf 8f6f 	isb	sy
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	f3af 8000 	nop.w

08003ab0 <pxCurrentTCBConst>:
 8003ab0:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003ab4:	bf00      	nop
 8003ab6:	bf00      	nop

08003ab8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
	__asm volatile
 8003abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac2:	f383 8811 	msr	BASEPRI, r3
 8003ac6:	f3bf 8f6f 	isb	sy
 8003aca:	f3bf 8f4f 	dsb	sy
 8003ace:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003ad0:	f7ff fbd8 	bl	8003284 <xTaskIncrementTick>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003ada:	4b06      	ldr	r3, [pc, #24]	; (8003af4 <xPortSysTickHandler+0x3c>)
 8003adc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003aec:	bf00      	nop
 8003aee:	3708      	adds	r7, #8
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	e000ed04 	.word	0xe000ed04

08003af8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003afc:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <vPortSetupTimerInterrupt+0x34>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003b02:	4b0b      	ldr	r3, [pc, #44]	; (8003b30 <vPortSetupTimerInterrupt+0x38>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003b08:	4b0a      	ldr	r3, [pc, #40]	; (8003b34 <vPortSetupTimerInterrupt+0x3c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a0a      	ldr	r2, [pc, #40]	; (8003b38 <vPortSetupTimerInterrupt+0x40>)
 8003b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b12:	099b      	lsrs	r3, r3, #6
 8003b14:	4a09      	ldr	r2, [pc, #36]	; (8003b3c <vPortSetupTimerInterrupt+0x44>)
 8003b16:	3b01      	subs	r3, #1
 8003b18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003b1a:	4b04      	ldr	r3, [pc, #16]	; (8003b2c <vPortSetupTimerInterrupt+0x34>)
 8003b1c:	2207      	movs	r2, #7
 8003b1e:	601a      	str	r2, [r3, #0]
}
 8003b20:	bf00      	nop
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	e000e010 	.word	0xe000e010
 8003b30:	e000e018 	.word	0xe000e018
 8003b34:	20000000 	.word	0x20000000
 8003b38:	10624dd3 	.word	0x10624dd3
 8003b3c:	e000e014 	.word	0xe000e014

08003b40 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003b40:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003b50 <vPortEnableVFP+0x10>
 8003b44:	6801      	ldr	r1, [r0, #0]
 8003b46:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003b4a:	6001      	str	r1, [r0, #0]
 8003b4c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003b4e:	bf00      	nop
 8003b50:	e000ed88 	.word	0xe000ed88

08003b54 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b08a      	sub	sp, #40	; 0x28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003b60:	f7ff fae6 	bl	8003130 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003b64:	4b57      	ldr	r3, [pc, #348]	; (8003cc4 <pvPortMalloc+0x170>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d101      	bne.n	8003b70 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003b6c:	f000 f90c 	bl	8003d88 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003b70:	4b55      	ldr	r3, [pc, #340]	; (8003cc8 <pvPortMalloc+0x174>)
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4013      	ands	r3, r2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f040 808c 	bne.w	8003c96 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d01c      	beq.n	8003bbe <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003b84:	2208      	movs	r2, #8
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4413      	add	r3, r2
 8003b8a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f003 0307 	and.w	r3, r3, #7
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d013      	beq.n	8003bbe <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f023 0307 	bic.w	r3, r3, #7
 8003b9c:	3308      	adds	r3, #8
 8003b9e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f003 0307 	and.w	r3, r3, #7
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d009      	beq.n	8003bbe <pvPortMalloc+0x6a>
	__asm volatile
 8003baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bae:	f383 8811 	msr	BASEPRI, r3
 8003bb2:	f3bf 8f6f 	isb	sy
 8003bb6:	f3bf 8f4f 	dsb	sy
 8003bba:	617b      	str	r3, [r7, #20]
 8003bbc:	e7fe      	b.n	8003bbc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d068      	beq.n	8003c96 <pvPortMalloc+0x142>
 8003bc4:	4b41      	ldr	r3, [pc, #260]	; (8003ccc <pvPortMalloc+0x178>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d863      	bhi.n	8003c96 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003bce:	4b40      	ldr	r3, [pc, #256]	; (8003cd0 <pvPortMalloc+0x17c>)
 8003bd0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003bd2:	4b3f      	ldr	r3, [pc, #252]	; (8003cd0 <pvPortMalloc+0x17c>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003bd8:	e004      	b.n	8003be4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bdc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d903      	bls.n	8003bf6 <pvPortMalloc+0xa2>
 8003bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1f1      	bne.n	8003bda <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003bf6:	4b33      	ldr	r3, [pc, #204]	; (8003cc4 <pvPortMalloc+0x170>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d04a      	beq.n	8003c96 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003c00:	6a3b      	ldr	r3, [r7, #32]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2208      	movs	r2, #8
 8003c06:	4413      	add	r3, r2
 8003c08:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	1ad2      	subs	r2, r2, r3
 8003c1a:	2308      	movs	r3, #8
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d91e      	bls.n	8003c60 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4413      	add	r3, r2
 8003c28:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d009      	beq.n	8003c48 <pvPortMalloc+0xf4>
 8003c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c38:	f383 8811 	msr	BASEPRI, r3
 8003c3c:	f3bf 8f6f 	isb	sy
 8003c40:	f3bf 8f4f 	dsb	sy
 8003c44:	613b      	str	r3, [r7, #16]
 8003c46:	e7fe      	b.n	8003c46 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	1ad2      	subs	r2, r2, r3
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003c5a:	69b8      	ldr	r0, [r7, #24]
 8003c5c:	f000 f8f6 	bl	8003e4c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003c60:	4b1a      	ldr	r3, [pc, #104]	; (8003ccc <pvPortMalloc+0x178>)
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	4a18      	ldr	r2, [pc, #96]	; (8003ccc <pvPortMalloc+0x178>)
 8003c6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003c6e:	4b17      	ldr	r3, [pc, #92]	; (8003ccc <pvPortMalloc+0x178>)
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	4b18      	ldr	r3, [pc, #96]	; (8003cd4 <pvPortMalloc+0x180>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d203      	bcs.n	8003c82 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003c7a:	4b14      	ldr	r3, [pc, #80]	; (8003ccc <pvPortMalloc+0x178>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a15      	ldr	r2, [pc, #84]	; (8003cd4 <pvPortMalloc+0x180>)
 8003c80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	4b10      	ldr	r3, [pc, #64]	; (8003cc8 <pvPortMalloc+0x174>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c92:	2200      	movs	r2, #0
 8003c94:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003c96:	f7ff fa59 	bl	800314c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d009      	beq.n	8003cb8 <pvPortMalloc+0x164>
 8003ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca8:	f383 8811 	msr	BASEPRI, r3
 8003cac:	f3bf 8f6f 	isb	sy
 8003cb0:	f3bf 8f4f 	dsb	sy
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	e7fe      	b.n	8003cb6 <pvPortMalloc+0x162>
	return pvReturn;
 8003cb8:	69fb      	ldr	r3, [r7, #28]
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3728      	adds	r7, #40	; 0x28
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	20003fbc 	.word	0x20003fbc
 8003cc8:	20003fc8 	.word	0x20003fc8
 8003ccc:	20003fc0 	.word	0x20003fc0
 8003cd0:	20003fb4 	.word	0x20003fb4
 8003cd4:	20003fc4 	.word	0x20003fc4

08003cd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d046      	beq.n	8003d78 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003cea:	2308      	movs	r3, #8
 8003cec:	425b      	negs	r3, r3
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	4b20      	ldr	r3, [pc, #128]	; (8003d80 <vPortFree+0xa8>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4013      	ands	r3, r2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d109      	bne.n	8003d1a <vPortFree+0x42>
 8003d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d0a:	f383 8811 	msr	BASEPRI, r3
 8003d0e:	f3bf 8f6f 	isb	sy
 8003d12:	f3bf 8f4f 	dsb	sy
 8003d16:	60fb      	str	r3, [r7, #12]
 8003d18:	e7fe      	b.n	8003d18 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d009      	beq.n	8003d36 <vPortFree+0x5e>
 8003d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d26:	f383 8811 	msr	BASEPRI, r3
 8003d2a:	f3bf 8f6f 	isb	sy
 8003d2e:	f3bf 8f4f 	dsb	sy
 8003d32:	60bb      	str	r3, [r7, #8]
 8003d34:	e7fe      	b.n	8003d34 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	685a      	ldr	r2, [r3, #4]
 8003d3a:	4b11      	ldr	r3, [pc, #68]	; (8003d80 <vPortFree+0xa8>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d019      	beq.n	8003d78 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d115      	bne.n	8003d78 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <vPortFree+0xa8>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	43db      	mvns	r3, r3
 8003d56:	401a      	ands	r2, r3
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003d5c:	f7ff f9e8 	bl	8003130 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	4b07      	ldr	r3, [pc, #28]	; (8003d84 <vPortFree+0xac>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4413      	add	r3, r2
 8003d6a:	4a06      	ldr	r2, [pc, #24]	; (8003d84 <vPortFree+0xac>)
 8003d6c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003d6e:	6938      	ldr	r0, [r7, #16]
 8003d70:	f000 f86c 	bl	8003e4c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003d74:	f7ff f9ea 	bl	800314c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003d78:	bf00      	nop
 8003d7a:	3718      	adds	r7, #24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	20003fc8 	.word	0x20003fc8
 8003d84:	20003fc0 	.word	0x20003fc0

08003d88 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003d8e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003d92:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003d94:	4b27      	ldr	r3, [pc, #156]	; (8003e34 <prvHeapInit+0xac>)
 8003d96:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f003 0307 	and.w	r3, r3, #7
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00c      	beq.n	8003dbc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	3307      	adds	r3, #7
 8003da6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f023 0307 	bic.w	r3, r3, #7
 8003dae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003db0:	68ba      	ldr	r2, [r7, #8]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	4a1f      	ldr	r2, [pc, #124]	; (8003e34 <prvHeapInit+0xac>)
 8003db8:	4413      	add	r3, r2
 8003dba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003dc0:	4a1d      	ldr	r2, [pc, #116]	; (8003e38 <prvHeapInit+0xb0>)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003dc6:	4b1c      	ldr	r3, [pc, #112]	; (8003e38 <prvHeapInit+0xb0>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68ba      	ldr	r2, [r7, #8]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003dd4:	2208      	movs	r2, #8
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	1a9b      	subs	r3, r3, r2
 8003dda:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f023 0307 	bic.w	r3, r3, #7
 8003de2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	4a15      	ldr	r2, [pc, #84]	; (8003e3c <prvHeapInit+0xb4>)
 8003de8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003dea:	4b14      	ldr	r3, [pc, #80]	; (8003e3c <prvHeapInit+0xb4>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2200      	movs	r2, #0
 8003df0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003df2:	4b12      	ldr	r3, [pc, #72]	; (8003e3c <prvHeapInit+0xb4>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2200      	movs	r2, #0
 8003df8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	1ad2      	subs	r2, r2, r3
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003e08:	4b0c      	ldr	r3, [pc, #48]	; (8003e3c <prvHeapInit+0xb4>)
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	4a0a      	ldr	r2, [pc, #40]	; (8003e40 <prvHeapInit+0xb8>)
 8003e16:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	4a09      	ldr	r2, [pc, #36]	; (8003e44 <prvHeapInit+0xbc>)
 8003e1e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003e20:	4b09      	ldr	r3, [pc, #36]	; (8003e48 <prvHeapInit+0xc0>)
 8003e22:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003e26:	601a      	str	r2, [r3, #0]
}
 8003e28:	bf00      	nop
 8003e2a:	3714      	adds	r7, #20
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr
 8003e34:	200003b4 	.word	0x200003b4
 8003e38:	20003fb4 	.word	0x20003fb4
 8003e3c:	20003fbc 	.word	0x20003fbc
 8003e40:	20003fc4 	.word	0x20003fc4
 8003e44:	20003fc0 	.word	0x20003fc0
 8003e48:	20003fc8 	.word	0x20003fc8

08003e4c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003e54:	4b28      	ldr	r3, [pc, #160]	; (8003ef8 <prvInsertBlockIntoFreeList+0xac>)
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	e002      	b.n	8003e60 <prvInsertBlockIntoFreeList+0x14>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	60fb      	str	r3, [r7, #12]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d8f7      	bhi.n	8003e5a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	4413      	add	r3, r2
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d108      	bne.n	8003e8e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	441a      	add	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	441a      	add	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d118      	bne.n	8003ed4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	4b15      	ldr	r3, [pc, #84]	; (8003efc <prvInsertBlockIntoFreeList+0xb0>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d00d      	beq.n	8003eca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	441a      	add	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	e008      	b.n	8003edc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003eca:	4b0c      	ldr	r3, [pc, #48]	; (8003efc <prvInsertBlockIntoFreeList+0xb0>)
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	e003      	b.n	8003edc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d002      	beq.n	8003eea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003eea:	bf00      	nop
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	20003fb4 	.word	0x20003fb4
 8003efc:	20003fbc 	.word	0x20003fbc

08003f00 <__libc_init_array>:
 8003f00:	b570      	push	{r4, r5, r6, lr}
 8003f02:	4e0d      	ldr	r6, [pc, #52]	; (8003f38 <__libc_init_array+0x38>)
 8003f04:	4c0d      	ldr	r4, [pc, #52]	; (8003f3c <__libc_init_array+0x3c>)
 8003f06:	1ba4      	subs	r4, r4, r6
 8003f08:	10a4      	asrs	r4, r4, #2
 8003f0a:	2500      	movs	r5, #0
 8003f0c:	42a5      	cmp	r5, r4
 8003f0e:	d109      	bne.n	8003f24 <__libc_init_array+0x24>
 8003f10:	4e0b      	ldr	r6, [pc, #44]	; (8003f40 <__libc_init_array+0x40>)
 8003f12:	4c0c      	ldr	r4, [pc, #48]	; (8003f44 <__libc_init_array+0x44>)
 8003f14:	f000 f82c 	bl	8003f70 <_init>
 8003f18:	1ba4      	subs	r4, r4, r6
 8003f1a:	10a4      	asrs	r4, r4, #2
 8003f1c:	2500      	movs	r5, #0
 8003f1e:	42a5      	cmp	r5, r4
 8003f20:	d105      	bne.n	8003f2e <__libc_init_array+0x2e>
 8003f22:	bd70      	pop	{r4, r5, r6, pc}
 8003f24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f28:	4798      	blx	r3
 8003f2a:	3501      	adds	r5, #1
 8003f2c:	e7ee      	b.n	8003f0c <__libc_init_array+0xc>
 8003f2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f32:	4798      	blx	r3
 8003f34:	3501      	adds	r5, #1
 8003f36:	e7f2      	b.n	8003f1e <__libc_init_array+0x1e>
 8003f38:	08004000 	.word	0x08004000
 8003f3c:	08004000 	.word	0x08004000
 8003f40:	08004000 	.word	0x08004000
 8003f44:	08004004 	.word	0x08004004

08003f48 <memcpy>:
 8003f48:	b510      	push	{r4, lr}
 8003f4a:	1e43      	subs	r3, r0, #1
 8003f4c:	440a      	add	r2, r1
 8003f4e:	4291      	cmp	r1, r2
 8003f50:	d100      	bne.n	8003f54 <memcpy+0xc>
 8003f52:	bd10      	pop	{r4, pc}
 8003f54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f5c:	e7f7      	b.n	8003f4e <memcpy+0x6>

08003f5e <memset>:
 8003f5e:	4402      	add	r2, r0
 8003f60:	4603      	mov	r3, r0
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d100      	bne.n	8003f68 <memset+0xa>
 8003f66:	4770      	bx	lr
 8003f68:	f803 1b01 	strb.w	r1, [r3], #1
 8003f6c:	e7f9      	b.n	8003f62 <memset+0x4>
	...

08003f70 <_init>:
 8003f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f72:	bf00      	nop
 8003f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f76:	bc08      	pop	{r3}
 8003f78:	469e      	mov	lr, r3
 8003f7a:	4770      	bx	lr

08003f7c <_fini>:
 8003f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f7e:	bf00      	nop
 8003f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f82:	bc08      	pop	{r3}
 8003f84:	469e      	mov	lr, r3
 8003f86:	4770      	bx	lr
