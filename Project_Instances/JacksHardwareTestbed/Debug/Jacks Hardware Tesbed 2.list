
Jacks Hardware Tesbed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c70  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08004e10  08004e10  00014e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ef4  08004ef4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004ef4  08004ef4  00014ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004efc  08004efc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004efc  08004efc  00014efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f00  08004f00  00014f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004f04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042ac  20000074  08004f78  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004320  08004f78  00024320  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000edfa  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025d9  00000000  00000000  0002ee9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b98  00000000  00000000  00031478  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a70  00000000  00000000  00032010  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018241  00000000  00000000  00032a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aada  00000000  00000000  0004acc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008ef44  00000000  00000000  0005579b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e46df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034dc  00000000  00000000  000e475c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004df8 	.word	0x08004df8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08004df8 	.word	0x08004df8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	4a07      	ldr	r2, [pc, #28]	; (80005ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000590:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000596:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2280      	movs	r2, #128	; 0x80
 800059c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000090 	.word	0x20000090
 80005b0:	200000e4 	.word	0x200000e4

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b5b0      	push	{r4, r5, r7, lr}
 80005b6:	b088      	sub	sp, #32
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f000 fb1d 	bl	8000bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f829 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 f8d9 	bl	8000778 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005c6:	f000 f883 	bl	80006d0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005ca:	f000 f8ab 	bl	8000724 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 80005ce:	480d      	ldr	r0, [pc, #52]	; (8000604 <main+0x50>)
 80005d0:	f000 f8f8 	bl	80007c4 <RetargetInit>
  printf("hi");
 80005d4:	480c      	ldr	r0, [pc, #48]	; (8000608 <main+0x54>)
 80005d6:	f003 fc75 	bl	8003ec4 <iprintf>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128, defaultTaskBuffer, &defaultTaskControlBlock);
 80005da:	4b0c      	ldr	r3, [pc, #48]	; (800060c <main+0x58>)
 80005dc:	1d3c      	adds	r4, r7, #4
 80005de:	461d      	mov	r5, r3
 80005e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	2100      	movs	r1, #0
 80005f0:	4618      	mov	r0, r3
 80005f2:	f002 fa16 	bl	8002a22 <osThreadCreate>
 80005f6:	4602      	mov	r2, r0
 80005f8:	4b05      	ldr	r3, [pc, #20]	; (8000610 <main+0x5c>)
 80005fa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005fc:	f002 fa0a 	bl	8002a14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000600:	e7fe      	b.n	8000600 <main+0x4c>
 8000602:	bf00      	nop
 8000604:	200042d4 	.word	0x200042d4
 8000608:	08004e10 	.word	0x08004e10
 800060c:	08004e20 	.word	0x08004e20
 8000610:	2000403c 	.word	0x2000403c

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b094      	sub	sp, #80	; 0x50
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	2230      	movs	r2, #48	; 0x30
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f003 fc46 	bl	8003eb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <SystemClock_Config+0xb4>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	4a21      	ldr	r2, [pc, #132]	; (80006c8 <SystemClock_Config+0xb4>)
 8000642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000646:	6413      	str	r3, [r2, #64]	; 0x40
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <SystemClock_Config+0xb4>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	4b1c      	ldr	r3, [pc, #112]	; (80006cc <SystemClock_Config+0xb8>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a1b      	ldr	r2, [pc, #108]	; (80006cc <SystemClock_Config+0xb8>)
 800065e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b19      	ldr	r3, [pc, #100]	; (80006cc <SystemClock_Config+0xb8>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000670:	2302      	movs	r3, #2
 8000672:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000674:	2301      	movs	r3, #1
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000678:	2310      	movs	r3, #16
 800067a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800067c:	2300      	movs	r3, #0
 800067e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000680:	f107 0320 	add.w	r3, r7, #32
 8000684:	4618      	mov	r0, r3
 8000686:	f000 fddf 	bl	8001248 <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000690:	f000 f894 	bl	80007bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	230f      	movs	r3, #15
 8000696:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000698:	2300      	movs	r3, #0
 800069a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 f83a 	bl	8001728 <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006ba:	f000 f87f 	bl	80007bc <Error_Handler>
  }
}
 80006be:	bf00      	nop
 80006c0:	3750      	adds	r7, #80	; 0x50
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_USART1_UART_Init+0x4c>)
 80006d6:	4a12      	ldr	r2, [pc, #72]	; (8000720 <MX_USART1_UART_Init+0x50>)
 80006d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <MX_USART1_UART_Init+0x4c>)
 80006dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_USART1_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_USART1_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <MX_USART1_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_USART1_UART_Init+0x4c>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <MX_USART1_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_USART1_UART_Init+0x4c>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_USART1_UART_Init+0x4c>)
 8000708:	f001 f9da 	bl	8001ac0 <HAL_UART_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000712:	f000 f853 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20004040 	.word	0x20004040
 8000720:	40011000 	.word	0x40011000

08000724 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 800072a:	4a12      	ldr	r2, [pc, #72]	; (8000774 <MX_USART2_UART_Init+0x50>)
 800072c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 8000730:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000734:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 800074a:	220c      	movs	r2, #12
 800074c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 800075c:	f001 f9b0 	bl	8001ac0 <HAL_UART_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000766:	f000 f829 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200042d4 	.word	0x200042d4
 8000774:	40004400 	.word	0x40004400

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_GPIO_Init+0x30>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a08      	ldr	r2, [pc, #32]	; (80007a8 <MX_GPIO_Init+0x30>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_GPIO_Init+0x30>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800

080007ac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007b4:	2001      	movs	r0, #1
 80007b6:	f002 f980 	bl	8002aba <osDelay>
 80007ba:	e7fb      	b.n	80007b4 <StartDefaultTask+0x8>

080007bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c2:	e7fe      	b.n	80007c2 <Error_Handler+0x6>

080007c4 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80007cc:	4a07      	ldr	r2, [pc, #28]	; (80007ec <RetargetInit+0x28>)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80007d2:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <RetargetInit+0x2c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	6898      	ldr	r0, [r3, #8]
 80007d8:	2300      	movs	r3, #0
 80007da:	2202      	movs	r2, #2
 80007dc:	2100      	movs	r1, #0
 80007de:	f003 fb89 	bl	8003ef4 <setvbuf>
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20004314 	.word	0x20004314
 80007f0:	20000010 	.word	0x20000010

080007f4 <_isatty>:

int _isatty(int fd) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	db04      	blt.n	800080c <_isatty+0x18>
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2b02      	cmp	r3, #2
 8000806:	dc01      	bgt.n	800080c <_isatty+0x18>
    return 1;
 8000808:	2301      	movs	r3, #1
 800080a:	e005      	b.n	8000818 <_isatty+0x24>

  errno = EBADF;
 800080c:	f003 fb28 	bl	8003e60 <__errno>
 8000810:	4602      	mov	r2, r0
 8000812:	2309      	movs	r3, #9
 8000814:	6013      	str	r3, [r2, #0]
  return 0;
 8000816:	2300      	movs	r3, #0
}
 8000818:	4618      	mov	r0, r3
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <_write>:

int _write(int fd, char* ptr, int len) {
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	2b01      	cmp	r3, #1
 8000830:	d002      	beq.n	8000838 <_write+0x18>
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	2b02      	cmp	r3, #2
 8000836:	d111      	bne.n	800085c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000838:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <_write+0x54>)
 800083a:	6818      	ldr	r0, [r3, #0]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	b29a      	uxth	r2, r3
 8000840:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000844:	68b9      	ldr	r1, [r7, #8]
 8000846:	f001 f988 	bl	8001b5a <HAL_UART_Transmit>
 800084a:	4603      	mov	r3, r0
 800084c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800084e:	7dfb      	ldrb	r3, [r7, #23]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d101      	bne.n	8000858 <_write+0x38>
      return len;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	e008      	b.n	800086a <_write+0x4a>
    else
      return EIO;
 8000858:	2305      	movs	r3, #5
 800085a:	e006      	b.n	800086a <_write+0x4a>
  }
  errno = EBADF;
 800085c:	f003 fb00 	bl	8003e60 <__errno>
 8000860:	4602      	mov	r2, r0
 8000862:	2309      	movs	r3, #9
 8000864:	6013      	str	r3, [r2, #0]
  return -1;
 8000866:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800086a:	4618      	mov	r0, r3
 800086c:	3718      	adds	r7, #24
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20004314 	.word	0x20004314

08000878 <_close>:

int _close(int fd) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2b00      	cmp	r3, #0
 8000884:	db04      	blt.n	8000890 <_close+0x18>
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2b02      	cmp	r3, #2
 800088a:	dc01      	bgt.n	8000890 <_close+0x18>
    return 0;
 800088c:	2300      	movs	r3, #0
 800088e:	e006      	b.n	800089e <_close+0x26>

  errno = EBADF;
 8000890:	f003 fae6 	bl	8003e60 <__errno>
 8000894:	4602      	mov	r2, r0
 8000896:	2309      	movs	r3, #9
 8000898:	6013      	str	r3, [r2, #0]
  return -1;
 800089a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b084      	sub	sp, #16
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	60f8      	str	r0, [r7, #12]
 80008ae:	60b9      	str	r1, [r7, #8]
 80008b0:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80008b2:	f003 fad5 	bl	8003e60 <__errno>
 80008b6:	4602      	mov	r2, r0
 80008b8:	2309      	movs	r3, #9
 80008ba:	6013      	str	r3, [r2, #0]
  return -1;
 80008bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3710      	adds	r7, #16
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <_read>:

int _read(int fd, char* ptr, int len) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d110      	bne.n	80008fc <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <_read+0x4c>)
 80008dc:	6818      	ldr	r0, [r3, #0]
 80008de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008e2:	2201      	movs	r2, #1
 80008e4:	68b9      	ldr	r1, [r7, #8]
 80008e6:	f001 f9d1 	bl	8001c8c <HAL_UART_Receive>
 80008ea:	4603      	mov	r3, r0
 80008ec:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80008ee:	7dfb      	ldrb	r3, [r7, #23]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d101      	bne.n	80008f8 <_read+0x30>
      return 1;
 80008f4:	2301      	movs	r3, #1
 80008f6:	e008      	b.n	800090a <_read+0x42>
    else
      return EIO;
 80008f8:	2305      	movs	r3, #5
 80008fa:	e006      	b.n	800090a <_read+0x42>
  }
  errno = EBADF;
 80008fc:	f003 fab0 	bl	8003e60 <__errno>
 8000900:	4602      	mov	r2, r0
 8000902:	2309      	movs	r3, #9
 8000904:	6013      	str	r3, [r2, #0]
  return -1;
 8000906:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800090a:	4618      	mov	r0, r3
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20004314 	.word	0x20004314

08000918 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2b00      	cmp	r3, #0
 8000926:	db08      	blt.n	800093a <_fstat+0x22>
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2b02      	cmp	r3, #2
 800092c:	dc05      	bgt.n	800093a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000934:	605a      	str	r2, [r3, #4]
    return 0;
 8000936:	2300      	movs	r3, #0
 8000938:	e005      	b.n	8000946 <_fstat+0x2e>
  }

  errno = EBADF;
 800093a:	f003 fa91 	bl	8003e60 <__errno>
 800093e:	4602      	mov	r2, r0
 8000940:	2309      	movs	r3, #9
 8000942:	6013      	str	r3, [r2, #0]
  return 0;
 8000944:	2300      	movs	r3, #0
}
 8000946:	4618      	mov	r0, r3
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <HAL_MspInit+0x54>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	4a11      	ldr	r2, [pc, #68]	; (80009a4 <HAL_MspInit+0x54>)
 8000960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000964:	6453      	str	r3, [r2, #68]	; 0x44
 8000966:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <HAL_MspInit+0x54>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	603b      	str	r3, [r7, #0]
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <HAL_MspInit+0x54>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	4a0a      	ldr	r2, [pc, #40]	; (80009a4 <HAL_MspInit+0x54>)
 800097c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000980:	6413      	str	r3, [r2, #64]	; 0x40
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <HAL_MspInit+0x54>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	210f      	movs	r1, #15
 8000992:	f06f 0001 	mvn.w	r0, #1
 8000996:	f000 fa7c 	bl	8000e92 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800

080009a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08c      	sub	sp, #48	; 0x30
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a36      	ldr	r2, [pc, #216]	; (8000aa0 <HAL_UART_MspInit+0xf8>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d135      	bne.n	8000a36 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	61bb      	str	r3, [r7, #24]
 80009ce:	4b35      	ldr	r3, [pc, #212]	; (8000aa4 <HAL_UART_MspInit+0xfc>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	4a34      	ldr	r2, [pc, #208]	; (8000aa4 <HAL_UART_MspInit+0xfc>)
 80009d4:	f043 0310 	orr.w	r3, r3, #16
 80009d8:	6453      	str	r3, [r2, #68]	; 0x44
 80009da:	4b32      	ldr	r3, [pc, #200]	; (8000aa4 <HAL_UART_MspInit+0xfc>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	f003 0310 	and.w	r3, r3, #16
 80009e2:	61bb      	str	r3, [r7, #24]
 80009e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
 80009ea:	4b2e      	ldr	r3, [pc, #184]	; (8000aa4 <HAL_UART_MspInit+0xfc>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a2d      	ldr	r2, [pc, #180]	; (8000aa4 <HAL_UART_MspInit+0xfc>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b2b      	ldr	r3, [pc, #172]	; (8000aa4 <HAL_UART_MspInit+0xfc>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	617b      	str	r3, [r7, #20]
 8000a00:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a02:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a10:	2303      	movs	r3, #3
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a14:	2307      	movs	r3, #7
 8000a16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4822      	ldr	r0, [pc, #136]	; (8000aa8 <HAL_UART_MspInit+0x100>)
 8000a20:	f000 fa90 	bl	8000f44 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2105      	movs	r1, #5
 8000a28:	2025      	movs	r0, #37	; 0x25
 8000a2a:	f000 fa32 	bl	8000e92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a2e:	2025      	movs	r0, #37	; 0x25
 8000a30:	f000 fa4b 	bl	8000eca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a34:	e030      	b.n	8000a98 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a1c      	ldr	r2, [pc, #112]	; (8000aac <HAL_UART_MspInit+0x104>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d12b      	bne.n	8000a98 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a40:	2300      	movs	r3, #0
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <HAL_UART_MspInit+0xfc>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a48:	4a16      	ldr	r2, [pc, #88]	; (8000aa4 <HAL_UART_MspInit+0xfc>)
 8000a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a50:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <HAL_UART_MspInit+0xfc>)
 8000a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <HAL_UART_MspInit+0xfc>)
 8000a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a64:	4a0f      	ldr	r2, [pc, #60]	; (8000aa4 <HAL_UART_MspInit+0xfc>)
 8000a66:	f043 0301 	orr.w	r3, r3, #1
 8000a6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6c:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <HAL_UART_MspInit+0xfc>)
 8000a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a78:	230c      	movs	r3, #12
 8000a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a84:	2303      	movs	r3, #3
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a88:	2307      	movs	r3, #7
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	4619      	mov	r1, r3
 8000a92:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <HAL_UART_MspInit+0x100>)
 8000a94:	f000 fa56 	bl	8000f44 <HAL_GPIO_Init>
}
 8000a98:	bf00      	nop
 8000a9a:	3730      	adds	r7, #48	; 0x30
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40011000 	.word	0x40011000
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40020000 	.word	0x40020000
 8000aac:	40004400 	.word	0x40004400

08000ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <NMI_Handler+0x4>

08000ab6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aba:	e7fe      	b.n	8000aba <HardFault_Handler+0x4>

08000abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <MemManage_Handler+0x4>

08000ac2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac6:	e7fe      	b.n	8000ac6 <BusFault_Handler+0x4>

08000ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <UsageFault_Handler+0x4>

08000ace <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae0:	f000 f8dc 	bl	8000c9c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ae4:	f002 fd60 	bl	80035a8 <xTaskGetSchedulerState>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d001      	beq.n	8000af2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000aee:	f002 ff93 	bl	8003a18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
	...

08000af8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000afc:	4802      	ldr	r0, [pc, #8]	; (8000b08 <USART1_IRQHandler+0x10>)
 8000afe:	f001 f96b 	bl	8001dd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20004040 	.word	0x20004040

08000b0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b14:	4a14      	ldr	r2, [pc, #80]	; (8000b68 <_sbrk+0x5c>)
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <_sbrk+0x60>)
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b20:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <_sbrk+0x64>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d102      	bne.n	8000b2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b28:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <_sbrk+0x64>)
 8000b2a:	4a12      	ldr	r2, [pc, #72]	; (8000b74 <_sbrk+0x68>)
 8000b2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b2e:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <_sbrk+0x64>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d207      	bcs.n	8000b4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b3c:	f003 f990 	bl	8003e60 <__errno>
 8000b40:	4602      	mov	r2, r0
 8000b42:	230c      	movs	r3, #12
 8000b44:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b4a:	e009      	b.n	8000b60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <_sbrk+0x64>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b52:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <_sbrk+0x64>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	4a05      	ldr	r2, [pc, #20]	; (8000b70 <_sbrk+0x64>)
 8000b5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3718      	adds	r7, #24
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20020000 	.word	0x20020000
 8000b6c:	00000400 	.word	0x00000400
 8000b70:	200002e4 	.word	0x200002e4
 8000b74:	20004320 	.word	0x20004320

08000b78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <SystemInit+0x28>)
 8000b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b82:	4a07      	ldr	r2, [pc, #28]	; (8000ba0 <SystemInit+0x28>)
 8000b84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b8c:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <SystemInit+0x28>)
 8000b8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b92:	609a      	str	r2, [r3, #8]
#endif
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ba4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bdc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ba8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000baa:	e003      	b.n	8000bb4 <LoopCopyDataInit>

08000bac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000bae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000bb0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000bb2:	3104      	adds	r1, #4

08000bb4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000bb4:	480b      	ldr	r0, [pc, #44]	; (8000be4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000bb6:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000bb8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bbc:	d3f6      	bcc.n	8000bac <CopyDataInit>
  ldr  r2, =_sbss
 8000bbe:	4a0b      	ldr	r2, [pc, #44]	; (8000bec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000bc0:	e002      	b.n	8000bc8 <LoopFillZerobss>

08000bc2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000bc2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000bc4:	f842 3b04 	str.w	r3, [r2], #4

08000bc8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000bc8:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000bca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000bcc:	d3f9      	bcc.n	8000bc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bce:	f7ff ffd3 	bl	8000b78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bd2:	f003 f94b 	bl	8003e6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bd6:	f7ff fced 	bl	80005b4 <main>
  bx  lr    
 8000bda:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bdc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000be0:	08004f04 	.word	0x08004f04
  ldr  r0, =_sdata
 8000be4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000be8:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000bec:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000bf0:	20004320 	.word	0x20004320

08000bf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bf4:	e7fe      	b.n	8000bf4 <ADC_IRQHandler>
	...

08000bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bfc:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <HAL_Init+0x40>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a0d      	ldr	r2, [pc, #52]	; (8000c38 <HAL_Init+0x40>)
 8000c02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c08:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <HAL_Init+0x40>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <HAL_Init+0x40>)
 8000c0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <HAL_Init+0x40>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a07      	ldr	r2, [pc, #28]	; (8000c38 <HAL_Init+0x40>)
 8000c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c20:	2003      	movs	r0, #3
 8000c22:	f000 f92b 	bl	8000e7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c26:	200f      	movs	r0, #15
 8000c28:	f000 f808 	bl	8000c3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c2c:	f7ff fe90 	bl	8000950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40023c00 	.word	0x40023c00

08000c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <HAL_InitTick+0x54>)
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <HAL_InitTick+0x58>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 f943 	bl	8000ee6 <HAL_SYSTICK_Config>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e00e      	b.n	8000c88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2b0f      	cmp	r3, #15
 8000c6e:	d80a      	bhi.n	8000c86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c70:	2200      	movs	r2, #0
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c78:	f000 f90b 	bl	8000e92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c7c:	4a06      	ldr	r2, [pc, #24]	; (8000c98 <HAL_InitTick+0x5c>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c82:	2300      	movs	r3, #0
 8000c84:	e000      	b.n	8000c88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000000 	.word	0x20000000
 8000c94:	20000008 	.word	0x20000008
 8000c98:	20000004 	.word	0x20000004

08000c9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_IncTick+0x20>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_IncTick+0x24>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4413      	add	r3, r2
 8000cac:	4a04      	ldr	r2, [pc, #16]	; (8000cc0 <HAL_IncTick+0x24>)
 8000cae:	6013      	str	r3, [r2, #0]
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20000008 	.word	0x20000008
 8000cc0:	20004318 	.word	0x20004318

08000cc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc8:	4b03      	ldr	r3, [pc, #12]	; (8000cd8 <HAL_GetTick+0x14>)
 8000cca:	681b      	ldr	r3, [r3, #0]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	20004318 	.word	0x20004318

08000cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cec:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <__NVIC_SetPriorityGrouping+0x44>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cf2:	68ba      	ldr	r2, [r7, #8]
 8000cf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0e:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <__NVIC_SetPriorityGrouping+0x44>)
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	60d3      	str	r3, [r2, #12]
}
 8000d14:	bf00      	nop
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d28:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <__NVIC_GetPriorityGrouping+0x18>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	0a1b      	lsrs	r3, r3, #8
 8000d2e:	f003 0307 	and.w	r3, r3, #7
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	db0b      	blt.n	8000d6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	f003 021f 	and.w	r2, r3, #31
 8000d58:	4907      	ldr	r1, [pc, #28]	; (8000d78 <__NVIC_EnableIRQ+0x38>)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	095b      	lsrs	r3, r3, #5
 8000d60:	2001      	movs	r0, #1
 8000d62:	fa00 f202 	lsl.w	r2, r0, r2
 8000d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000e100 	.word	0xe000e100

08000d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	6039      	str	r1, [r7, #0]
 8000d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	db0a      	blt.n	8000da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	490c      	ldr	r1, [pc, #48]	; (8000dc8 <__NVIC_SetPriority+0x4c>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	0112      	lsls	r2, r2, #4
 8000d9c:	b2d2      	uxtb	r2, r2
 8000d9e:	440b      	add	r3, r1
 8000da0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da4:	e00a      	b.n	8000dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	4908      	ldr	r1, [pc, #32]	; (8000dcc <__NVIC_SetPriority+0x50>)
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	f003 030f 	and.w	r3, r3, #15
 8000db2:	3b04      	subs	r3, #4
 8000db4:	0112      	lsls	r2, r2, #4
 8000db6:	b2d2      	uxtb	r2, r2
 8000db8:	440b      	add	r3, r1
 8000dba:	761a      	strb	r2, [r3, #24]
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000e100 	.word	0xe000e100
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b089      	sub	sp, #36	; 0x24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	f1c3 0307 	rsb	r3, r3, #7
 8000dea:	2b04      	cmp	r3, #4
 8000dec:	bf28      	it	cs
 8000dee:	2304      	movcs	r3, #4
 8000df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3304      	adds	r3, #4
 8000df6:	2b06      	cmp	r3, #6
 8000df8:	d902      	bls.n	8000e00 <NVIC_EncodePriority+0x30>
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3b03      	subs	r3, #3
 8000dfe:	e000      	b.n	8000e02 <NVIC_EncodePriority+0x32>
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43da      	mvns	r2, r3
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	401a      	ands	r2, r3
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e22:	43d9      	mvns	r1, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e28:	4313      	orrs	r3, r2
         );
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3724      	adds	r7, #36	; 0x24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
	...

08000e38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e48:	d301      	bcc.n	8000e4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00f      	b.n	8000e6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <SysTick_Config+0x40>)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e56:	210f      	movs	r1, #15
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e5c:	f7ff ff8e 	bl	8000d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <SysTick_Config+0x40>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e66:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <SysTick_Config+0x40>)
 8000e68:	2207      	movs	r2, #7
 8000e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	e000e010 	.word	0xe000e010

08000e7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff ff29 	bl	8000cdc <__NVIC_SetPriorityGrouping>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b086      	sub	sp, #24
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	4603      	mov	r3, r0
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
 8000e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea4:	f7ff ff3e 	bl	8000d24 <__NVIC_GetPriorityGrouping>
 8000ea8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	68b9      	ldr	r1, [r7, #8]
 8000eae:	6978      	ldr	r0, [r7, #20]
 8000eb0:	f7ff ff8e 	bl	8000dd0 <NVIC_EncodePriority>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eba:	4611      	mov	r1, r2
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff5d 	bl	8000d7c <__NVIC_SetPriority>
}
 8000ec2:	bf00      	nop
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff31 	bl	8000d40 <__NVIC_EnableIRQ>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff ffa2 	bl	8000e38 <SysTick_Config>
 8000ef4:	4603      	mov	r3, r0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000efe:	b480      	push	{r7}
 8000f00:	b083      	sub	sp, #12
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d004      	beq.n	8000f1c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2280      	movs	r2, #128	; 0x80
 8000f16:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e00c      	b.n	8000f36 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2205      	movs	r2, #5
 8000f20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f022 0201 	bic.w	r2, r2, #1
 8000f32:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
	...

08000f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b089      	sub	sp, #36	; 0x24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
 8000f5e:	e159      	b.n	8001214 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f60:	2201      	movs	r2, #1
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	697a      	ldr	r2, [r7, #20]
 8000f70:	4013      	ands	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	f040 8148 	bne.w	800120e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d00b      	beq.n	8000f9e <HAL_GPIO_Init+0x5a>
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d007      	beq.n	8000f9e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f92:	2b11      	cmp	r3, #17
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	2b12      	cmp	r3, #18
 8000f9c:	d130      	bne.n	8001000 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	2203      	movs	r2, #3
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	68da      	ldr	r2, [r3, #12]
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	091b      	lsrs	r3, r3, #4
 8000fea:	f003 0201 	and.w	r2, r3, #1
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	2203      	movs	r2, #3
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	689a      	ldr	r2, [r3, #8]
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4313      	orrs	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	2b02      	cmp	r3, #2
 8001036:	d003      	beq.n	8001040 <HAL_GPIO_Init+0xfc>
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	2b12      	cmp	r3, #18
 800103e:	d123      	bne.n	8001088 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	08da      	lsrs	r2, r3, #3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3208      	adds	r2, #8
 8001048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800104c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	f003 0307 	and.w	r3, r3, #7
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	220f      	movs	r2, #15
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	691a      	ldr	r2, [r3, #16]
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	08da      	lsrs	r2, r3, #3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	3208      	adds	r2, #8
 8001082:	69b9      	ldr	r1, [r7, #24]
 8001084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	2203      	movs	r2, #3
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 0203 	and.w	r2, r3, #3
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f000 80a2 	beq.w	800120e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	4b56      	ldr	r3, [pc, #344]	; (8001228 <HAL_GPIO_Init+0x2e4>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	4a55      	ldr	r2, [pc, #340]	; (8001228 <HAL_GPIO_Init+0x2e4>)
 80010d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d8:	6453      	str	r3, [r2, #68]	; 0x44
 80010da:	4b53      	ldr	r3, [pc, #332]	; (8001228 <HAL_GPIO_Init+0x2e4>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010e6:	4a51      	ldr	r2, [pc, #324]	; (800122c <HAL_GPIO_Init+0x2e8>)
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	089b      	lsrs	r3, r3, #2
 80010ec:	3302      	adds	r3, #2
 80010ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f003 0303 	and.w	r3, r3, #3
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	220f      	movs	r2, #15
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43db      	mvns	r3, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4013      	ands	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a48      	ldr	r2, [pc, #288]	; (8001230 <HAL_GPIO_Init+0x2ec>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d019      	beq.n	8001146 <HAL_GPIO_Init+0x202>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a47      	ldr	r2, [pc, #284]	; (8001234 <HAL_GPIO_Init+0x2f0>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d013      	beq.n	8001142 <HAL_GPIO_Init+0x1fe>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a46      	ldr	r2, [pc, #280]	; (8001238 <HAL_GPIO_Init+0x2f4>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d00d      	beq.n	800113e <HAL_GPIO_Init+0x1fa>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a45      	ldr	r2, [pc, #276]	; (800123c <HAL_GPIO_Init+0x2f8>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d007      	beq.n	800113a <HAL_GPIO_Init+0x1f6>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a44      	ldr	r2, [pc, #272]	; (8001240 <HAL_GPIO_Init+0x2fc>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d101      	bne.n	8001136 <HAL_GPIO_Init+0x1f2>
 8001132:	2304      	movs	r3, #4
 8001134:	e008      	b.n	8001148 <HAL_GPIO_Init+0x204>
 8001136:	2307      	movs	r3, #7
 8001138:	e006      	b.n	8001148 <HAL_GPIO_Init+0x204>
 800113a:	2303      	movs	r3, #3
 800113c:	e004      	b.n	8001148 <HAL_GPIO_Init+0x204>
 800113e:	2302      	movs	r3, #2
 8001140:	e002      	b.n	8001148 <HAL_GPIO_Init+0x204>
 8001142:	2301      	movs	r3, #1
 8001144:	e000      	b.n	8001148 <HAL_GPIO_Init+0x204>
 8001146:	2300      	movs	r3, #0
 8001148:	69fa      	ldr	r2, [r7, #28]
 800114a:	f002 0203 	and.w	r2, r2, #3
 800114e:	0092      	lsls	r2, r2, #2
 8001150:	4093      	lsls	r3, r2
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4313      	orrs	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001158:	4934      	ldr	r1, [pc, #208]	; (800122c <HAL_GPIO_Init+0x2e8>)
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	089b      	lsrs	r3, r3, #2
 800115e:	3302      	adds	r3, #2
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001166:	4b37      	ldr	r3, [pc, #220]	; (8001244 <HAL_GPIO_Init+0x300>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	43db      	mvns	r3, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800118a:	4a2e      	ldr	r2, [pc, #184]	; (8001244 <HAL_GPIO_Init+0x300>)
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001190:	4b2c      	ldr	r3, [pc, #176]	; (8001244 <HAL_GPIO_Init+0x300>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011b4:	4a23      	ldr	r2, [pc, #140]	; (8001244 <HAL_GPIO_Init+0x300>)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ba:	4b22      	ldr	r3, [pc, #136]	; (8001244 <HAL_GPIO_Init+0x300>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	43db      	mvns	r3, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4013      	ands	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011de:	4a19      	ldr	r2, [pc, #100]	; (8001244 <HAL_GPIO_Init+0x300>)
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011e4:	4b17      	ldr	r3, [pc, #92]	; (8001244 <HAL_GPIO_Init+0x300>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d003      	beq.n	8001208 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001208:	4a0e      	ldr	r2, [pc, #56]	; (8001244 <HAL_GPIO_Init+0x300>)
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3301      	adds	r3, #1
 8001212:	61fb      	str	r3, [r7, #28]
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	2b0f      	cmp	r3, #15
 8001218:	f67f aea2 	bls.w	8000f60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800121c:	bf00      	nop
 800121e:	3724      	adds	r7, #36	; 0x24
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	40023800 	.word	0x40023800
 800122c:	40013800 	.word	0x40013800
 8001230:	40020000 	.word	0x40020000
 8001234:	40020400 	.word	0x40020400
 8001238:	40020800 	.word	0x40020800
 800123c:	40020c00 	.word	0x40020c00
 8001240:	40021000 	.word	0x40021000
 8001244:	40013c00 	.word	0x40013c00

08001248 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d101      	bne.n	800125a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e25b      	b.n	8001712 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	2b00      	cmp	r3, #0
 8001264:	d075      	beq.n	8001352 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001266:	4ba3      	ldr	r3, [pc, #652]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f003 030c 	and.w	r3, r3, #12
 800126e:	2b04      	cmp	r3, #4
 8001270:	d00c      	beq.n	800128c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001272:	4ba0      	ldr	r3, [pc, #640]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800127a:	2b08      	cmp	r3, #8
 800127c:	d112      	bne.n	80012a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800127e:	4b9d      	ldr	r3, [pc, #628]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001286:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800128a:	d10b      	bne.n	80012a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800128c:	4b99      	ldr	r3, [pc, #612]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d05b      	beq.n	8001350 <HAL_RCC_OscConfig+0x108>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d157      	bne.n	8001350 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e236      	b.n	8001712 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ac:	d106      	bne.n	80012bc <HAL_RCC_OscConfig+0x74>
 80012ae:	4b91      	ldr	r3, [pc, #580]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a90      	ldr	r2, [pc, #576]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 80012b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b8:	6013      	str	r3, [r2, #0]
 80012ba:	e01d      	b.n	80012f8 <HAL_RCC_OscConfig+0xb0>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012c4:	d10c      	bne.n	80012e0 <HAL_RCC_OscConfig+0x98>
 80012c6:	4b8b      	ldr	r3, [pc, #556]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a8a      	ldr	r2, [pc, #552]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 80012cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	4b88      	ldr	r3, [pc, #544]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a87      	ldr	r2, [pc, #540]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 80012d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012dc:	6013      	str	r3, [r2, #0]
 80012de:	e00b      	b.n	80012f8 <HAL_RCC_OscConfig+0xb0>
 80012e0:	4b84      	ldr	r3, [pc, #528]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a83      	ldr	r2, [pc, #524]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 80012e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ea:	6013      	str	r3, [r2, #0]
 80012ec:	4b81      	ldr	r3, [pc, #516]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a80      	ldr	r2, [pc, #512]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 80012f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d013      	beq.n	8001328 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001300:	f7ff fce0 	bl	8000cc4 <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001308:	f7ff fcdc 	bl	8000cc4 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b64      	cmp	r3, #100	; 0x64
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e1fb      	b.n	8001712 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131a:	4b76      	ldr	r3, [pc, #472]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d0f0      	beq.n	8001308 <HAL_RCC_OscConfig+0xc0>
 8001326:	e014      	b.n	8001352 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001328:	f7ff fccc 	bl	8000cc4 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001330:	f7ff fcc8 	bl	8000cc4 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b64      	cmp	r3, #100	; 0x64
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e1e7      	b.n	8001712 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001342:	4b6c      	ldr	r3, [pc, #432]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1f0      	bne.n	8001330 <HAL_RCC_OscConfig+0xe8>
 800134e:	e000      	b.n	8001352 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d063      	beq.n	8001426 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800135e:	4b65      	ldr	r3, [pc, #404]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 030c 	and.w	r3, r3, #12
 8001366:	2b00      	cmp	r3, #0
 8001368:	d00b      	beq.n	8001382 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800136a:	4b62      	ldr	r3, [pc, #392]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001372:	2b08      	cmp	r3, #8
 8001374:	d11c      	bne.n	80013b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001376:	4b5f      	ldr	r3, [pc, #380]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d116      	bne.n	80013b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001382:	4b5c      	ldr	r3, [pc, #368]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d005      	beq.n	800139a <HAL_RCC_OscConfig+0x152>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d001      	beq.n	800139a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e1bb      	b.n	8001712 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139a:	4b56      	ldr	r3, [pc, #344]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	4952      	ldr	r1, [pc, #328]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 80013aa:	4313      	orrs	r3, r2
 80013ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ae:	e03a      	b.n	8001426 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d020      	beq.n	80013fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013b8:	4b4f      	ldr	r3, [pc, #316]	; (80014f8 <HAL_RCC_OscConfig+0x2b0>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013be:	f7ff fc81 	bl	8000cc4 <HAL_GetTick>
 80013c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c4:	e008      	b.n	80013d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013c6:	f7ff fc7d 	bl	8000cc4 <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e19c      	b.n	8001712 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d8:	4b46      	ldr	r3, [pc, #280]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d0f0      	beq.n	80013c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e4:	4b43      	ldr	r3, [pc, #268]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	691b      	ldr	r3, [r3, #16]
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	4940      	ldr	r1, [pc, #256]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 80013f4:	4313      	orrs	r3, r2
 80013f6:	600b      	str	r3, [r1, #0]
 80013f8:	e015      	b.n	8001426 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013fa:	4b3f      	ldr	r3, [pc, #252]	; (80014f8 <HAL_RCC_OscConfig+0x2b0>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001400:	f7ff fc60 	bl	8000cc4 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001408:	f7ff fc5c 	bl	8000cc4 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e17b      	b.n	8001712 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800141a:	4b36      	ldr	r3, [pc, #216]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1f0      	bne.n	8001408 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0308 	and.w	r3, r3, #8
 800142e:	2b00      	cmp	r3, #0
 8001430:	d030      	beq.n	8001494 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d016      	beq.n	8001468 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800143a:	4b30      	ldr	r3, [pc, #192]	; (80014fc <HAL_RCC_OscConfig+0x2b4>)
 800143c:	2201      	movs	r2, #1
 800143e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001440:	f7ff fc40 	bl	8000cc4 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001448:	f7ff fc3c 	bl	8000cc4 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e15b      	b.n	8001712 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800145a:	4b26      	ldr	r3, [pc, #152]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 800145c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0f0      	beq.n	8001448 <HAL_RCC_OscConfig+0x200>
 8001466:	e015      	b.n	8001494 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001468:	4b24      	ldr	r3, [pc, #144]	; (80014fc <HAL_RCC_OscConfig+0x2b4>)
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146e:	f7ff fc29 	bl	8000cc4 <HAL_GetTick>
 8001472:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001474:	e008      	b.n	8001488 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001476:	f7ff fc25 	bl	8000cc4 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e144      	b.n	8001712 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001488:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 800148a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1f0      	bne.n	8001476 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	2b00      	cmp	r3, #0
 800149e:	f000 80a0 	beq.w	80015e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014a2:	2300      	movs	r3, #0
 80014a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014a6:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d10f      	bne.n	80014d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	4a0e      	ldr	r2, [pc, #56]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 80014bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c0:	6413      	str	r3, [r2, #64]	; 0x40
 80014c2:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <HAL_RCC_OscConfig+0x2ac>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014ce:	2301      	movs	r3, #1
 80014d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d2:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <HAL_RCC_OscConfig+0x2b8>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d121      	bne.n	8001522 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014de:	4b08      	ldr	r3, [pc, #32]	; (8001500 <HAL_RCC_OscConfig+0x2b8>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a07      	ldr	r2, [pc, #28]	; (8001500 <HAL_RCC_OscConfig+0x2b8>)
 80014e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ea:	f7ff fbeb 	bl	8000cc4 <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f0:	e011      	b.n	8001516 <HAL_RCC_OscConfig+0x2ce>
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800
 80014f8:	42470000 	.word	0x42470000
 80014fc:	42470e80 	.word	0x42470e80
 8001500:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001504:	f7ff fbde 	bl	8000cc4 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e0fd      	b.n	8001712 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001516:	4b81      	ldr	r3, [pc, #516]	; (800171c <HAL_RCC_OscConfig+0x4d4>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0f0      	beq.n	8001504 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d106      	bne.n	8001538 <HAL_RCC_OscConfig+0x2f0>
 800152a:	4b7d      	ldr	r3, [pc, #500]	; (8001720 <HAL_RCC_OscConfig+0x4d8>)
 800152c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152e:	4a7c      	ldr	r2, [pc, #496]	; (8001720 <HAL_RCC_OscConfig+0x4d8>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6713      	str	r3, [r2, #112]	; 0x70
 8001536:	e01c      	b.n	8001572 <HAL_RCC_OscConfig+0x32a>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	2b05      	cmp	r3, #5
 800153e:	d10c      	bne.n	800155a <HAL_RCC_OscConfig+0x312>
 8001540:	4b77      	ldr	r3, [pc, #476]	; (8001720 <HAL_RCC_OscConfig+0x4d8>)
 8001542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001544:	4a76      	ldr	r2, [pc, #472]	; (8001720 <HAL_RCC_OscConfig+0x4d8>)
 8001546:	f043 0304 	orr.w	r3, r3, #4
 800154a:	6713      	str	r3, [r2, #112]	; 0x70
 800154c:	4b74      	ldr	r3, [pc, #464]	; (8001720 <HAL_RCC_OscConfig+0x4d8>)
 800154e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001550:	4a73      	ldr	r2, [pc, #460]	; (8001720 <HAL_RCC_OscConfig+0x4d8>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	6713      	str	r3, [r2, #112]	; 0x70
 8001558:	e00b      	b.n	8001572 <HAL_RCC_OscConfig+0x32a>
 800155a:	4b71      	ldr	r3, [pc, #452]	; (8001720 <HAL_RCC_OscConfig+0x4d8>)
 800155c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155e:	4a70      	ldr	r2, [pc, #448]	; (8001720 <HAL_RCC_OscConfig+0x4d8>)
 8001560:	f023 0301 	bic.w	r3, r3, #1
 8001564:	6713      	str	r3, [r2, #112]	; 0x70
 8001566:	4b6e      	ldr	r3, [pc, #440]	; (8001720 <HAL_RCC_OscConfig+0x4d8>)
 8001568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800156a:	4a6d      	ldr	r2, [pc, #436]	; (8001720 <HAL_RCC_OscConfig+0x4d8>)
 800156c:	f023 0304 	bic.w	r3, r3, #4
 8001570:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d015      	beq.n	80015a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800157a:	f7ff fba3 	bl	8000cc4 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001580:	e00a      	b.n	8001598 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001582:	f7ff fb9f 	bl	8000cc4 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001590:	4293      	cmp	r3, r2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e0bc      	b.n	8001712 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001598:	4b61      	ldr	r3, [pc, #388]	; (8001720 <HAL_RCC_OscConfig+0x4d8>)
 800159a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0ee      	beq.n	8001582 <HAL_RCC_OscConfig+0x33a>
 80015a4:	e014      	b.n	80015d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a6:	f7ff fb8d 	bl	8000cc4 <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ac:	e00a      	b.n	80015c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ae:	f7ff fb89 	bl	8000cc4 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015bc:	4293      	cmp	r3, r2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e0a6      	b.n	8001712 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c4:	4b56      	ldr	r3, [pc, #344]	; (8001720 <HAL_RCC_OscConfig+0x4d8>)
 80015c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1ee      	bne.n	80015ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015d0:	7dfb      	ldrb	r3, [r7, #23]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d105      	bne.n	80015e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d6:	4b52      	ldr	r3, [pc, #328]	; (8001720 <HAL_RCC_OscConfig+0x4d8>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	4a51      	ldr	r2, [pc, #324]	; (8001720 <HAL_RCC_OscConfig+0x4d8>)
 80015dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 8092 	beq.w	8001710 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015ec:	4b4c      	ldr	r3, [pc, #304]	; (8001720 <HAL_RCC_OscConfig+0x4d8>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f003 030c 	and.w	r3, r3, #12
 80015f4:	2b08      	cmp	r3, #8
 80015f6:	d05c      	beq.n	80016b2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d141      	bne.n	8001684 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001600:	4b48      	ldr	r3, [pc, #288]	; (8001724 <HAL_RCC_OscConfig+0x4dc>)
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001606:	f7ff fb5d 	bl	8000cc4 <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800160e:	f7ff fb59 	bl	8000cc4 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e078      	b.n	8001712 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001620:	4b3f      	ldr	r3, [pc, #252]	; (8001720 <HAL_RCC_OscConfig+0x4d8>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1f0      	bne.n	800160e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	69da      	ldr	r2, [r3, #28]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	431a      	orrs	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163a:	019b      	lsls	r3, r3, #6
 800163c:	431a      	orrs	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001642:	085b      	lsrs	r3, r3, #1
 8001644:	3b01      	subs	r3, #1
 8001646:	041b      	lsls	r3, r3, #16
 8001648:	431a      	orrs	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164e:	061b      	lsls	r3, r3, #24
 8001650:	4933      	ldr	r1, [pc, #204]	; (8001720 <HAL_RCC_OscConfig+0x4d8>)
 8001652:	4313      	orrs	r3, r2
 8001654:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001656:	4b33      	ldr	r3, [pc, #204]	; (8001724 <HAL_RCC_OscConfig+0x4dc>)
 8001658:	2201      	movs	r2, #1
 800165a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165c:	f7ff fb32 	bl	8000cc4 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001664:	f7ff fb2e 	bl	8000cc4 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e04d      	b.n	8001712 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001676:	4b2a      	ldr	r3, [pc, #168]	; (8001720 <HAL_RCC_OscConfig+0x4d8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0f0      	beq.n	8001664 <HAL_RCC_OscConfig+0x41c>
 8001682:	e045      	b.n	8001710 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001684:	4b27      	ldr	r3, [pc, #156]	; (8001724 <HAL_RCC_OscConfig+0x4dc>)
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168a:	f7ff fb1b 	bl	8000cc4 <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001692:	f7ff fb17 	bl	8000cc4 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e036      	b.n	8001712 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a4:	4b1e      	ldr	r3, [pc, #120]	; (8001720 <HAL_RCC_OscConfig+0x4d8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1f0      	bne.n	8001692 <HAL_RCC_OscConfig+0x44a>
 80016b0:	e02e      	b.n	8001710 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d101      	bne.n	80016be <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e029      	b.n	8001712 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016be:	4b18      	ldr	r3, [pc, #96]	; (8001720 <HAL_RCC_OscConfig+0x4d8>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d11c      	bne.n	800170c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016dc:	429a      	cmp	r2, r3
 80016de:	d115      	bne.n	800170c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80016e0:	68fa      	ldr	r2, [r7, #12]
 80016e2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016e6:	4013      	ands	r3, r2
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d10d      	bne.n	800170c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d106      	bne.n	800170c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001708:	429a      	cmp	r2, r3
 800170a:	d001      	beq.n	8001710 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e000      	b.n	8001712 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40007000 	.word	0x40007000
 8001720:	40023800 	.word	0x40023800
 8001724:	42470060 	.word	0x42470060

08001728 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e0cc      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800173c:	4b68      	ldr	r3, [pc, #416]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 030f 	and.w	r3, r3, #15
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	429a      	cmp	r2, r3
 8001748:	d90c      	bls.n	8001764 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174a:	4b65      	ldr	r3, [pc, #404]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001752:	4b63      	ldr	r3, [pc, #396]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	429a      	cmp	r2, r3
 800175e:	d001      	beq.n	8001764 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e0b8      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d020      	beq.n	80017b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b00      	cmp	r3, #0
 800177a:	d005      	beq.n	8001788 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800177c:	4b59      	ldr	r3, [pc, #356]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	4a58      	ldr	r2, [pc, #352]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001786:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0308 	and.w	r3, r3, #8
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001794:	4b53      	ldr	r3, [pc, #332]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	4a52      	ldr	r2, [pc, #328]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800179e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a0:	4b50      	ldr	r3, [pc, #320]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	494d      	ldr	r1, [pc, #308]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d044      	beq.n	8001848 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d107      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c6:	4b47      	ldr	r3, [pc, #284]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d119      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e07f      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d003      	beq.n	80017e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	d107      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e6:	4b3f      	ldr	r3, [pc, #252]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d109      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e06f      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f6:	4b3b      	ldr	r3, [pc, #236]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e067      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001806:	4b37      	ldr	r3, [pc, #220]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f023 0203 	bic.w	r2, r3, #3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	4934      	ldr	r1, [pc, #208]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	4313      	orrs	r3, r2
 8001816:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001818:	f7ff fa54 	bl	8000cc4 <HAL_GetTick>
 800181c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181e:	e00a      	b.n	8001836 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001820:	f7ff fa50 	bl	8000cc4 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	f241 3288 	movw	r2, #5000	; 0x1388
 800182e:	4293      	cmp	r3, r2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e04f      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001836:	4b2b      	ldr	r3, [pc, #172]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 020c 	and.w	r2, r3, #12
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	429a      	cmp	r2, r3
 8001846:	d1eb      	bne.n	8001820 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001848:	4b25      	ldr	r3, [pc, #148]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 030f 	and.w	r3, r3, #15
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	429a      	cmp	r2, r3
 8001854:	d20c      	bcs.n	8001870 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001856:	4b22      	ldr	r3, [pc, #136]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800185e:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	429a      	cmp	r2, r3
 800186a:	d001      	beq.n	8001870 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e032      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	2b00      	cmp	r3, #0
 800187a:	d008      	beq.n	800188e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800187c:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	4916      	ldr	r1, [pc, #88]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	4313      	orrs	r3, r2
 800188c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0308 	and.w	r3, r3, #8
 8001896:	2b00      	cmp	r3, #0
 8001898:	d009      	beq.n	80018ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800189a:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	490e      	ldr	r1, [pc, #56]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ae:	f000 f821 	bl	80018f4 <HAL_RCC_GetSysClockFreq>
 80018b2:	4601      	mov	r1, r0
 80018b4:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	091b      	lsrs	r3, r3, #4
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	4a0a      	ldr	r2, [pc, #40]	; (80018e8 <HAL_RCC_ClockConfig+0x1c0>)
 80018c0:	5cd3      	ldrb	r3, [r2, r3]
 80018c2:	fa21 f303 	lsr.w	r3, r1, r3
 80018c6:	4a09      	ldr	r2, [pc, #36]	; (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 80018c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018ca:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <HAL_RCC_ClockConfig+0x1c8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff f9b4 	bl	8000c3c <HAL_InitTick>

  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40023c00 	.word	0x40023c00
 80018e4:	40023800 	.word	0x40023800
 80018e8:	08004e44 	.word	0x08004e44
 80018ec:	20000000 	.word	0x20000000
 80018f0:	20000004 	.word	0x20000004

080018f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	2300      	movs	r3, #0
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	2300      	movs	r3, #0
 8001904:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001906:	2300      	movs	r3, #0
 8001908:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800190a:	4b50      	ldr	r3, [pc, #320]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x158>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 030c 	and.w	r3, r3, #12
 8001912:	2b04      	cmp	r3, #4
 8001914:	d007      	beq.n	8001926 <HAL_RCC_GetSysClockFreq+0x32>
 8001916:	2b08      	cmp	r3, #8
 8001918:	d008      	beq.n	800192c <HAL_RCC_GetSysClockFreq+0x38>
 800191a:	2b00      	cmp	r3, #0
 800191c:	f040 808d 	bne.w	8001a3a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001920:	4b4b      	ldr	r3, [pc, #300]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001922:	60bb      	str	r3, [r7, #8]
       break;
 8001924:	e08c      	b.n	8001a40 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001926:	4b4b      	ldr	r3, [pc, #300]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x160>)
 8001928:	60bb      	str	r3, [r7, #8]
      break;
 800192a:	e089      	b.n	8001a40 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800192c:	4b47      	ldr	r3, [pc, #284]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x158>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001934:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001936:	4b45      	ldr	r3, [pc, #276]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x158>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d023      	beq.n	800198a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001942:	4b42      	ldr	r3, [pc, #264]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x158>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	099b      	lsrs	r3, r3, #6
 8001948:	f04f 0400 	mov.w	r4, #0
 800194c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	ea03 0501 	and.w	r5, r3, r1
 8001958:	ea04 0602 	and.w	r6, r4, r2
 800195c:	4a3d      	ldr	r2, [pc, #244]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x160>)
 800195e:	fb02 f106 	mul.w	r1, r2, r6
 8001962:	2200      	movs	r2, #0
 8001964:	fb02 f205 	mul.w	r2, r2, r5
 8001968:	440a      	add	r2, r1
 800196a:	493a      	ldr	r1, [pc, #232]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x160>)
 800196c:	fba5 0101 	umull	r0, r1, r5, r1
 8001970:	1853      	adds	r3, r2, r1
 8001972:	4619      	mov	r1, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f04f 0400 	mov.w	r4, #0
 800197a:	461a      	mov	r2, r3
 800197c:	4623      	mov	r3, r4
 800197e:	f7fe fc7f 	bl	8000280 <__aeabi_uldivmod>
 8001982:	4603      	mov	r3, r0
 8001984:	460c      	mov	r4, r1
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	e049      	b.n	8001a1e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800198a:	4b30      	ldr	r3, [pc, #192]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x158>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	099b      	lsrs	r3, r3, #6
 8001990:	f04f 0400 	mov.w	r4, #0
 8001994:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001998:	f04f 0200 	mov.w	r2, #0
 800199c:	ea03 0501 	and.w	r5, r3, r1
 80019a0:	ea04 0602 	and.w	r6, r4, r2
 80019a4:	4629      	mov	r1, r5
 80019a6:	4632      	mov	r2, r6
 80019a8:	f04f 0300 	mov.w	r3, #0
 80019ac:	f04f 0400 	mov.w	r4, #0
 80019b0:	0154      	lsls	r4, r2, #5
 80019b2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019b6:	014b      	lsls	r3, r1, #5
 80019b8:	4619      	mov	r1, r3
 80019ba:	4622      	mov	r2, r4
 80019bc:	1b49      	subs	r1, r1, r5
 80019be:	eb62 0206 	sbc.w	r2, r2, r6
 80019c2:	f04f 0300 	mov.w	r3, #0
 80019c6:	f04f 0400 	mov.w	r4, #0
 80019ca:	0194      	lsls	r4, r2, #6
 80019cc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80019d0:	018b      	lsls	r3, r1, #6
 80019d2:	1a5b      	subs	r3, r3, r1
 80019d4:	eb64 0402 	sbc.w	r4, r4, r2
 80019d8:	f04f 0100 	mov.w	r1, #0
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	00e2      	lsls	r2, r4, #3
 80019e2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80019e6:	00d9      	lsls	r1, r3, #3
 80019e8:	460b      	mov	r3, r1
 80019ea:	4614      	mov	r4, r2
 80019ec:	195b      	adds	r3, r3, r5
 80019ee:	eb44 0406 	adc.w	r4, r4, r6
 80019f2:	f04f 0100 	mov.w	r1, #0
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	02a2      	lsls	r2, r4, #10
 80019fc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001a00:	0299      	lsls	r1, r3, #10
 8001a02:	460b      	mov	r3, r1
 8001a04:	4614      	mov	r4, r2
 8001a06:	4618      	mov	r0, r3
 8001a08:	4621      	mov	r1, r4
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f04f 0400 	mov.w	r4, #0
 8001a10:	461a      	mov	r2, r3
 8001a12:	4623      	mov	r3, r4
 8001a14:	f7fe fc34 	bl	8000280 <__aeabi_uldivmod>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	460c      	mov	r4, r1
 8001a1c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x158>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	0c1b      	lsrs	r3, r3, #16
 8001a24:	f003 0303 	and.w	r3, r3, #3
 8001a28:	3301      	adds	r3, #1
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a36:	60bb      	str	r3, [r7, #8]
      break;
 8001a38:	e002      	b.n	8001a40 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a3a:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001a3c:	60bb      	str	r3, [r7, #8]
      break;
 8001a3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a40:	68bb      	ldr	r3, [r7, #8]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	00f42400 	.word	0x00f42400
 8001a54:	017d7840 	.word	0x017d7840

08001a58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a5c:	4b03      	ldr	r3, [pc, #12]	; (8001a6c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	20000000 	.word	0x20000000

08001a70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a74:	f7ff fff0 	bl	8001a58 <HAL_RCC_GetHCLKFreq>
 8001a78:	4601      	mov	r1, r0
 8001a7a:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	0a9b      	lsrs	r3, r3, #10
 8001a80:	f003 0307 	and.w	r3, r3, #7
 8001a84:	4a03      	ldr	r2, [pc, #12]	; (8001a94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a86:	5cd3      	ldrb	r3, [r2, r3]
 8001a88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40023800 	.word	0x40023800
 8001a94:	08004e54 	.word	0x08004e54

08001a98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a9c:	f7ff ffdc 	bl	8001a58 <HAL_RCC_GetHCLKFreq>
 8001aa0:	4601      	mov	r1, r0
 8001aa2:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	0b5b      	lsrs	r3, r3, #13
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	4a03      	ldr	r2, [pc, #12]	; (8001abc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aae:	5cd3      	ldrb	r3, [r2, r3]
 8001ab0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	08004e54 	.word	0x08004e54

08001ac0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e03f      	b.n	8001b52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d106      	bne.n	8001aec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7fe ff5e 	bl	80009a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2224      	movs	r2, #36	; 0x24
 8001af0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68da      	ldr	r2, [r3, #12]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 fbf1 	bl	80022ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	691a      	ldr	r2, [r3, #16]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	695a      	ldr	r2, [r3, #20]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68da      	ldr	r2, [r3, #12]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2220      	movs	r2, #32
 8001b44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2220      	movs	r2, #32
 8001b4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b088      	sub	sp, #32
 8001b5e:	af02      	add	r7, sp, #8
 8001b60:	60f8      	str	r0, [r7, #12]
 8001b62:	60b9      	str	r1, [r7, #8]
 8001b64:	603b      	str	r3, [r7, #0]
 8001b66:	4613      	mov	r3, r2
 8001b68:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b20      	cmp	r3, #32
 8001b78:	f040 8083 	bne.w	8001c82 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d002      	beq.n	8001b88 <HAL_UART_Transmit+0x2e>
 8001b82:	88fb      	ldrh	r3, [r7, #6]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d101      	bne.n	8001b8c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e07b      	b.n	8001c84 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d101      	bne.n	8001b9a <HAL_UART_Transmit+0x40>
 8001b96:	2302      	movs	r3, #2
 8001b98:	e074      	b.n	8001c84 <HAL_UART_Transmit+0x12a>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2221      	movs	r2, #33	; 0x21
 8001bac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001bb0:	f7ff f888 	bl	8000cc4 <HAL_GetTick>
 8001bb4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	88fa      	ldrh	r2, [r7, #6]
 8001bba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	88fa      	ldrh	r2, [r7, #6]
 8001bc0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001bca:	e042      	b.n	8001c52 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001be2:	d122      	bne.n	8001c2a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	2200      	movs	r2, #0
 8001bec:	2180      	movs	r1, #128	; 0x80
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f000 fa10 	bl	8002014 <UART_WaitOnFlagUntilTimeout>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e042      	b.n	8001c84 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	461a      	mov	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c10:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d103      	bne.n	8001c22 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	3302      	adds	r3, #2
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	e017      	b.n	8001c52 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	3301      	adds	r3, #1
 8001c26:	60bb      	str	r3, [r7, #8]
 8001c28:	e013      	b.n	8001c52 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	2200      	movs	r2, #0
 8001c32:	2180      	movs	r1, #128	; 0x80
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f000 f9ed 	bl	8002014 <UART_WaitOnFlagUntilTimeout>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e01f      	b.n	8001c84 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	1c5a      	adds	r2, r3, #1
 8001c48:	60ba      	str	r2, [r7, #8]
 8001c4a:	781a      	ldrb	r2, [r3, #0]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1b7      	bne.n	8001bcc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	2200      	movs	r2, #0
 8001c64:	2140      	movs	r1, #64	; 0x40
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f000 f9d4 	bl	8002014 <UART_WaitOnFlagUntilTimeout>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e006      	b.n	8001c84 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2220      	movs	r2, #32
 8001c7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e000      	b.n	8001c84 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001c82:	2302      	movs	r3, #2
  }
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b088      	sub	sp, #32
 8001c90:	af02      	add	r7, sp, #8
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	603b      	str	r3, [r7, #0]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b20      	cmp	r3, #32
 8001caa:	f040 8090 	bne.w	8001dce <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d002      	beq.n	8001cba <HAL_UART_Receive+0x2e>
 8001cb4:	88fb      	ldrh	r3, [r7, #6]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e088      	b.n	8001dd0 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d101      	bne.n	8001ccc <HAL_UART_Receive+0x40>
 8001cc8:	2302      	movs	r3, #2
 8001cca:	e081      	b.n	8001dd0 <HAL_UART_Receive+0x144>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2222      	movs	r2, #34	; 0x22
 8001cde:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001ce2:	f7fe ffef 	bl	8000cc4 <HAL_GetTick>
 8001ce6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	88fa      	ldrh	r2, [r7, #6]
 8001cec:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	88fa      	ldrh	r2, [r7, #6]
 8001cf2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001cfc:	e05c      	b.n	8001db8 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	3b01      	subs	r3, #1
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d14:	d12b      	bne.n	8001d6e <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	9300      	str	r3, [sp, #0]
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	2120      	movs	r1, #32
 8001d20:	68f8      	ldr	r0, [r7, #12]
 8001d22:	f000 f977 	bl	8002014 <UART_WaitOnFlagUntilTimeout>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e04f      	b.n	8001dd0 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d10c      	bne.n	8001d56 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	3302      	adds	r3, #2
 8001d52:	60bb      	str	r3, [r7, #8]
 8001d54:	e030      	b.n	8001db8 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	60bb      	str	r3, [r7, #8]
 8001d6c:	e024      	b.n	8001db8 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	2200      	movs	r2, #0
 8001d76:	2120      	movs	r1, #32
 8001d78:	68f8      	ldr	r0, [r7, #12]
 8001d7a:	f000 f94b 	bl	8002014 <UART_WaitOnFlagUntilTimeout>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e023      	b.n	8001dd0 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d108      	bne.n	8001da2 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6859      	ldr	r1, [r3, #4]
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	1c5a      	adds	r2, r3, #1
 8001d9a:	60ba      	str	r2, [r7, #8]
 8001d9c:	b2ca      	uxtb	r2, r1
 8001d9e:	701a      	strb	r2, [r3, #0]
 8001da0:	e00a      	b.n	8001db8 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	1c59      	adds	r1, r3, #1
 8001dae:	60b9      	str	r1, [r7, #8]
 8001db0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001db4:	b2d2      	uxtb	r2, r2
 8001db6:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d19d      	bne.n	8001cfe <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2220      	movs	r2, #32
 8001dc6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	e000      	b.n	8001dd0 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8001dce:	2302      	movs	r3, #2
  }
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b088      	sub	sp, #32
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d10d      	bne.n	8001e2a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	f003 0320 	and.w	r3, r3, #32
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d008      	beq.n	8001e2a <HAL_UART_IRQHandler+0x52>
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	f003 0320 	and.w	r3, r3, #32
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f9e0 	bl	80021e8 <UART_Receive_IT>
      return;
 8001e28:	e0d1      	b.n	8001fce <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f000 80b0 	beq.w	8001f92 <HAL_UART_IRQHandler+0x1ba>
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d105      	bne.n	8001e48 <HAL_UART_IRQHandler+0x70>
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 80a5 	beq.w	8001f92 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00a      	beq.n	8001e68 <HAL_UART_IRQHandler+0x90>
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d005      	beq.n	8001e68 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e60:	f043 0201 	orr.w	r2, r3, #1
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f003 0304 	and.w	r3, r3, #4
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00a      	beq.n	8001e88 <HAL_UART_IRQHandler+0xb0>
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d005      	beq.n	8001e88 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e80:	f043 0202 	orr.w	r2, r3, #2
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00a      	beq.n	8001ea8 <HAL_UART_IRQHandler+0xd0>
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d005      	beq.n	8001ea8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ea0:	f043 0204 	orr.w	r2, r3, #4
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00f      	beq.n	8001ed2 <HAL_UART_IRQHandler+0xfa>
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	f003 0320 	and.w	r3, r3, #32
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d104      	bne.n	8001ec6 <HAL_UART_IRQHandler+0xee>
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d005      	beq.n	8001ed2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eca:	f043 0208 	orr.w	r2, r3, #8
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d078      	beq.n	8001fcc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	f003 0320 	and.w	r3, r3, #32
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d007      	beq.n	8001ef4 <HAL_UART_IRQHandler+0x11c>
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	f003 0320 	and.w	r3, r3, #32
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d002      	beq.n	8001ef4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f97a 	bl	80021e8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001efe:	2b40      	cmp	r3, #64	; 0x40
 8001f00:	bf0c      	ite	eq
 8001f02:	2301      	moveq	r3, #1
 8001f04:	2300      	movne	r3, #0
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f0e:	f003 0308 	and.w	r3, r3, #8
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d102      	bne.n	8001f1c <HAL_UART_IRQHandler+0x144>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d031      	beq.n	8001f80 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 f8c3 	bl	80020a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	695b      	ldr	r3, [r3, #20]
 8001f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f2c:	2b40      	cmp	r3, #64	; 0x40
 8001f2e:	d123      	bne.n	8001f78 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	695a      	ldr	r2, [r3, #20]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f3e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d013      	beq.n	8001f70 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f4c:	4a21      	ldr	r2, [pc, #132]	; (8001fd4 <HAL_UART_IRQHandler+0x1fc>)
 8001f4e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7fe ffd2 	bl	8000efe <HAL_DMA_Abort_IT>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d016      	beq.n	8001f8e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f6e:	e00e      	b.n	8001f8e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 f845 	bl	8002000 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f76:	e00a      	b.n	8001f8e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 f841 	bl	8002000 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f7e:	e006      	b.n	8001f8e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 f83d 	bl	8002000 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001f8c:	e01e      	b.n	8001fcc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f8e:	bf00      	nop
    return;
 8001f90:	e01c      	b.n	8001fcc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d008      	beq.n	8001fae <HAL_UART_IRQHandler+0x1d6>
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f8b0 	bl	800210c <UART_Transmit_IT>
    return;
 8001fac:	e00f      	b.n	8001fce <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00a      	beq.n	8001fce <HAL_UART_IRQHandler+0x1f6>
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d005      	beq.n	8001fce <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f8f8 	bl	80021b8 <UART_EndTransmit_IT>
    return;
 8001fc8:	bf00      	nop
 8001fca:	e000      	b.n	8001fce <HAL_UART_IRQHandler+0x1f6>
    return;
 8001fcc:	bf00      	nop
  }
}
 8001fce:	3720      	adds	r7, #32
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	080020e5 	.word	0x080020e5

08001fd8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	603b      	str	r3, [r7, #0]
 8002020:	4613      	mov	r3, r2
 8002022:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002024:	e02c      	b.n	8002080 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800202c:	d028      	beq.n	8002080 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d007      	beq.n	8002044 <UART_WaitOnFlagUntilTimeout+0x30>
 8002034:	f7fe fe46 	bl	8000cc4 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	429a      	cmp	r2, r3
 8002042:	d21d      	bcs.n	8002080 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68da      	ldr	r2, [r3, #12]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002052:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	695a      	ldr	r2, [r3, #20]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0201 	bic.w	r2, r2, #1
 8002062:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2220      	movs	r2, #32
 8002068:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2220      	movs	r2, #32
 8002070:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e00f      	b.n	80020a0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	4013      	ands	r3, r2
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	429a      	cmp	r2, r3
 800208e:	bf0c      	ite	eq
 8002090:	2301      	moveq	r3, #1
 8002092:	2300      	movne	r3, #0
 8002094:	b2db      	uxtb	r3, r3
 8002096:	461a      	mov	r2, r3
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	429a      	cmp	r2, r3
 800209c:	d0c3      	beq.n	8002026 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68da      	ldr	r2, [r3, #12]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80020be:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	695a      	ldr	r2, [r3, #20]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 0201 	bic.w	r2, r2, #1
 80020ce:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2220      	movs	r2, #32
 80020d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2200      	movs	r2, #0
 80020f6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f7ff ff7e 	bl	8002000 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002104:	bf00      	nop
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b21      	cmp	r3, #33	; 0x21
 800211e:	d144      	bne.n	80021aa <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002128:	d11a      	bne.n	8002160 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	881b      	ldrh	r3, [r3, #0]
 8002134:	461a      	mov	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800213e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d105      	bne.n	8002154 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	1c9a      	adds	r2, r3, #2
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	621a      	str	r2, [r3, #32]
 8002152:	e00e      	b.n	8002172 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	1c5a      	adds	r2, r3, #1
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	621a      	str	r2, [r3, #32]
 800215e:	e008      	b.n	8002172 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	1c59      	adds	r1, r3, #1
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6211      	str	r1, [r2, #32]
 800216a:	781a      	ldrb	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002176:	b29b      	uxth	r3, r3
 8002178:	3b01      	subs	r3, #1
 800217a:	b29b      	uxth	r3, r3
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	4619      	mov	r1, r3
 8002180:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10f      	bne.n	80021a6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68da      	ldr	r2, [r3, #12]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002194:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68da      	ldr	r2, [r3, #12]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021a4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80021a6:	2300      	movs	r3, #0
 80021a8:	e000      	b.n	80021ac <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80021aa:	2302      	movs	r3, #2
  }
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68da      	ldr	r2, [r3, #12]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021ce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2220      	movs	r2, #32
 80021d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7ff fefd 	bl	8001fd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b22      	cmp	r3, #34	; 0x22
 80021fa:	d171      	bne.n	80022e0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002204:	d123      	bne.n	800224e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10e      	bne.n	8002232 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	b29b      	uxth	r3, r3
 800221c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002220:	b29a      	uxth	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222a:	1c9a      	adds	r2, r3, #2
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	629a      	str	r2, [r3, #40]	; 0x28
 8002230:	e029      	b.n	8002286 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	b29b      	uxth	r3, r3
 800223a:	b2db      	uxtb	r3, r3
 800223c:	b29a      	uxth	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002246:	1c5a      	adds	r2, r3, #1
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	629a      	str	r2, [r3, #40]	; 0x28
 800224c:	e01b      	b.n	8002286 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10a      	bne.n	800226c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6858      	ldr	r0, [r3, #4]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002260:	1c59      	adds	r1, r3, #1
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	6291      	str	r1, [r2, #40]	; 0x28
 8002266:	b2c2      	uxtb	r2, r0
 8002268:	701a      	strb	r2, [r3, #0]
 800226a:	e00c      	b.n	8002286 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	b2da      	uxtb	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002278:	1c58      	adds	r0, r3, #1
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	6288      	str	r0, [r1, #40]	; 0x28
 800227e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800228a:	b29b      	uxth	r3, r3
 800228c:	3b01      	subs	r3, #1
 800228e:	b29b      	uxth	r3, r3
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	4619      	mov	r1, r3
 8002294:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002296:	2b00      	cmp	r3, #0
 8002298:	d120      	bne.n	80022dc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68da      	ldr	r2, [r3, #12]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 0220 	bic.w	r2, r2, #32
 80022a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68da      	ldr	r2, [r3, #12]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	695a      	ldr	r2, [r3, #20]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0201 	bic.w	r2, r2, #1
 80022c8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2220      	movs	r2, #32
 80022ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7ff fe8a 	bl	8001fec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80022d8:	2300      	movs	r3, #0
 80022da:	e002      	b.n	80022e2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80022dc:	2300      	movs	r3, #0
 80022de:	e000      	b.n	80022e2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80022e0:	2302      	movs	r3, #2
  }
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022f0:	b085      	sub	sp, #20
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68da      	ldr	r2, [r3, #12]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	431a      	orrs	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	69db      	ldr	r3, [r3, #28]
 8002320:	4313      	orrs	r3, r2
 8002322:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800232e:	f023 030c 	bic.w	r3, r3, #12
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6812      	ldr	r2, [r2, #0]
 8002336:	68f9      	ldr	r1, [r7, #12]
 8002338:	430b      	orrs	r3, r1
 800233a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	699a      	ldr	r2, [r3, #24]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	430a      	orrs	r2, r1
 8002350:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800235a:	f040 818b 	bne.w	8002674 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4ac1      	ldr	r2, [pc, #772]	; (8002668 <UART_SetConfig+0x37c>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d005      	beq.n	8002374 <UART_SetConfig+0x88>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4abf      	ldr	r2, [pc, #764]	; (800266c <UART_SetConfig+0x380>)
 800236e:	4293      	cmp	r3, r2
 8002370:	f040 80bd 	bne.w	80024ee <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002374:	f7ff fb90 	bl	8001a98 <HAL_RCC_GetPCLK2Freq>
 8002378:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	461d      	mov	r5, r3
 800237e:	f04f 0600 	mov.w	r6, #0
 8002382:	46a8      	mov	r8, r5
 8002384:	46b1      	mov	r9, r6
 8002386:	eb18 0308 	adds.w	r3, r8, r8
 800238a:	eb49 0409 	adc.w	r4, r9, r9
 800238e:	4698      	mov	r8, r3
 8002390:	46a1      	mov	r9, r4
 8002392:	eb18 0805 	adds.w	r8, r8, r5
 8002396:	eb49 0906 	adc.w	r9, r9, r6
 800239a:	f04f 0100 	mov.w	r1, #0
 800239e:	f04f 0200 	mov.w	r2, #0
 80023a2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80023a6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80023aa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80023ae:	4688      	mov	r8, r1
 80023b0:	4691      	mov	r9, r2
 80023b2:	eb18 0005 	adds.w	r0, r8, r5
 80023b6:	eb49 0106 	adc.w	r1, r9, r6
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	461d      	mov	r5, r3
 80023c0:	f04f 0600 	mov.w	r6, #0
 80023c4:	196b      	adds	r3, r5, r5
 80023c6:	eb46 0406 	adc.w	r4, r6, r6
 80023ca:	461a      	mov	r2, r3
 80023cc:	4623      	mov	r3, r4
 80023ce:	f7fd ff57 	bl	8000280 <__aeabi_uldivmod>
 80023d2:	4603      	mov	r3, r0
 80023d4:	460c      	mov	r4, r1
 80023d6:	461a      	mov	r2, r3
 80023d8:	4ba5      	ldr	r3, [pc, #660]	; (8002670 <UART_SetConfig+0x384>)
 80023da:	fba3 2302 	umull	r2, r3, r3, r2
 80023de:	095b      	lsrs	r3, r3, #5
 80023e0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	461d      	mov	r5, r3
 80023e8:	f04f 0600 	mov.w	r6, #0
 80023ec:	46a9      	mov	r9, r5
 80023ee:	46b2      	mov	sl, r6
 80023f0:	eb19 0309 	adds.w	r3, r9, r9
 80023f4:	eb4a 040a 	adc.w	r4, sl, sl
 80023f8:	4699      	mov	r9, r3
 80023fa:	46a2      	mov	sl, r4
 80023fc:	eb19 0905 	adds.w	r9, r9, r5
 8002400:	eb4a 0a06 	adc.w	sl, sl, r6
 8002404:	f04f 0100 	mov.w	r1, #0
 8002408:	f04f 0200 	mov.w	r2, #0
 800240c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002410:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002414:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002418:	4689      	mov	r9, r1
 800241a:	4692      	mov	sl, r2
 800241c:	eb19 0005 	adds.w	r0, r9, r5
 8002420:	eb4a 0106 	adc.w	r1, sl, r6
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	461d      	mov	r5, r3
 800242a:	f04f 0600 	mov.w	r6, #0
 800242e:	196b      	adds	r3, r5, r5
 8002430:	eb46 0406 	adc.w	r4, r6, r6
 8002434:	461a      	mov	r2, r3
 8002436:	4623      	mov	r3, r4
 8002438:	f7fd ff22 	bl	8000280 <__aeabi_uldivmod>
 800243c:	4603      	mov	r3, r0
 800243e:	460c      	mov	r4, r1
 8002440:	461a      	mov	r2, r3
 8002442:	4b8b      	ldr	r3, [pc, #556]	; (8002670 <UART_SetConfig+0x384>)
 8002444:	fba3 1302 	umull	r1, r3, r3, r2
 8002448:	095b      	lsrs	r3, r3, #5
 800244a:	2164      	movs	r1, #100	; 0x64
 800244c:	fb01 f303 	mul.w	r3, r1, r3
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	3332      	adds	r3, #50	; 0x32
 8002456:	4a86      	ldr	r2, [pc, #536]	; (8002670 <UART_SetConfig+0x384>)
 8002458:	fba2 2303 	umull	r2, r3, r2, r3
 800245c:	095b      	lsrs	r3, r3, #5
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002464:	4498      	add	r8, r3
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	461d      	mov	r5, r3
 800246a:	f04f 0600 	mov.w	r6, #0
 800246e:	46a9      	mov	r9, r5
 8002470:	46b2      	mov	sl, r6
 8002472:	eb19 0309 	adds.w	r3, r9, r9
 8002476:	eb4a 040a 	adc.w	r4, sl, sl
 800247a:	4699      	mov	r9, r3
 800247c:	46a2      	mov	sl, r4
 800247e:	eb19 0905 	adds.w	r9, r9, r5
 8002482:	eb4a 0a06 	adc.w	sl, sl, r6
 8002486:	f04f 0100 	mov.w	r1, #0
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002492:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002496:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800249a:	4689      	mov	r9, r1
 800249c:	4692      	mov	sl, r2
 800249e:	eb19 0005 	adds.w	r0, r9, r5
 80024a2:	eb4a 0106 	adc.w	r1, sl, r6
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	461d      	mov	r5, r3
 80024ac:	f04f 0600 	mov.w	r6, #0
 80024b0:	196b      	adds	r3, r5, r5
 80024b2:	eb46 0406 	adc.w	r4, r6, r6
 80024b6:	461a      	mov	r2, r3
 80024b8:	4623      	mov	r3, r4
 80024ba:	f7fd fee1 	bl	8000280 <__aeabi_uldivmod>
 80024be:	4603      	mov	r3, r0
 80024c0:	460c      	mov	r4, r1
 80024c2:	461a      	mov	r2, r3
 80024c4:	4b6a      	ldr	r3, [pc, #424]	; (8002670 <UART_SetConfig+0x384>)
 80024c6:	fba3 1302 	umull	r1, r3, r3, r2
 80024ca:	095b      	lsrs	r3, r3, #5
 80024cc:	2164      	movs	r1, #100	; 0x64
 80024ce:	fb01 f303 	mul.w	r3, r1, r3
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	3332      	adds	r3, #50	; 0x32
 80024d8:	4a65      	ldr	r2, [pc, #404]	; (8002670 <UART_SetConfig+0x384>)
 80024da:	fba2 2303 	umull	r2, r3, r2, r3
 80024de:	095b      	lsrs	r3, r3, #5
 80024e0:	f003 0207 	and.w	r2, r3, #7
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4442      	add	r2, r8
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	e26f      	b.n	80029ce <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80024ee:	f7ff fabf 	bl	8001a70 <HAL_RCC_GetPCLK1Freq>
 80024f2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	461d      	mov	r5, r3
 80024f8:	f04f 0600 	mov.w	r6, #0
 80024fc:	46a8      	mov	r8, r5
 80024fe:	46b1      	mov	r9, r6
 8002500:	eb18 0308 	adds.w	r3, r8, r8
 8002504:	eb49 0409 	adc.w	r4, r9, r9
 8002508:	4698      	mov	r8, r3
 800250a:	46a1      	mov	r9, r4
 800250c:	eb18 0805 	adds.w	r8, r8, r5
 8002510:	eb49 0906 	adc.w	r9, r9, r6
 8002514:	f04f 0100 	mov.w	r1, #0
 8002518:	f04f 0200 	mov.w	r2, #0
 800251c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002520:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002524:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002528:	4688      	mov	r8, r1
 800252a:	4691      	mov	r9, r2
 800252c:	eb18 0005 	adds.w	r0, r8, r5
 8002530:	eb49 0106 	adc.w	r1, r9, r6
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	461d      	mov	r5, r3
 800253a:	f04f 0600 	mov.w	r6, #0
 800253e:	196b      	adds	r3, r5, r5
 8002540:	eb46 0406 	adc.w	r4, r6, r6
 8002544:	461a      	mov	r2, r3
 8002546:	4623      	mov	r3, r4
 8002548:	f7fd fe9a 	bl	8000280 <__aeabi_uldivmod>
 800254c:	4603      	mov	r3, r0
 800254e:	460c      	mov	r4, r1
 8002550:	461a      	mov	r2, r3
 8002552:	4b47      	ldr	r3, [pc, #284]	; (8002670 <UART_SetConfig+0x384>)
 8002554:	fba3 2302 	umull	r2, r3, r3, r2
 8002558:	095b      	lsrs	r3, r3, #5
 800255a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	461d      	mov	r5, r3
 8002562:	f04f 0600 	mov.w	r6, #0
 8002566:	46a9      	mov	r9, r5
 8002568:	46b2      	mov	sl, r6
 800256a:	eb19 0309 	adds.w	r3, r9, r9
 800256e:	eb4a 040a 	adc.w	r4, sl, sl
 8002572:	4699      	mov	r9, r3
 8002574:	46a2      	mov	sl, r4
 8002576:	eb19 0905 	adds.w	r9, r9, r5
 800257a:	eb4a 0a06 	adc.w	sl, sl, r6
 800257e:	f04f 0100 	mov.w	r1, #0
 8002582:	f04f 0200 	mov.w	r2, #0
 8002586:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800258a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800258e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002592:	4689      	mov	r9, r1
 8002594:	4692      	mov	sl, r2
 8002596:	eb19 0005 	adds.w	r0, r9, r5
 800259a:	eb4a 0106 	adc.w	r1, sl, r6
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	461d      	mov	r5, r3
 80025a4:	f04f 0600 	mov.w	r6, #0
 80025a8:	196b      	adds	r3, r5, r5
 80025aa:	eb46 0406 	adc.w	r4, r6, r6
 80025ae:	461a      	mov	r2, r3
 80025b0:	4623      	mov	r3, r4
 80025b2:	f7fd fe65 	bl	8000280 <__aeabi_uldivmod>
 80025b6:	4603      	mov	r3, r0
 80025b8:	460c      	mov	r4, r1
 80025ba:	461a      	mov	r2, r3
 80025bc:	4b2c      	ldr	r3, [pc, #176]	; (8002670 <UART_SetConfig+0x384>)
 80025be:	fba3 1302 	umull	r1, r3, r3, r2
 80025c2:	095b      	lsrs	r3, r3, #5
 80025c4:	2164      	movs	r1, #100	; 0x64
 80025c6:	fb01 f303 	mul.w	r3, r1, r3
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	3332      	adds	r3, #50	; 0x32
 80025d0:	4a27      	ldr	r2, [pc, #156]	; (8002670 <UART_SetConfig+0x384>)
 80025d2:	fba2 2303 	umull	r2, r3, r2, r3
 80025d6:	095b      	lsrs	r3, r3, #5
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80025de:	4498      	add	r8, r3
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	461d      	mov	r5, r3
 80025e4:	f04f 0600 	mov.w	r6, #0
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46b2      	mov	sl, r6
 80025ec:	eb19 0309 	adds.w	r3, r9, r9
 80025f0:	eb4a 040a 	adc.w	r4, sl, sl
 80025f4:	4699      	mov	r9, r3
 80025f6:	46a2      	mov	sl, r4
 80025f8:	eb19 0905 	adds.w	r9, r9, r5
 80025fc:	eb4a 0a06 	adc.w	sl, sl, r6
 8002600:	f04f 0100 	mov.w	r1, #0
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800260c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002610:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002614:	4689      	mov	r9, r1
 8002616:	4692      	mov	sl, r2
 8002618:	eb19 0005 	adds.w	r0, r9, r5
 800261c:	eb4a 0106 	adc.w	r1, sl, r6
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	461d      	mov	r5, r3
 8002626:	f04f 0600 	mov.w	r6, #0
 800262a:	196b      	adds	r3, r5, r5
 800262c:	eb46 0406 	adc.w	r4, r6, r6
 8002630:	461a      	mov	r2, r3
 8002632:	4623      	mov	r3, r4
 8002634:	f7fd fe24 	bl	8000280 <__aeabi_uldivmod>
 8002638:	4603      	mov	r3, r0
 800263a:	460c      	mov	r4, r1
 800263c:	461a      	mov	r2, r3
 800263e:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <UART_SetConfig+0x384>)
 8002640:	fba3 1302 	umull	r1, r3, r3, r2
 8002644:	095b      	lsrs	r3, r3, #5
 8002646:	2164      	movs	r1, #100	; 0x64
 8002648:	fb01 f303 	mul.w	r3, r1, r3
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	3332      	adds	r3, #50	; 0x32
 8002652:	4a07      	ldr	r2, [pc, #28]	; (8002670 <UART_SetConfig+0x384>)
 8002654:	fba2 2303 	umull	r2, r3, r2, r3
 8002658:	095b      	lsrs	r3, r3, #5
 800265a:	f003 0207 	and.w	r2, r3, #7
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4442      	add	r2, r8
 8002664:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002666:	e1b2      	b.n	80029ce <UART_SetConfig+0x6e2>
 8002668:	40011000 	.word	0x40011000
 800266c:	40011400 	.word	0x40011400
 8002670:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4ad7      	ldr	r2, [pc, #860]	; (80029d8 <UART_SetConfig+0x6ec>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d005      	beq.n	800268a <UART_SetConfig+0x39e>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4ad6      	ldr	r2, [pc, #856]	; (80029dc <UART_SetConfig+0x6f0>)
 8002684:	4293      	cmp	r3, r2
 8002686:	f040 80d1 	bne.w	800282c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800268a:	f7ff fa05 	bl	8001a98 <HAL_RCC_GetPCLK2Freq>
 800268e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	469a      	mov	sl, r3
 8002694:	f04f 0b00 	mov.w	fp, #0
 8002698:	46d0      	mov	r8, sl
 800269a:	46d9      	mov	r9, fp
 800269c:	eb18 0308 	adds.w	r3, r8, r8
 80026a0:	eb49 0409 	adc.w	r4, r9, r9
 80026a4:	4698      	mov	r8, r3
 80026a6:	46a1      	mov	r9, r4
 80026a8:	eb18 080a 	adds.w	r8, r8, sl
 80026ac:	eb49 090b 	adc.w	r9, r9, fp
 80026b0:	f04f 0100 	mov.w	r1, #0
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80026bc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80026c0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80026c4:	4688      	mov	r8, r1
 80026c6:	4691      	mov	r9, r2
 80026c8:	eb1a 0508 	adds.w	r5, sl, r8
 80026cc:	eb4b 0609 	adc.w	r6, fp, r9
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	4619      	mov	r1, r3
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	f04f 0300 	mov.w	r3, #0
 80026de:	f04f 0400 	mov.w	r4, #0
 80026e2:	0094      	lsls	r4, r2, #2
 80026e4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80026e8:	008b      	lsls	r3, r1, #2
 80026ea:	461a      	mov	r2, r3
 80026ec:	4623      	mov	r3, r4
 80026ee:	4628      	mov	r0, r5
 80026f0:	4631      	mov	r1, r6
 80026f2:	f7fd fdc5 	bl	8000280 <__aeabi_uldivmod>
 80026f6:	4603      	mov	r3, r0
 80026f8:	460c      	mov	r4, r1
 80026fa:	461a      	mov	r2, r3
 80026fc:	4bb8      	ldr	r3, [pc, #736]	; (80029e0 <UART_SetConfig+0x6f4>)
 80026fe:	fba3 2302 	umull	r2, r3, r3, r2
 8002702:	095b      	lsrs	r3, r3, #5
 8002704:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	469b      	mov	fp, r3
 800270c:	f04f 0c00 	mov.w	ip, #0
 8002710:	46d9      	mov	r9, fp
 8002712:	46e2      	mov	sl, ip
 8002714:	eb19 0309 	adds.w	r3, r9, r9
 8002718:	eb4a 040a 	adc.w	r4, sl, sl
 800271c:	4699      	mov	r9, r3
 800271e:	46a2      	mov	sl, r4
 8002720:	eb19 090b 	adds.w	r9, r9, fp
 8002724:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002728:	f04f 0100 	mov.w	r1, #0
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002734:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002738:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800273c:	4689      	mov	r9, r1
 800273e:	4692      	mov	sl, r2
 8002740:	eb1b 0509 	adds.w	r5, fp, r9
 8002744:	eb4c 060a 	adc.w	r6, ip, sl
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	4619      	mov	r1, r3
 800274e:	f04f 0200 	mov.w	r2, #0
 8002752:	f04f 0300 	mov.w	r3, #0
 8002756:	f04f 0400 	mov.w	r4, #0
 800275a:	0094      	lsls	r4, r2, #2
 800275c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002760:	008b      	lsls	r3, r1, #2
 8002762:	461a      	mov	r2, r3
 8002764:	4623      	mov	r3, r4
 8002766:	4628      	mov	r0, r5
 8002768:	4631      	mov	r1, r6
 800276a:	f7fd fd89 	bl	8000280 <__aeabi_uldivmod>
 800276e:	4603      	mov	r3, r0
 8002770:	460c      	mov	r4, r1
 8002772:	461a      	mov	r2, r3
 8002774:	4b9a      	ldr	r3, [pc, #616]	; (80029e0 <UART_SetConfig+0x6f4>)
 8002776:	fba3 1302 	umull	r1, r3, r3, r2
 800277a:	095b      	lsrs	r3, r3, #5
 800277c:	2164      	movs	r1, #100	; 0x64
 800277e:	fb01 f303 	mul.w	r3, r1, r3
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	011b      	lsls	r3, r3, #4
 8002786:	3332      	adds	r3, #50	; 0x32
 8002788:	4a95      	ldr	r2, [pc, #596]	; (80029e0 <UART_SetConfig+0x6f4>)
 800278a:	fba2 2303 	umull	r2, r3, r2, r3
 800278e:	095b      	lsrs	r3, r3, #5
 8002790:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002794:	4498      	add	r8, r3
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	469b      	mov	fp, r3
 800279a:	f04f 0c00 	mov.w	ip, #0
 800279e:	46d9      	mov	r9, fp
 80027a0:	46e2      	mov	sl, ip
 80027a2:	eb19 0309 	adds.w	r3, r9, r9
 80027a6:	eb4a 040a 	adc.w	r4, sl, sl
 80027aa:	4699      	mov	r9, r3
 80027ac:	46a2      	mov	sl, r4
 80027ae:	eb19 090b 	adds.w	r9, r9, fp
 80027b2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80027b6:	f04f 0100 	mov.w	r1, #0
 80027ba:	f04f 0200 	mov.w	r2, #0
 80027be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80027c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80027ca:	4689      	mov	r9, r1
 80027cc:	4692      	mov	sl, r2
 80027ce:	eb1b 0509 	adds.w	r5, fp, r9
 80027d2:	eb4c 060a 	adc.w	r6, ip, sl
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	4619      	mov	r1, r3
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	f04f 0300 	mov.w	r3, #0
 80027e4:	f04f 0400 	mov.w	r4, #0
 80027e8:	0094      	lsls	r4, r2, #2
 80027ea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80027ee:	008b      	lsls	r3, r1, #2
 80027f0:	461a      	mov	r2, r3
 80027f2:	4623      	mov	r3, r4
 80027f4:	4628      	mov	r0, r5
 80027f6:	4631      	mov	r1, r6
 80027f8:	f7fd fd42 	bl	8000280 <__aeabi_uldivmod>
 80027fc:	4603      	mov	r3, r0
 80027fe:	460c      	mov	r4, r1
 8002800:	461a      	mov	r2, r3
 8002802:	4b77      	ldr	r3, [pc, #476]	; (80029e0 <UART_SetConfig+0x6f4>)
 8002804:	fba3 1302 	umull	r1, r3, r3, r2
 8002808:	095b      	lsrs	r3, r3, #5
 800280a:	2164      	movs	r1, #100	; 0x64
 800280c:	fb01 f303 	mul.w	r3, r1, r3
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	3332      	adds	r3, #50	; 0x32
 8002816:	4a72      	ldr	r2, [pc, #456]	; (80029e0 <UART_SetConfig+0x6f4>)
 8002818:	fba2 2303 	umull	r2, r3, r2, r3
 800281c:	095b      	lsrs	r3, r3, #5
 800281e:	f003 020f 	and.w	r2, r3, #15
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4442      	add	r2, r8
 8002828:	609a      	str	r2, [r3, #8]
 800282a:	e0d0      	b.n	80029ce <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800282c:	f7ff f920 	bl	8001a70 <HAL_RCC_GetPCLK1Freq>
 8002830:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	469a      	mov	sl, r3
 8002836:	f04f 0b00 	mov.w	fp, #0
 800283a:	46d0      	mov	r8, sl
 800283c:	46d9      	mov	r9, fp
 800283e:	eb18 0308 	adds.w	r3, r8, r8
 8002842:	eb49 0409 	adc.w	r4, r9, r9
 8002846:	4698      	mov	r8, r3
 8002848:	46a1      	mov	r9, r4
 800284a:	eb18 080a 	adds.w	r8, r8, sl
 800284e:	eb49 090b 	adc.w	r9, r9, fp
 8002852:	f04f 0100 	mov.w	r1, #0
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800285e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002862:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002866:	4688      	mov	r8, r1
 8002868:	4691      	mov	r9, r2
 800286a:	eb1a 0508 	adds.w	r5, sl, r8
 800286e:	eb4b 0609 	adc.w	r6, fp, r9
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	4619      	mov	r1, r3
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	f04f 0300 	mov.w	r3, #0
 8002880:	f04f 0400 	mov.w	r4, #0
 8002884:	0094      	lsls	r4, r2, #2
 8002886:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800288a:	008b      	lsls	r3, r1, #2
 800288c:	461a      	mov	r2, r3
 800288e:	4623      	mov	r3, r4
 8002890:	4628      	mov	r0, r5
 8002892:	4631      	mov	r1, r6
 8002894:	f7fd fcf4 	bl	8000280 <__aeabi_uldivmod>
 8002898:	4603      	mov	r3, r0
 800289a:	460c      	mov	r4, r1
 800289c:	461a      	mov	r2, r3
 800289e:	4b50      	ldr	r3, [pc, #320]	; (80029e0 <UART_SetConfig+0x6f4>)
 80028a0:	fba3 2302 	umull	r2, r3, r3, r2
 80028a4:	095b      	lsrs	r3, r3, #5
 80028a6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	469b      	mov	fp, r3
 80028ae:	f04f 0c00 	mov.w	ip, #0
 80028b2:	46d9      	mov	r9, fp
 80028b4:	46e2      	mov	sl, ip
 80028b6:	eb19 0309 	adds.w	r3, r9, r9
 80028ba:	eb4a 040a 	adc.w	r4, sl, sl
 80028be:	4699      	mov	r9, r3
 80028c0:	46a2      	mov	sl, r4
 80028c2:	eb19 090b 	adds.w	r9, r9, fp
 80028c6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80028ca:	f04f 0100 	mov.w	r1, #0
 80028ce:	f04f 0200 	mov.w	r2, #0
 80028d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80028da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80028de:	4689      	mov	r9, r1
 80028e0:	4692      	mov	sl, r2
 80028e2:	eb1b 0509 	adds.w	r5, fp, r9
 80028e6:	eb4c 060a 	adc.w	r6, ip, sl
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	4619      	mov	r1, r3
 80028f0:	f04f 0200 	mov.w	r2, #0
 80028f4:	f04f 0300 	mov.w	r3, #0
 80028f8:	f04f 0400 	mov.w	r4, #0
 80028fc:	0094      	lsls	r4, r2, #2
 80028fe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002902:	008b      	lsls	r3, r1, #2
 8002904:	461a      	mov	r2, r3
 8002906:	4623      	mov	r3, r4
 8002908:	4628      	mov	r0, r5
 800290a:	4631      	mov	r1, r6
 800290c:	f7fd fcb8 	bl	8000280 <__aeabi_uldivmod>
 8002910:	4603      	mov	r3, r0
 8002912:	460c      	mov	r4, r1
 8002914:	461a      	mov	r2, r3
 8002916:	4b32      	ldr	r3, [pc, #200]	; (80029e0 <UART_SetConfig+0x6f4>)
 8002918:	fba3 1302 	umull	r1, r3, r3, r2
 800291c:	095b      	lsrs	r3, r3, #5
 800291e:	2164      	movs	r1, #100	; 0x64
 8002920:	fb01 f303 	mul.w	r3, r1, r3
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	011b      	lsls	r3, r3, #4
 8002928:	3332      	adds	r3, #50	; 0x32
 800292a:	4a2d      	ldr	r2, [pc, #180]	; (80029e0 <UART_SetConfig+0x6f4>)
 800292c:	fba2 2303 	umull	r2, r3, r2, r3
 8002930:	095b      	lsrs	r3, r3, #5
 8002932:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002936:	4498      	add	r8, r3
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	469b      	mov	fp, r3
 800293c:	f04f 0c00 	mov.w	ip, #0
 8002940:	46d9      	mov	r9, fp
 8002942:	46e2      	mov	sl, ip
 8002944:	eb19 0309 	adds.w	r3, r9, r9
 8002948:	eb4a 040a 	adc.w	r4, sl, sl
 800294c:	4699      	mov	r9, r3
 800294e:	46a2      	mov	sl, r4
 8002950:	eb19 090b 	adds.w	r9, r9, fp
 8002954:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002958:	f04f 0100 	mov.w	r1, #0
 800295c:	f04f 0200 	mov.w	r2, #0
 8002960:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002964:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002968:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800296c:	4689      	mov	r9, r1
 800296e:	4692      	mov	sl, r2
 8002970:	eb1b 0509 	adds.w	r5, fp, r9
 8002974:	eb4c 060a 	adc.w	r6, ip, sl
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	4619      	mov	r1, r3
 800297e:	f04f 0200 	mov.w	r2, #0
 8002982:	f04f 0300 	mov.w	r3, #0
 8002986:	f04f 0400 	mov.w	r4, #0
 800298a:	0094      	lsls	r4, r2, #2
 800298c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002990:	008b      	lsls	r3, r1, #2
 8002992:	461a      	mov	r2, r3
 8002994:	4623      	mov	r3, r4
 8002996:	4628      	mov	r0, r5
 8002998:	4631      	mov	r1, r6
 800299a:	f7fd fc71 	bl	8000280 <__aeabi_uldivmod>
 800299e:	4603      	mov	r3, r0
 80029a0:	460c      	mov	r4, r1
 80029a2:	461a      	mov	r2, r3
 80029a4:	4b0e      	ldr	r3, [pc, #56]	; (80029e0 <UART_SetConfig+0x6f4>)
 80029a6:	fba3 1302 	umull	r1, r3, r3, r2
 80029aa:	095b      	lsrs	r3, r3, #5
 80029ac:	2164      	movs	r1, #100	; 0x64
 80029ae:	fb01 f303 	mul.w	r3, r1, r3
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	011b      	lsls	r3, r3, #4
 80029b6:	3332      	adds	r3, #50	; 0x32
 80029b8:	4a09      	ldr	r2, [pc, #36]	; (80029e0 <UART_SetConfig+0x6f4>)
 80029ba:	fba2 2303 	umull	r2, r3, r2, r3
 80029be:	095b      	lsrs	r3, r3, #5
 80029c0:	f003 020f 	and.w	r2, r3, #15
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4442      	add	r2, r8
 80029ca:	609a      	str	r2, [r3, #8]
}
 80029cc:	e7ff      	b.n	80029ce <UART_SetConfig+0x6e2>
 80029ce:	bf00      	nop
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029d8:	40011000 	.word	0x40011000
 80029dc:	40011400 	.word	0x40011400
 80029e0:	51eb851f 	.word	0x51eb851f

080029e4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80029ee:	2300      	movs	r3, #0
 80029f0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80029f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029f6:	2b84      	cmp	r3, #132	; 0x84
 80029f8:	d005      	beq.n	8002a06 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80029fa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	4413      	add	r3, r2
 8002a02:	3303      	adds	r3, #3
 8002a04:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002a06:	68fb      	ldr	r3, [r7, #12]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002a18:	f000 fada 	bl	8002fd0 <vTaskStartScheduler>
  
  return osOK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002a22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a24:	b089      	sub	sp, #36	; 0x24
 8002a26:	af04      	add	r7, sp, #16
 8002a28:	6078      	str	r0, [r7, #4]
 8002a2a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d020      	beq.n	8002a76 <osThreadCreate+0x54>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d01c      	beq.n	8002a76 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685c      	ldr	r4, [r3, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681d      	ldr	r5, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	691e      	ldr	r6, [r3, #16]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff ffc8 	bl	80029e4 <makeFreeRtosPriority>
 8002a54:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a5e:	9202      	str	r2, [sp, #8]
 8002a60:	9301      	str	r3, [sp, #4]
 8002a62:	9100      	str	r1, [sp, #0]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	4632      	mov	r2, r6
 8002a68:	4629      	mov	r1, r5
 8002a6a:	4620      	mov	r0, r4
 8002a6c:	f000 f8ed 	bl	8002c4a <xTaskCreateStatic>
 8002a70:	4603      	mov	r3, r0
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	e01c      	b.n	8002ab0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685c      	ldr	r4, [r3, #4]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a82:	b29e      	uxth	r6, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff ffaa 	bl	80029e4 <makeFreeRtosPriority>
 8002a90:	4602      	mov	r2, r0
 8002a92:	f107 030c 	add.w	r3, r7, #12
 8002a96:	9301      	str	r3, [sp, #4]
 8002a98:	9200      	str	r2, [sp, #0]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	4632      	mov	r2, r6
 8002a9e:	4629      	mov	r1, r5
 8002aa0:	4620      	mov	r0, r4
 8002aa2:	f000 f92c 	bl	8002cfe <xTaskCreate>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d001      	beq.n	8002ab0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	e000      	b.n	8002ab2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3714      	adds	r7, #20
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002aba <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b084      	sub	sp, #16
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <osDelay+0x16>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	e000      	b.n	8002ad2 <osDelay+0x18>
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f000 fa48 	bl	8002f68 <vTaskDelay>
  
  return osOK;
 8002ad8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b083      	sub	sp, #12
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f103 0208 	add.w	r2, r3, #8
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002afa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f103 0208 	add.w	r2, r3, #8
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f103 0208 	add.w	r2, r3, #8
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	1c5a      	adds	r2, r3, #1
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	601a      	str	r2, [r3, #0]
}
 8002b78:	bf00      	nop
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b9a:	d103      	bne.n	8002ba4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	e00c      	b.n	8002bbe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3308      	adds	r3, #8
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	e002      	b.n	8002bb2 <vListInsert+0x2e>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d2f6      	bcs.n	8002bac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	1c5a      	adds	r2, r3, #1
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	601a      	str	r2, [r3, #0]
}
 8002bea:	bf00      	nop
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b085      	sub	sp, #20
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	6892      	ldr	r2, [r2, #8]
 8002c0c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6852      	ldr	r2, [r2, #4]
 8002c16:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d103      	bne.n	8002c2a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	1e5a      	subs	r2, r3, #1
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b08e      	sub	sp, #56	; 0x38
 8002c4e:	af04      	add	r7, sp, #16
 8002c50:	60f8      	str	r0, [r7, #12]
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	607a      	str	r2, [r7, #4]
 8002c56:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d109      	bne.n	8002c72 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c62:	f383 8811 	msr	BASEPRI, r3
 8002c66:	f3bf 8f6f 	isb	sy
 8002c6a:	f3bf 8f4f 	dsb	sy
 8002c6e:	623b      	str	r3, [r7, #32]
 8002c70:	e7fe      	b.n	8002c70 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d109      	bne.n	8002c8c <xTaskCreateStatic+0x42>
 8002c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c7c:	f383 8811 	msr	BASEPRI, r3
 8002c80:	f3bf 8f6f 	isb	sy
 8002c84:	f3bf 8f4f 	dsb	sy
 8002c88:	61fb      	str	r3, [r7, #28]
 8002c8a:	e7fe      	b.n	8002c8a <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002c8c:	2354      	movs	r3, #84	; 0x54
 8002c8e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	2b54      	cmp	r3, #84	; 0x54
 8002c94:	d009      	beq.n	8002caa <xTaskCreateStatic+0x60>
 8002c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9a:	f383 8811 	msr	BASEPRI, r3
 8002c9e:	f3bf 8f6f 	isb	sy
 8002ca2:	f3bf 8f4f 	dsb	sy
 8002ca6:	61bb      	str	r3, [r7, #24]
 8002ca8:	e7fe      	b.n	8002ca8 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002caa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d01e      	beq.n	8002cf0 <xTaskCreateStatic+0xa6>
 8002cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d01b      	beq.n	8002cf0 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cc0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002cca:	2300      	movs	r3, #0
 8002ccc:	9303      	str	r3, [sp, #12]
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	9302      	str	r3, [sp, #8]
 8002cd2:	f107 0314 	add.w	r3, r7, #20
 8002cd6:	9301      	str	r3, [sp, #4]
 8002cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	68b9      	ldr	r1, [r7, #8]
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 f850 	bl	8002d88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ce8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002cea:	f000 f8d3 	bl	8002e94 <prvAddNewTaskToReadyList>
 8002cee:	e001      	b.n	8002cf4 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002cf4:	697b      	ldr	r3, [r7, #20]
	}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3728      	adds	r7, #40	; 0x28
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b08c      	sub	sp, #48	; 0x30
 8002d02:	af04      	add	r7, sp, #16
 8002d04:	60f8      	str	r0, [r7, #12]
 8002d06:	60b9      	str	r1, [r7, #8]
 8002d08:	603b      	str	r3, [r7, #0]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002d0e:	88fb      	ldrh	r3, [r7, #6]
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 fece 	bl	8003ab4 <pvPortMalloc>
 8002d18:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00e      	beq.n	8002d3e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002d20:	2054      	movs	r0, #84	; 0x54
 8002d22:	f000 fec7 	bl	8003ab4 <pvPortMalloc>
 8002d26:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	631a      	str	r2, [r3, #48]	; 0x30
 8002d34:	e005      	b.n	8002d42 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002d36:	6978      	ldr	r0, [r7, #20]
 8002d38:	f000 ff7e 	bl	8003c38 <vPortFree>
 8002d3c:	e001      	b.n	8002d42 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d017      	beq.n	8002d78 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d50:	88fa      	ldrh	r2, [r7, #6]
 8002d52:	2300      	movs	r3, #0
 8002d54:	9303      	str	r3, [sp, #12]
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	9302      	str	r3, [sp, #8]
 8002d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d5c:	9301      	str	r3, [sp, #4]
 8002d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	68b9      	ldr	r1, [r7, #8]
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 f80e 	bl	8002d88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d6c:	69f8      	ldr	r0, [r7, #28]
 8002d6e:	f000 f891 	bl	8002e94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002d72:	2301      	movs	r3, #1
 8002d74:	61bb      	str	r3, [r7, #24]
 8002d76:	e002      	b.n	8002d7e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d7c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002d7e:	69bb      	ldr	r3, [r7, #24]
	}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3720      	adds	r7, #32
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b088      	sub	sp, #32
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
 8002d94:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002da0:	3b01      	subs	r3, #1
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	f023 0307 	bic.w	r3, r3, #7
 8002dae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d009      	beq.n	8002dce <prvInitialiseNewTask+0x46>
 8002dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dbe:	f383 8811 	msr	BASEPRI, r3
 8002dc2:	f3bf 8f6f 	isb	sy
 8002dc6:	f3bf 8f4f 	dsb	sy
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	e7fe      	b.n	8002dcc <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d01f      	beq.n	8002e14 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	61fb      	str	r3, [r7, #28]
 8002dd8:	e012      	b.n	8002e00 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002dda:	68ba      	ldr	r2, [r7, #8]
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	4413      	add	r3, r2
 8002de0:	7819      	ldrb	r1, [r3, #0]
 8002de2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	4413      	add	r3, r2
 8002de8:	3334      	adds	r3, #52	; 0x34
 8002dea:	460a      	mov	r2, r1
 8002dec:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	4413      	add	r3, r2
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d006      	beq.n	8002e08 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	61fb      	str	r3, [r7, #28]
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	2b0f      	cmp	r3, #15
 8002e04:	d9e9      	bls.n	8002dda <prvInitialiseNewTask+0x52>
 8002e06:	e000      	b.n	8002e0a <prvInitialiseNewTask+0x82>
			{
				break;
 8002e08:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e12:	e003      	b.n	8002e1c <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1e:	2b06      	cmp	r3, #6
 8002e20:	d901      	bls.n	8002e26 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e22:	2306      	movs	r3, #6
 8002e24:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e2a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e30:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e34:	2200      	movs	r2, #0
 8002e36:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3a:	3304      	adds	r3, #4
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff fe70 	bl	8002b22 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e44:	3318      	adds	r3, #24
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff fe6b 	bl	8002b22 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e50:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e54:	f1c3 0207 	rsb	r2, r3, #7
 8002e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e60:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e64:	2200      	movs	r2, #0
 8002e66:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	68f9      	ldr	r1, [r7, #12]
 8002e74:	69b8      	ldr	r0, [r7, #24]
 8002e76:	f000 fc1b 	bl	80036b0 <pxPortInitialiseStack>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d002      	beq.n	8002e8c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e8a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e8c:	bf00      	nop
 8002e8e:	3720      	adds	r7, #32
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002e9c:	f000 fd2e 	bl	80038fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002ea0:	4b2a      	ldr	r3, [pc, #168]	; (8002f4c <prvAddNewTaskToReadyList+0xb8>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	4a29      	ldr	r2, [pc, #164]	; (8002f4c <prvAddNewTaskToReadyList+0xb8>)
 8002ea8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002eaa:	4b29      	ldr	r3, [pc, #164]	; (8002f50 <prvAddNewTaskToReadyList+0xbc>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d109      	bne.n	8002ec6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002eb2:	4a27      	ldr	r2, [pc, #156]	; (8002f50 <prvAddNewTaskToReadyList+0xbc>)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002eb8:	4b24      	ldr	r3, [pc, #144]	; (8002f4c <prvAddNewTaskToReadyList+0xb8>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d110      	bne.n	8002ee2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002ec0:	f000 fab8 	bl	8003434 <prvInitialiseTaskLists>
 8002ec4:	e00d      	b.n	8002ee2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002ec6:	4b23      	ldr	r3, [pc, #140]	; (8002f54 <prvAddNewTaskToReadyList+0xc0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d109      	bne.n	8002ee2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002ece:	4b20      	ldr	r3, [pc, #128]	; (8002f50 <prvAddNewTaskToReadyList+0xbc>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d802      	bhi.n	8002ee2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002edc:	4a1c      	ldr	r2, [pc, #112]	; (8002f50 <prvAddNewTaskToReadyList+0xbc>)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002ee2:	4b1d      	ldr	r3, [pc, #116]	; (8002f58 <prvAddNewTaskToReadyList+0xc4>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	4a1b      	ldr	r2, [pc, #108]	; (8002f58 <prvAddNewTaskToReadyList+0xc4>)
 8002eea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	409a      	lsls	r2, r3
 8002ef4:	4b19      	ldr	r3, [pc, #100]	; (8002f5c <prvAddNewTaskToReadyList+0xc8>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	4a18      	ldr	r2, [pc, #96]	; (8002f5c <prvAddNewTaskToReadyList+0xc8>)
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f02:	4613      	mov	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4a15      	ldr	r2, [pc, #84]	; (8002f60 <prvAddNewTaskToReadyList+0xcc>)
 8002f0c:	441a      	add	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	3304      	adds	r3, #4
 8002f12:	4619      	mov	r1, r3
 8002f14:	4610      	mov	r0, r2
 8002f16:	f7ff fe11 	bl	8002b3c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002f1a:	f000 fd1d 	bl	8003958 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002f1e:	4b0d      	ldr	r3, [pc, #52]	; (8002f54 <prvAddNewTaskToReadyList+0xc0>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00e      	beq.n	8002f44 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f26:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <prvAddNewTaskToReadyList+0xbc>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d207      	bcs.n	8002f44 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002f34:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <prvAddNewTaskToReadyList+0xd0>)
 8002f36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	f3bf 8f4f 	dsb	sy
 8002f40:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f44:	bf00      	nop
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	200003e8 	.word	0x200003e8
 8002f50:	200002e8 	.word	0x200002e8
 8002f54:	200003f4 	.word	0x200003f4
 8002f58:	20000404 	.word	0x20000404
 8002f5c:	200003f0 	.word	0x200003f0
 8002f60:	200002ec 	.word	0x200002ec
 8002f64:	e000ed04 	.word	0xe000ed04

08002f68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002f70:	2300      	movs	r3, #0
 8002f72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d016      	beq.n	8002fa8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002f7a:	4b13      	ldr	r3, [pc, #76]	; (8002fc8 <vTaskDelay+0x60>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d009      	beq.n	8002f96 <vTaskDelay+0x2e>
 8002f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f86:	f383 8811 	msr	BASEPRI, r3
 8002f8a:	f3bf 8f6f 	isb	sy
 8002f8e:	f3bf 8f4f 	dsb	sy
 8002f92:	60bb      	str	r3, [r7, #8]
 8002f94:	e7fe      	b.n	8002f94 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002f96:	f000 f879 	bl	800308c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 fb21 	bl	80035e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002fa2:	f000 f881 	bl	80030a8 <xTaskResumeAll>
 8002fa6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d107      	bne.n	8002fbe <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002fae:	4b07      	ldr	r3, [pc, #28]	; (8002fcc <vTaskDelay+0x64>)
 8002fb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	f3bf 8f4f 	dsb	sy
 8002fba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002fbe:	bf00      	nop
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	20000410 	.word	0x20000410
 8002fcc:	e000ed04 	.word	0xe000ed04

08002fd0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b08a      	sub	sp, #40	; 0x28
 8002fd4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002fde:	463a      	mov	r2, r7
 8002fe0:	1d39      	adds	r1, r7, #4
 8002fe2:	f107 0308 	add.w	r3, r7, #8
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7fd faca 	bl	8000580 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002fec:	6839      	ldr	r1, [r7, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	9202      	str	r2, [sp, #8]
 8002ff4:	9301      	str	r3, [sp, #4]
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	460a      	mov	r2, r1
 8002ffe:	491d      	ldr	r1, [pc, #116]	; (8003074 <vTaskStartScheduler+0xa4>)
 8003000:	481d      	ldr	r0, [pc, #116]	; (8003078 <vTaskStartScheduler+0xa8>)
 8003002:	f7ff fe22 	bl	8002c4a <xTaskCreateStatic>
 8003006:	4602      	mov	r2, r0
 8003008:	4b1c      	ldr	r3, [pc, #112]	; (800307c <vTaskStartScheduler+0xac>)
 800300a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800300c:	4b1b      	ldr	r3, [pc, #108]	; (800307c <vTaskStartScheduler+0xac>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d002      	beq.n	800301a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003014:	2301      	movs	r3, #1
 8003016:	617b      	str	r3, [r7, #20]
 8003018:	e001      	b.n	800301e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800301a:	2300      	movs	r3, #0
 800301c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d115      	bne.n	8003050 <vTaskStartScheduler+0x80>
 8003024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003028:	f383 8811 	msr	BASEPRI, r3
 800302c:	f3bf 8f6f 	isb	sy
 8003030:	f3bf 8f4f 	dsb	sy
 8003034:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003036:	4b12      	ldr	r3, [pc, #72]	; (8003080 <vTaskStartScheduler+0xb0>)
 8003038:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800303c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800303e:	4b11      	ldr	r3, [pc, #68]	; (8003084 <vTaskStartScheduler+0xb4>)
 8003040:	2201      	movs	r2, #1
 8003042:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003044:	4b10      	ldr	r3, [pc, #64]	; (8003088 <vTaskStartScheduler+0xb8>)
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800304a:	f000 fbb9 	bl	80037c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800304e:	e00d      	b.n	800306c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003056:	d109      	bne.n	800306c <vTaskStartScheduler+0x9c>
 8003058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305c:	f383 8811 	msr	BASEPRI, r3
 8003060:	f3bf 8f6f 	isb	sy
 8003064:	f3bf 8f4f 	dsb	sy
 8003068:	60fb      	str	r3, [r7, #12]
 800306a:	e7fe      	b.n	800306a <vTaskStartScheduler+0x9a>
}
 800306c:	bf00      	nop
 800306e:	3718      	adds	r7, #24
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	08004e3c 	.word	0x08004e3c
 8003078:	08003405 	.word	0x08003405
 800307c:	2000040c 	.word	0x2000040c
 8003080:	20000408 	.word	0x20000408
 8003084:	200003f4 	.word	0x200003f4
 8003088:	200003ec 	.word	0x200003ec

0800308c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003090:	4b04      	ldr	r3, [pc, #16]	; (80030a4 <vTaskSuspendAll+0x18>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	3301      	adds	r3, #1
 8003096:	4a03      	ldr	r2, [pc, #12]	; (80030a4 <vTaskSuspendAll+0x18>)
 8003098:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800309a:	bf00      	nop
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr
 80030a4:	20000410 	.word	0x20000410

080030a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80030ae:	2300      	movs	r3, #0
 80030b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80030b2:	2300      	movs	r3, #0
 80030b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80030b6:	4b41      	ldr	r3, [pc, #260]	; (80031bc <xTaskResumeAll+0x114>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d109      	bne.n	80030d2 <xTaskResumeAll+0x2a>
 80030be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c2:	f383 8811 	msr	BASEPRI, r3
 80030c6:	f3bf 8f6f 	isb	sy
 80030ca:	f3bf 8f4f 	dsb	sy
 80030ce:	603b      	str	r3, [r7, #0]
 80030d0:	e7fe      	b.n	80030d0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80030d2:	f000 fc13 	bl	80038fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80030d6:	4b39      	ldr	r3, [pc, #228]	; (80031bc <xTaskResumeAll+0x114>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	3b01      	subs	r3, #1
 80030dc:	4a37      	ldr	r2, [pc, #220]	; (80031bc <xTaskResumeAll+0x114>)
 80030de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030e0:	4b36      	ldr	r3, [pc, #216]	; (80031bc <xTaskResumeAll+0x114>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d161      	bne.n	80031ac <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80030e8:	4b35      	ldr	r3, [pc, #212]	; (80031c0 <xTaskResumeAll+0x118>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d05d      	beq.n	80031ac <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030f0:	e02e      	b.n	8003150 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030f2:	4b34      	ldr	r3, [pc, #208]	; (80031c4 <xTaskResumeAll+0x11c>)
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	3318      	adds	r3, #24
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff fd79 	bl	8002bf6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	3304      	adds	r3, #4
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff fd74 	bl	8002bf6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003112:	2201      	movs	r2, #1
 8003114:	409a      	lsls	r2, r3
 8003116:	4b2c      	ldr	r3, [pc, #176]	; (80031c8 <xTaskResumeAll+0x120>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4313      	orrs	r3, r2
 800311c:	4a2a      	ldr	r2, [pc, #168]	; (80031c8 <xTaskResumeAll+0x120>)
 800311e:	6013      	str	r3, [r2, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003124:	4613      	mov	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4a27      	ldr	r2, [pc, #156]	; (80031cc <xTaskResumeAll+0x124>)
 800312e:	441a      	add	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	3304      	adds	r3, #4
 8003134:	4619      	mov	r1, r3
 8003136:	4610      	mov	r0, r2
 8003138:	f7ff fd00 	bl	8002b3c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003140:	4b23      	ldr	r3, [pc, #140]	; (80031d0 <xTaskResumeAll+0x128>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003146:	429a      	cmp	r2, r3
 8003148:	d302      	bcc.n	8003150 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800314a:	4b22      	ldr	r3, [pc, #136]	; (80031d4 <xTaskResumeAll+0x12c>)
 800314c:	2201      	movs	r2, #1
 800314e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003150:	4b1c      	ldr	r3, [pc, #112]	; (80031c4 <xTaskResumeAll+0x11c>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1cc      	bne.n	80030f2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800315e:	f000 fa03 	bl	8003568 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003162:	4b1d      	ldr	r3, [pc, #116]	; (80031d8 <xTaskResumeAll+0x130>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d010      	beq.n	8003190 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800316e:	f000 f837 	bl	80031e0 <xTaskIncrementTick>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d002      	beq.n	800317e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003178:	4b16      	ldr	r3, [pc, #88]	; (80031d4 <xTaskResumeAll+0x12c>)
 800317a:	2201      	movs	r2, #1
 800317c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	3b01      	subs	r3, #1
 8003182:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f1      	bne.n	800316e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800318a:	4b13      	ldr	r3, [pc, #76]	; (80031d8 <xTaskResumeAll+0x130>)
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003190:	4b10      	ldr	r3, [pc, #64]	; (80031d4 <xTaskResumeAll+0x12c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d009      	beq.n	80031ac <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003198:	2301      	movs	r3, #1
 800319a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800319c:	4b0f      	ldr	r3, [pc, #60]	; (80031dc <xTaskResumeAll+0x134>)
 800319e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	f3bf 8f4f 	dsb	sy
 80031a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80031ac:	f000 fbd4 	bl	8003958 <vPortExitCritical>

	return xAlreadyYielded;
 80031b0:	68bb      	ldr	r3, [r7, #8]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	20000410 	.word	0x20000410
 80031c0:	200003e8 	.word	0x200003e8
 80031c4:	200003a8 	.word	0x200003a8
 80031c8:	200003f0 	.word	0x200003f0
 80031cc:	200002ec 	.word	0x200002ec
 80031d0:	200002e8 	.word	0x200002e8
 80031d4:	200003fc 	.word	0x200003fc
 80031d8:	200003f8 	.word	0x200003f8
 80031dc:	e000ed04 	.word	0xe000ed04

080031e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80031e6:	2300      	movs	r3, #0
 80031e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031ea:	4b4e      	ldr	r3, [pc, #312]	; (8003324 <xTaskIncrementTick+0x144>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f040 8087 	bne.w	8003302 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80031f4:	4b4c      	ldr	r3, [pc, #304]	; (8003328 <xTaskIncrementTick+0x148>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	3301      	adds	r3, #1
 80031fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80031fc:	4a4a      	ldr	r2, [pc, #296]	; (8003328 <xTaskIncrementTick+0x148>)
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d11f      	bne.n	8003248 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003208:	4b48      	ldr	r3, [pc, #288]	; (800332c <xTaskIncrementTick+0x14c>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d009      	beq.n	8003226 <xTaskIncrementTick+0x46>
 8003212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003216:	f383 8811 	msr	BASEPRI, r3
 800321a:	f3bf 8f6f 	isb	sy
 800321e:	f3bf 8f4f 	dsb	sy
 8003222:	603b      	str	r3, [r7, #0]
 8003224:	e7fe      	b.n	8003224 <xTaskIncrementTick+0x44>
 8003226:	4b41      	ldr	r3, [pc, #260]	; (800332c <xTaskIncrementTick+0x14c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	60fb      	str	r3, [r7, #12]
 800322c:	4b40      	ldr	r3, [pc, #256]	; (8003330 <xTaskIncrementTick+0x150>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a3e      	ldr	r2, [pc, #248]	; (800332c <xTaskIncrementTick+0x14c>)
 8003232:	6013      	str	r3, [r2, #0]
 8003234:	4a3e      	ldr	r2, [pc, #248]	; (8003330 <xTaskIncrementTick+0x150>)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	4b3e      	ldr	r3, [pc, #248]	; (8003334 <xTaskIncrementTick+0x154>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	3301      	adds	r3, #1
 8003240:	4a3c      	ldr	r2, [pc, #240]	; (8003334 <xTaskIncrementTick+0x154>)
 8003242:	6013      	str	r3, [r2, #0]
 8003244:	f000 f990 	bl	8003568 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003248:	4b3b      	ldr	r3, [pc, #236]	; (8003338 <xTaskIncrementTick+0x158>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	429a      	cmp	r2, r3
 8003250:	d348      	bcc.n	80032e4 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003252:	4b36      	ldr	r3, [pc, #216]	; (800332c <xTaskIncrementTick+0x14c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d104      	bne.n	8003266 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800325c:	4b36      	ldr	r3, [pc, #216]	; (8003338 <xTaskIncrementTick+0x158>)
 800325e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003262:	601a      	str	r2, [r3, #0]
					break;
 8003264:	e03e      	b.n	80032e4 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003266:	4b31      	ldr	r3, [pc, #196]	; (800332c <xTaskIncrementTick+0x14c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	429a      	cmp	r2, r3
 800327c:	d203      	bcs.n	8003286 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800327e:	4a2e      	ldr	r2, [pc, #184]	; (8003338 <xTaskIncrementTick+0x158>)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003284:	e02e      	b.n	80032e4 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	3304      	adds	r3, #4
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff fcb3 	bl	8002bf6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003294:	2b00      	cmp	r3, #0
 8003296:	d004      	beq.n	80032a2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	3318      	adds	r3, #24
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff fcaa 	bl	8002bf6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a6:	2201      	movs	r2, #1
 80032a8:	409a      	lsls	r2, r3
 80032aa:	4b24      	ldr	r3, [pc, #144]	; (800333c <xTaskIncrementTick+0x15c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	4a22      	ldr	r2, [pc, #136]	; (800333c <xTaskIncrementTick+0x15c>)
 80032b2:	6013      	str	r3, [r2, #0]
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b8:	4613      	mov	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	4a1f      	ldr	r2, [pc, #124]	; (8003340 <xTaskIncrementTick+0x160>)
 80032c2:	441a      	add	r2, r3
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	3304      	adds	r3, #4
 80032c8:	4619      	mov	r1, r3
 80032ca:	4610      	mov	r0, r2
 80032cc:	f7ff fc36 	bl	8002b3c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d4:	4b1b      	ldr	r3, [pc, #108]	; (8003344 <xTaskIncrementTick+0x164>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032da:	429a      	cmp	r2, r3
 80032dc:	d3b9      	bcc.n	8003252 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80032de:	2301      	movs	r3, #1
 80032e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032e2:	e7b6      	b.n	8003252 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80032e4:	4b17      	ldr	r3, [pc, #92]	; (8003344 <xTaskIncrementTick+0x164>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ea:	4915      	ldr	r1, [pc, #84]	; (8003340 <xTaskIncrementTick+0x160>)
 80032ec:	4613      	mov	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	440b      	add	r3, r1
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d907      	bls.n	800330c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80032fc:	2301      	movs	r3, #1
 80032fe:	617b      	str	r3, [r7, #20]
 8003300:	e004      	b.n	800330c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003302:	4b11      	ldr	r3, [pc, #68]	; (8003348 <xTaskIncrementTick+0x168>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	3301      	adds	r3, #1
 8003308:	4a0f      	ldr	r2, [pc, #60]	; (8003348 <xTaskIncrementTick+0x168>)
 800330a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800330c:	4b0f      	ldr	r3, [pc, #60]	; (800334c <xTaskIncrementTick+0x16c>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8003314:	2301      	movs	r3, #1
 8003316:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003318:	697b      	ldr	r3, [r7, #20]
}
 800331a:	4618      	mov	r0, r3
 800331c:	3718      	adds	r7, #24
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	20000410 	.word	0x20000410
 8003328:	200003ec 	.word	0x200003ec
 800332c:	200003a0 	.word	0x200003a0
 8003330:	200003a4 	.word	0x200003a4
 8003334:	20000400 	.word	0x20000400
 8003338:	20000408 	.word	0x20000408
 800333c:	200003f0 	.word	0x200003f0
 8003340:	200002ec 	.word	0x200002ec
 8003344:	200002e8 	.word	0x200002e8
 8003348:	200003f8 	.word	0x200003f8
 800334c:	200003fc 	.word	0x200003fc

08003350 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003350:	b480      	push	{r7}
 8003352:	b087      	sub	sp, #28
 8003354:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003356:	4b26      	ldr	r3, [pc, #152]	; (80033f0 <vTaskSwitchContext+0xa0>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800335e:	4b25      	ldr	r3, [pc, #148]	; (80033f4 <vTaskSwitchContext+0xa4>)
 8003360:	2201      	movs	r2, #1
 8003362:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003364:	e03e      	b.n	80033e4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003366:	4b23      	ldr	r3, [pc, #140]	; (80033f4 <vTaskSwitchContext+0xa4>)
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800336c:	4b22      	ldr	r3, [pc, #136]	; (80033f8 <vTaskSwitchContext+0xa8>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	fab3 f383 	clz	r3, r3
 8003378:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800337a:	7afb      	ldrb	r3, [r7, #11]
 800337c:	f1c3 031f 	rsb	r3, r3, #31
 8003380:	617b      	str	r3, [r7, #20]
 8003382:	491e      	ldr	r1, [pc, #120]	; (80033fc <vTaskSwitchContext+0xac>)
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	4613      	mov	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4413      	add	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	440b      	add	r3, r1
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d109      	bne.n	80033aa <vTaskSwitchContext+0x5a>
	__asm volatile
 8003396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800339a:	f383 8811 	msr	BASEPRI, r3
 800339e:	f3bf 8f6f 	isb	sy
 80033a2:	f3bf 8f4f 	dsb	sy
 80033a6:	607b      	str	r3, [r7, #4]
 80033a8:	e7fe      	b.n	80033a8 <vTaskSwitchContext+0x58>
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	4613      	mov	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4a11      	ldr	r2, [pc, #68]	; (80033fc <vTaskSwitchContext+0xac>)
 80033b6:	4413      	add	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	605a      	str	r2, [r3, #4]
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	3308      	adds	r3, #8
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d104      	bne.n	80033da <vTaskSwitchContext+0x8a>
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	605a      	str	r2, [r3, #4]
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	4a07      	ldr	r2, [pc, #28]	; (8003400 <vTaskSwitchContext+0xb0>)
 80033e2:	6013      	str	r3, [r2, #0]
}
 80033e4:	bf00      	nop
 80033e6:	371c      	adds	r7, #28
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr
 80033f0:	20000410 	.word	0x20000410
 80033f4:	200003fc 	.word	0x200003fc
 80033f8:	200003f0 	.word	0x200003f0
 80033fc:	200002ec 	.word	0x200002ec
 8003400:	200002e8 	.word	0x200002e8

08003404 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800340c:	f000 f852 	bl	80034b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003410:	4b06      	ldr	r3, [pc, #24]	; (800342c <prvIdleTask+0x28>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d9f9      	bls.n	800340c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003418:	4b05      	ldr	r3, [pc, #20]	; (8003430 <prvIdleTask+0x2c>)
 800341a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	f3bf 8f4f 	dsb	sy
 8003424:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003428:	e7f0      	b.n	800340c <prvIdleTask+0x8>
 800342a:	bf00      	nop
 800342c:	200002ec 	.word	0x200002ec
 8003430:	e000ed04 	.word	0xe000ed04

08003434 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800343a:	2300      	movs	r3, #0
 800343c:	607b      	str	r3, [r7, #4]
 800343e:	e00c      	b.n	800345a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4a12      	ldr	r2, [pc, #72]	; (8003494 <prvInitialiseTaskLists+0x60>)
 800344c:	4413      	add	r3, r2
 800344e:	4618      	mov	r0, r3
 8003450:	f7ff fb47 	bl	8002ae2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3301      	adds	r3, #1
 8003458:	607b      	str	r3, [r7, #4]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b06      	cmp	r3, #6
 800345e:	d9ef      	bls.n	8003440 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003460:	480d      	ldr	r0, [pc, #52]	; (8003498 <prvInitialiseTaskLists+0x64>)
 8003462:	f7ff fb3e 	bl	8002ae2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003466:	480d      	ldr	r0, [pc, #52]	; (800349c <prvInitialiseTaskLists+0x68>)
 8003468:	f7ff fb3b 	bl	8002ae2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800346c:	480c      	ldr	r0, [pc, #48]	; (80034a0 <prvInitialiseTaskLists+0x6c>)
 800346e:	f7ff fb38 	bl	8002ae2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003472:	480c      	ldr	r0, [pc, #48]	; (80034a4 <prvInitialiseTaskLists+0x70>)
 8003474:	f7ff fb35 	bl	8002ae2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003478:	480b      	ldr	r0, [pc, #44]	; (80034a8 <prvInitialiseTaskLists+0x74>)
 800347a:	f7ff fb32 	bl	8002ae2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800347e:	4b0b      	ldr	r3, [pc, #44]	; (80034ac <prvInitialiseTaskLists+0x78>)
 8003480:	4a05      	ldr	r2, [pc, #20]	; (8003498 <prvInitialiseTaskLists+0x64>)
 8003482:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003484:	4b0a      	ldr	r3, [pc, #40]	; (80034b0 <prvInitialiseTaskLists+0x7c>)
 8003486:	4a05      	ldr	r2, [pc, #20]	; (800349c <prvInitialiseTaskLists+0x68>)
 8003488:	601a      	str	r2, [r3, #0]
}
 800348a:	bf00      	nop
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	200002ec 	.word	0x200002ec
 8003498:	20000378 	.word	0x20000378
 800349c:	2000038c 	.word	0x2000038c
 80034a0:	200003a8 	.word	0x200003a8
 80034a4:	200003bc 	.word	0x200003bc
 80034a8:	200003d4 	.word	0x200003d4
 80034ac:	200003a0 	.word	0x200003a0
 80034b0:	200003a4 	.word	0x200003a4

080034b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80034ba:	e019      	b.n	80034f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80034bc:	f000 fa1e 	bl	80038fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034c0:	4b0f      	ldr	r3, [pc, #60]	; (8003500 <prvCheckTasksWaitingTermination+0x4c>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3304      	adds	r3, #4
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff fb92 	bl	8002bf6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80034d2:	4b0c      	ldr	r3, [pc, #48]	; (8003504 <prvCheckTasksWaitingTermination+0x50>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	3b01      	subs	r3, #1
 80034d8:	4a0a      	ldr	r2, [pc, #40]	; (8003504 <prvCheckTasksWaitingTermination+0x50>)
 80034da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80034dc:	4b0a      	ldr	r3, [pc, #40]	; (8003508 <prvCheckTasksWaitingTermination+0x54>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	3b01      	subs	r3, #1
 80034e2:	4a09      	ldr	r2, [pc, #36]	; (8003508 <prvCheckTasksWaitingTermination+0x54>)
 80034e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80034e6:	f000 fa37 	bl	8003958 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f80e 	bl	800350c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80034f0:	4b05      	ldr	r3, [pc, #20]	; (8003508 <prvCheckTasksWaitingTermination+0x54>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1e1      	bne.n	80034bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80034f8:	bf00      	nop
 80034fa:	3708      	adds	r7, #8
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	200003bc 	.word	0x200003bc
 8003504:	200003e8 	.word	0x200003e8
 8003508:	200003d0 	.word	0x200003d0

0800350c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800351a:	2b00      	cmp	r3, #0
 800351c:	d108      	bne.n	8003530 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	4618      	mov	r0, r3
 8003524:	f000 fb88 	bl	8003c38 <vPortFree>
				vPortFree( pxTCB );
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 fb85 	bl	8003c38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800352e:	e017      	b.n	8003560 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003536:	2b01      	cmp	r3, #1
 8003538:	d103      	bne.n	8003542 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 fb7c 	bl	8003c38 <vPortFree>
	}
 8003540:	e00e      	b.n	8003560 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003548:	2b02      	cmp	r3, #2
 800354a:	d009      	beq.n	8003560 <prvDeleteTCB+0x54>
 800354c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003550:	f383 8811 	msr	BASEPRI, r3
 8003554:	f3bf 8f6f 	isb	sy
 8003558:	f3bf 8f4f 	dsb	sy
 800355c:	60fb      	str	r3, [r7, #12]
 800355e:	e7fe      	b.n	800355e <prvDeleteTCB+0x52>
	}
 8003560:	bf00      	nop
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800356e:	4b0c      	ldr	r3, [pc, #48]	; (80035a0 <prvResetNextTaskUnblockTime+0x38>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d104      	bne.n	8003582 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003578:	4b0a      	ldr	r3, [pc, #40]	; (80035a4 <prvResetNextTaskUnblockTime+0x3c>)
 800357a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800357e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003580:	e008      	b.n	8003594 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003582:	4b07      	ldr	r3, [pc, #28]	; (80035a0 <prvResetNextTaskUnblockTime+0x38>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	4a04      	ldr	r2, [pc, #16]	; (80035a4 <prvResetNextTaskUnblockTime+0x3c>)
 8003592:	6013      	str	r3, [r2, #0]
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	200003a0 	.word	0x200003a0
 80035a4:	20000408 	.word	0x20000408

080035a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80035ae:	4b0b      	ldr	r3, [pc, #44]	; (80035dc <xTaskGetSchedulerState+0x34>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d102      	bne.n	80035bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80035b6:	2301      	movs	r3, #1
 80035b8:	607b      	str	r3, [r7, #4]
 80035ba:	e008      	b.n	80035ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035bc:	4b08      	ldr	r3, [pc, #32]	; (80035e0 <xTaskGetSchedulerState+0x38>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d102      	bne.n	80035ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80035c4:	2302      	movs	r3, #2
 80035c6:	607b      	str	r3, [r7, #4]
 80035c8:	e001      	b.n	80035ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80035ca:	2300      	movs	r3, #0
 80035cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80035ce:	687b      	ldr	r3, [r7, #4]
	}
 80035d0:	4618      	mov	r0, r3
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	200003f4 	.word	0x200003f4
 80035e0:	20000410 	.word	0x20000410

080035e4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80035ee:	4b29      	ldr	r3, [pc, #164]	; (8003694 <prvAddCurrentTaskToDelayedList+0xb0>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035f4:	4b28      	ldr	r3, [pc, #160]	; (8003698 <prvAddCurrentTaskToDelayedList+0xb4>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	3304      	adds	r3, #4
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7ff fafb 	bl	8002bf6 <uxListRemove>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10b      	bne.n	800361e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003606:	4b24      	ldr	r3, [pc, #144]	; (8003698 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360c:	2201      	movs	r2, #1
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	43da      	mvns	r2, r3
 8003614:	4b21      	ldr	r3, [pc, #132]	; (800369c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4013      	ands	r3, r2
 800361a:	4a20      	ldr	r2, [pc, #128]	; (800369c <prvAddCurrentTaskToDelayedList+0xb8>)
 800361c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003624:	d10a      	bne.n	800363c <prvAddCurrentTaskToDelayedList+0x58>
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d007      	beq.n	800363c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800362c:	4b1a      	ldr	r3, [pc, #104]	; (8003698 <prvAddCurrentTaskToDelayedList+0xb4>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	3304      	adds	r3, #4
 8003632:	4619      	mov	r1, r3
 8003634:	481a      	ldr	r0, [pc, #104]	; (80036a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003636:	f7ff fa81 	bl	8002b3c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800363a:	e026      	b.n	800368a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4413      	add	r3, r2
 8003642:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003644:	4b14      	ldr	r3, [pc, #80]	; (8003698 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	429a      	cmp	r2, r3
 8003652:	d209      	bcs.n	8003668 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003654:	4b13      	ldr	r3, [pc, #76]	; (80036a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	4b0f      	ldr	r3, [pc, #60]	; (8003698 <prvAddCurrentTaskToDelayedList+0xb4>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	3304      	adds	r3, #4
 800365e:	4619      	mov	r1, r3
 8003660:	4610      	mov	r0, r2
 8003662:	f7ff fa8f 	bl	8002b84 <vListInsert>
}
 8003666:	e010      	b.n	800368a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003668:	4b0f      	ldr	r3, [pc, #60]	; (80036a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	4b0a      	ldr	r3, [pc, #40]	; (8003698 <prvAddCurrentTaskToDelayedList+0xb4>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	3304      	adds	r3, #4
 8003672:	4619      	mov	r1, r3
 8003674:	4610      	mov	r0, r2
 8003676:	f7ff fa85 	bl	8002b84 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800367a:	4b0c      	ldr	r3, [pc, #48]	; (80036ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	429a      	cmp	r2, r3
 8003682:	d202      	bcs.n	800368a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003684:	4a09      	ldr	r2, [pc, #36]	; (80036ac <prvAddCurrentTaskToDelayedList+0xc8>)
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	6013      	str	r3, [r2, #0]
}
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	200003ec 	.word	0x200003ec
 8003698:	200002e8 	.word	0x200002e8
 800369c:	200003f0 	.word	0x200003f0
 80036a0:	200003d4 	.word	0x200003d4
 80036a4:	200003a4 	.word	0x200003a4
 80036a8:	200003a0 	.word	0x200003a0
 80036ac:	20000408 	.word	0x20000408

080036b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	3b04      	subs	r3, #4
 80036c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80036c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	3b04      	subs	r3, #4
 80036ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	f023 0201 	bic.w	r2, r3, #1
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	3b04      	subs	r3, #4
 80036de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80036e0:	4a0c      	ldr	r2, [pc, #48]	; (8003714 <pxPortInitialiseStack+0x64>)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	3b14      	subs	r3, #20
 80036ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	3b04      	subs	r3, #4
 80036f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f06f 0202 	mvn.w	r2, #2
 80036fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	3b20      	subs	r3, #32
 8003704:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003706:	68fb      	ldr	r3, [r7, #12]
}
 8003708:	4618      	mov	r0, r3
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	08003719 	.word	0x08003719

08003718 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800371e:	2300      	movs	r3, #0
 8003720:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003722:	4b11      	ldr	r3, [pc, #68]	; (8003768 <prvTaskExitError+0x50>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800372a:	d009      	beq.n	8003740 <prvTaskExitError+0x28>
 800372c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003730:	f383 8811 	msr	BASEPRI, r3
 8003734:	f3bf 8f6f 	isb	sy
 8003738:	f3bf 8f4f 	dsb	sy
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	e7fe      	b.n	800373e <prvTaskExitError+0x26>
 8003740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003744:	f383 8811 	msr	BASEPRI, r3
 8003748:	f3bf 8f6f 	isb	sy
 800374c:	f3bf 8f4f 	dsb	sy
 8003750:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003752:	bf00      	nop
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d0fc      	beq.n	8003754 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800375a:	bf00      	nop
 800375c:	3714      	adds	r7, #20
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	2000000c 	.word	0x2000000c
 800376c:	00000000 	.word	0x00000000

08003770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003770:	4b07      	ldr	r3, [pc, #28]	; (8003790 <pxCurrentTCBConst2>)
 8003772:	6819      	ldr	r1, [r3, #0]
 8003774:	6808      	ldr	r0, [r1, #0]
 8003776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800377a:	f380 8809 	msr	PSP, r0
 800377e:	f3bf 8f6f 	isb	sy
 8003782:	f04f 0000 	mov.w	r0, #0
 8003786:	f380 8811 	msr	BASEPRI, r0
 800378a:	4770      	bx	lr
 800378c:	f3af 8000 	nop.w

08003790 <pxCurrentTCBConst2>:
 8003790:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003794:	bf00      	nop
 8003796:	bf00      	nop

08003798 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003798:	4808      	ldr	r0, [pc, #32]	; (80037bc <prvPortStartFirstTask+0x24>)
 800379a:	6800      	ldr	r0, [r0, #0]
 800379c:	6800      	ldr	r0, [r0, #0]
 800379e:	f380 8808 	msr	MSP, r0
 80037a2:	f04f 0000 	mov.w	r0, #0
 80037a6:	f380 8814 	msr	CONTROL, r0
 80037aa:	b662      	cpsie	i
 80037ac:	b661      	cpsie	f
 80037ae:	f3bf 8f4f 	dsb	sy
 80037b2:	f3bf 8f6f 	isb	sy
 80037b6:	df00      	svc	0
 80037b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80037ba:	bf00      	nop
 80037bc:	e000ed08 	.word	0xe000ed08

080037c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80037c6:	4b44      	ldr	r3, [pc, #272]	; (80038d8 <xPortStartScheduler+0x118>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a44      	ldr	r2, [pc, #272]	; (80038dc <xPortStartScheduler+0x11c>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d109      	bne.n	80037e4 <xPortStartScheduler+0x24>
 80037d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d4:	f383 8811 	msr	BASEPRI, r3
 80037d8:	f3bf 8f6f 	isb	sy
 80037dc:	f3bf 8f4f 	dsb	sy
 80037e0:	613b      	str	r3, [r7, #16]
 80037e2:	e7fe      	b.n	80037e2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80037e4:	4b3c      	ldr	r3, [pc, #240]	; (80038d8 <xPortStartScheduler+0x118>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a3d      	ldr	r2, [pc, #244]	; (80038e0 <xPortStartScheduler+0x120>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d109      	bne.n	8003802 <xPortStartScheduler+0x42>
 80037ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f2:	f383 8811 	msr	BASEPRI, r3
 80037f6:	f3bf 8f6f 	isb	sy
 80037fa:	f3bf 8f4f 	dsb	sy
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	e7fe      	b.n	8003800 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003802:	4b38      	ldr	r3, [pc, #224]	; (80038e4 <xPortStartScheduler+0x124>)
 8003804:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	b2db      	uxtb	r3, r3
 800380c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	22ff      	movs	r2, #255	; 0xff
 8003812:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	b2db      	uxtb	r3, r3
 800381a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800381c:	78fb      	ldrb	r3, [r7, #3]
 800381e:	b2db      	uxtb	r3, r3
 8003820:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003824:	b2da      	uxtb	r2, r3
 8003826:	4b30      	ldr	r3, [pc, #192]	; (80038e8 <xPortStartScheduler+0x128>)
 8003828:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800382a:	4b30      	ldr	r3, [pc, #192]	; (80038ec <xPortStartScheduler+0x12c>)
 800382c:	2207      	movs	r2, #7
 800382e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003830:	e009      	b.n	8003846 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003832:	4b2e      	ldr	r3, [pc, #184]	; (80038ec <xPortStartScheduler+0x12c>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	3b01      	subs	r3, #1
 8003838:	4a2c      	ldr	r2, [pc, #176]	; (80038ec <xPortStartScheduler+0x12c>)
 800383a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800383c:	78fb      	ldrb	r3, [r7, #3]
 800383e:	b2db      	uxtb	r3, r3
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	b2db      	uxtb	r3, r3
 8003844:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003846:	78fb      	ldrb	r3, [r7, #3]
 8003848:	b2db      	uxtb	r3, r3
 800384a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384e:	2b80      	cmp	r3, #128	; 0x80
 8003850:	d0ef      	beq.n	8003832 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003852:	4b26      	ldr	r3, [pc, #152]	; (80038ec <xPortStartScheduler+0x12c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f1c3 0307 	rsb	r3, r3, #7
 800385a:	2b04      	cmp	r3, #4
 800385c:	d009      	beq.n	8003872 <xPortStartScheduler+0xb2>
 800385e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003862:	f383 8811 	msr	BASEPRI, r3
 8003866:	f3bf 8f6f 	isb	sy
 800386a:	f3bf 8f4f 	dsb	sy
 800386e:	60bb      	str	r3, [r7, #8]
 8003870:	e7fe      	b.n	8003870 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003872:	4b1e      	ldr	r3, [pc, #120]	; (80038ec <xPortStartScheduler+0x12c>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	021b      	lsls	r3, r3, #8
 8003878:	4a1c      	ldr	r2, [pc, #112]	; (80038ec <xPortStartScheduler+0x12c>)
 800387a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800387c:	4b1b      	ldr	r3, [pc, #108]	; (80038ec <xPortStartScheduler+0x12c>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003884:	4a19      	ldr	r2, [pc, #100]	; (80038ec <xPortStartScheduler+0x12c>)
 8003886:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	b2da      	uxtb	r2, r3
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003890:	4b17      	ldr	r3, [pc, #92]	; (80038f0 <xPortStartScheduler+0x130>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a16      	ldr	r2, [pc, #88]	; (80038f0 <xPortStartScheduler+0x130>)
 8003896:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800389a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800389c:	4b14      	ldr	r3, [pc, #80]	; (80038f0 <xPortStartScheduler+0x130>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a13      	ldr	r2, [pc, #76]	; (80038f0 <xPortStartScheduler+0x130>)
 80038a2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80038a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80038a8:	f000 f8d6 	bl	8003a58 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80038ac:	4b11      	ldr	r3, [pc, #68]	; (80038f4 <xPortStartScheduler+0x134>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80038b2:	f000 f8f5 	bl	8003aa0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80038b6:	4b10      	ldr	r3, [pc, #64]	; (80038f8 <xPortStartScheduler+0x138>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a0f      	ldr	r2, [pc, #60]	; (80038f8 <xPortStartScheduler+0x138>)
 80038bc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80038c0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80038c2:	f7ff ff69 	bl	8003798 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80038c6:	f7ff fd43 	bl	8003350 <vTaskSwitchContext>
	prvTaskExitError();
 80038ca:	f7ff ff25 	bl	8003718 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3718      	adds	r7, #24
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	e000ed00 	.word	0xe000ed00
 80038dc:	410fc271 	.word	0x410fc271
 80038e0:	410fc270 	.word	0x410fc270
 80038e4:	e000e400 	.word	0xe000e400
 80038e8:	20000414 	.word	0x20000414
 80038ec:	20000418 	.word	0x20000418
 80038f0:	e000ed20 	.word	0xe000ed20
 80038f4:	2000000c 	.word	0x2000000c
 80038f8:	e000ef34 	.word	0xe000ef34

080038fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003906:	f383 8811 	msr	BASEPRI, r3
 800390a:	f3bf 8f6f 	isb	sy
 800390e:	f3bf 8f4f 	dsb	sy
 8003912:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003914:	4b0e      	ldr	r3, [pc, #56]	; (8003950 <vPortEnterCritical+0x54>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	3301      	adds	r3, #1
 800391a:	4a0d      	ldr	r2, [pc, #52]	; (8003950 <vPortEnterCritical+0x54>)
 800391c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800391e:	4b0c      	ldr	r3, [pc, #48]	; (8003950 <vPortEnterCritical+0x54>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d10e      	bne.n	8003944 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003926:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <vPortEnterCritical+0x58>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	d009      	beq.n	8003944 <vPortEnterCritical+0x48>
 8003930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003934:	f383 8811 	msr	BASEPRI, r3
 8003938:	f3bf 8f6f 	isb	sy
 800393c:	f3bf 8f4f 	dsb	sy
 8003940:	603b      	str	r3, [r7, #0]
 8003942:	e7fe      	b.n	8003942 <vPortEnterCritical+0x46>
	}
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	2000000c 	.word	0x2000000c
 8003954:	e000ed04 	.word	0xe000ed04

08003958 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800395e:	4b11      	ldr	r3, [pc, #68]	; (80039a4 <vPortExitCritical+0x4c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d109      	bne.n	800397a <vPortExitCritical+0x22>
 8003966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396a:	f383 8811 	msr	BASEPRI, r3
 800396e:	f3bf 8f6f 	isb	sy
 8003972:	f3bf 8f4f 	dsb	sy
 8003976:	607b      	str	r3, [r7, #4]
 8003978:	e7fe      	b.n	8003978 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800397a:	4b0a      	ldr	r3, [pc, #40]	; (80039a4 <vPortExitCritical+0x4c>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	3b01      	subs	r3, #1
 8003980:	4a08      	ldr	r2, [pc, #32]	; (80039a4 <vPortExitCritical+0x4c>)
 8003982:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003984:	4b07      	ldr	r3, [pc, #28]	; (80039a4 <vPortExitCritical+0x4c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d104      	bne.n	8003996 <vPortExitCritical+0x3e>
 800398c:	2300      	movs	r3, #0
 800398e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003996:	bf00      	nop
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	2000000c 	.word	0x2000000c
	...

080039b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80039b0:	f3ef 8009 	mrs	r0, PSP
 80039b4:	f3bf 8f6f 	isb	sy
 80039b8:	4b15      	ldr	r3, [pc, #84]	; (8003a10 <pxCurrentTCBConst>)
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	f01e 0f10 	tst.w	lr, #16
 80039c0:	bf08      	it	eq
 80039c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80039c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039ca:	6010      	str	r0, [r2, #0]
 80039cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80039d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80039d4:	f380 8811 	msr	BASEPRI, r0
 80039d8:	f3bf 8f4f 	dsb	sy
 80039dc:	f3bf 8f6f 	isb	sy
 80039e0:	f7ff fcb6 	bl	8003350 <vTaskSwitchContext>
 80039e4:	f04f 0000 	mov.w	r0, #0
 80039e8:	f380 8811 	msr	BASEPRI, r0
 80039ec:	bc09      	pop	{r0, r3}
 80039ee:	6819      	ldr	r1, [r3, #0]
 80039f0:	6808      	ldr	r0, [r1, #0]
 80039f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039f6:	f01e 0f10 	tst.w	lr, #16
 80039fa:	bf08      	it	eq
 80039fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003a00:	f380 8809 	msr	PSP, r0
 8003a04:	f3bf 8f6f 	isb	sy
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	f3af 8000 	nop.w

08003a10 <pxCurrentTCBConst>:
 8003a10:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003a14:	bf00      	nop
 8003a16:	bf00      	nop

08003a18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
	__asm volatile
 8003a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a22:	f383 8811 	msr	BASEPRI, r3
 8003a26:	f3bf 8f6f 	isb	sy
 8003a2a:	f3bf 8f4f 	dsb	sy
 8003a2e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003a30:	f7ff fbd6 	bl	80031e0 <xTaskIncrementTick>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d003      	beq.n	8003a42 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003a3a:	4b06      	ldr	r3, [pc, #24]	; (8003a54 <xPortSysTickHandler+0x3c>)
 8003a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	2300      	movs	r3, #0
 8003a44:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003a4c:	bf00      	nop
 8003a4e:	3708      	adds	r7, #8
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	e000ed04 	.word	0xe000ed04

08003a58 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003a5c:	4b0b      	ldr	r3, [pc, #44]	; (8003a8c <vPortSetupTimerInterrupt+0x34>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003a62:	4b0b      	ldr	r3, [pc, #44]	; (8003a90 <vPortSetupTimerInterrupt+0x38>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003a68:	4b0a      	ldr	r3, [pc, #40]	; (8003a94 <vPortSetupTimerInterrupt+0x3c>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a0a      	ldr	r2, [pc, #40]	; (8003a98 <vPortSetupTimerInterrupt+0x40>)
 8003a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a72:	099b      	lsrs	r3, r3, #6
 8003a74:	4a09      	ldr	r2, [pc, #36]	; (8003a9c <vPortSetupTimerInterrupt+0x44>)
 8003a76:	3b01      	subs	r3, #1
 8003a78:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003a7a:	4b04      	ldr	r3, [pc, #16]	; (8003a8c <vPortSetupTimerInterrupt+0x34>)
 8003a7c:	2207      	movs	r2, #7
 8003a7e:	601a      	str	r2, [r3, #0]
}
 8003a80:	bf00      	nop
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	e000e010 	.word	0xe000e010
 8003a90:	e000e018 	.word	0xe000e018
 8003a94:	20000000 	.word	0x20000000
 8003a98:	10624dd3 	.word	0x10624dd3
 8003a9c:	e000e014 	.word	0xe000e014

08003aa0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003aa0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003ab0 <vPortEnableVFP+0x10>
 8003aa4:	6801      	ldr	r1, [r0, #0]
 8003aa6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003aaa:	6001      	str	r1, [r0, #0]
 8003aac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003aae:	bf00      	nop
 8003ab0:	e000ed88 	.word	0xe000ed88

08003ab4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b08a      	sub	sp, #40	; 0x28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003abc:	2300      	movs	r3, #0
 8003abe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003ac0:	f7ff fae4 	bl	800308c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003ac4:	4b57      	ldr	r3, [pc, #348]	; (8003c24 <pvPortMalloc+0x170>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d101      	bne.n	8003ad0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003acc:	f000 f90c 	bl	8003ce8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003ad0:	4b55      	ldr	r3, [pc, #340]	; (8003c28 <pvPortMalloc+0x174>)
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f040 808c 	bne.w	8003bf6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d01c      	beq.n	8003b1e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003ae4:	2208      	movs	r2, #8
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4413      	add	r3, r2
 8003aea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f003 0307 	and.w	r3, r3, #7
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d013      	beq.n	8003b1e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f023 0307 	bic.w	r3, r3, #7
 8003afc:	3308      	adds	r3, #8
 8003afe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d009      	beq.n	8003b1e <pvPortMalloc+0x6a>
	__asm volatile
 8003b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0e:	f383 8811 	msr	BASEPRI, r3
 8003b12:	f3bf 8f6f 	isb	sy
 8003b16:	f3bf 8f4f 	dsb	sy
 8003b1a:	617b      	str	r3, [r7, #20]
 8003b1c:	e7fe      	b.n	8003b1c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d068      	beq.n	8003bf6 <pvPortMalloc+0x142>
 8003b24:	4b41      	ldr	r3, [pc, #260]	; (8003c2c <pvPortMalloc+0x178>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d863      	bhi.n	8003bf6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003b2e:	4b40      	ldr	r3, [pc, #256]	; (8003c30 <pvPortMalloc+0x17c>)
 8003b30:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003b32:	4b3f      	ldr	r3, [pc, #252]	; (8003c30 <pvPortMalloc+0x17c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b38:	e004      	b.n	8003b44 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d903      	bls.n	8003b56 <pvPortMalloc+0xa2>
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1f1      	bne.n	8003b3a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003b56:	4b33      	ldr	r3, [pc, #204]	; (8003c24 <pvPortMalloc+0x170>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d04a      	beq.n	8003bf6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003b60:	6a3b      	ldr	r3, [r7, #32]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2208      	movs	r2, #8
 8003b66:	4413      	add	r3, r2
 8003b68:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	6a3b      	ldr	r3, [r7, #32]
 8003b70:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	1ad2      	subs	r2, r2, r3
 8003b7a:	2308      	movs	r3, #8
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d91e      	bls.n	8003bc0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4413      	add	r3, r2
 8003b88:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	f003 0307 	and.w	r3, r3, #7
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d009      	beq.n	8003ba8 <pvPortMalloc+0xf4>
 8003b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b98:	f383 8811 	msr	BASEPRI, r3
 8003b9c:	f3bf 8f6f 	isb	sy
 8003ba0:	f3bf 8f4f 	dsb	sy
 8003ba4:	613b      	str	r3, [r7, #16]
 8003ba6:	e7fe      	b.n	8003ba6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	1ad2      	subs	r2, r2, r3
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003bba:	69b8      	ldr	r0, [r7, #24]
 8003bbc:	f000 f8f6 	bl	8003dac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003bc0:	4b1a      	ldr	r3, [pc, #104]	; (8003c2c <pvPortMalloc+0x178>)
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	4a18      	ldr	r2, [pc, #96]	; (8003c2c <pvPortMalloc+0x178>)
 8003bcc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003bce:	4b17      	ldr	r3, [pc, #92]	; (8003c2c <pvPortMalloc+0x178>)
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	4b18      	ldr	r3, [pc, #96]	; (8003c34 <pvPortMalloc+0x180>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d203      	bcs.n	8003be2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003bda:	4b14      	ldr	r3, [pc, #80]	; (8003c2c <pvPortMalloc+0x178>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a15      	ldr	r2, [pc, #84]	; (8003c34 <pvPortMalloc+0x180>)
 8003be0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	4b10      	ldr	r3, [pc, #64]	; (8003c28 <pvPortMalloc+0x174>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	431a      	orrs	r2, r3
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003bf6:	f7ff fa57 	bl	80030a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d009      	beq.n	8003c18 <pvPortMalloc+0x164>
 8003c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c08:	f383 8811 	msr	BASEPRI, r3
 8003c0c:	f3bf 8f6f 	isb	sy
 8003c10:	f3bf 8f4f 	dsb	sy
 8003c14:	60fb      	str	r3, [r7, #12]
 8003c16:	e7fe      	b.n	8003c16 <pvPortMalloc+0x162>
	return pvReturn;
 8003c18:	69fb      	ldr	r3, [r7, #28]
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3728      	adds	r7, #40	; 0x28
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	20004024 	.word	0x20004024
 8003c28:	20004030 	.word	0x20004030
 8003c2c:	20004028 	.word	0x20004028
 8003c30:	2000401c 	.word	0x2000401c
 8003c34:	2000402c 	.word	0x2000402c

08003c38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d046      	beq.n	8003cd8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003c4a:	2308      	movs	r3, #8
 8003c4c:	425b      	negs	r3, r3
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	4413      	add	r3, r2
 8003c52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	4b20      	ldr	r3, [pc, #128]	; (8003ce0 <vPortFree+0xa8>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4013      	ands	r3, r2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d109      	bne.n	8003c7a <vPortFree+0x42>
 8003c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6a:	f383 8811 	msr	BASEPRI, r3
 8003c6e:	f3bf 8f6f 	isb	sy
 8003c72:	f3bf 8f4f 	dsb	sy
 8003c76:	60fb      	str	r3, [r7, #12]
 8003c78:	e7fe      	b.n	8003c78 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d009      	beq.n	8003c96 <vPortFree+0x5e>
 8003c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c86:	f383 8811 	msr	BASEPRI, r3
 8003c8a:	f3bf 8f6f 	isb	sy
 8003c8e:	f3bf 8f4f 	dsb	sy
 8003c92:	60bb      	str	r3, [r7, #8]
 8003c94:	e7fe      	b.n	8003c94 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	685a      	ldr	r2, [r3, #4]
 8003c9a:	4b11      	ldr	r3, [pc, #68]	; (8003ce0 <vPortFree+0xa8>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d019      	beq.n	8003cd8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d115      	bne.n	8003cd8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ce0 <vPortFree+0xa8>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	401a      	ands	r2, r3
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003cbc:	f7ff f9e6 	bl	800308c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	4b07      	ldr	r3, [pc, #28]	; (8003ce4 <vPortFree+0xac>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4413      	add	r3, r2
 8003cca:	4a06      	ldr	r2, [pc, #24]	; (8003ce4 <vPortFree+0xac>)
 8003ccc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003cce:	6938      	ldr	r0, [r7, #16]
 8003cd0:	f000 f86c 	bl	8003dac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003cd4:	f7ff f9e8 	bl	80030a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003cd8:	bf00      	nop
 8003cda:	3718      	adds	r7, #24
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	20004030 	.word	0x20004030
 8003ce4:	20004028 	.word	0x20004028

08003ce8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003cee:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003cf2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003cf4:	4b27      	ldr	r3, [pc, #156]	; (8003d94 <prvHeapInit+0xac>)
 8003cf6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f003 0307 	and.w	r3, r3, #7
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00c      	beq.n	8003d1c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	3307      	adds	r3, #7
 8003d06:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f023 0307 	bic.w	r3, r3, #7
 8003d0e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	4a1f      	ldr	r2, [pc, #124]	; (8003d94 <prvHeapInit+0xac>)
 8003d18:	4413      	add	r3, r2
 8003d1a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003d20:	4a1d      	ldr	r2, [pc, #116]	; (8003d98 <prvHeapInit+0xb0>)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003d26:	4b1c      	ldr	r3, [pc, #112]	; (8003d98 <prvHeapInit+0xb0>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	4413      	add	r3, r2
 8003d32:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003d34:	2208      	movs	r2, #8
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	1a9b      	subs	r3, r3, r2
 8003d3a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f023 0307 	bic.w	r3, r3, #7
 8003d42:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4a15      	ldr	r2, [pc, #84]	; (8003d9c <prvHeapInit+0xb4>)
 8003d48:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003d4a:	4b14      	ldr	r3, [pc, #80]	; (8003d9c <prvHeapInit+0xb4>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003d52:	4b12      	ldr	r3, [pc, #72]	; (8003d9c <prvHeapInit+0xb4>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2200      	movs	r2, #0
 8003d58:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	1ad2      	subs	r2, r2, r3
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003d68:	4b0c      	ldr	r3, [pc, #48]	; (8003d9c <prvHeapInit+0xb4>)
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	4a0a      	ldr	r2, [pc, #40]	; (8003da0 <prvHeapInit+0xb8>)
 8003d76:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	4a09      	ldr	r2, [pc, #36]	; (8003da4 <prvHeapInit+0xbc>)
 8003d7e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003d80:	4b09      	ldr	r3, [pc, #36]	; (8003da8 <prvHeapInit+0xc0>)
 8003d82:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003d86:	601a      	str	r2, [r3, #0]
}
 8003d88:	bf00      	nop
 8003d8a:	3714      	adds	r7, #20
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr
 8003d94:	2000041c 	.word	0x2000041c
 8003d98:	2000401c 	.word	0x2000401c
 8003d9c:	20004024 	.word	0x20004024
 8003da0:	2000402c 	.word	0x2000402c
 8003da4:	20004028 	.word	0x20004028
 8003da8:	20004030 	.word	0x20004030

08003dac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003db4:	4b28      	ldr	r3, [pc, #160]	; (8003e58 <prvInsertBlockIntoFreeList+0xac>)
 8003db6:	60fb      	str	r3, [r7, #12]
 8003db8:	e002      	b.n	8003dc0 <prvInsertBlockIntoFreeList+0x14>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	60fb      	str	r3, [r7, #12]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d8f7      	bhi.n	8003dba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d108      	bne.n	8003dee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	441a      	add	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	441a      	add	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d118      	bne.n	8003e34 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	4b15      	ldr	r3, [pc, #84]	; (8003e5c <prvInsertBlockIntoFreeList+0xb0>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d00d      	beq.n	8003e2a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	441a      	add	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	e008      	b.n	8003e3c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003e2a:	4b0c      	ldr	r3, [pc, #48]	; (8003e5c <prvInsertBlockIntoFreeList+0xb0>)
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	e003      	b.n	8003e3c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d002      	beq.n	8003e4a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e4a:	bf00      	nop
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	2000401c 	.word	0x2000401c
 8003e5c:	20004024 	.word	0x20004024

08003e60 <__errno>:
 8003e60:	4b01      	ldr	r3, [pc, #4]	; (8003e68 <__errno+0x8>)
 8003e62:	6818      	ldr	r0, [r3, #0]
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	20000010 	.word	0x20000010

08003e6c <__libc_init_array>:
 8003e6c:	b570      	push	{r4, r5, r6, lr}
 8003e6e:	4e0d      	ldr	r6, [pc, #52]	; (8003ea4 <__libc_init_array+0x38>)
 8003e70:	4c0d      	ldr	r4, [pc, #52]	; (8003ea8 <__libc_init_array+0x3c>)
 8003e72:	1ba4      	subs	r4, r4, r6
 8003e74:	10a4      	asrs	r4, r4, #2
 8003e76:	2500      	movs	r5, #0
 8003e78:	42a5      	cmp	r5, r4
 8003e7a:	d109      	bne.n	8003e90 <__libc_init_array+0x24>
 8003e7c:	4e0b      	ldr	r6, [pc, #44]	; (8003eac <__libc_init_array+0x40>)
 8003e7e:	4c0c      	ldr	r4, [pc, #48]	; (8003eb0 <__libc_init_array+0x44>)
 8003e80:	f000 ffba 	bl	8004df8 <_init>
 8003e84:	1ba4      	subs	r4, r4, r6
 8003e86:	10a4      	asrs	r4, r4, #2
 8003e88:	2500      	movs	r5, #0
 8003e8a:	42a5      	cmp	r5, r4
 8003e8c:	d105      	bne.n	8003e9a <__libc_init_array+0x2e>
 8003e8e:	bd70      	pop	{r4, r5, r6, pc}
 8003e90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e94:	4798      	blx	r3
 8003e96:	3501      	adds	r5, #1
 8003e98:	e7ee      	b.n	8003e78 <__libc_init_array+0xc>
 8003e9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e9e:	4798      	blx	r3
 8003ea0:	3501      	adds	r5, #1
 8003ea2:	e7f2      	b.n	8003e8a <__libc_init_array+0x1e>
 8003ea4:	08004efc 	.word	0x08004efc
 8003ea8:	08004efc 	.word	0x08004efc
 8003eac:	08004efc 	.word	0x08004efc
 8003eb0:	08004f00 	.word	0x08004f00

08003eb4 <memset>:
 8003eb4:	4402      	add	r2, r0
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d100      	bne.n	8003ebe <memset+0xa>
 8003ebc:	4770      	bx	lr
 8003ebe:	f803 1b01 	strb.w	r1, [r3], #1
 8003ec2:	e7f9      	b.n	8003eb8 <memset+0x4>

08003ec4 <iprintf>:
 8003ec4:	b40f      	push	{r0, r1, r2, r3}
 8003ec6:	4b0a      	ldr	r3, [pc, #40]	; (8003ef0 <iprintf+0x2c>)
 8003ec8:	b513      	push	{r0, r1, r4, lr}
 8003eca:	681c      	ldr	r4, [r3, #0]
 8003ecc:	b124      	cbz	r4, 8003ed8 <iprintf+0x14>
 8003ece:	69a3      	ldr	r3, [r4, #24]
 8003ed0:	b913      	cbnz	r3, 8003ed8 <iprintf+0x14>
 8003ed2:	4620      	mov	r0, r4
 8003ed4:	f000 fa6c 	bl	80043b0 <__sinit>
 8003ed8:	ab05      	add	r3, sp, #20
 8003eda:	9a04      	ldr	r2, [sp, #16]
 8003edc:	68a1      	ldr	r1, [r4, #8]
 8003ede:	9301      	str	r3, [sp, #4]
 8003ee0:	4620      	mov	r0, r4
 8003ee2:	f000 fc2d 	bl	8004740 <_vfiprintf_r>
 8003ee6:	b002      	add	sp, #8
 8003ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003eec:	b004      	add	sp, #16
 8003eee:	4770      	bx	lr
 8003ef0:	20000010 	.word	0x20000010

08003ef4 <setvbuf>:
 8003ef4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003ef8:	461d      	mov	r5, r3
 8003efa:	4b51      	ldr	r3, [pc, #324]	; (8004040 <setvbuf+0x14c>)
 8003efc:	681e      	ldr	r6, [r3, #0]
 8003efe:	4604      	mov	r4, r0
 8003f00:	460f      	mov	r7, r1
 8003f02:	4690      	mov	r8, r2
 8003f04:	b126      	cbz	r6, 8003f10 <setvbuf+0x1c>
 8003f06:	69b3      	ldr	r3, [r6, #24]
 8003f08:	b913      	cbnz	r3, 8003f10 <setvbuf+0x1c>
 8003f0a:	4630      	mov	r0, r6
 8003f0c:	f000 fa50 	bl	80043b0 <__sinit>
 8003f10:	4b4c      	ldr	r3, [pc, #304]	; (8004044 <setvbuf+0x150>)
 8003f12:	429c      	cmp	r4, r3
 8003f14:	d152      	bne.n	8003fbc <setvbuf+0xc8>
 8003f16:	6874      	ldr	r4, [r6, #4]
 8003f18:	f1b8 0f02 	cmp.w	r8, #2
 8003f1c:	d006      	beq.n	8003f2c <setvbuf+0x38>
 8003f1e:	f1b8 0f01 	cmp.w	r8, #1
 8003f22:	f200 8089 	bhi.w	8004038 <setvbuf+0x144>
 8003f26:	2d00      	cmp	r5, #0
 8003f28:	f2c0 8086 	blt.w	8004038 <setvbuf+0x144>
 8003f2c:	4621      	mov	r1, r4
 8003f2e:	4630      	mov	r0, r6
 8003f30:	f000 f9d4 	bl	80042dc <_fflush_r>
 8003f34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f36:	b141      	cbz	r1, 8003f4a <setvbuf+0x56>
 8003f38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f3c:	4299      	cmp	r1, r3
 8003f3e:	d002      	beq.n	8003f46 <setvbuf+0x52>
 8003f40:	4630      	mov	r0, r6
 8003f42:	f000 fb2b 	bl	800459c <_free_r>
 8003f46:	2300      	movs	r3, #0
 8003f48:	6363      	str	r3, [r4, #52]	; 0x34
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	61a3      	str	r3, [r4, #24]
 8003f4e:	6063      	str	r3, [r4, #4]
 8003f50:	89a3      	ldrh	r3, [r4, #12]
 8003f52:	061b      	lsls	r3, r3, #24
 8003f54:	d503      	bpl.n	8003f5e <setvbuf+0x6a>
 8003f56:	6921      	ldr	r1, [r4, #16]
 8003f58:	4630      	mov	r0, r6
 8003f5a:	f000 fb1f 	bl	800459c <_free_r>
 8003f5e:	89a3      	ldrh	r3, [r4, #12]
 8003f60:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003f64:	f023 0303 	bic.w	r3, r3, #3
 8003f68:	f1b8 0f02 	cmp.w	r8, #2
 8003f6c:	81a3      	strh	r3, [r4, #12]
 8003f6e:	d05d      	beq.n	800402c <setvbuf+0x138>
 8003f70:	ab01      	add	r3, sp, #4
 8003f72:	466a      	mov	r2, sp
 8003f74:	4621      	mov	r1, r4
 8003f76:	4630      	mov	r0, r6
 8003f78:	f000 faa4 	bl	80044c4 <__swhatbuf_r>
 8003f7c:	89a3      	ldrh	r3, [r4, #12]
 8003f7e:	4318      	orrs	r0, r3
 8003f80:	81a0      	strh	r0, [r4, #12]
 8003f82:	bb2d      	cbnz	r5, 8003fd0 <setvbuf+0xdc>
 8003f84:	9d00      	ldr	r5, [sp, #0]
 8003f86:	4628      	mov	r0, r5
 8003f88:	f000 fb00 	bl	800458c <malloc>
 8003f8c:	4607      	mov	r7, r0
 8003f8e:	2800      	cmp	r0, #0
 8003f90:	d14e      	bne.n	8004030 <setvbuf+0x13c>
 8003f92:	f8dd 9000 	ldr.w	r9, [sp]
 8003f96:	45a9      	cmp	r9, r5
 8003f98:	d13c      	bne.n	8004014 <setvbuf+0x120>
 8003f9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f9e:	89a3      	ldrh	r3, [r4, #12]
 8003fa0:	f043 0302 	orr.w	r3, r3, #2
 8003fa4:	81a3      	strh	r3, [r4, #12]
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	60a3      	str	r3, [r4, #8]
 8003faa:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003fae:	6023      	str	r3, [r4, #0]
 8003fb0:	6123      	str	r3, [r4, #16]
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	6163      	str	r3, [r4, #20]
 8003fb6:	b003      	add	sp, #12
 8003fb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003fbc:	4b22      	ldr	r3, [pc, #136]	; (8004048 <setvbuf+0x154>)
 8003fbe:	429c      	cmp	r4, r3
 8003fc0:	d101      	bne.n	8003fc6 <setvbuf+0xd2>
 8003fc2:	68b4      	ldr	r4, [r6, #8]
 8003fc4:	e7a8      	b.n	8003f18 <setvbuf+0x24>
 8003fc6:	4b21      	ldr	r3, [pc, #132]	; (800404c <setvbuf+0x158>)
 8003fc8:	429c      	cmp	r4, r3
 8003fca:	bf08      	it	eq
 8003fcc:	68f4      	ldreq	r4, [r6, #12]
 8003fce:	e7a3      	b.n	8003f18 <setvbuf+0x24>
 8003fd0:	2f00      	cmp	r7, #0
 8003fd2:	d0d8      	beq.n	8003f86 <setvbuf+0x92>
 8003fd4:	69b3      	ldr	r3, [r6, #24]
 8003fd6:	b913      	cbnz	r3, 8003fde <setvbuf+0xea>
 8003fd8:	4630      	mov	r0, r6
 8003fda:	f000 f9e9 	bl	80043b0 <__sinit>
 8003fde:	f1b8 0f01 	cmp.w	r8, #1
 8003fe2:	bf08      	it	eq
 8003fe4:	89a3      	ldrheq	r3, [r4, #12]
 8003fe6:	6027      	str	r7, [r4, #0]
 8003fe8:	bf04      	itt	eq
 8003fea:	f043 0301 	orreq.w	r3, r3, #1
 8003fee:	81a3      	strheq	r3, [r4, #12]
 8003ff0:	89a3      	ldrh	r3, [r4, #12]
 8003ff2:	f013 0008 	ands.w	r0, r3, #8
 8003ff6:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8003ffa:	d01b      	beq.n	8004034 <setvbuf+0x140>
 8003ffc:	f013 0001 	ands.w	r0, r3, #1
 8004000:	bf18      	it	ne
 8004002:	426d      	negne	r5, r5
 8004004:	f04f 0300 	mov.w	r3, #0
 8004008:	bf1d      	ittte	ne
 800400a:	60a3      	strne	r3, [r4, #8]
 800400c:	61a5      	strne	r5, [r4, #24]
 800400e:	4618      	movne	r0, r3
 8004010:	60a5      	streq	r5, [r4, #8]
 8004012:	e7d0      	b.n	8003fb6 <setvbuf+0xc2>
 8004014:	4648      	mov	r0, r9
 8004016:	f000 fab9 	bl	800458c <malloc>
 800401a:	4607      	mov	r7, r0
 800401c:	2800      	cmp	r0, #0
 800401e:	d0bc      	beq.n	8003f9a <setvbuf+0xa6>
 8004020:	89a3      	ldrh	r3, [r4, #12]
 8004022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004026:	81a3      	strh	r3, [r4, #12]
 8004028:	464d      	mov	r5, r9
 800402a:	e7d3      	b.n	8003fd4 <setvbuf+0xe0>
 800402c:	2000      	movs	r0, #0
 800402e:	e7b6      	b.n	8003f9e <setvbuf+0xaa>
 8004030:	46a9      	mov	r9, r5
 8004032:	e7f5      	b.n	8004020 <setvbuf+0x12c>
 8004034:	60a0      	str	r0, [r4, #8]
 8004036:	e7be      	b.n	8003fb6 <setvbuf+0xc2>
 8004038:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800403c:	e7bb      	b.n	8003fb6 <setvbuf+0xc2>
 800403e:	bf00      	nop
 8004040:	20000010 	.word	0x20000010
 8004044:	08004e80 	.word	0x08004e80
 8004048:	08004ea0 	.word	0x08004ea0
 800404c:	08004e60 	.word	0x08004e60

08004050 <__swbuf_r>:
 8004050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004052:	460e      	mov	r6, r1
 8004054:	4614      	mov	r4, r2
 8004056:	4605      	mov	r5, r0
 8004058:	b118      	cbz	r0, 8004062 <__swbuf_r+0x12>
 800405a:	6983      	ldr	r3, [r0, #24]
 800405c:	b90b      	cbnz	r3, 8004062 <__swbuf_r+0x12>
 800405e:	f000 f9a7 	bl	80043b0 <__sinit>
 8004062:	4b21      	ldr	r3, [pc, #132]	; (80040e8 <__swbuf_r+0x98>)
 8004064:	429c      	cmp	r4, r3
 8004066:	d12a      	bne.n	80040be <__swbuf_r+0x6e>
 8004068:	686c      	ldr	r4, [r5, #4]
 800406a:	69a3      	ldr	r3, [r4, #24]
 800406c:	60a3      	str	r3, [r4, #8]
 800406e:	89a3      	ldrh	r3, [r4, #12]
 8004070:	071a      	lsls	r2, r3, #28
 8004072:	d52e      	bpl.n	80040d2 <__swbuf_r+0x82>
 8004074:	6923      	ldr	r3, [r4, #16]
 8004076:	b363      	cbz	r3, 80040d2 <__swbuf_r+0x82>
 8004078:	6923      	ldr	r3, [r4, #16]
 800407a:	6820      	ldr	r0, [r4, #0]
 800407c:	1ac0      	subs	r0, r0, r3
 800407e:	6963      	ldr	r3, [r4, #20]
 8004080:	b2f6      	uxtb	r6, r6
 8004082:	4283      	cmp	r3, r0
 8004084:	4637      	mov	r7, r6
 8004086:	dc04      	bgt.n	8004092 <__swbuf_r+0x42>
 8004088:	4621      	mov	r1, r4
 800408a:	4628      	mov	r0, r5
 800408c:	f000 f926 	bl	80042dc <_fflush_r>
 8004090:	bb28      	cbnz	r0, 80040de <__swbuf_r+0x8e>
 8004092:	68a3      	ldr	r3, [r4, #8]
 8004094:	3b01      	subs	r3, #1
 8004096:	60a3      	str	r3, [r4, #8]
 8004098:	6823      	ldr	r3, [r4, #0]
 800409a:	1c5a      	adds	r2, r3, #1
 800409c:	6022      	str	r2, [r4, #0]
 800409e:	701e      	strb	r6, [r3, #0]
 80040a0:	6963      	ldr	r3, [r4, #20]
 80040a2:	3001      	adds	r0, #1
 80040a4:	4283      	cmp	r3, r0
 80040a6:	d004      	beq.n	80040b2 <__swbuf_r+0x62>
 80040a8:	89a3      	ldrh	r3, [r4, #12]
 80040aa:	07db      	lsls	r3, r3, #31
 80040ac:	d519      	bpl.n	80040e2 <__swbuf_r+0x92>
 80040ae:	2e0a      	cmp	r6, #10
 80040b0:	d117      	bne.n	80040e2 <__swbuf_r+0x92>
 80040b2:	4621      	mov	r1, r4
 80040b4:	4628      	mov	r0, r5
 80040b6:	f000 f911 	bl	80042dc <_fflush_r>
 80040ba:	b190      	cbz	r0, 80040e2 <__swbuf_r+0x92>
 80040bc:	e00f      	b.n	80040de <__swbuf_r+0x8e>
 80040be:	4b0b      	ldr	r3, [pc, #44]	; (80040ec <__swbuf_r+0x9c>)
 80040c0:	429c      	cmp	r4, r3
 80040c2:	d101      	bne.n	80040c8 <__swbuf_r+0x78>
 80040c4:	68ac      	ldr	r4, [r5, #8]
 80040c6:	e7d0      	b.n	800406a <__swbuf_r+0x1a>
 80040c8:	4b09      	ldr	r3, [pc, #36]	; (80040f0 <__swbuf_r+0xa0>)
 80040ca:	429c      	cmp	r4, r3
 80040cc:	bf08      	it	eq
 80040ce:	68ec      	ldreq	r4, [r5, #12]
 80040d0:	e7cb      	b.n	800406a <__swbuf_r+0x1a>
 80040d2:	4621      	mov	r1, r4
 80040d4:	4628      	mov	r0, r5
 80040d6:	f000 f80d 	bl	80040f4 <__swsetup_r>
 80040da:	2800      	cmp	r0, #0
 80040dc:	d0cc      	beq.n	8004078 <__swbuf_r+0x28>
 80040de:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80040e2:	4638      	mov	r0, r7
 80040e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040e6:	bf00      	nop
 80040e8:	08004e80 	.word	0x08004e80
 80040ec:	08004ea0 	.word	0x08004ea0
 80040f0:	08004e60 	.word	0x08004e60

080040f4 <__swsetup_r>:
 80040f4:	4b32      	ldr	r3, [pc, #200]	; (80041c0 <__swsetup_r+0xcc>)
 80040f6:	b570      	push	{r4, r5, r6, lr}
 80040f8:	681d      	ldr	r5, [r3, #0]
 80040fa:	4606      	mov	r6, r0
 80040fc:	460c      	mov	r4, r1
 80040fe:	b125      	cbz	r5, 800410a <__swsetup_r+0x16>
 8004100:	69ab      	ldr	r3, [r5, #24]
 8004102:	b913      	cbnz	r3, 800410a <__swsetup_r+0x16>
 8004104:	4628      	mov	r0, r5
 8004106:	f000 f953 	bl	80043b0 <__sinit>
 800410a:	4b2e      	ldr	r3, [pc, #184]	; (80041c4 <__swsetup_r+0xd0>)
 800410c:	429c      	cmp	r4, r3
 800410e:	d10f      	bne.n	8004130 <__swsetup_r+0x3c>
 8004110:	686c      	ldr	r4, [r5, #4]
 8004112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004116:	b29a      	uxth	r2, r3
 8004118:	0715      	lsls	r5, r2, #28
 800411a:	d42c      	bmi.n	8004176 <__swsetup_r+0x82>
 800411c:	06d0      	lsls	r0, r2, #27
 800411e:	d411      	bmi.n	8004144 <__swsetup_r+0x50>
 8004120:	2209      	movs	r2, #9
 8004122:	6032      	str	r2, [r6, #0]
 8004124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004128:	81a3      	strh	r3, [r4, #12]
 800412a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800412e:	e03e      	b.n	80041ae <__swsetup_r+0xba>
 8004130:	4b25      	ldr	r3, [pc, #148]	; (80041c8 <__swsetup_r+0xd4>)
 8004132:	429c      	cmp	r4, r3
 8004134:	d101      	bne.n	800413a <__swsetup_r+0x46>
 8004136:	68ac      	ldr	r4, [r5, #8]
 8004138:	e7eb      	b.n	8004112 <__swsetup_r+0x1e>
 800413a:	4b24      	ldr	r3, [pc, #144]	; (80041cc <__swsetup_r+0xd8>)
 800413c:	429c      	cmp	r4, r3
 800413e:	bf08      	it	eq
 8004140:	68ec      	ldreq	r4, [r5, #12]
 8004142:	e7e6      	b.n	8004112 <__swsetup_r+0x1e>
 8004144:	0751      	lsls	r1, r2, #29
 8004146:	d512      	bpl.n	800416e <__swsetup_r+0x7a>
 8004148:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800414a:	b141      	cbz	r1, 800415e <__swsetup_r+0x6a>
 800414c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004150:	4299      	cmp	r1, r3
 8004152:	d002      	beq.n	800415a <__swsetup_r+0x66>
 8004154:	4630      	mov	r0, r6
 8004156:	f000 fa21 	bl	800459c <_free_r>
 800415a:	2300      	movs	r3, #0
 800415c:	6363      	str	r3, [r4, #52]	; 0x34
 800415e:	89a3      	ldrh	r3, [r4, #12]
 8004160:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004164:	81a3      	strh	r3, [r4, #12]
 8004166:	2300      	movs	r3, #0
 8004168:	6063      	str	r3, [r4, #4]
 800416a:	6923      	ldr	r3, [r4, #16]
 800416c:	6023      	str	r3, [r4, #0]
 800416e:	89a3      	ldrh	r3, [r4, #12]
 8004170:	f043 0308 	orr.w	r3, r3, #8
 8004174:	81a3      	strh	r3, [r4, #12]
 8004176:	6923      	ldr	r3, [r4, #16]
 8004178:	b94b      	cbnz	r3, 800418e <__swsetup_r+0x9a>
 800417a:	89a3      	ldrh	r3, [r4, #12]
 800417c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004184:	d003      	beq.n	800418e <__swsetup_r+0x9a>
 8004186:	4621      	mov	r1, r4
 8004188:	4630      	mov	r0, r6
 800418a:	f000 f9bf 	bl	800450c <__smakebuf_r>
 800418e:	89a2      	ldrh	r2, [r4, #12]
 8004190:	f012 0301 	ands.w	r3, r2, #1
 8004194:	d00c      	beq.n	80041b0 <__swsetup_r+0xbc>
 8004196:	2300      	movs	r3, #0
 8004198:	60a3      	str	r3, [r4, #8]
 800419a:	6963      	ldr	r3, [r4, #20]
 800419c:	425b      	negs	r3, r3
 800419e:	61a3      	str	r3, [r4, #24]
 80041a0:	6923      	ldr	r3, [r4, #16]
 80041a2:	b953      	cbnz	r3, 80041ba <__swsetup_r+0xc6>
 80041a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041a8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80041ac:	d1ba      	bne.n	8004124 <__swsetup_r+0x30>
 80041ae:	bd70      	pop	{r4, r5, r6, pc}
 80041b0:	0792      	lsls	r2, r2, #30
 80041b2:	bf58      	it	pl
 80041b4:	6963      	ldrpl	r3, [r4, #20]
 80041b6:	60a3      	str	r3, [r4, #8]
 80041b8:	e7f2      	b.n	80041a0 <__swsetup_r+0xac>
 80041ba:	2000      	movs	r0, #0
 80041bc:	e7f7      	b.n	80041ae <__swsetup_r+0xba>
 80041be:	bf00      	nop
 80041c0:	20000010 	.word	0x20000010
 80041c4:	08004e80 	.word	0x08004e80
 80041c8:	08004ea0 	.word	0x08004ea0
 80041cc:	08004e60 	.word	0x08004e60

080041d0 <__sflush_r>:
 80041d0:	898a      	ldrh	r2, [r1, #12]
 80041d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041d6:	4605      	mov	r5, r0
 80041d8:	0710      	lsls	r0, r2, #28
 80041da:	460c      	mov	r4, r1
 80041dc:	d458      	bmi.n	8004290 <__sflush_r+0xc0>
 80041de:	684b      	ldr	r3, [r1, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	dc05      	bgt.n	80041f0 <__sflush_r+0x20>
 80041e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	dc02      	bgt.n	80041f0 <__sflush_r+0x20>
 80041ea:	2000      	movs	r0, #0
 80041ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041f2:	2e00      	cmp	r6, #0
 80041f4:	d0f9      	beq.n	80041ea <__sflush_r+0x1a>
 80041f6:	2300      	movs	r3, #0
 80041f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80041fc:	682f      	ldr	r7, [r5, #0]
 80041fe:	6a21      	ldr	r1, [r4, #32]
 8004200:	602b      	str	r3, [r5, #0]
 8004202:	d032      	beq.n	800426a <__sflush_r+0x9a>
 8004204:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004206:	89a3      	ldrh	r3, [r4, #12]
 8004208:	075a      	lsls	r2, r3, #29
 800420a:	d505      	bpl.n	8004218 <__sflush_r+0x48>
 800420c:	6863      	ldr	r3, [r4, #4]
 800420e:	1ac0      	subs	r0, r0, r3
 8004210:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004212:	b10b      	cbz	r3, 8004218 <__sflush_r+0x48>
 8004214:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004216:	1ac0      	subs	r0, r0, r3
 8004218:	2300      	movs	r3, #0
 800421a:	4602      	mov	r2, r0
 800421c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800421e:	6a21      	ldr	r1, [r4, #32]
 8004220:	4628      	mov	r0, r5
 8004222:	47b0      	blx	r6
 8004224:	1c43      	adds	r3, r0, #1
 8004226:	89a3      	ldrh	r3, [r4, #12]
 8004228:	d106      	bne.n	8004238 <__sflush_r+0x68>
 800422a:	6829      	ldr	r1, [r5, #0]
 800422c:	291d      	cmp	r1, #29
 800422e:	d848      	bhi.n	80042c2 <__sflush_r+0xf2>
 8004230:	4a29      	ldr	r2, [pc, #164]	; (80042d8 <__sflush_r+0x108>)
 8004232:	40ca      	lsrs	r2, r1
 8004234:	07d6      	lsls	r6, r2, #31
 8004236:	d544      	bpl.n	80042c2 <__sflush_r+0xf2>
 8004238:	2200      	movs	r2, #0
 800423a:	6062      	str	r2, [r4, #4]
 800423c:	04d9      	lsls	r1, r3, #19
 800423e:	6922      	ldr	r2, [r4, #16]
 8004240:	6022      	str	r2, [r4, #0]
 8004242:	d504      	bpl.n	800424e <__sflush_r+0x7e>
 8004244:	1c42      	adds	r2, r0, #1
 8004246:	d101      	bne.n	800424c <__sflush_r+0x7c>
 8004248:	682b      	ldr	r3, [r5, #0]
 800424a:	b903      	cbnz	r3, 800424e <__sflush_r+0x7e>
 800424c:	6560      	str	r0, [r4, #84]	; 0x54
 800424e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004250:	602f      	str	r7, [r5, #0]
 8004252:	2900      	cmp	r1, #0
 8004254:	d0c9      	beq.n	80041ea <__sflush_r+0x1a>
 8004256:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800425a:	4299      	cmp	r1, r3
 800425c:	d002      	beq.n	8004264 <__sflush_r+0x94>
 800425e:	4628      	mov	r0, r5
 8004260:	f000 f99c 	bl	800459c <_free_r>
 8004264:	2000      	movs	r0, #0
 8004266:	6360      	str	r0, [r4, #52]	; 0x34
 8004268:	e7c0      	b.n	80041ec <__sflush_r+0x1c>
 800426a:	2301      	movs	r3, #1
 800426c:	4628      	mov	r0, r5
 800426e:	47b0      	blx	r6
 8004270:	1c41      	adds	r1, r0, #1
 8004272:	d1c8      	bne.n	8004206 <__sflush_r+0x36>
 8004274:	682b      	ldr	r3, [r5, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d0c5      	beq.n	8004206 <__sflush_r+0x36>
 800427a:	2b1d      	cmp	r3, #29
 800427c:	d001      	beq.n	8004282 <__sflush_r+0xb2>
 800427e:	2b16      	cmp	r3, #22
 8004280:	d101      	bne.n	8004286 <__sflush_r+0xb6>
 8004282:	602f      	str	r7, [r5, #0]
 8004284:	e7b1      	b.n	80041ea <__sflush_r+0x1a>
 8004286:	89a3      	ldrh	r3, [r4, #12]
 8004288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800428c:	81a3      	strh	r3, [r4, #12]
 800428e:	e7ad      	b.n	80041ec <__sflush_r+0x1c>
 8004290:	690f      	ldr	r7, [r1, #16]
 8004292:	2f00      	cmp	r7, #0
 8004294:	d0a9      	beq.n	80041ea <__sflush_r+0x1a>
 8004296:	0793      	lsls	r3, r2, #30
 8004298:	680e      	ldr	r6, [r1, #0]
 800429a:	bf08      	it	eq
 800429c:	694b      	ldreq	r3, [r1, #20]
 800429e:	600f      	str	r7, [r1, #0]
 80042a0:	bf18      	it	ne
 80042a2:	2300      	movne	r3, #0
 80042a4:	eba6 0807 	sub.w	r8, r6, r7
 80042a8:	608b      	str	r3, [r1, #8]
 80042aa:	f1b8 0f00 	cmp.w	r8, #0
 80042ae:	dd9c      	ble.n	80041ea <__sflush_r+0x1a>
 80042b0:	4643      	mov	r3, r8
 80042b2:	463a      	mov	r2, r7
 80042b4:	6a21      	ldr	r1, [r4, #32]
 80042b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80042b8:	4628      	mov	r0, r5
 80042ba:	47b0      	blx	r6
 80042bc:	2800      	cmp	r0, #0
 80042be:	dc06      	bgt.n	80042ce <__sflush_r+0xfe>
 80042c0:	89a3      	ldrh	r3, [r4, #12]
 80042c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042c6:	81a3      	strh	r3, [r4, #12]
 80042c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042cc:	e78e      	b.n	80041ec <__sflush_r+0x1c>
 80042ce:	4407      	add	r7, r0
 80042d0:	eba8 0800 	sub.w	r8, r8, r0
 80042d4:	e7e9      	b.n	80042aa <__sflush_r+0xda>
 80042d6:	bf00      	nop
 80042d8:	20400001 	.word	0x20400001

080042dc <_fflush_r>:
 80042dc:	b538      	push	{r3, r4, r5, lr}
 80042de:	690b      	ldr	r3, [r1, #16]
 80042e0:	4605      	mov	r5, r0
 80042e2:	460c      	mov	r4, r1
 80042e4:	b1db      	cbz	r3, 800431e <_fflush_r+0x42>
 80042e6:	b118      	cbz	r0, 80042f0 <_fflush_r+0x14>
 80042e8:	6983      	ldr	r3, [r0, #24]
 80042ea:	b90b      	cbnz	r3, 80042f0 <_fflush_r+0x14>
 80042ec:	f000 f860 	bl	80043b0 <__sinit>
 80042f0:	4b0c      	ldr	r3, [pc, #48]	; (8004324 <_fflush_r+0x48>)
 80042f2:	429c      	cmp	r4, r3
 80042f4:	d109      	bne.n	800430a <_fflush_r+0x2e>
 80042f6:	686c      	ldr	r4, [r5, #4]
 80042f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042fc:	b17b      	cbz	r3, 800431e <_fflush_r+0x42>
 80042fe:	4621      	mov	r1, r4
 8004300:	4628      	mov	r0, r5
 8004302:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004306:	f7ff bf63 	b.w	80041d0 <__sflush_r>
 800430a:	4b07      	ldr	r3, [pc, #28]	; (8004328 <_fflush_r+0x4c>)
 800430c:	429c      	cmp	r4, r3
 800430e:	d101      	bne.n	8004314 <_fflush_r+0x38>
 8004310:	68ac      	ldr	r4, [r5, #8]
 8004312:	e7f1      	b.n	80042f8 <_fflush_r+0x1c>
 8004314:	4b05      	ldr	r3, [pc, #20]	; (800432c <_fflush_r+0x50>)
 8004316:	429c      	cmp	r4, r3
 8004318:	bf08      	it	eq
 800431a:	68ec      	ldreq	r4, [r5, #12]
 800431c:	e7ec      	b.n	80042f8 <_fflush_r+0x1c>
 800431e:	2000      	movs	r0, #0
 8004320:	bd38      	pop	{r3, r4, r5, pc}
 8004322:	bf00      	nop
 8004324:	08004e80 	.word	0x08004e80
 8004328:	08004ea0 	.word	0x08004ea0
 800432c:	08004e60 	.word	0x08004e60

08004330 <std>:
 8004330:	2300      	movs	r3, #0
 8004332:	b510      	push	{r4, lr}
 8004334:	4604      	mov	r4, r0
 8004336:	e9c0 3300 	strd	r3, r3, [r0]
 800433a:	6083      	str	r3, [r0, #8]
 800433c:	8181      	strh	r1, [r0, #12]
 800433e:	6643      	str	r3, [r0, #100]	; 0x64
 8004340:	81c2      	strh	r2, [r0, #14]
 8004342:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004346:	6183      	str	r3, [r0, #24]
 8004348:	4619      	mov	r1, r3
 800434a:	2208      	movs	r2, #8
 800434c:	305c      	adds	r0, #92	; 0x5c
 800434e:	f7ff fdb1 	bl	8003eb4 <memset>
 8004352:	4b05      	ldr	r3, [pc, #20]	; (8004368 <std+0x38>)
 8004354:	6263      	str	r3, [r4, #36]	; 0x24
 8004356:	4b05      	ldr	r3, [pc, #20]	; (800436c <std+0x3c>)
 8004358:	62a3      	str	r3, [r4, #40]	; 0x28
 800435a:	4b05      	ldr	r3, [pc, #20]	; (8004370 <std+0x40>)
 800435c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800435e:	4b05      	ldr	r3, [pc, #20]	; (8004374 <std+0x44>)
 8004360:	6224      	str	r4, [r4, #32]
 8004362:	6323      	str	r3, [r4, #48]	; 0x30
 8004364:	bd10      	pop	{r4, pc}
 8004366:	bf00      	nop
 8004368:	08004c9d 	.word	0x08004c9d
 800436c:	08004cbf 	.word	0x08004cbf
 8004370:	08004cf7 	.word	0x08004cf7
 8004374:	08004d1b 	.word	0x08004d1b

08004378 <_cleanup_r>:
 8004378:	4901      	ldr	r1, [pc, #4]	; (8004380 <_cleanup_r+0x8>)
 800437a:	f000 b885 	b.w	8004488 <_fwalk_reent>
 800437e:	bf00      	nop
 8004380:	080042dd 	.word	0x080042dd

08004384 <__sfmoreglue>:
 8004384:	b570      	push	{r4, r5, r6, lr}
 8004386:	1e4a      	subs	r2, r1, #1
 8004388:	2568      	movs	r5, #104	; 0x68
 800438a:	4355      	muls	r5, r2
 800438c:	460e      	mov	r6, r1
 800438e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004392:	f000 f951 	bl	8004638 <_malloc_r>
 8004396:	4604      	mov	r4, r0
 8004398:	b140      	cbz	r0, 80043ac <__sfmoreglue+0x28>
 800439a:	2100      	movs	r1, #0
 800439c:	e9c0 1600 	strd	r1, r6, [r0]
 80043a0:	300c      	adds	r0, #12
 80043a2:	60a0      	str	r0, [r4, #8]
 80043a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80043a8:	f7ff fd84 	bl	8003eb4 <memset>
 80043ac:	4620      	mov	r0, r4
 80043ae:	bd70      	pop	{r4, r5, r6, pc}

080043b0 <__sinit>:
 80043b0:	6983      	ldr	r3, [r0, #24]
 80043b2:	b510      	push	{r4, lr}
 80043b4:	4604      	mov	r4, r0
 80043b6:	bb33      	cbnz	r3, 8004406 <__sinit+0x56>
 80043b8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80043bc:	6503      	str	r3, [r0, #80]	; 0x50
 80043be:	4b12      	ldr	r3, [pc, #72]	; (8004408 <__sinit+0x58>)
 80043c0:	4a12      	ldr	r2, [pc, #72]	; (800440c <__sinit+0x5c>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6282      	str	r2, [r0, #40]	; 0x28
 80043c6:	4298      	cmp	r0, r3
 80043c8:	bf04      	itt	eq
 80043ca:	2301      	moveq	r3, #1
 80043cc:	6183      	streq	r3, [r0, #24]
 80043ce:	f000 f81f 	bl	8004410 <__sfp>
 80043d2:	6060      	str	r0, [r4, #4]
 80043d4:	4620      	mov	r0, r4
 80043d6:	f000 f81b 	bl	8004410 <__sfp>
 80043da:	60a0      	str	r0, [r4, #8]
 80043dc:	4620      	mov	r0, r4
 80043de:	f000 f817 	bl	8004410 <__sfp>
 80043e2:	2200      	movs	r2, #0
 80043e4:	60e0      	str	r0, [r4, #12]
 80043e6:	2104      	movs	r1, #4
 80043e8:	6860      	ldr	r0, [r4, #4]
 80043ea:	f7ff ffa1 	bl	8004330 <std>
 80043ee:	2201      	movs	r2, #1
 80043f0:	2109      	movs	r1, #9
 80043f2:	68a0      	ldr	r0, [r4, #8]
 80043f4:	f7ff ff9c 	bl	8004330 <std>
 80043f8:	2202      	movs	r2, #2
 80043fa:	2112      	movs	r1, #18
 80043fc:	68e0      	ldr	r0, [r4, #12]
 80043fe:	f7ff ff97 	bl	8004330 <std>
 8004402:	2301      	movs	r3, #1
 8004404:	61a3      	str	r3, [r4, #24]
 8004406:	bd10      	pop	{r4, pc}
 8004408:	08004e5c 	.word	0x08004e5c
 800440c:	08004379 	.word	0x08004379

08004410 <__sfp>:
 8004410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004412:	4b1b      	ldr	r3, [pc, #108]	; (8004480 <__sfp+0x70>)
 8004414:	681e      	ldr	r6, [r3, #0]
 8004416:	69b3      	ldr	r3, [r6, #24]
 8004418:	4607      	mov	r7, r0
 800441a:	b913      	cbnz	r3, 8004422 <__sfp+0x12>
 800441c:	4630      	mov	r0, r6
 800441e:	f7ff ffc7 	bl	80043b0 <__sinit>
 8004422:	3648      	adds	r6, #72	; 0x48
 8004424:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004428:	3b01      	subs	r3, #1
 800442a:	d503      	bpl.n	8004434 <__sfp+0x24>
 800442c:	6833      	ldr	r3, [r6, #0]
 800442e:	b133      	cbz	r3, 800443e <__sfp+0x2e>
 8004430:	6836      	ldr	r6, [r6, #0]
 8004432:	e7f7      	b.n	8004424 <__sfp+0x14>
 8004434:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004438:	b16d      	cbz	r5, 8004456 <__sfp+0x46>
 800443a:	3468      	adds	r4, #104	; 0x68
 800443c:	e7f4      	b.n	8004428 <__sfp+0x18>
 800443e:	2104      	movs	r1, #4
 8004440:	4638      	mov	r0, r7
 8004442:	f7ff ff9f 	bl	8004384 <__sfmoreglue>
 8004446:	6030      	str	r0, [r6, #0]
 8004448:	2800      	cmp	r0, #0
 800444a:	d1f1      	bne.n	8004430 <__sfp+0x20>
 800444c:	230c      	movs	r3, #12
 800444e:	603b      	str	r3, [r7, #0]
 8004450:	4604      	mov	r4, r0
 8004452:	4620      	mov	r0, r4
 8004454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004456:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <__sfp+0x74>)
 8004458:	6665      	str	r5, [r4, #100]	; 0x64
 800445a:	e9c4 5500 	strd	r5, r5, [r4]
 800445e:	60a5      	str	r5, [r4, #8]
 8004460:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004464:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004468:	2208      	movs	r2, #8
 800446a:	4629      	mov	r1, r5
 800446c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004470:	f7ff fd20 	bl	8003eb4 <memset>
 8004474:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004478:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800447c:	e7e9      	b.n	8004452 <__sfp+0x42>
 800447e:	bf00      	nop
 8004480:	08004e5c 	.word	0x08004e5c
 8004484:	ffff0001 	.word	0xffff0001

08004488 <_fwalk_reent>:
 8004488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800448c:	4680      	mov	r8, r0
 800448e:	4689      	mov	r9, r1
 8004490:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004494:	2600      	movs	r6, #0
 8004496:	b914      	cbnz	r4, 800449e <_fwalk_reent+0x16>
 8004498:	4630      	mov	r0, r6
 800449a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800449e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80044a2:	3f01      	subs	r7, #1
 80044a4:	d501      	bpl.n	80044aa <_fwalk_reent+0x22>
 80044a6:	6824      	ldr	r4, [r4, #0]
 80044a8:	e7f5      	b.n	8004496 <_fwalk_reent+0xe>
 80044aa:	89ab      	ldrh	r3, [r5, #12]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d907      	bls.n	80044c0 <_fwalk_reent+0x38>
 80044b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80044b4:	3301      	adds	r3, #1
 80044b6:	d003      	beq.n	80044c0 <_fwalk_reent+0x38>
 80044b8:	4629      	mov	r1, r5
 80044ba:	4640      	mov	r0, r8
 80044bc:	47c8      	blx	r9
 80044be:	4306      	orrs	r6, r0
 80044c0:	3568      	adds	r5, #104	; 0x68
 80044c2:	e7ee      	b.n	80044a2 <_fwalk_reent+0x1a>

080044c4 <__swhatbuf_r>:
 80044c4:	b570      	push	{r4, r5, r6, lr}
 80044c6:	460e      	mov	r6, r1
 80044c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044cc:	2900      	cmp	r1, #0
 80044ce:	b096      	sub	sp, #88	; 0x58
 80044d0:	4614      	mov	r4, r2
 80044d2:	461d      	mov	r5, r3
 80044d4:	da07      	bge.n	80044e6 <__swhatbuf_r+0x22>
 80044d6:	2300      	movs	r3, #0
 80044d8:	602b      	str	r3, [r5, #0]
 80044da:	89b3      	ldrh	r3, [r6, #12]
 80044dc:	061a      	lsls	r2, r3, #24
 80044de:	d410      	bmi.n	8004502 <__swhatbuf_r+0x3e>
 80044e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044e4:	e00e      	b.n	8004504 <__swhatbuf_r+0x40>
 80044e6:	466a      	mov	r2, sp
 80044e8:	f000 fc3e 	bl	8004d68 <_fstat_r>
 80044ec:	2800      	cmp	r0, #0
 80044ee:	dbf2      	blt.n	80044d6 <__swhatbuf_r+0x12>
 80044f0:	9a01      	ldr	r2, [sp, #4]
 80044f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80044f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80044fa:	425a      	negs	r2, r3
 80044fc:	415a      	adcs	r2, r3
 80044fe:	602a      	str	r2, [r5, #0]
 8004500:	e7ee      	b.n	80044e0 <__swhatbuf_r+0x1c>
 8004502:	2340      	movs	r3, #64	; 0x40
 8004504:	2000      	movs	r0, #0
 8004506:	6023      	str	r3, [r4, #0]
 8004508:	b016      	add	sp, #88	; 0x58
 800450a:	bd70      	pop	{r4, r5, r6, pc}

0800450c <__smakebuf_r>:
 800450c:	898b      	ldrh	r3, [r1, #12]
 800450e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004510:	079d      	lsls	r5, r3, #30
 8004512:	4606      	mov	r6, r0
 8004514:	460c      	mov	r4, r1
 8004516:	d507      	bpl.n	8004528 <__smakebuf_r+0x1c>
 8004518:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800451c:	6023      	str	r3, [r4, #0]
 800451e:	6123      	str	r3, [r4, #16]
 8004520:	2301      	movs	r3, #1
 8004522:	6163      	str	r3, [r4, #20]
 8004524:	b002      	add	sp, #8
 8004526:	bd70      	pop	{r4, r5, r6, pc}
 8004528:	ab01      	add	r3, sp, #4
 800452a:	466a      	mov	r2, sp
 800452c:	f7ff ffca 	bl	80044c4 <__swhatbuf_r>
 8004530:	9900      	ldr	r1, [sp, #0]
 8004532:	4605      	mov	r5, r0
 8004534:	4630      	mov	r0, r6
 8004536:	f000 f87f 	bl	8004638 <_malloc_r>
 800453a:	b948      	cbnz	r0, 8004550 <__smakebuf_r+0x44>
 800453c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004540:	059a      	lsls	r2, r3, #22
 8004542:	d4ef      	bmi.n	8004524 <__smakebuf_r+0x18>
 8004544:	f023 0303 	bic.w	r3, r3, #3
 8004548:	f043 0302 	orr.w	r3, r3, #2
 800454c:	81a3      	strh	r3, [r4, #12]
 800454e:	e7e3      	b.n	8004518 <__smakebuf_r+0xc>
 8004550:	4b0d      	ldr	r3, [pc, #52]	; (8004588 <__smakebuf_r+0x7c>)
 8004552:	62b3      	str	r3, [r6, #40]	; 0x28
 8004554:	89a3      	ldrh	r3, [r4, #12]
 8004556:	6020      	str	r0, [r4, #0]
 8004558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800455c:	81a3      	strh	r3, [r4, #12]
 800455e:	9b00      	ldr	r3, [sp, #0]
 8004560:	6163      	str	r3, [r4, #20]
 8004562:	9b01      	ldr	r3, [sp, #4]
 8004564:	6120      	str	r0, [r4, #16]
 8004566:	b15b      	cbz	r3, 8004580 <__smakebuf_r+0x74>
 8004568:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800456c:	4630      	mov	r0, r6
 800456e:	f000 fc0d 	bl	8004d8c <_isatty_r>
 8004572:	b128      	cbz	r0, 8004580 <__smakebuf_r+0x74>
 8004574:	89a3      	ldrh	r3, [r4, #12]
 8004576:	f023 0303 	bic.w	r3, r3, #3
 800457a:	f043 0301 	orr.w	r3, r3, #1
 800457e:	81a3      	strh	r3, [r4, #12]
 8004580:	89a3      	ldrh	r3, [r4, #12]
 8004582:	431d      	orrs	r5, r3
 8004584:	81a5      	strh	r5, [r4, #12]
 8004586:	e7cd      	b.n	8004524 <__smakebuf_r+0x18>
 8004588:	08004379 	.word	0x08004379

0800458c <malloc>:
 800458c:	4b02      	ldr	r3, [pc, #8]	; (8004598 <malloc+0xc>)
 800458e:	4601      	mov	r1, r0
 8004590:	6818      	ldr	r0, [r3, #0]
 8004592:	f000 b851 	b.w	8004638 <_malloc_r>
 8004596:	bf00      	nop
 8004598:	20000010 	.word	0x20000010

0800459c <_free_r>:
 800459c:	b538      	push	{r3, r4, r5, lr}
 800459e:	4605      	mov	r5, r0
 80045a0:	2900      	cmp	r1, #0
 80045a2:	d045      	beq.n	8004630 <_free_r+0x94>
 80045a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045a8:	1f0c      	subs	r4, r1, #4
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	bfb8      	it	lt
 80045ae:	18e4      	addlt	r4, r4, r3
 80045b0:	f000 fc0e 	bl	8004dd0 <__malloc_lock>
 80045b4:	4a1f      	ldr	r2, [pc, #124]	; (8004634 <_free_r+0x98>)
 80045b6:	6813      	ldr	r3, [r2, #0]
 80045b8:	4610      	mov	r0, r2
 80045ba:	b933      	cbnz	r3, 80045ca <_free_r+0x2e>
 80045bc:	6063      	str	r3, [r4, #4]
 80045be:	6014      	str	r4, [r2, #0]
 80045c0:	4628      	mov	r0, r5
 80045c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045c6:	f000 bc04 	b.w	8004dd2 <__malloc_unlock>
 80045ca:	42a3      	cmp	r3, r4
 80045cc:	d90c      	bls.n	80045e8 <_free_r+0x4c>
 80045ce:	6821      	ldr	r1, [r4, #0]
 80045d0:	1862      	adds	r2, r4, r1
 80045d2:	4293      	cmp	r3, r2
 80045d4:	bf04      	itt	eq
 80045d6:	681a      	ldreq	r2, [r3, #0]
 80045d8:	685b      	ldreq	r3, [r3, #4]
 80045da:	6063      	str	r3, [r4, #4]
 80045dc:	bf04      	itt	eq
 80045de:	1852      	addeq	r2, r2, r1
 80045e0:	6022      	streq	r2, [r4, #0]
 80045e2:	6004      	str	r4, [r0, #0]
 80045e4:	e7ec      	b.n	80045c0 <_free_r+0x24>
 80045e6:	4613      	mov	r3, r2
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	b10a      	cbz	r2, 80045f0 <_free_r+0x54>
 80045ec:	42a2      	cmp	r2, r4
 80045ee:	d9fa      	bls.n	80045e6 <_free_r+0x4a>
 80045f0:	6819      	ldr	r1, [r3, #0]
 80045f2:	1858      	adds	r0, r3, r1
 80045f4:	42a0      	cmp	r0, r4
 80045f6:	d10b      	bne.n	8004610 <_free_r+0x74>
 80045f8:	6820      	ldr	r0, [r4, #0]
 80045fa:	4401      	add	r1, r0
 80045fc:	1858      	adds	r0, r3, r1
 80045fe:	4282      	cmp	r2, r0
 8004600:	6019      	str	r1, [r3, #0]
 8004602:	d1dd      	bne.n	80045c0 <_free_r+0x24>
 8004604:	6810      	ldr	r0, [r2, #0]
 8004606:	6852      	ldr	r2, [r2, #4]
 8004608:	605a      	str	r2, [r3, #4]
 800460a:	4401      	add	r1, r0
 800460c:	6019      	str	r1, [r3, #0]
 800460e:	e7d7      	b.n	80045c0 <_free_r+0x24>
 8004610:	d902      	bls.n	8004618 <_free_r+0x7c>
 8004612:	230c      	movs	r3, #12
 8004614:	602b      	str	r3, [r5, #0]
 8004616:	e7d3      	b.n	80045c0 <_free_r+0x24>
 8004618:	6820      	ldr	r0, [r4, #0]
 800461a:	1821      	adds	r1, r4, r0
 800461c:	428a      	cmp	r2, r1
 800461e:	bf04      	itt	eq
 8004620:	6811      	ldreq	r1, [r2, #0]
 8004622:	6852      	ldreq	r2, [r2, #4]
 8004624:	6062      	str	r2, [r4, #4]
 8004626:	bf04      	itt	eq
 8004628:	1809      	addeq	r1, r1, r0
 800462a:	6021      	streq	r1, [r4, #0]
 800462c:	605c      	str	r4, [r3, #4]
 800462e:	e7c7      	b.n	80045c0 <_free_r+0x24>
 8004630:	bd38      	pop	{r3, r4, r5, pc}
 8004632:	bf00      	nop
 8004634:	20004034 	.word	0x20004034

08004638 <_malloc_r>:
 8004638:	b570      	push	{r4, r5, r6, lr}
 800463a:	1ccd      	adds	r5, r1, #3
 800463c:	f025 0503 	bic.w	r5, r5, #3
 8004640:	3508      	adds	r5, #8
 8004642:	2d0c      	cmp	r5, #12
 8004644:	bf38      	it	cc
 8004646:	250c      	movcc	r5, #12
 8004648:	2d00      	cmp	r5, #0
 800464a:	4606      	mov	r6, r0
 800464c:	db01      	blt.n	8004652 <_malloc_r+0x1a>
 800464e:	42a9      	cmp	r1, r5
 8004650:	d903      	bls.n	800465a <_malloc_r+0x22>
 8004652:	230c      	movs	r3, #12
 8004654:	6033      	str	r3, [r6, #0]
 8004656:	2000      	movs	r0, #0
 8004658:	bd70      	pop	{r4, r5, r6, pc}
 800465a:	f000 fbb9 	bl	8004dd0 <__malloc_lock>
 800465e:	4a21      	ldr	r2, [pc, #132]	; (80046e4 <_malloc_r+0xac>)
 8004660:	6814      	ldr	r4, [r2, #0]
 8004662:	4621      	mov	r1, r4
 8004664:	b991      	cbnz	r1, 800468c <_malloc_r+0x54>
 8004666:	4c20      	ldr	r4, [pc, #128]	; (80046e8 <_malloc_r+0xb0>)
 8004668:	6823      	ldr	r3, [r4, #0]
 800466a:	b91b      	cbnz	r3, 8004674 <_malloc_r+0x3c>
 800466c:	4630      	mov	r0, r6
 800466e:	f000 fb05 	bl	8004c7c <_sbrk_r>
 8004672:	6020      	str	r0, [r4, #0]
 8004674:	4629      	mov	r1, r5
 8004676:	4630      	mov	r0, r6
 8004678:	f000 fb00 	bl	8004c7c <_sbrk_r>
 800467c:	1c43      	adds	r3, r0, #1
 800467e:	d124      	bne.n	80046ca <_malloc_r+0x92>
 8004680:	230c      	movs	r3, #12
 8004682:	6033      	str	r3, [r6, #0]
 8004684:	4630      	mov	r0, r6
 8004686:	f000 fba4 	bl	8004dd2 <__malloc_unlock>
 800468a:	e7e4      	b.n	8004656 <_malloc_r+0x1e>
 800468c:	680b      	ldr	r3, [r1, #0]
 800468e:	1b5b      	subs	r3, r3, r5
 8004690:	d418      	bmi.n	80046c4 <_malloc_r+0x8c>
 8004692:	2b0b      	cmp	r3, #11
 8004694:	d90f      	bls.n	80046b6 <_malloc_r+0x7e>
 8004696:	600b      	str	r3, [r1, #0]
 8004698:	50cd      	str	r5, [r1, r3]
 800469a:	18cc      	adds	r4, r1, r3
 800469c:	4630      	mov	r0, r6
 800469e:	f000 fb98 	bl	8004dd2 <__malloc_unlock>
 80046a2:	f104 000b 	add.w	r0, r4, #11
 80046a6:	1d23      	adds	r3, r4, #4
 80046a8:	f020 0007 	bic.w	r0, r0, #7
 80046ac:	1ac3      	subs	r3, r0, r3
 80046ae:	d0d3      	beq.n	8004658 <_malloc_r+0x20>
 80046b0:	425a      	negs	r2, r3
 80046b2:	50e2      	str	r2, [r4, r3]
 80046b4:	e7d0      	b.n	8004658 <_malloc_r+0x20>
 80046b6:	428c      	cmp	r4, r1
 80046b8:	684b      	ldr	r3, [r1, #4]
 80046ba:	bf16      	itet	ne
 80046bc:	6063      	strne	r3, [r4, #4]
 80046be:	6013      	streq	r3, [r2, #0]
 80046c0:	460c      	movne	r4, r1
 80046c2:	e7eb      	b.n	800469c <_malloc_r+0x64>
 80046c4:	460c      	mov	r4, r1
 80046c6:	6849      	ldr	r1, [r1, #4]
 80046c8:	e7cc      	b.n	8004664 <_malloc_r+0x2c>
 80046ca:	1cc4      	adds	r4, r0, #3
 80046cc:	f024 0403 	bic.w	r4, r4, #3
 80046d0:	42a0      	cmp	r0, r4
 80046d2:	d005      	beq.n	80046e0 <_malloc_r+0xa8>
 80046d4:	1a21      	subs	r1, r4, r0
 80046d6:	4630      	mov	r0, r6
 80046d8:	f000 fad0 	bl	8004c7c <_sbrk_r>
 80046dc:	3001      	adds	r0, #1
 80046de:	d0cf      	beq.n	8004680 <_malloc_r+0x48>
 80046e0:	6025      	str	r5, [r4, #0]
 80046e2:	e7db      	b.n	800469c <_malloc_r+0x64>
 80046e4:	20004034 	.word	0x20004034
 80046e8:	20004038 	.word	0x20004038

080046ec <__sfputc_r>:
 80046ec:	6893      	ldr	r3, [r2, #8]
 80046ee:	3b01      	subs	r3, #1
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	b410      	push	{r4}
 80046f4:	6093      	str	r3, [r2, #8]
 80046f6:	da08      	bge.n	800470a <__sfputc_r+0x1e>
 80046f8:	6994      	ldr	r4, [r2, #24]
 80046fa:	42a3      	cmp	r3, r4
 80046fc:	db01      	blt.n	8004702 <__sfputc_r+0x16>
 80046fe:	290a      	cmp	r1, #10
 8004700:	d103      	bne.n	800470a <__sfputc_r+0x1e>
 8004702:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004706:	f7ff bca3 	b.w	8004050 <__swbuf_r>
 800470a:	6813      	ldr	r3, [r2, #0]
 800470c:	1c58      	adds	r0, r3, #1
 800470e:	6010      	str	r0, [r2, #0]
 8004710:	7019      	strb	r1, [r3, #0]
 8004712:	4608      	mov	r0, r1
 8004714:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004718:	4770      	bx	lr

0800471a <__sfputs_r>:
 800471a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800471c:	4606      	mov	r6, r0
 800471e:	460f      	mov	r7, r1
 8004720:	4614      	mov	r4, r2
 8004722:	18d5      	adds	r5, r2, r3
 8004724:	42ac      	cmp	r4, r5
 8004726:	d101      	bne.n	800472c <__sfputs_r+0x12>
 8004728:	2000      	movs	r0, #0
 800472a:	e007      	b.n	800473c <__sfputs_r+0x22>
 800472c:	463a      	mov	r2, r7
 800472e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004732:	4630      	mov	r0, r6
 8004734:	f7ff ffda 	bl	80046ec <__sfputc_r>
 8004738:	1c43      	adds	r3, r0, #1
 800473a:	d1f3      	bne.n	8004724 <__sfputs_r+0xa>
 800473c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004740 <_vfiprintf_r>:
 8004740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004744:	460c      	mov	r4, r1
 8004746:	b09d      	sub	sp, #116	; 0x74
 8004748:	4617      	mov	r7, r2
 800474a:	461d      	mov	r5, r3
 800474c:	4606      	mov	r6, r0
 800474e:	b118      	cbz	r0, 8004758 <_vfiprintf_r+0x18>
 8004750:	6983      	ldr	r3, [r0, #24]
 8004752:	b90b      	cbnz	r3, 8004758 <_vfiprintf_r+0x18>
 8004754:	f7ff fe2c 	bl	80043b0 <__sinit>
 8004758:	4b7c      	ldr	r3, [pc, #496]	; (800494c <_vfiprintf_r+0x20c>)
 800475a:	429c      	cmp	r4, r3
 800475c:	d158      	bne.n	8004810 <_vfiprintf_r+0xd0>
 800475e:	6874      	ldr	r4, [r6, #4]
 8004760:	89a3      	ldrh	r3, [r4, #12]
 8004762:	0718      	lsls	r0, r3, #28
 8004764:	d55e      	bpl.n	8004824 <_vfiprintf_r+0xe4>
 8004766:	6923      	ldr	r3, [r4, #16]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d05b      	beq.n	8004824 <_vfiprintf_r+0xe4>
 800476c:	2300      	movs	r3, #0
 800476e:	9309      	str	r3, [sp, #36]	; 0x24
 8004770:	2320      	movs	r3, #32
 8004772:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004776:	2330      	movs	r3, #48	; 0x30
 8004778:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800477c:	9503      	str	r5, [sp, #12]
 800477e:	f04f 0b01 	mov.w	fp, #1
 8004782:	46b8      	mov	r8, r7
 8004784:	4645      	mov	r5, r8
 8004786:	f815 3b01 	ldrb.w	r3, [r5], #1
 800478a:	b10b      	cbz	r3, 8004790 <_vfiprintf_r+0x50>
 800478c:	2b25      	cmp	r3, #37	; 0x25
 800478e:	d154      	bne.n	800483a <_vfiprintf_r+0xfa>
 8004790:	ebb8 0a07 	subs.w	sl, r8, r7
 8004794:	d00b      	beq.n	80047ae <_vfiprintf_r+0x6e>
 8004796:	4653      	mov	r3, sl
 8004798:	463a      	mov	r2, r7
 800479a:	4621      	mov	r1, r4
 800479c:	4630      	mov	r0, r6
 800479e:	f7ff ffbc 	bl	800471a <__sfputs_r>
 80047a2:	3001      	adds	r0, #1
 80047a4:	f000 80c2 	beq.w	800492c <_vfiprintf_r+0x1ec>
 80047a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047aa:	4453      	add	r3, sl
 80047ac:	9309      	str	r3, [sp, #36]	; 0x24
 80047ae:	f898 3000 	ldrb.w	r3, [r8]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	f000 80ba 	beq.w	800492c <_vfiprintf_r+0x1ec>
 80047b8:	2300      	movs	r3, #0
 80047ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047c2:	9304      	str	r3, [sp, #16]
 80047c4:	9307      	str	r3, [sp, #28]
 80047c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80047ca:	931a      	str	r3, [sp, #104]	; 0x68
 80047cc:	46a8      	mov	r8, r5
 80047ce:	2205      	movs	r2, #5
 80047d0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80047d4:	485e      	ldr	r0, [pc, #376]	; (8004950 <_vfiprintf_r+0x210>)
 80047d6:	f7fb fd03 	bl	80001e0 <memchr>
 80047da:	9b04      	ldr	r3, [sp, #16]
 80047dc:	bb78      	cbnz	r0, 800483e <_vfiprintf_r+0xfe>
 80047de:	06d9      	lsls	r1, r3, #27
 80047e0:	bf44      	itt	mi
 80047e2:	2220      	movmi	r2, #32
 80047e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80047e8:	071a      	lsls	r2, r3, #28
 80047ea:	bf44      	itt	mi
 80047ec:	222b      	movmi	r2, #43	; 0x2b
 80047ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80047f2:	782a      	ldrb	r2, [r5, #0]
 80047f4:	2a2a      	cmp	r2, #42	; 0x2a
 80047f6:	d02a      	beq.n	800484e <_vfiprintf_r+0x10e>
 80047f8:	9a07      	ldr	r2, [sp, #28]
 80047fa:	46a8      	mov	r8, r5
 80047fc:	2000      	movs	r0, #0
 80047fe:	250a      	movs	r5, #10
 8004800:	4641      	mov	r1, r8
 8004802:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004806:	3b30      	subs	r3, #48	; 0x30
 8004808:	2b09      	cmp	r3, #9
 800480a:	d969      	bls.n	80048e0 <_vfiprintf_r+0x1a0>
 800480c:	b360      	cbz	r0, 8004868 <_vfiprintf_r+0x128>
 800480e:	e024      	b.n	800485a <_vfiprintf_r+0x11a>
 8004810:	4b50      	ldr	r3, [pc, #320]	; (8004954 <_vfiprintf_r+0x214>)
 8004812:	429c      	cmp	r4, r3
 8004814:	d101      	bne.n	800481a <_vfiprintf_r+0xda>
 8004816:	68b4      	ldr	r4, [r6, #8]
 8004818:	e7a2      	b.n	8004760 <_vfiprintf_r+0x20>
 800481a:	4b4f      	ldr	r3, [pc, #316]	; (8004958 <_vfiprintf_r+0x218>)
 800481c:	429c      	cmp	r4, r3
 800481e:	bf08      	it	eq
 8004820:	68f4      	ldreq	r4, [r6, #12]
 8004822:	e79d      	b.n	8004760 <_vfiprintf_r+0x20>
 8004824:	4621      	mov	r1, r4
 8004826:	4630      	mov	r0, r6
 8004828:	f7ff fc64 	bl	80040f4 <__swsetup_r>
 800482c:	2800      	cmp	r0, #0
 800482e:	d09d      	beq.n	800476c <_vfiprintf_r+0x2c>
 8004830:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004834:	b01d      	add	sp, #116	; 0x74
 8004836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800483a:	46a8      	mov	r8, r5
 800483c:	e7a2      	b.n	8004784 <_vfiprintf_r+0x44>
 800483e:	4a44      	ldr	r2, [pc, #272]	; (8004950 <_vfiprintf_r+0x210>)
 8004840:	1a80      	subs	r0, r0, r2
 8004842:	fa0b f000 	lsl.w	r0, fp, r0
 8004846:	4318      	orrs	r0, r3
 8004848:	9004      	str	r0, [sp, #16]
 800484a:	4645      	mov	r5, r8
 800484c:	e7be      	b.n	80047cc <_vfiprintf_r+0x8c>
 800484e:	9a03      	ldr	r2, [sp, #12]
 8004850:	1d11      	adds	r1, r2, #4
 8004852:	6812      	ldr	r2, [r2, #0]
 8004854:	9103      	str	r1, [sp, #12]
 8004856:	2a00      	cmp	r2, #0
 8004858:	db01      	blt.n	800485e <_vfiprintf_r+0x11e>
 800485a:	9207      	str	r2, [sp, #28]
 800485c:	e004      	b.n	8004868 <_vfiprintf_r+0x128>
 800485e:	4252      	negs	r2, r2
 8004860:	f043 0302 	orr.w	r3, r3, #2
 8004864:	9207      	str	r2, [sp, #28]
 8004866:	9304      	str	r3, [sp, #16]
 8004868:	f898 3000 	ldrb.w	r3, [r8]
 800486c:	2b2e      	cmp	r3, #46	; 0x2e
 800486e:	d10e      	bne.n	800488e <_vfiprintf_r+0x14e>
 8004870:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004874:	2b2a      	cmp	r3, #42	; 0x2a
 8004876:	d138      	bne.n	80048ea <_vfiprintf_r+0x1aa>
 8004878:	9b03      	ldr	r3, [sp, #12]
 800487a:	1d1a      	adds	r2, r3, #4
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	9203      	str	r2, [sp, #12]
 8004880:	2b00      	cmp	r3, #0
 8004882:	bfb8      	it	lt
 8004884:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004888:	f108 0802 	add.w	r8, r8, #2
 800488c:	9305      	str	r3, [sp, #20]
 800488e:	4d33      	ldr	r5, [pc, #204]	; (800495c <_vfiprintf_r+0x21c>)
 8004890:	f898 1000 	ldrb.w	r1, [r8]
 8004894:	2203      	movs	r2, #3
 8004896:	4628      	mov	r0, r5
 8004898:	f7fb fca2 	bl	80001e0 <memchr>
 800489c:	b140      	cbz	r0, 80048b0 <_vfiprintf_r+0x170>
 800489e:	2340      	movs	r3, #64	; 0x40
 80048a0:	1b40      	subs	r0, r0, r5
 80048a2:	fa03 f000 	lsl.w	r0, r3, r0
 80048a6:	9b04      	ldr	r3, [sp, #16]
 80048a8:	4303      	orrs	r3, r0
 80048aa:	f108 0801 	add.w	r8, r8, #1
 80048ae:	9304      	str	r3, [sp, #16]
 80048b0:	f898 1000 	ldrb.w	r1, [r8]
 80048b4:	482a      	ldr	r0, [pc, #168]	; (8004960 <_vfiprintf_r+0x220>)
 80048b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048ba:	2206      	movs	r2, #6
 80048bc:	f108 0701 	add.w	r7, r8, #1
 80048c0:	f7fb fc8e 	bl	80001e0 <memchr>
 80048c4:	2800      	cmp	r0, #0
 80048c6:	d037      	beq.n	8004938 <_vfiprintf_r+0x1f8>
 80048c8:	4b26      	ldr	r3, [pc, #152]	; (8004964 <_vfiprintf_r+0x224>)
 80048ca:	bb1b      	cbnz	r3, 8004914 <_vfiprintf_r+0x1d4>
 80048cc:	9b03      	ldr	r3, [sp, #12]
 80048ce:	3307      	adds	r3, #7
 80048d0:	f023 0307 	bic.w	r3, r3, #7
 80048d4:	3308      	adds	r3, #8
 80048d6:	9303      	str	r3, [sp, #12]
 80048d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048da:	444b      	add	r3, r9
 80048dc:	9309      	str	r3, [sp, #36]	; 0x24
 80048de:	e750      	b.n	8004782 <_vfiprintf_r+0x42>
 80048e0:	fb05 3202 	mla	r2, r5, r2, r3
 80048e4:	2001      	movs	r0, #1
 80048e6:	4688      	mov	r8, r1
 80048e8:	e78a      	b.n	8004800 <_vfiprintf_r+0xc0>
 80048ea:	2300      	movs	r3, #0
 80048ec:	f108 0801 	add.w	r8, r8, #1
 80048f0:	9305      	str	r3, [sp, #20]
 80048f2:	4619      	mov	r1, r3
 80048f4:	250a      	movs	r5, #10
 80048f6:	4640      	mov	r0, r8
 80048f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048fc:	3a30      	subs	r2, #48	; 0x30
 80048fe:	2a09      	cmp	r2, #9
 8004900:	d903      	bls.n	800490a <_vfiprintf_r+0x1ca>
 8004902:	2b00      	cmp	r3, #0
 8004904:	d0c3      	beq.n	800488e <_vfiprintf_r+0x14e>
 8004906:	9105      	str	r1, [sp, #20]
 8004908:	e7c1      	b.n	800488e <_vfiprintf_r+0x14e>
 800490a:	fb05 2101 	mla	r1, r5, r1, r2
 800490e:	2301      	movs	r3, #1
 8004910:	4680      	mov	r8, r0
 8004912:	e7f0      	b.n	80048f6 <_vfiprintf_r+0x1b6>
 8004914:	ab03      	add	r3, sp, #12
 8004916:	9300      	str	r3, [sp, #0]
 8004918:	4622      	mov	r2, r4
 800491a:	4b13      	ldr	r3, [pc, #76]	; (8004968 <_vfiprintf_r+0x228>)
 800491c:	a904      	add	r1, sp, #16
 800491e:	4630      	mov	r0, r6
 8004920:	f3af 8000 	nop.w
 8004924:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004928:	4681      	mov	r9, r0
 800492a:	d1d5      	bne.n	80048d8 <_vfiprintf_r+0x198>
 800492c:	89a3      	ldrh	r3, [r4, #12]
 800492e:	065b      	lsls	r3, r3, #25
 8004930:	f53f af7e 	bmi.w	8004830 <_vfiprintf_r+0xf0>
 8004934:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004936:	e77d      	b.n	8004834 <_vfiprintf_r+0xf4>
 8004938:	ab03      	add	r3, sp, #12
 800493a:	9300      	str	r3, [sp, #0]
 800493c:	4622      	mov	r2, r4
 800493e:	4b0a      	ldr	r3, [pc, #40]	; (8004968 <_vfiprintf_r+0x228>)
 8004940:	a904      	add	r1, sp, #16
 8004942:	4630      	mov	r0, r6
 8004944:	f000 f888 	bl	8004a58 <_printf_i>
 8004948:	e7ec      	b.n	8004924 <_vfiprintf_r+0x1e4>
 800494a:	bf00      	nop
 800494c:	08004e80 	.word	0x08004e80
 8004950:	08004ec0 	.word	0x08004ec0
 8004954:	08004ea0 	.word	0x08004ea0
 8004958:	08004e60 	.word	0x08004e60
 800495c:	08004ec6 	.word	0x08004ec6
 8004960:	08004eca 	.word	0x08004eca
 8004964:	00000000 	.word	0x00000000
 8004968:	0800471b 	.word	0x0800471b

0800496c <_printf_common>:
 800496c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004970:	4691      	mov	r9, r2
 8004972:	461f      	mov	r7, r3
 8004974:	688a      	ldr	r2, [r1, #8]
 8004976:	690b      	ldr	r3, [r1, #16]
 8004978:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800497c:	4293      	cmp	r3, r2
 800497e:	bfb8      	it	lt
 8004980:	4613      	movlt	r3, r2
 8004982:	f8c9 3000 	str.w	r3, [r9]
 8004986:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800498a:	4606      	mov	r6, r0
 800498c:	460c      	mov	r4, r1
 800498e:	b112      	cbz	r2, 8004996 <_printf_common+0x2a>
 8004990:	3301      	adds	r3, #1
 8004992:	f8c9 3000 	str.w	r3, [r9]
 8004996:	6823      	ldr	r3, [r4, #0]
 8004998:	0699      	lsls	r1, r3, #26
 800499a:	bf42      	ittt	mi
 800499c:	f8d9 3000 	ldrmi.w	r3, [r9]
 80049a0:	3302      	addmi	r3, #2
 80049a2:	f8c9 3000 	strmi.w	r3, [r9]
 80049a6:	6825      	ldr	r5, [r4, #0]
 80049a8:	f015 0506 	ands.w	r5, r5, #6
 80049ac:	d107      	bne.n	80049be <_printf_common+0x52>
 80049ae:	f104 0a19 	add.w	sl, r4, #25
 80049b2:	68e3      	ldr	r3, [r4, #12]
 80049b4:	f8d9 2000 	ldr.w	r2, [r9]
 80049b8:	1a9b      	subs	r3, r3, r2
 80049ba:	42ab      	cmp	r3, r5
 80049bc:	dc28      	bgt.n	8004a10 <_printf_common+0xa4>
 80049be:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80049c2:	6822      	ldr	r2, [r4, #0]
 80049c4:	3300      	adds	r3, #0
 80049c6:	bf18      	it	ne
 80049c8:	2301      	movne	r3, #1
 80049ca:	0692      	lsls	r2, r2, #26
 80049cc:	d42d      	bmi.n	8004a2a <_printf_common+0xbe>
 80049ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049d2:	4639      	mov	r1, r7
 80049d4:	4630      	mov	r0, r6
 80049d6:	47c0      	blx	r8
 80049d8:	3001      	adds	r0, #1
 80049da:	d020      	beq.n	8004a1e <_printf_common+0xb2>
 80049dc:	6823      	ldr	r3, [r4, #0]
 80049de:	68e5      	ldr	r5, [r4, #12]
 80049e0:	f8d9 2000 	ldr.w	r2, [r9]
 80049e4:	f003 0306 	and.w	r3, r3, #6
 80049e8:	2b04      	cmp	r3, #4
 80049ea:	bf08      	it	eq
 80049ec:	1aad      	subeq	r5, r5, r2
 80049ee:	68a3      	ldr	r3, [r4, #8]
 80049f0:	6922      	ldr	r2, [r4, #16]
 80049f2:	bf0c      	ite	eq
 80049f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049f8:	2500      	movne	r5, #0
 80049fa:	4293      	cmp	r3, r2
 80049fc:	bfc4      	itt	gt
 80049fe:	1a9b      	subgt	r3, r3, r2
 8004a00:	18ed      	addgt	r5, r5, r3
 8004a02:	f04f 0900 	mov.w	r9, #0
 8004a06:	341a      	adds	r4, #26
 8004a08:	454d      	cmp	r5, r9
 8004a0a:	d11a      	bne.n	8004a42 <_printf_common+0xd6>
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	e008      	b.n	8004a22 <_printf_common+0xb6>
 8004a10:	2301      	movs	r3, #1
 8004a12:	4652      	mov	r2, sl
 8004a14:	4639      	mov	r1, r7
 8004a16:	4630      	mov	r0, r6
 8004a18:	47c0      	blx	r8
 8004a1a:	3001      	adds	r0, #1
 8004a1c:	d103      	bne.n	8004a26 <_printf_common+0xba>
 8004a1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a26:	3501      	adds	r5, #1
 8004a28:	e7c3      	b.n	80049b2 <_printf_common+0x46>
 8004a2a:	18e1      	adds	r1, r4, r3
 8004a2c:	1c5a      	adds	r2, r3, #1
 8004a2e:	2030      	movs	r0, #48	; 0x30
 8004a30:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a34:	4422      	add	r2, r4
 8004a36:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a3a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a3e:	3302      	adds	r3, #2
 8004a40:	e7c5      	b.n	80049ce <_printf_common+0x62>
 8004a42:	2301      	movs	r3, #1
 8004a44:	4622      	mov	r2, r4
 8004a46:	4639      	mov	r1, r7
 8004a48:	4630      	mov	r0, r6
 8004a4a:	47c0      	blx	r8
 8004a4c:	3001      	adds	r0, #1
 8004a4e:	d0e6      	beq.n	8004a1e <_printf_common+0xb2>
 8004a50:	f109 0901 	add.w	r9, r9, #1
 8004a54:	e7d8      	b.n	8004a08 <_printf_common+0x9c>
	...

08004a58 <_printf_i>:
 8004a58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a5c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004a60:	460c      	mov	r4, r1
 8004a62:	7e09      	ldrb	r1, [r1, #24]
 8004a64:	b085      	sub	sp, #20
 8004a66:	296e      	cmp	r1, #110	; 0x6e
 8004a68:	4617      	mov	r7, r2
 8004a6a:	4606      	mov	r6, r0
 8004a6c:	4698      	mov	r8, r3
 8004a6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004a70:	f000 80b3 	beq.w	8004bda <_printf_i+0x182>
 8004a74:	d822      	bhi.n	8004abc <_printf_i+0x64>
 8004a76:	2963      	cmp	r1, #99	; 0x63
 8004a78:	d036      	beq.n	8004ae8 <_printf_i+0x90>
 8004a7a:	d80a      	bhi.n	8004a92 <_printf_i+0x3a>
 8004a7c:	2900      	cmp	r1, #0
 8004a7e:	f000 80b9 	beq.w	8004bf4 <_printf_i+0x19c>
 8004a82:	2958      	cmp	r1, #88	; 0x58
 8004a84:	f000 8083 	beq.w	8004b8e <_printf_i+0x136>
 8004a88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a8c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004a90:	e032      	b.n	8004af8 <_printf_i+0xa0>
 8004a92:	2964      	cmp	r1, #100	; 0x64
 8004a94:	d001      	beq.n	8004a9a <_printf_i+0x42>
 8004a96:	2969      	cmp	r1, #105	; 0x69
 8004a98:	d1f6      	bne.n	8004a88 <_printf_i+0x30>
 8004a9a:	6820      	ldr	r0, [r4, #0]
 8004a9c:	6813      	ldr	r3, [r2, #0]
 8004a9e:	0605      	lsls	r5, r0, #24
 8004aa0:	f103 0104 	add.w	r1, r3, #4
 8004aa4:	d52a      	bpl.n	8004afc <_printf_i+0xa4>
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6011      	str	r1, [r2, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	da03      	bge.n	8004ab6 <_printf_i+0x5e>
 8004aae:	222d      	movs	r2, #45	; 0x2d
 8004ab0:	425b      	negs	r3, r3
 8004ab2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004ab6:	486f      	ldr	r0, [pc, #444]	; (8004c74 <_printf_i+0x21c>)
 8004ab8:	220a      	movs	r2, #10
 8004aba:	e039      	b.n	8004b30 <_printf_i+0xd8>
 8004abc:	2973      	cmp	r1, #115	; 0x73
 8004abe:	f000 809d 	beq.w	8004bfc <_printf_i+0x1a4>
 8004ac2:	d808      	bhi.n	8004ad6 <_printf_i+0x7e>
 8004ac4:	296f      	cmp	r1, #111	; 0x6f
 8004ac6:	d020      	beq.n	8004b0a <_printf_i+0xb2>
 8004ac8:	2970      	cmp	r1, #112	; 0x70
 8004aca:	d1dd      	bne.n	8004a88 <_printf_i+0x30>
 8004acc:	6823      	ldr	r3, [r4, #0]
 8004ace:	f043 0320 	orr.w	r3, r3, #32
 8004ad2:	6023      	str	r3, [r4, #0]
 8004ad4:	e003      	b.n	8004ade <_printf_i+0x86>
 8004ad6:	2975      	cmp	r1, #117	; 0x75
 8004ad8:	d017      	beq.n	8004b0a <_printf_i+0xb2>
 8004ada:	2978      	cmp	r1, #120	; 0x78
 8004adc:	d1d4      	bne.n	8004a88 <_printf_i+0x30>
 8004ade:	2378      	movs	r3, #120	; 0x78
 8004ae0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ae4:	4864      	ldr	r0, [pc, #400]	; (8004c78 <_printf_i+0x220>)
 8004ae6:	e055      	b.n	8004b94 <_printf_i+0x13c>
 8004ae8:	6813      	ldr	r3, [r2, #0]
 8004aea:	1d19      	adds	r1, r3, #4
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6011      	str	r1, [r2, #0]
 8004af0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004af4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004af8:	2301      	movs	r3, #1
 8004afa:	e08c      	b.n	8004c16 <_printf_i+0x1be>
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6011      	str	r1, [r2, #0]
 8004b00:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b04:	bf18      	it	ne
 8004b06:	b21b      	sxthne	r3, r3
 8004b08:	e7cf      	b.n	8004aaa <_printf_i+0x52>
 8004b0a:	6813      	ldr	r3, [r2, #0]
 8004b0c:	6825      	ldr	r5, [r4, #0]
 8004b0e:	1d18      	adds	r0, r3, #4
 8004b10:	6010      	str	r0, [r2, #0]
 8004b12:	0628      	lsls	r0, r5, #24
 8004b14:	d501      	bpl.n	8004b1a <_printf_i+0xc2>
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	e002      	b.n	8004b20 <_printf_i+0xc8>
 8004b1a:	0668      	lsls	r0, r5, #25
 8004b1c:	d5fb      	bpl.n	8004b16 <_printf_i+0xbe>
 8004b1e:	881b      	ldrh	r3, [r3, #0]
 8004b20:	4854      	ldr	r0, [pc, #336]	; (8004c74 <_printf_i+0x21c>)
 8004b22:	296f      	cmp	r1, #111	; 0x6f
 8004b24:	bf14      	ite	ne
 8004b26:	220a      	movne	r2, #10
 8004b28:	2208      	moveq	r2, #8
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b30:	6865      	ldr	r5, [r4, #4]
 8004b32:	60a5      	str	r5, [r4, #8]
 8004b34:	2d00      	cmp	r5, #0
 8004b36:	f2c0 8095 	blt.w	8004c64 <_printf_i+0x20c>
 8004b3a:	6821      	ldr	r1, [r4, #0]
 8004b3c:	f021 0104 	bic.w	r1, r1, #4
 8004b40:	6021      	str	r1, [r4, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d13d      	bne.n	8004bc2 <_printf_i+0x16a>
 8004b46:	2d00      	cmp	r5, #0
 8004b48:	f040 808e 	bne.w	8004c68 <_printf_i+0x210>
 8004b4c:	4665      	mov	r5, ip
 8004b4e:	2a08      	cmp	r2, #8
 8004b50:	d10b      	bne.n	8004b6a <_printf_i+0x112>
 8004b52:	6823      	ldr	r3, [r4, #0]
 8004b54:	07db      	lsls	r3, r3, #31
 8004b56:	d508      	bpl.n	8004b6a <_printf_i+0x112>
 8004b58:	6923      	ldr	r3, [r4, #16]
 8004b5a:	6862      	ldr	r2, [r4, #4]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	bfde      	ittt	le
 8004b60:	2330      	movle	r3, #48	; 0x30
 8004b62:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b66:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004b6a:	ebac 0305 	sub.w	r3, ip, r5
 8004b6e:	6123      	str	r3, [r4, #16]
 8004b70:	f8cd 8000 	str.w	r8, [sp]
 8004b74:	463b      	mov	r3, r7
 8004b76:	aa03      	add	r2, sp, #12
 8004b78:	4621      	mov	r1, r4
 8004b7a:	4630      	mov	r0, r6
 8004b7c:	f7ff fef6 	bl	800496c <_printf_common>
 8004b80:	3001      	adds	r0, #1
 8004b82:	d14d      	bne.n	8004c20 <_printf_i+0x1c8>
 8004b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b88:	b005      	add	sp, #20
 8004b8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004b8e:	4839      	ldr	r0, [pc, #228]	; (8004c74 <_printf_i+0x21c>)
 8004b90:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004b94:	6813      	ldr	r3, [r2, #0]
 8004b96:	6821      	ldr	r1, [r4, #0]
 8004b98:	1d1d      	adds	r5, r3, #4
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6015      	str	r5, [r2, #0]
 8004b9e:	060a      	lsls	r2, r1, #24
 8004ba0:	d50b      	bpl.n	8004bba <_printf_i+0x162>
 8004ba2:	07ca      	lsls	r2, r1, #31
 8004ba4:	bf44      	itt	mi
 8004ba6:	f041 0120 	orrmi.w	r1, r1, #32
 8004baa:	6021      	strmi	r1, [r4, #0]
 8004bac:	b91b      	cbnz	r3, 8004bb6 <_printf_i+0x15e>
 8004bae:	6822      	ldr	r2, [r4, #0]
 8004bb0:	f022 0220 	bic.w	r2, r2, #32
 8004bb4:	6022      	str	r2, [r4, #0]
 8004bb6:	2210      	movs	r2, #16
 8004bb8:	e7b7      	b.n	8004b2a <_printf_i+0xd2>
 8004bba:	064d      	lsls	r5, r1, #25
 8004bbc:	bf48      	it	mi
 8004bbe:	b29b      	uxthmi	r3, r3
 8004bc0:	e7ef      	b.n	8004ba2 <_printf_i+0x14a>
 8004bc2:	4665      	mov	r5, ip
 8004bc4:	fbb3 f1f2 	udiv	r1, r3, r2
 8004bc8:	fb02 3311 	mls	r3, r2, r1, r3
 8004bcc:	5cc3      	ldrb	r3, [r0, r3]
 8004bce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	2900      	cmp	r1, #0
 8004bd6:	d1f5      	bne.n	8004bc4 <_printf_i+0x16c>
 8004bd8:	e7b9      	b.n	8004b4e <_printf_i+0xf6>
 8004bda:	6813      	ldr	r3, [r2, #0]
 8004bdc:	6825      	ldr	r5, [r4, #0]
 8004bde:	6961      	ldr	r1, [r4, #20]
 8004be0:	1d18      	adds	r0, r3, #4
 8004be2:	6010      	str	r0, [r2, #0]
 8004be4:	0628      	lsls	r0, r5, #24
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	d501      	bpl.n	8004bee <_printf_i+0x196>
 8004bea:	6019      	str	r1, [r3, #0]
 8004bec:	e002      	b.n	8004bf4 <_printf_i+0x19c>
 8004bee:	066a      	lsls	r2, r5, #25
 8004bf0:	d5fb      	bpl.n	8004bea <_printf_i+0x192>
 8004bf2:	8019      	strh	r1, [r3, #0]
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	6123      	str	r3, [r4, #16]
 8004bf8:	4665      	mov	r5, ip
 8004bfa:	e7b9      	b.n	8004b70 <_printf_i+0x118>
 8004bfc:	6813      	ldr	r3, [r2, #0]
 8004bfe:	1d19      	adds	r1, r3, #4
 8004c00:	6011      	str	r1, [r2, #0]
 8004c02:	681d      	ldr	r5, [r3, #0]
 8004c04:	6862      	ldr	r2, [r4, #4]
 8004c06:	2100      	movs	r1, #0
 8004c08:	4628      	mov	r0, r5
 8004c0a:	f7fb fae9 	bl	80001e0 <memchr>
 8004c0e:	b108      	cbz	r0, 8004c14 <_printf_i+0x1bc>
 8004c10:	1b40      	subs	r0, r0, r5
 8004c12:	6060      	str	r0, [r4, #4]
 8004c14:	6863      	ldr	r3, [r4, #4]
 8004c16:	6123      	str	r3, [r4, #16]
 8004c18:	2300      	movs	r3, #0
 8004c1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c1e:	e7a7      	b.n	8004b70 <_printf_i+0x118>
 8004c20:	6923      	ldr	r3, [r4, #16]
 8004c22:	462a      	mov	r2, r5
 8004c24:	4639      	mov	r1, r7
 8004c26:	4630      	mov	r0, r6
 8004c28:	47c0      	blx	r8
 8004c2a:	3001      	adds	r0, #1
 8004c2c:	d0aa      	beq.n	8004b84 <_printf_i+0x12c>
 8004c2e:	6823      	ldr	r3, [r4, #0]
 8004c30:	079b      	lsls	r3, r3, #30
 8004c32:	d413      	bmi.n	8004c5c <_printf_i+0x204>
 8004c34:	68e0      	ldr	r0, [r4, #12]
 8004c36:	9b03      	ldr	r3, [sp, #12]
 8004c38:	4298      	cmp	r0, r3
 8004c3a:	bfb8      	it	lt
 8004c3c:	4618      	movlt	r0, r3
 8004c3e:	e7a3      	b.n	8004b88 <_printf_i+0x130>
 8004c40:	2301      	movs	r3, #1
 8004c42:	464a      	mov	r2, r9
 8004c44:	4639      	mov	r1, r7
 8004c46:	4630      	mov	r0, r6
 8004c48:	47c0      	blx	r8
 8004c4a:	3001      	adds	r0, #1
 8004c4c:	d09a      	beq.n	8004b84 <_printf_i+0x12c>
 8004c4e:	3501      	adds	r5, #1
 8004c50:	68e3      	ldr	r3, [r4, #12]
 8004c52:	9a03      	ldr	r2, [sp, #12]
 8004c54:	1a9b      	subs	r3, r3, r2
 8004c56:	42ab      	cmp	r3, r5
 8004c58:	dcf2      	bgt.n	8004c40 <_printf_i+0x1e8>
 8004c5a:	e7eb      	b.n	8004c34 <_printf_i+0x1dc>
 8004c5c:	2500      	movs	r5, #0
 8004c5e:	f104 0919 	add.w	r9, r4, #25
 8004c62:	e7f5      	b.n	8004c50 <_printf_i+0x1f8>
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1ac      	bne.n	8004bc2 <_printf_i+0x16a>
 8004c68:	7803      	ldrb	r3, [r0, #0]
 8004c6a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c6e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c72:	e76c      	b.n	8004b4e <_printf_i+0xf6>
 8004c74:	08004ed1 	.word	0x08004ed1
 8004c78:	08004ee2 	.word	0x08004ee2

08004c7c <_sbrk_r>:
 8004c7c:	b538      	push	{r3, r4, r5, lr}
 8004c7e:	4c06      	ldr	r4, [pc, #24]	; (8004c98 <_sbrk_r+0x1c>)
 8004c80:	2300      	movs	r3, #0
 8004c82:	4605      	mov	r5, r0
 8004c84:	4608      	mov	r0, r1
 8004c86:	6023      	str	r3, [r4, #0]
 8004c88:	f7fb ff40 	bl	8000b0c <_sbrk>
 8004c8c:	1c43      	adds	r3, r0, #1
 8004c8e:	d102      	bne.n	8004c96 <_sbrk_r+0x1a>
 8004c90:	6823      	ldr	r3, [r4, #0]
 8004c92:	b103      	cbz	r3, 8004c96 <_sbrk_r+0x1a>
 8004c94:	602b      	str	r3, [r5, #0]
 8004c96:	bd38      	pop	{r3, r4, r5, pc}
 8004c98:	2000431c 	.word	0x2000431c

08004c9c <__sread>:
 8004c9c:	b510      	push	{r4, lr}
 8004c9e:	460c      	mov	r4, r1
 8004ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ca4:	f000 f896 	bl	8004dd4 <_read_r>
 8004ca8:	2800      	cmp	r0, #0
 8004caa:	bfab      	itete	ge
 8004cac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004cae:	89a3      	ldrhlt	r3, [r4, #12]
 8004cb0:	181b      	addge	r3, r3, r0
 8004cb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004cb6:	bfac      	ite	ge
 8004cb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8004cba:	81a3      	strhlt	r3, [r4, #12]
 8004cbc:	bd10      	pop	{r4, pc}

08004cbe <__swrite>:
 8004cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cc2:	461f      	mov	r7, r3
 8004cc4:	898b      	ldrh	r3, [r1, #12]
 8004cc6:	05db      	lsls	r3, r3, #23
 8004cc8:	4605      	mov	r5, r0
 8004cca:	460c      	mov	r4, r1
 8004ccc:	4616      	mov	r6, r2
 8004cce:	d505      	bpl.n	8004cdc <__swrite+0x1e>
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cd8:	f000 f868 	bl	8004dac <_lseek_r>
 8004cdc:	89a3      	ldrh	r3, [r4, #12]
 8004cde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ce2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ce6:	81a3      	strh	r3, [r4, #12]
 8004ce8:	4632      	mov	r2, r6
 8004cea:	463b      	mov	r3, r7
 8004cec:	4628      	mov	r0, r5
 8004cee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cf2:	f000 b817 	b.w	8004d24 <_write_r>

08004cf6 <__sseek>:
 8004cf6:	b510      	push	{r4, lr}
 8004cf8:	460c      	mov	r4, r1
 8004cfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cfe:	f000 f855 	bl	8004dac <_lseek_r>
 8004d02:	1c43      	adds	r3, r0, #1
 8004d04:	89a3      	ldrh	r3, [r4, #12]
 8004d06:	bf15      	itete	ne
 8004d08:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d12:	81a3      	strheq	r3, [r4, #12]
 8004d14:	bf18      	it	ne
 8004d16:	81a3      	strhne	r3, [r4, #12]
 8004d18:	bd10      	pop	{r4, pc}

08004d1a <__sclose>:
 8004d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d1e:	f000 b813 	b.w	8004d48 <_close_r>
	...

08004d24 <_write_r>:
 8004d24:	b538      	push	{r3, r4, r5, lr}
 8004d26:	4c07      	ldr	r4, [pc, #28]	; (8004d44 <_write_r+0x20>)
 8004d28:	4605      	mov	r5, r0
 8004d2a:	4608      	mov	r0, r1
 8004d2c:	4611      	mov	r1, r2
 8004d2e:	2200      	movs	r2, #0
 8004d30:	6022      	str	r2, [r4, #0]
 8004d32:	461a      	mov	r2, r3
 8004d34:	f7fb fd74 	bl	8000820 <_write>
 8004d38:	1c43      	adds	r3, r0, #1
 8004d3a:	d102      	bne.n	8004d42 <_write_r+0x1e>
 8004d3c:	6823      	ldr	r3, [r4, #0]
 8004d3e:	b103      	cbz	r3, 8004d42 <_write_r+0x1e>
 8004d40:	602b      	str	r3, [r5, #0]
 8004d42:	bd38      	pop	{r3, r4, r5, pc}
 8004d44:	2000431c 	.word	0x2000431c

08004d48 <_close_r>:
 8004d48:	b538      	push	{r3, r4, r5, lr}
 8004d4a:	4c06      	ldr	r4, [pc, #24]	; (8004d64 <_close_r+0x1c>)
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	4605      	mov	r5, r0
 8004d50:	4608      	mov	r0, r1
 8004d52:	6023      	str	r3, [r4, #0]
 8004d54:	f7fb fd90 	bl	8000878 <_close>
 8004d58:	1c43      	adds	r3, r0, #1
 8004d5a:	d102      	bne.n	8004d62 <_close_r+0x1a>
 8004d5c:	6823      	ldr	r3, [r4, #0]
 8004d5e:	b103      	cbz	r3, 8004d62 <_close_r+0x1a>
 8004d60:	602b      	str	r3, [r5, #0]
 8004d62:	bd38      	pop	{r3, r4, r5, pc}
 8004d64:	2000431c 	.word	0x2000431c

08004d68 <_fstat_r>:
 8004d68:	b538      	push	{r3, r4, r5, lr}
 8004d6a:	4c07      	ldr	r4, [pc, #28]	; (8004d88 <_fstat_r+0x20>)
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	4605      	mov	r5, r0
 8004d70:	4608      	mov	r0, r1
 8004d72:	4611      	mov	r1, r2
 8004d74:	6023      	str	r3, [r4, #0]
 8004d76:	f7fb fdcf 	bl	8000918 <_fstat>
 8004d7a:	1c43      	adds	r3, r0, #1
 8004d7c:	d102      	bne.n	8004d84 <_fstat_r+0x1c>
 8004d7e:	6823      	ldr	r3, [r4, #0]
 8004d80:	b103      	cbz	r3, 8004d84 <_fstat_r+0x1c>
 8004d82:	602b      	str	r3, [r5, #0]
 8004d84:	bd38      	pop	{r3, r4, r5, pc}
 8004d86:	bf00      	nop
 8004d88:	2000431c 	.word	0x2000431c

08004d8c <_isatty_r>:
 8004d8c:	b538      	push	{r3, r4, r5, lr}
 8004d8e:	4c06      	ldr	r4, [pc, #24]	; (8004da8 <_isatty_r+0x1c>)
 8004d90:	2300      	movs	r3, #0
 8004d92:	4605      	mov	r5, r0
 8004d94:	4608      	mov	r0, r1
 8004d96:	6023      	str	r3, [r4, #0]
 8004d98:	f7fb fd2c 	bl	80007f4 <_isatty>
 8004d9c:	1c43      	adds	r3, r0, #1
 8004d9e:	d102      	bne.n	8004da6 <_isatty_r+0x1a>
 8004da0:	6823      	ldr	r3, [r4, #0]
 8004da2:	b103      	cbz	r3, 8004da6 <_isatty_r+0x1a>
 8004da4:	602b      	str	r3, [r5, #0]
 8004da6:	bd38      	pop	{r3, r4, r5, pc}
 8004da8:	2000431c 	.word	0x2000431c

08004dac <_lseek_r>:
 8004dac:	b538      	push	{r3, r4, r5, lr}
 8004dae:	4c07      	ldr	r4, [pc, #28]	; (8004dcc <_lseek_r+0x20>)
 8004db0:	4605      	mov	r5, r0
 8004db2:	4608      	mov	r0, r1
 8004db4:	4611      	mov	r1, r2
 8004db6:	2200      	movs	r2, #0
 8004db8:	6022      	str	r2, [r4, #0]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	f7fb fd73 	bl	80008a6 <_lseek>
 8004dc0:	1c43      	adds	r3, r0, #1
 8004dc2:	d102      	bne.n	8004dca <_lseek_r+0x1e>
 8004dc4:	6823      	ldr	r3, [r4, #0]
 8004dc6:	b103      	cbz	r3, 8004dca <_lseek_r+0x1e>
 8004dc8:	602b      	str	r3, [r5, #0]
 8004dca:	bd38      	pop	{r3, r4, r5, pc}
 8004dcc:	2000431c 	.word	0x2000431c

08004dd0 <__malloc_lock>:
 8004dd0:	4770      	bx	lr

08004dd2 <__malloc_unlock>:
 8004dd2:	4770      	bx	lr

08004dd4 <_read_r>:
 8004dd4:	b538      	push	{r3, r4, r5, lr}
 8004dd6:	4c07      	ldr	r4, [pc, #28]	; (8004df4 <_read_r+0x20>)
 8004dd8:	4605      	mov	r5, r0
 8004dda:	4608      	mov	r0, r1
 8004ddc:	4611      	mov	r1, r2
 8004dde:	2200      	movs	r2, #0
 8004de0:	6022      	str	r2, [r4, #0]
 8004de2:	461a      	mov	r2, r3
 8004de4:	f7fb fd70 	bl	80008c8 <_read>
 8004de8:	1c43      	adds	r3, r0, #1
 8004dea:	d102      	bne.n	8004df2 <_read_r+0x1e>
 8004dec:	6823      	ldr	r3, [r4, #0]
 8004dee:	b103      	cbz	r3, 8004df2 <_read_r+0x1e>
 8004df0:	602b      	str	r3, [r5, #0]
 8004df2:	bd38      	pop	{r3, r4, r5, pc}
 8004df4:	2000431c 	.word	0x2000431c

08004df8 <_init>:
 8004df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfa:	bf00      	nop
 8004dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dfe:	bc08      	pop	{r3}
 8004e00:	469e      	mov	lr, r3
 8004e02:	4770      	bx	lr

08004e04 <_fini>:
 8004e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e06:	bf00      	nop
 8004e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e0a:	bc08      	pop	{r3}
 8004e0c:	469e      	mov	lr, r3
 8004e0e:	4770      	bx	lr
