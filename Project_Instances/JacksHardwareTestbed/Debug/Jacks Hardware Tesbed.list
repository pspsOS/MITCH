
Jacks Hardware Tesbed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  08009a78  08009a78  00019a78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fe0  08009fe0  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009fe0  08009fe0  00019fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fe8  08009fe8  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fe8  08009fe8  00019fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009fec  08009fec  00019fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009ff0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000044f8  200001e8  0800a1d8  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200046e0  0800a1d8  000246e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a7c1  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039f4  00000000  00000000  0003a9d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  0003e3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd8  00000000  00000000  0003f240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a32d  00000000  00000000  0003ff18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001361a  00000000  00000000  0005a245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092b16  00000000  00000000  0006d85f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00100375  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d3c  00000000  00000000  001003c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  00105104  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  00105140  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009a60 	.word	0x08009a60

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	08009a60 	.word	0x08009a60

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b9a4 	b.w	8000fa8 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f83c 	bl	8000ce4 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_d2lz>:
 8000c78:	b538      	push	{r3, r4, r5, lr}
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	4604      	mov	r4, r0
 8000c80:	460d      	mov	r5, r1
 8000c82:	f7ff ff33 	bl	8000aec <__aeabi_dcmplt>
 8000c86:	b928      	cbnz	r0, 8000c94 <__aeabi_d2lz+0x1c>
 8000c88:	4620      	mov	r0, r4
 8000c8a:	4629      	mov	r1, r5
 8000c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c90:	f000 b80a 	b.w	8000ca8 <__aeabi_d2ulz>
 8000c94:	4620      	mov	r0, r4
 8000c96:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c9a:	f000 f805 	bl	8000ca8 <__aeabi_d2ulz>
 8000c9e:	4240      	negs	r0, r0
 8000ca0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca4:	bd38      	pop	{r3, r4, r5, pc}
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2ulz>:
 8000ca8:	b5d0      	push	{r4, r6, r7, lr}
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <__aeabi_d2ulz+0x34>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	4606      	mov	r6, r0
 8000cb0:	460f      	mov	r7, r1
 8000cb2:	f7ff fca9 	bl	8000608 <__aeabi_dmul>
 8000cb6:	f7ff ff57 	bl	8000b68 <__aeabi_d2uiz>
 8000cba:	4604      	mov	r4, r0
 8000cbc:	f7ff fc2a 	bl	8000514 <__aeabi_ui2d>
 8000cc0:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <__aeabi_d2ulz+0x38>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f7ff fca0 	bl	8000608 <__aeabi_dmul>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	460b      	mov	r3, r1
 8000ccc:	4630      	mov	r0, r6
 8000cce:	4639      	mov	r1, r7
 8000cd0:	f7ff fae2 	bl	8000298 <__aeabi_dsub>
 8000cd4:	f7ff ff48 	bl	8000b68 <__aeabi_d2uiz>
 8000cd8:	4621      	mov	r1, r4
 8000cda:	bdd0      	pop	{r4, r6, r7, pc}
 8000cdc:	3df00000 	.word	0x3df00000
 8000ce0:	41f00000 	.word	0x41f00000

08000ce4 <__udivmoddi4>:
 8000ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce8:	9d08      	ldr	r5, [sp, #32]
 8000cea:	4604      	mov	r4, r0
 8000cec:	468c      	mov	ip, r1
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	f040 8083 	bne.w	8000dfa <__udivmoddi4+0x116>
 8000cf4:	428a      	cmp	r2, r1
 8000cf6:	4617      	mov	r7, r2
 8000cf8:	d947      	bls.n	8000d8a <__udivmoddi4+0xa6>
 8000cfa:	fab2 f282 	clz	r2, r2
 8000cfe:	b142      	cbz	r2, 8000d12 <__udivmoddi4+0x2e>
 8000d00:	f1c2 0020 	rsb	r0, r2, #32
 8000d04:	fa24 f000 	lsr.w	r0, r4, r0
 8000d08:	4091      	lsls	r1, r2
 8000d0a:	4097      	lsls	r7, r2
 8000d0c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d10:	4094      	lsls	r4, r2
 8000d12:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d16:	0c23      	lsrs	r3, r4, #16
 8000d18:	fbbc f6f8 	udiv	r6, ip, r8
 8000d1c:	fa1f fe87 	uxth.w	lr, r7
 8000d20:	fb08 c116 	mls	r1, r8, r6, ip
 8000d24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d28:	fb06 f10e 	mul.w	r1, r6, lr
 8000d2c:	4299      	cmp	r1, r3
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x60>
 8000d30:	18fb      	adds	r3, r7, r3
 8000d32:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d36:	f080 8119 	bcs.w	8000f6c <__udivmoddi4+0x288>
 8000d3a:	4299      	cmp	r1, r3
 8000d3c:	f240 8116 	bls.w	8000f6c <__udivmoddi4+0x288>
 8000d40:	3e02      	subs	r6, #2
 8000d42:	443b      	add	r3, r7
 8000d44:	1a5b      	subs	r3, r3, r1
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d909      	bls.n	8000d70 <__udivmoddi4+0x8c>
 8000d5c:	193c      	adds	r4, r7, r4
 8000d5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d62:	f080 8105 	bcs.w	8000f70 <__udivmoddi4+0x28c>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f240 8102 	bls.w	8000f70 <__udivmoddi4+0x28c>
 8000d6c:	3802      	subs	r0, #2
 8000d6e:	443c      	add	r4, r7
 8000d70:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d74:	eba4 040e 	sub.w	r4, r4, lr
 8000d78:	2600      	movs	r6, #0
 8000d7a:	b11d      	cbz	r5, 8000d84 <__udivmoddi4+0xa0>
 8000d7c:	40d4      	lsrs	r4, r2
 8000d7e:	2300      	movs	r3, #0
 8000d80:	e9c5 4300 	strd	r4, r3, [r5]
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	b902      	cbnz	r2, 8000d8e <__udivmoddi4+0xaa>
 8000d8c:	deff      	udf	#255	; 0xff
 8000d8e:	fab2 f282 	clz	r2, r2
 8000d92:	2a00      	cmp	r2, #0
 8000d94:	d150      	bne.n	8000e38 <__udivmoddi4+0x154>
 8000d96:	1bcb      	subs	r3, r1, r7
 8000d98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d9c:	fa1f f887 	uxth.w	r8, r7
 8000da0:	2601      	movs	r6, #1
 8000da2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000da6:	0c21      	lsrs	r1, r4, #16
 8000da8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db0:	fb08 f30c 	mul.w	r3, r8, ip
 8000db4:	428b      	cmp	r3, r1
 8000db6:	d907      	bls.n	8000dc8 <__udivmoddi4+0xe4>
 8000db8:	1879      	adds	r1, r7, r1
 8000dba:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dbe:	d202      	bcs.n	8000dc6 <__udivmoddi4+0xe2>
 8000dc0:	428b      	cmp	r3, r1
 8000dc2:	f200 80e9 	bhi.w	8000f98 <__udivmoddi4+0x2b4>
 8000dc6:	4684      	mov	ip, r0
 8000dc8:	1ac9      	subs	r1, r1, r3
 8000dca:	b2a3      	uxth	r3, r4
 8000dcc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dd0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dd4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dd8:	fb08 f800 	mul.w	r8, r8, r0
 8000ddc:	45a0      	cmp	r8, r4
 8000dde:	d907      	bls.n	8000df0 <__udivmoddi4+0x10c>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x10a>
 8000de8:	45a0      	cmp	r8, r4
 8000dea:	f200 80d9 	bhi.w	8000fa0 <__udivmoddi4+0x2bc>
 8000dee:	4618      	mov	r0, r3
 8000df0:	eba4 0408 	sub.w	r4, r4, r8
 8000df4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000df8:	e7bf      	b.n	8000d7a <__udivmoddi4+0x96>
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d909      	bls.n	8000e12 <__udivmoddi4+0x12e>
 8000dfe:	2d00      	cmp	r5, #0
 8000e00:	f000 80b1 	beq.w	8000f66 <__udivmoddi4+0x282>
 8000e04:	2600      	movs	r6, #0
 8000e06:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0a:	4630      	mov	r0, r6
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	fab3 f683 	clz	r6, r3
 8000e16:	2e00      	cmp	r6, #0
 8000e18:	d14a      	bne.n	8000eb0 <__udivmoddi4+0x1cc>
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d302      	bcc.n	8000e24 <__udivmoddi4+0x140>
 8000e1e:	4282      	cmp	r2, r0
 8000e20:	f200 80b8 	bhi.w	8000f94 <__udivmoddi4+0x2b0>
 8000e24:	1a84      	subs	r4, r0, r2
 8000e26:	eb61 0103 	sbc.w	r1, r1, r3
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	468c      	mov	ip, r1
 8000e2e:	2d00      	cmp	r5, #0
 8000e30:	d0a8      	beq.n	8000d84 <__udivmoddi4+0xa0>
 8000e32:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e36:	e7a5      	b.n	8000d84 <__udivmoddi4+0xa0>
 8000e38:	f1c2 0320 	rsb	r3, r2, #32
 8000e3c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e40:	4097      	lsls	r7, r2
 8000e42:	fa01 f002 	lsl.w	r0, r1, r2
 8000e46:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e4a:	40d9      	lsrs	r1, r3
 8000e4c:	4330      	orrs	r0, r6
 8000e4e:	0c03      	lsrs	r3, r0, #16
 8000e50:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e54:	fa1f f887 	uxth.w	r8, r7
 8000e58:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e60:	fb06 f108 	mul.w	r1, r6, r8
 8000e64:	4299      	cmp	r1, r3
 8000e66:	fa04 f402 	lsl.w	r4, r4, r2
 8000e6a:	d909      	bls.n	8000e80 <__udivmoddi4+0x19c>
 8000e6c:	18fb      	adds	r3, r7, r3
 8000e6e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e72:	f080 808d 	bcs.w	8000f90 <__udivmoddi4+0x2ac>
 8000e76:	4299      	cmp	r1, r3
 8000e78:	f240 808a 	bls.w	8000f90 <__udivmoddi4+0x2ac>
 8000e7c:	3e02      	subs	r6, #2
 8000e7e:	443b      	add	r3, r7
 8000e80:	1a5b      	subs	r3, r3, r1
 8000e82:	b281      	uxth	r1, r0
 8000e84:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e88:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e90:	fb00 f308 	mul.w	r3, r0, r8
 8000e94:	428b      	cmp	r3, r1
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x1c4>
 8000e98:	1879      	adds	r1, r7, r1
 8000e9a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e9e:	d273      	bcs.n	8000f88 <__udivmoddi4+0x2a4>
 8000ea0:	428b      	cmp	r3, r1
 8000ea2:	d971      	bls.n	8000f88 <__udivmoddi4+0x2a4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	4439      	add	r1, r7
 8000ea8:	1acb      	subs	r3, r1, r3
 8000eaa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eae:	e778      	b.n	8000da2 <__udivmoddi4+0xbe>
 8000eb0:	f1c6 0c20 	rsb	ip, r6, #32
 8000eb4:	fa03 f406 	lsl.w	r4, r3, r6
 8000eb8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ebc:	431c      	orrs	r4, r3
 8000ebe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ec2:	fa01 f306 	lsl.w	r3, r1, r6
 8000ec6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eca:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	0c3b      	lsrs	r3, r7, #16
 8000ed2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ed6:	fa1f f884 	uxth.w	r8, r4
 8000eda:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ede:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ee2:	fb09 fa08 	mul.w	sl, r9, r8
 8000ee6:	458a      	cmp	sl, r1
 8000ee8:	fa02 f206 	lsl.w	r2, r2, r6
 8000eec:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x220>
 8000ef2:	1861      	adds	r1, r4, r1
 8000ef4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ef8:	d248      	bcs.n	8000f8c <__udivmoddi4+0x2a8>
 8000efa:	458a      	cmp	sl, r1
 8000efc:	d946      	bls.n	8000f8c <__udivmoddi4+0x2a8>
 8000efe:	f1a9 0902 	sub.w	r9, r9, #2
 8000f02:	4421      	add	r1, r4
 8000f04:	eba1 010a 	sub.w	r1, r1, sl
 8000f08:	b2bf      	uxth	r7, r7
 8000f0a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f0e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f12:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f16:	fb00 f808 	mul.w	r8, r0, r8
 8000f1a:	45b8      	cmp	r8, r7
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x24a>
 8000f1e:	19e7      	adds	r7, r4, r7
 8000f20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f24:	d22e      	bcs.n	8000f84 <__udivmoddi4+0x2a0>
 8000f26:	45b8      	cmp	r8, r7
 8000f28:	d92c      	bls.n	8000f84 <__udivmoddi4+0x2a0>
 8000f2a:	3802      	subs	r0, #2
 8000f2c:	4427      	add	r7, r4
 8000f2e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f32:	eba7 0708 	sub.w	r7, r7, r8
 8000f36:	fba0 8902 	umull	r8, r9, r0, r2
 8000f3a:	454f      	cmp	r7, r9
 8000f3c:	46c6      	mov	lr, r8
 8000f3e:	4649      	mov	r1, r9
 8000f40:	d31a      	bcc.n	8000f78 <__udivmoddi4+0x294>
 8000f42:	d017      	beq.n	8000f74 <__udivmoddi4+0x290>
 8000f44:	b15d      	cbz	r5, 8000f5e <__udivmoddi4+0x27a>
 8000f46:	ebb3 020e 	subs.w	r2, r3, lr
 8000f4a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f4e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f52:	40f2      	lsrs	r2, r6
 8000f54:	ea4c 0202 	orr.w	r2, ip, r2
 8000f58:	40f7      	lsrs	r7, r6
 8000f5a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f5e:	2600      	movs	r6, #0
 8000f60:	4631      	mov	r1, r6
 8000f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f66:	462e      	mov	r6, r5
 8000f68:	4628      	mov	r0, r5
 8000f6a:	e70b      	b.n	8000d84 <__udivmoddi4+0xa0>
 8000f6c:	4606      	mov	r6, r0
 8000f6e:	e6e9      	b.n	8000d44 <__udivmoddi4+0x60>
 8000f70:	4618      	mov	r0, r3
 8000f72:	e6fd      	b.n	8000d70 <__udivmoddi4+0x8c>
 8000f74:	4543      	cmp	r3, r8
 8000f76:	d2e5      	bcs.n	8000f44 <__udivmoddi4+0x260>
 8000f78:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f7c:	eb69 0104 	sbc.w	r1, r9, r4
 8000f80:	3801      	subs	r0, #1
 8000f82:	e7df      	b.n	8000f44 <__udivmoddi4+0x260>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e7d2      	b.n	8000f2e <__udivmoddi4+0x24a>
 8000f88:	4660      	mov	r0, ip
 8000f8a:	e78d      	b.n	8000ea8 <__udivmoddi4+0x1c4>
 8000f8c:	4681      	mov	r9, r0
 8000f8e:	e7b9      	b.n	8000f04 <__udivmoddi4+0x220>
 8000f90:	4666      	mov	r6, ip
 8000f92:	e775      	b.n	8000e80 <__udivmoddi4+0x19c>
 8000f94:	4630      	mov	r0, r6
 8000f96:	e74a      	b.n	8000e2e <__udivmoddi4+0x14a>
 8000f98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f9c:	4439      	add	r1, r7
 8000f9e:	e713      	b.n	8000dc8 <__udivmoddi4+0xe4>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	443c      	add	r4, r7
 8000fa4:	e724      	b.n	8000df0 <__udivmoddi4+0x10c>
 8000fa6:	bf00      	nop

08000fa8 <__aeabi_idiv0>:
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <getRunTimeCounterValue>:
{

}

__weak unsigned long getRunTimeCounterValue(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
return 0;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void test();
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
//	HAL_Delay(200);
//	MT3339_receive(&gps,&temporary);
//	MT3339_read(&gps);
//	printf("%s",t);

	MT3339_receive(&gps,&temporary,gps.sensor.MT3339.gpsString);
 8000fc4:	4a08      	ldr	r2, [pc, #32]	; (8000fe8 <HAL_UART_RxCpltCallback+0x2c>)
 8000fc6:	4909      	ldr	r1, [pc, #36]	; (8000fec <HAL_UART_RxCpltCallback+0x30>)
 8000fc8:	4809      	ldr	r0, [pc, #36]	; (8000ff0 <HAL_UART_RxCpltCallback+0x34>)
 8000fca:	f004 fd7c 	bl	8005ac6 <MT3339_receive>

	    /* USER CODE END WHILE */

	    /* USER CODE BEGIN 3 */
//	HAL_Delay(100);
	state = HAL_UART_Receive_DMA(huart,&temporary, 1);
 8000fce:	2201      	movs	r2, #1
 8000fd0:	4906      	ldr	r1, [pc, #24]	; (8000fec <HAL_UART_RxCpltCallback+0x30>)
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f002 fe5a 	bl	8003c8c <HAL_UART_Receive_DMA>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	461a      	mov	r2, r3
 8000fdc:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <HAL_UART_RxCpltCallback+0x38>)
 8000fde:	701a      	strb	r2, [r3, #0]
//	printf("((%d %d))",state, ii++);
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	200002e0 	.word	0x200002e0
 8000fec:	20000420 	.word	0x20000420
 8000ff0:	200002d8 	.word	0x200002d8
 8000ff4:	20000000 	.word	0x20000000

08000ff8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b0da      	sub	sp, #360	; 0x168
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	doPrint = true;
 8000ffe:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <main+0x70>)
 8001000:	2201      	movs	r2, #1
 8001002:	701a      	strb	r2, [r3, #0]
	doCmd = false;
 8001004:	4b19      	ldr	r3, [pc, #100]	; (800106c <main+0x74>)
 8001006:	2200      	movs	r2, #0
 8001008:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800100a:	f000 fbc3 	bl	8001794 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800100e:	f000 f837 	bl	8001080 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001012:	f000 f93d 	bl	8001290 <MX_GPIO_Init>
  MX_DMA_Init();
 8001016:	f000 f91b 	bl	8001250 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800101a:	f000 f8c5 	bl	80011a8 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800101e:	f000 f8ed 	bl	80011fc <MX_USART6_UART_Init>
  MX_SPI2_Init();
 8001022:	f000 f88b 	bl	800113c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  NucleoF4_Init();
 8001026:	f004 ffa9 	bl	8005f7c <NucleoF4_Init>
  genericSensor_t bmp = MS5607_init(&hspi2,BMP_CS_GPIO_Port,BMP_CS_Pin);
 800102a:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 800102e:	2340      	movs	r3, #64	; 0x40
 8001030:	4a0f      	ldr	r2, [pc, #60]	; (8001070 <main+0x78>)
 8001032:	4910      	ldr	r1, [pc, #64]	; (8001074 <main+0x7c>)
 8001034:	f004 fa3e 	bl	80054b4 <MS5607_init>
//	  bmp.read(&bmp);
//	    printf("%d",bmp.sensor.MS5607.pressure);
//  }
//  gps = MT3339_init(&huart6);
	volatile genericSensor_t gps;
	gps = MT3339_init(&huart6);
 8001038:	463b      	mov	r3, r7
 800103a:	490f      	ldr	r1, [pc, #60]	; (8001078 <main+0x80>)
 800103c:	4618      	mov	r0, r3
 800103e:	f004 fca3 	bl	8005988 <MT3339_init>
 8001042:	463a      	mov	r2, r7
 8001044:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001048:	4611      	mov	r1, r2
 800104a:	2278      	movs	r2, #120	; 0x78
 800104c:	4618      	mov	r0, r3
 800104e:	f005 fb0f 	bl	8006670 <memcpy>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1)
  {
	printf("!%s\r\n",gps.sensor.MT3339.gpsString);
 8001052:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001056:	3308      	adds	r3, #8
 8001058:	4619      	mov	r1, r3
 800105a:	4808      	ldr	r0, [pc, #32]	; (800107c <main+0x84>)
 800105c:	f005 fb1e 	bl	800669c <iprintf>
	HAL_Delay(100);
 8001060:	2064      	movs	r0, #100	; 0x64
 8001062:	f000 fc09 	bl	8001878 <HAL_Delay>
	printf("!%s\r\n",gps.sensor.MT3339.gpsString);
 8001066:	e7f4      	b.n	8001052 <main+0x5a>
 8001068:	20000410 	.word	0x20000410
 800106c:	20000422 	.word	0x20000422
 8001070:	40020400 	.word	0x40020400
 8001074:	200003b4 	.word	0x200003b4
 8001078:	20004424 	.word	0x20004424
 800107c:	08009a78 	.word	0x08009a78

08001080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b094      	sub	sp, #80	; 0x50
 8001084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001086:	f107 0320 	add.w	r3, r7, #32
 800108a:	2230      	movs	r2, #48	; 0x30
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f005 fafc 	bl	800668c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a4:	2300      	movs	r3, #0
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	4b22      	ldr	r3, [pc, #136]	; (8001134 <SystemClock_Config+0xb4>)
 80010aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ac:	4a21      	ldr	r2, [pc, #132]	; (8001134 <SystemClock_Config+0xb4>)
 80010ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b2:	6413      	str	r3, [r2, #64]	; 0x40
 80010b4:	4b1f      	ldr	r3, [pc, #124]	; (8001134 <SystemClock_Config+0xb4>)
 80010b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010c0:	2300      	movs	r3, #0
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <SystemClock_Config+0xb8>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a1b      	ldr	r2, [pc, #108]	; (8001138 <SystemClock_Config+0xb8>)
 80010ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	4b19      	ldr	r3, [pc, #100]	; (8001138 <SystemClock_Config+0xb8>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010dc:	2302      	movs	r3, #2
 80010de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010e0:	2301      	movs	r3, #1
 80010e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010e4:	2310      	movs	r3, #16
 80010e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010e8:	2300      	movs	r3, #0
 80010ea:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ec:	f107 0320 	add.w	r3, r7, #32
 80010f0:	4618      	mov	r0, r3
 80010f2:	f001 fa3f 	bl	8002574 <HAL_RCC_OscConfig>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80010fc:	f000 f94a 	bl	8001394 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001100:	230f      	movs	r3, #15
 8001102:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001104:	2300      	movs	r3, #0
 8001106:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800110c:	2300      	movs	r3, #0
 800110e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001114:	f107 030c 	add.w	r3, r7, #12
 8001118:	2100      	movs	r1, #0
 800111a:	4618      	mov	r0, r3
 800111c:	f001 fc9a 	bl	8002a54 <HAL_RCC_ClockConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001126:	f000 f935 	bl	8001394 <Error_Handler>
  }
}
 800112a:	bf00      	nop
 800112c:	3750      	adds	r7, #80	; 0x50
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800
 8001138:	40007000 	.word	0x40007000

0800113c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001140:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <MX_SPI2_Init+0x64>)
 8001142:	4a18      	ldr	r2, [pc, #96]	; (80011a4 <MX_SPI2_Init+0x68>)
 8001144:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001146:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <MX_SPI2_Init+0x64>)
 8001148:	f44f 7282 	mov.w	r2, #260	; 0x104
 800114c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <MX_SPI2_Init+0x64>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <MX_SPI2_Init+0x64>)
 8001156:	2200      	movs	r2, #0
 8001158:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_SPI2_Init+0x64>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <MX_SPI2_Init+0x64>)
 8001162:	2200      	movs	r2, #0
 8001164:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <MX_SPI2_Init+0x64>)
 8001168:	f44f 7200 	mov.w	r2, #512	; 0x200
 800116c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <MX_SPI2_Init+0x64>)
 8001170:	2200      	movs	r2, #0
 8001172:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001174:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <MX_SPI2_Init+0x64>)
 8001176:	2200      	movs	r2, #0
 8001178:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <MX_SPI2_Init+0x64>)
 800117c:	2200      	movs	r2, #0
 800117e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001180:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <MX_SPI2_Init+0x64>)
 8001182:	2200      	movs	r2, #0
 8001184:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <MX_SPI2_Init+0x64>)
 8001188:	220a      	movs	r2, #10
 800118a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800118c:	4804      	ldr	r0, [pc, #16]	; (80011a0 <MX_SPI2_Init+0x64>)
 800118e:	f001 fe31 	bl	8002df4 <HAL_SPI_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001198:	f000 f8fc 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	200003b4 	.word	0x200003b4
 80011a4:	40003800 	.word	0x40003800

080011a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011ae:	4a12      	ldr	r2, [pc, #72]	; (80011f8 <MX_USART2_UART_Init+0x50>)
 80011b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011c6:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011cc:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011ce:	220c      	movs	r2, #12
 80011d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d2:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011e0:	f002 fb5c 	bl	800389c <HAL_UART_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011ea:	f000 f8d3 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	200044c4 	.word	0x200044c4
 80011f8:	40004400 	.word	0x40004400

080011fc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001200:	4b11      	ldr	r3, [pc, #68]	; (8001248 <MX_USART6_UART_Init+0x4c>)
 8001202:	4a12      	ldr	r2, [pc, #72]	; (800124c <MX_USART6_UART_Init+0x50>)
 8001204:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001206:	4b10      	ldr	r3, [pc, #64]	; (8001248 <MX_USART6_UART_Init+0x4c>)
 8001208:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800120c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <MX_USART6_UART_Init+0x4c>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <MX_USART6_UART_Init+0x4c>)
 8001216:	2200      	movs	r2, #0
 8001218:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <MX_USART6_UART_Init+0x4c>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001220:	4b09      	ldr	r3, [pc, #36]	; (8001248 <MX_USART6_UART_Init+0x4c>)
 8001222:	220c      	movs	r2, #12
 8001224:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <MX_USART6_UART_Init+0x4c>)
 8001228:	2200      	movs	r2, #0
 800122a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <MX_USART6_UART_Init+0x4c>)
 800122e:	2200      	movs	r2, #0
 8001230:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <MX_USART6_UART_Init+0x4c>)
 8001234:	f002 fb32 	bl	800389c <HAL_UART_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800123e:	f000 f8a9 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20004424 	.word	0x20004424
 800124c:	40011400 	.word	0x40011400

08001250 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	4b0c      	ldr	r3, [pc, #48]	; (800128c <MX_DMA_Init+0x3c>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a0b      	ldr	r2, [pc, #44]	; (800128c <MX_DMA_Init+0x3c>)
 8001260:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <MX_DMA_Init+0x3c>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2105      	movs	r1, #5
 8001276:	2039      	movs	r0, #57	; 0x39
 8001278:	f000 fbfd 	bl	8001a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800127c:	2039      	movs	r0, #57	; 0x39
 800127e:	f000 fc16 	bl	8001aae <HAL_NVIC_EnableIRQ>

}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40023800 	.word	0x40023800

08001290 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001296:	f107 030c 	add.w	r3, r7, #12
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
 80012a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	4b36      	ldr	r3, [pc, #216]	; (8001384 <MX_GPIO_Init+0xf4>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a35      	ldr	r2, [pc, #212]	; (8001384 <MX_GPIO_Init+0xf4>)
 80012b0:	f043 0304 	orr.w	r3, r3, #4
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b33      	ldr	r3, [pc, #204]	; (8001384 <MX_GPIO_Init+0xf4>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0304 	and.w	r3, r3, #4
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	4b2f      	ldr	r3, [pc, #188]	; (8001384 <MX_GPIO_Init+0xf4>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a2e      	ldr	r2, [pc, #184]	; (8001384 <MX_GPIO_Init+0xf4>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b2c      	ldr	r3, [pc, #176]	; (8001384 <MX_GPIO_Init+0xf4>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	603b      	str	r3, [r7, #0]
 80012e2:	4b28      	ldr	r3, [pc, #160]	; (8001384 <MX_GPIO_Init+0xf4>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a27      	ldr	r2, [pc, #156]	; (8001384 <MX_GPIO_Init+0xf4>)
 80012e8:	f043 0302 	orr.w	r3, r3, #2
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b25      	ldr	r3, [pc, #148]	; (8001384 <MX_GPIO_Init+0xf4>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2120      	movs	r1, #32
 80012fe:	4822      	ldr	r0, [pc, #136]	; (8001388 <MX_GPIO_Init+0xf8>)
 8001300:	f001 f91e 	bl	8002540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 8001304:	2200      	movs	r2, #0
 8001306:	2140      	movs	r1, #64	; 0x40
 8001308:	4820      	ldr	r0, [pc, #128]	; (800138c <MX_GPIO_Init+0xfc>)
 800130a:	f001 f919 	bl	8002540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800130e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001312:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001314:	2300      	movs	r3, #0
 8001316:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	4619      	mov	r1, r3
 8001322:	481b      	ldr	r0, [pc, #108]	; (8001390 <MX_GPIO_Init+0x100>)
 8001324:	f000 ff70 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001328:	2320      	movs	r3, #32
 800132a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132c:	2301      	movs	r3, #1
 800132e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001334:	2300      	movs	r3, #0
 8001336:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001338:	f107 030c 	add.w	r3, r7, #12
 800133c:	4619      	mov	r1, r3
 800133e:	4812      	ldr	r0, [pc, #72]	; (8001388 <MX_GPIO_Init+0xf8>)
 8001340:	f000 ff62 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_EXT_Pin */
  GPIO_InitStruct.Pin = B_EXT_Pin;
 8001344:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001348:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B_EXT_GPIO_Port, &GPIO_InitStruct);
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	4619      	mov	r1, r3
 8001358:	480b      	ldr	r0, [pc, #44]	; (8001388 <MX_GPIO_Init+0xf8>)
 800135a:	f000 ff55 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : BMP_CS_Pin */
  GPIO_InitStruct.Pin = BMP_CS_Pin;
 800135e:	2340      	movs	r3, #64	; 0x40
 8001360:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001362:	2301      	movs	r3, #1
 8001364:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136a:	2300      	movs	r3, #0
 800136c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BMP_CS_GPIO_Port, &GPIO_InitStruct);
 800136e:	f107 030c 	add.w	r3, r7, #12
 8001372:	4619      	mov	r1, r3
 8001374:	4805      	ldr	r0, [pc, #20]	; (800138c <MX_GPIO_Init+0xfc>)
 8001376:	f000 ff47 	bl	8002208 <HAL_GPIO_Init>

}
 800137a:	bf00      	nop
 800137c:	3720      	adds	r7, #32
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40023800 	.word	0x40023800
 8001388:	40020000 	.word	0x40020000
 800138c:	40020400 	.word	0x40020400
 8001390:	40020800 	.word	0x40020800

08001394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001398:	b672      	cpsid	i
}
 800139a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800139c:	e7fe      	b.n	800139c <Error_Handler+0x8>
	...

080013a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <HAL_MspInit+0x54>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ae:	4a11      	ldr	r2, [pc, #68]	; (80013f4 <HAL_MspInit+0x54>)
 80013b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013b4:	6453      	str	r3, [r2, #68]	; 0x44
 80013b6:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <HAL_MspInit+0x54>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	603b      	str	r3, [r7, #0]
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <HAL_MspInit+0x54>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <HAL_MspInit+0x54>)
 80013cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d0:	6413      	str	r3, [r2, #64]	; 0x40
 80013d2:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <HAL_MspInit+0x54>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013da:	603b      	str	r3, [r7, #0]
 80013dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	210f      	movs	r1, #15
 80013e2:	f06f 0001 	mvn.w	r0, #1
 80013e6:	f000 fb46 	bl	8001a76 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40023800 	.word	0x40023800

080013f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	; 0x28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a28      	ldr	r2, [pc, #160]	; (80014b8 <HAL_SPI_MspInit+0xc0>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d14a      	bne.n	80014b0 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
 800141e:	4b27      	ldr	r3, [pc, #156]	; (80014bc <HAL_SPI_MspInit+0xc4>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	4a26      	ldr	r2, [pc, #152]	; (80014bc <HAL_SPI_MspInit+0xc4>)
 8001424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001428:	6413      	str	r3, [r2, #64]	; 0x40
 800142a:	4b24      	ldr	r3, [pc, #144]	; (80014bc <HAL_SPI_MspInit+0xc4>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	4b20      	ldr	r3, [pc, #128]	; (80014bc <HAL_SPI_MspInit+0xc4>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a1f      	ldr	r2, [pc, #124]	; (80014bc <HAL_SPI_MspInit+0xc4>)
 8001440:	f043 0304 	orr.w	r3, r3, #4
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <HAL_SPI_MspInit+0xc4>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0304 	and.w	r3, r3, #4
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	4b19      	ldr	r3, [pc, #100]	; (80014bc <HAL_SPI_MspInit+0xc4>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a18      	ldr	r2, [pc, #96]	; (80014bc <HAL_SPI_MspInit+0xc4>)
 800145c:	f043 0302 	orr.w	r3, r3, #2
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b16      	ldr	r3, [pc, #88]	; (80014bc <HAL_SPI_MspInit+0xc4>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800146e:	230c      	movs	r3, #12
 8001470:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800147e:	2305      	movs	r3, #5
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	4619      	mov	r1, r3
 8001488:	480d      	ldr	r0, [pc, #52]	; (80014c0 <HAL_SPI_MspInit+0xc8>)
 800148a:	f000 febd 	bl	8002208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800148e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001494:	2302      	movs	r3, #2
 8001496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149c:	2303      	movs	r3, #3
 800149e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014a0:	2305      	movs	r3, #5
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	4619      	mov	r1, r3
 80014aa:	4806      	ldr	r0, [pc, #24]	; (80014c4 <HAL_SPI_MspInit+0xcc>)
 80014ac:	f000 feac 	bl	8002208 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80014b0:	bf00      	nop
 80014b2:	3728      	adds	r7, #40	; 0x28
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40003800 	.word	0x40003800
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40020800 	.word	0x40020800
 80014c4:	40020400 	.word	0x40020400

080014c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08c      	sub	sp, #48	; 0x30
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 031c 	add.w	r3, r7, #28
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a4d      	ldr	r2, [pc, #308]	; (800161c <HAL_UART_MspInit+0x154>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d12c      	bne.n	8001544 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	61bb      	str	r3, [r7, #24]
 80014ee:	4b4c      	ldr	r3, [pc, #304]	; (8001620 <HAL_UART_MspInit+0x158>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	4a4b      	ldr	r2, [pc, #300]	; (8001620 <HAL_UART_MspInit+0x158>)
 80014f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f8:	6413      	str	r3, [r2, #64]	; 0x40
 80014fa:	4b49      	ldr	r3, [pc, #292]	; (8001620 <HAL_UART_MspInit+0x158>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001502:	61bb      	str	r3, [r7, #24]
 8001504:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
 800150a:	4b45      	ldr	r3, [pc, #276]	; (8001620 <HAL_UART_MspInit+0x158>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a44      	ldr	r2, [pc, #272]	; (8001620 <HAL_UART_MspInit+0x158>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b42      	ldr	r3, [pc, #264]	; (8001620 <HAL_UART_MspInit+0x158>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001522:	230c      	movs	r3, #12
 8001524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001526:	2302      	movs	r3, #2
 8001528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152e:	2303      	movs	r3, #3
 8001530:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001532:	2307      	movs	r3, #7
 8001534:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001536:	f107 031c 	add.w	r3, r7, #28
 800153a:	4619      	mov	r1, r3
 800153c:	4839      	ldr	r0, [pc, #228]	; (8001624 <HAL_UART_MspInit+0x15c>)
 800153e:	f000 fe63 	bl	8002208 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001542:	e066      	b.n	8001612 <HAL_UART_MspInit+0x14a>
  else if(huart->Instance==USART6)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a37      	ldr	r2, [pc, #220]	; (8001628 <HAL_UART_MspInit+0x160>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d161      	bne.n	8001612 <HAL_UART_MspInit+0x14a>
    __HAL_RCC_USART6_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
 8001552:	4b33      	ldr	r3, [pc, #204]	; (8001620 <HAL_UART_MspInit+0x158>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	4a32      	ldr	r2, [pc, #200]	; (8001620 <HAL_UART_MspInit+0x158>)
 8001558:	f043 0320 	orr.w	r3, r3, #32
 800155c:	6453      	str	r3, [r2, #68]	; 0x44
 800155e:	4b30      	ldr	r3, [pc, #192]	; (8001620 <HAL_UART_MspInit+0x158>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	f003 0320 	and.w	r3, r3, #32
 8001566:	613b      	str	r3, [r7, #16]
 8001568:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	4b2c      	ldr	r3, [pc, #176]	; (8001620 <HAL_UART_MspInit+0x158>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a2b      	ldr	r2, [pc, #172]	; (8001620 <HAL_UART_MspInit+0x158>)
 8001574:	f043 0304 	orr.w	r3, r3, #4
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b29      	ldr	r3, [pc, #164]	; (8001620 <HAL_UART_MspInit+0x158>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001586:	23c0      	movs	r3, #192	; 0xc0
 8001588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001592:	2303      	movs	r3, #3
 8001594:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001596:	2308      	movs	r3, #8
 8001598:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800159a:	f107 031c 	add.w	r3, r7, #28
 800159e:	4619      	mov	r1, r3
 80015a0:	4822      	ldr	r0, [pc, #136]	; (800162c <HAL_UART_MspInit+0x164>)
 80015a2:	f000 fe31 	bl	8002208 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80015a6:	4b22      	ldr	r3, [pc, #136]	; (8001630 <HAL_UART_MspInit+0x168>)
 80015a8:	4a22      	ldr	r2, [pc, #136]	; (8001634 <HAL_UART_MspInit+0x16c>)
 80015aa:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80015ac:	4b20      	ldr	r3, [pc, #128]	; (8001630 <HAL_UART_MspInit+0x168>)
 80015ae:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80015b2:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015b4:	4b1e      	ldr	r3, [pc, #120]	; (8001630 <HAL_UART_MspInit+0x168>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ba:	4b1d      	ldr	r3, [pc, #116]	; (8001630 <HAL_UART_MspInit+0x168>)
 80015bc:	2200      	movs	r2, #0
 80015be:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015c0:	4b1b      	ldr	r3, [pc, #108]	; (8001630 <HAL_UART_MspInit+0x168>)
 80015c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015c6:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015c8:	4b19      	ldr	r3, [pc, #100]	; (8001630 <HAL_UART_MspInit+0x168>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015ce:	4b18      	ldr	r3, [pc, #96]	; (8001630 <HAL_UART_MspInit+0x168>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80015d4:	4b16      	ldr	r3, [pc, #88]	; (8001630 <HAL_UART_MspInit+0x168>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015da:	4b15      	ldr	r3, [pc, #84]	; (8001630 <HAL_UART_MspInit+0x168>)
 80015dc:	2200      	movs	r2, #0
 80015de:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015e0:	4b13      	ldr	r3, [pc, #76]	; (8001630 <HAL_UART_MspInit+0x168>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80015e6:	4812      	ldr	r0, [pc, #72]	; (8001630 <HAL_UART_MspInit+0x168>)
 80015e8:	f000 fa7c 	bl	8001ae4 <HAL_DMA_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_UART_MspInit+0x12e>
      Error_Handler();
 80015f2:	f7ff fecf 	bl	8001394 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a0d      	ldr	r2, [pc, #52]	; (8001630 <HAL_UART_MspInit+0x168>)
 80015fa:	635a      	str	r2, [r3, #52]	; 0x34
 80015fc:	4a0c      	ldr	r2, [pc, #48]	; (8001630 <HAL_UART_MspInit+0x168>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2105      	movs	r1, #5
 8001606:	2047      	movs	r0, #71	; 0x47
 8001608:	f000 fa35 	bl	8001a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800160c:	2047      	movs	r0, #71	; 0x47
 800160e:	f000 fa4e 	bl	8001aae <HAL_NVIC_EnableIRQ>
}
 8001612:	bf00      	nop
 8001614:	3730      	adds	r7, #48	; 0x30
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40004400 	.word	0x40004400
 8001620:	40023800 	.word	0x40023800
 8001624:	40020000 	.word	0x40020000
 8001628:	40011400 	.word	0x40011400
 800162c:	40020800 	.word	0x40020800
 8001630:	20000354 	.word	0x20000354
 8001634:	40026428 	.word	0x40026428

08001638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800163c:	e7fe      	b.n	800163c <NMI_Handler+0x4>

0800163e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001642:	e7fe      	b.n	8001642 <HardFault_Handler+0x4>

08001644 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001648:	e7fe      	b.n	8001648 <MemManage_Handler+0x4>

0800164a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800164e:	e7fe      	b.n	800164e <BusFault_Handler+0x4>

08001650 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001654:	e7fe      	b.n	8001654 <UsageFault_Handler+0x4>

08001656 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001668:	f000 f8e6 	bl	8001838 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800166c:	f004 ff3e 	bl	80064ec <xTaskGetSchedulerState>
 8001670:	4603      	mov	r3, r0
 8001672:	2b01      	cmp	r3, #1
 8001674:	d001      	beq.n	800167a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001676:	f004 ffa7 	bl	80065c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001684:	4802      	ldr	r0, [pc, #8]	; (8001690 <DMA2_Stream1_IRQHandler+0x10>)
 8001686:	f000 fb55 	bl	8001d34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000354 	.word	0x20000354

08001694 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001698:	4802      	ldr	r0, [pc, #8]	; (80016a4 <USART6_IRQHandler+0x10>)
 800169a:	f002 fb77 	bl	8003d8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20004424 	.word	0x20004424

080016a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016b0:	4a14      	ldr	r2, [pc, #80]	; (8001704 <_sbrk+0x5c>)
 80016b2:	4b15      	ldr	r3, [pc, #84]	; (8001708 <_sbrk+0x60>)
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016bc:	4b13      	ldr	r3, [pc, #76]	; (800170c <_sbrk+0x64>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d102      	bne.n	80016ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016c4:	4b11      	ldr	r3, [pc, #68]	; (800170c <_sbrk+0x64>)
 80016c6:	4a12      	ldr	r2, [pc, #72]	; (8001710 <_sbrk+0x68>)
 80016c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ca:	4b10      	ldr	r3, [pc, #64]	; (800170c <_sbrk+0x64>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4413      	add	r3, r2
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d207      	bcs.n	80016e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016d8:	f004 ffa0 	bl	800661c <__errno>
 80016dc:	4603      	mov	r3, r0
 80016de:	220c      	movs	r2, #12
 80016e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016e2:	f04f 33ff 	mov.w	r3, #4294967295
 80016e6:	e009      	b.n	80016fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016e8:	4b08      	ldr	r3, [pc, #32]	; (800170c <_sbrk+0x64>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ee:	4b07      	ldr	r3, [pc, #28]	; (800170c <_sbrk+0x64>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4413      	add	r3, r2
 80016f6:	4a05      	ldr	r2, [pc, #20]	; (800170c <_sbrk+0x64>)
 80016f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016fa:	68fb      	ldr	r3, [r7, #12]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20020000 	.word	0x20020000
 8001708:	00000400 	.word	0x00000400
 800170c:	20000204 	.word	0x20000204
 8001710:	200046e0 	.word	0x200046e0

08001714 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <SystemInit+0x28>)
 800171a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800171e:	4a07      	ldr	r2, [pc, #28]	; (800173c <SystemInit+0x28>)
 8001720:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001724:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <SystemInit+0x28>)
 800172a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800172e:	609a      	str	r2, [r3, #8]
#endif
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001740:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001778 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001744:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001746:	e003      	b.n	8001750 <LoopCopyDataInit>

08001748 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001748:	4b0c      	ldr	r3, [pc, #48]	; (800177c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800174a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800174c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800174e:	3104      	adds	r1, #4

08001750 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001750:	480b      	ldr	r0, [pc, #44]	; (8001780 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001752:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001754:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001756:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001758:	d3f6      	bcc.n	8001748 <CopyDataInit>
  ldr  r2, =_sbss
 800175a:	4a0b      	ldr	r2, [pc, #44]	; (8001788 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800175c:	e002      	b.n	8001764 <LoopFillZerobss>

0800175e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800175e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001760:	f842 3b04 	str.w	r3, [r2], #4

08001764 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001764:	4b09      	ldr	r3, [pc, #36]	; (800178c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001766:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001768:	d3f9      	bcc.n	800175e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800176a:	f7ff ffd3 	bl	8001714 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800176e:	f004 ff5b 	bl	8006628 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001772:	f7ff fc41 	bl	8000ff8 <main>
  bx  lr    
 8001776:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001778:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800177c:	08009ff0 	.word	0x08009ff0
  ldr  r0, =_sdata
 8001780:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001784:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 8001788:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 800178c:	200046e0 	.word	0x200046e0

08001790 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001790:	e7fe      	b.n	8001790 <ADC_IRQHandler>
	...

08001794 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001798:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <HAL_Init+0x40>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a0d      	ldr	r2, [pc, #52]	; (80017d4 <HAL_Init+0x40>)
 800179e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017a4:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <HAL_Init+0x40>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <HAL_Init+0x40>)
 80017aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <HAL_Init+0x40>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a07      	ldr	r2, [pc, #28]	; (80017d4 <HAL_Init+0x40>)
 80017b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017bc:	2003      	movs	r0, #3
 80017be:	f000 f94f 	bl	8001a60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017c2:	200f      	movs	r0, #15
 80017c4:	f000 f808 	bl	80017d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017c8:	f7ff fdea 	bl	80013a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40023c00 	.word	0x40023c00

080017d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017e0:	4b12      	ldr	r3, [pc, #72]	; (800182c <HAL_InitTick+0x54>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4b12      	ldr	r3, [pc, #72]	; (8001830 <HAL_InitTick+0x58>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	4619      	mov	r1, r3
 80017ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80017f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f6:	4618      	mov	r0, r3
 80017f8:	f000 f967 	bl	8001aca <HAL_SYSTICK_Config>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e00e      	b.n	8001824 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2b0f      	cmp	r3, #15
 800180a:	d80a      	bhi.n	8001822 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800180c:	2200      	movs	r2, #0
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	f04f 30ff 	mov.w	r0, #4294967295
 8001814:	f000 f92f 	bl	8001a76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001818:	4a06      	ldr	r2, [pc, #24]	; (8001834 <HAL_InitTick+0x5c>)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800181e:	2300      	movs	r3, #0
 8001820:	e000      	b.n	8001824 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
}
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000004 	.word	0x20000004
 8001830:	2000000c 	.word	0x2000000c
 8001834:	20000008 	.word	0x20000008

08001838 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_IncTick+0x20>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	4b06      	ldr	r3, [pc, #24]	; (800185c <HAL_IncTick+0x24>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4413      	add	r3, r2
 8001848:	4a04      	ldr	r2, [pc, #16]	; (800185c <HAL_IncTick+0x24>)
 800184a:	6013      	str	r3, [r2, #0]
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	2000000c 	.word	0x2000000c
 800185c:	20004584 	.word	0x20004584

08001860 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return uwTick;
 8001864:	4b03      	ldr	r3, [pc, #12]	; (8001874 <HAL_GetTick+0x14>)
 8001866:	681b      	ldr	r3, [r3, #0]
}
 8001868:	4618      	mov	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	20004584 	.word	0x20004584

08001878 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001880:	f7ff ffee 	bl	8001860 <HAL_GetTick>
 8001884:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001890:	d005      	beq.n	800189e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001892:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <HAL_Delay+0x44>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	461a      	mov	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4413      	add	r3, r2
 800189c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800189e:	bf00      	nop
 80018a0:	f7ff ffde 	bl	8001860 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d8f7      	bhi.n	80018a0 <HAL_Delay+0x28>
  {
  }
}
 80018b0:	bf00      	nop
 80018b2:	bf00      	nop
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	2000000c 	.word	0x2000000c

080018c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <__NVIC_SetPriorityGrouping+0x44>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018dc:	4013      	ands	r3, r2
 80018de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018f2:	4a04      	ldr	r2, [pc, #16]	; (8001904 <__NVIC_SetPriorityGrouping+0x44>)
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	60d3      	str	r3, [r2, #12]
}
 80018f8:	bf00      	nop
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800190c:	4b04      	ldr	r3, [pc, #16]	; (8001920 <__NVIC_GetPriorityGrouping+0x18>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	0a1b      	lsrs	r3, r3, #8
 8001912:	f003 0307 	and.w	r3, r3, #7
}
 8001916:	4618      	mov	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	2b00      	cmp	r3, #0
 8001934:	db0b      	blt.n	800194e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	f003 021f 	and.w	r2, r3, #31
 800193c:	4907      	ldr	r1, [pc, #28]	; (800195c <__NVIC_EnableIRQ+0x38>)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	095b      	lsrs	r3, r3, #5
 8001944:	2001      	movs	r0, #1
 8001946:	fa00 f202 	lsl.w	r2, r0, r2
 800194a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	e000e100 	.word	0xe000e100

08001960 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	6039      	str	r1, [r7, #0]
 800196a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001970:	2b00      	cmp	r3, #0
 8001972:	db0a      	blt.n	800198a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	b2da      	uxtb	r2, r3
 8001978:	490c      	ldr	r1, [pc, #48]	; (80019ac <__NVIC_SetPriority+0x4c>)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	0112      	lsls	r2, r2, #4
 8001980:	b2d2      	uxtb	r2, r2
 8001982:	440b      	add	r3, r1
 8001984:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001988:	e00a      	b.n	80019a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	b2da      	uxtb	r2, r3
 800198e:	4908      	ldr	r1, [pc, #32]	; (80019b0 <__NVIC_SetPriority+0x50>)
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	3b04      	subs	r3, #4
 8001998:	0112      	lsls	r2, r2, #4
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	440b      	add	r3, r1
 800199e:	761a      	strb	r2, [r3, #24]
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000e100 	.word	0xe000e100
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b089      	sub	sp, #36	; 0x24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f1c3 0307 	rsb	r3, r3, #7
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	bf28      	it	cs
 80019d2:	2304      	movcs	r3, #4
 80019d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3304      	adds	r3, #4
 80019da:	2b06      	cmp	r3, #6
 80019dc:	d902      	bls.n	80019e4 <NVIC_EncodePriority+0x30>
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3b03      	subs	r3, #3
 80019e2:	e000      	b.n	80019e6 <NVIC_EncodePriority+0x32>
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e8:	f04f 32ff 	mov.w	r2, #4294967295
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43da      	mvns	r2, r3
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	401a      	ands	r2, r3
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	fa01 f303 	lsl.w	r3, r1, r3
 8001a06:	43d9      	mvns	r1, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a0c:	4313      	orrs	r3, r2
         );
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3724      	adds	r7, #36	; 0x24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
	...

08001a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a2c:	d301      	bcc.n	8001a32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e00f      	b.n	8001a52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a32:	4a0a      	ldr	r2, [pc, #40]	; (8001a5c <SysTick_Config+0x40>)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a3a:	210f      	movs	r1, #15
 8001a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a40:	f7ff ff8e 	bl	8001960 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a44:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <SysTick_Config+0x40>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a4a:	4b04      	ldr	r3, [pc, #16]	; (8001a5c <SysTick_Config+0x40>)
 8001a4c:	2207      	movs	r2, #7
 8001a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	e000e010 	.word	0xe000e010

08001a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff ff29 	bl	80018c0 <__NVIC_SetPriorityGrouping>
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b086      	sub	sp, #24
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	60b9      	str	r1, [r7, #8]
 8001a80:	607a      	str	r2, [r7, #4]
 8001a82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a88:	f7ff ff3e 	bl	8001908 <__NVIC_GetPriorityGrouping>
 8001a8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	68b9      	ldr	r1, [r7, #8]
 8001a92:	6978      	ldr	r0, [r7, #20]
 8001a94:	f7ff ff8e 	bl	80019b4 <NVIC_EncodePriority>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff ff5d 	bl	8001960 <__NVIC_SetPriority>
}
 8001aa6:	bf00      	nop
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff31 	bl	8001924 <__NVIC_EnableIRQ>
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff ffa2 	bl	8001a1c <SysTick_Config>
 8001ad8:	4603      	mov	r3, r0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001af0:	f7ff feb6 	bl	8001860 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e099      	b.n	8001c34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 0201 	bic.w	r2, r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b20:	e00f      	b.n	8001b42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b22:	f7ff fe9d 	bl	8001860 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b05      	cmp	r3, #5
 8001b2e:	d908      	bls.n	8001b42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2220      	movs	r2, #32
 8001b34:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2203      	movs	r2, #3
 8001b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e078      	b.n	8001c34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1e8      	bne.n	8001b22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	4b38      	ldr	r3, [pc, #224]	; (8001c3c <HAL_DMA_Init+0x158>)
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b98:	2b04      	cmp	r3, #4
 8001b9a:	d107      	bne.n	8001bac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	f023 0307 	bic.w	r3, r3, #7
 8001bc2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	d117      	bne.n	8001c06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d00e      	beq.n	8001c06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 fa91 	bl	8002110 <DMA_CheckFifoParam>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d008      	beq.n	8001c06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2240      	movs	r2, #64	; 0x40
 8001bf8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c02:	2301      	movs	r3, #1
 8001c04:	e016      	b.n	8001c34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	697a      	ldr	r2, [r7, #20]
 8001c0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 fa48 	bl	80020a4 <DMA_CalcBaseAndBitshift>
 8001c14:	4603      	mov	r3, r0
 8001c16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c1c:	223f      	movs	r2, #63	; 0x3f
 8001c1e:	409a      	lsls	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	f010803f 	.word	0xf010803f

08001c40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
 8001c4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c56:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d101      	bne.n	8001c66 <HAL_DMA_Start_IT+0x26>
 8001c62:	2302      	movs	r3, #2
 8001c64:	e040      	b.n	8001ce8 <HAL_DMA_Start_IT+0xa8>
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d12f      	bne.n	8001cda <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	68b9      	ldr	r1, [r7, #8]
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	f000 f9da 	bl	8002048 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c98:	223f      	movs	r2, #63	; 0x3f
 8001c9a:	409a      	lsls	r2, r3
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0216 	orr.w	r2, r2, #22
 8001cae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d007      	beq.n	8001cc8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f042 0208 	orr.w	r2, r2, #8
 8001cc6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f042 0201 	orr.w	r2, r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	e005      	b.n	8001ce6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d004      	beq.n	8001d0e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2280      	movs	r2, #128	; 0x80
 8001d08:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e00c      	b.n	8001d28 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2205      	movs	r2, #5
 8001d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 0201 	bic.w	r2, r2, #1
 8001d24:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d40:	4b92      	ldr	r3, [pc, #584]	; (8001f8c <HAL_DMA_IRQHandler+0x258>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a92      	ldr	r2, [pc, #584]	; (8001f90 <HAL_DMA_IRQHandler+0x25c>)
 8001d46:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4a:	0a9b      	lsrs	r3, r3, #10
 8001d4c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d52:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5e:	2208      	movs	r2, #8
 8001d60:	409a      	lsls	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4013      	ands	r3, r2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d01a      	beq.n	8001da0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d013      	beq.n	8001da0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0204 	bic.w	r2, r2, #4
 8001d86:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8c:	2208      	movs	r2, #8
 8001d8e:	409a      	lsls	r2, r3
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d98:	f043 0201 	orr.w	r2, r3, #1
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da4:	2201      	movs	r2, #1
 8001da6:	409a      	lsls	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4013      	ands	r3, r2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d012      	beq.n	8001dd6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00b      	beq.n	8001dd6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	409a      	lsls	r2, r3
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dce:	f043 0202 	orr.w	r2, r3, #2
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dda:	2204      	movs	r2, #4
 8001ddc:	409a      	lsls	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4013      	ands	r3, r2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d012      	beq.n	8001e0c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00b      	beq.n	8001e0c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df8:	2204      	movs	r2, #4
 8001dfa:	409a      	lsls	r2, r3
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e04:	f043 0204 	orr.w	r2, r3, #4
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e10:	2210      	movs	r2, #16
 8001e12:	409a      	lsls	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4013      	ands	r3, r2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d043      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d03c      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2e:	2210      	movs	r2, #16
 8001e30:	409a      	lsls	r2, r3
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d018      	beq.n	8001e76 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d108      	bne.n	8001e64 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d024      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	4798      	blx	r3
 8001e62:	e01f      	b.n	8001ea4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d01b      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	4798      	blx	r3
 8001e74:	e016      	b.n	8001ea4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d107      	bne.n	8001e94 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 0208 	bic.w	r2, r2, #8
 8001e92:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea8:	2220      	movs	r2, #32
 8001eaa:	409a      	lsls	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f000 808e 	beq.w	8001fd2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0310 	and.w	r3, r3, #16
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f000 8086 	beq.w	8001fd2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eca:	2220      	movs	r2, #32
 8001ecc:	409a      	lsls	r2, r3
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b05      	cmp	r3, #5
 8001edc:	d136      	bne.n	8001f4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0216 	bic.w	r2, r2, #22
 8001eec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	695a      	ldr	r2, [r3, #20]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001efc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d103      	bne.n	8001f0e <HAL_DMA_IRQHandler+0x1da>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d007      	beq.n	8001f1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0208 	bic.w	r2, r2, #8
 8001f1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f22:	223f      	movs	r2, #63	; 0x3f
 8001f24:	409a      	lsls	r2, r3
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d07d      	beq.n	800203e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	4798      	blx	r3
        }
        return;
 8001f4a:	e078      	b.n	800203e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d01c      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d108      	bne.n	8001f7a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d030      	beq.n	8001fd2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	4798      	blx	r3
 8001f78:	e02b      	b.n	8001fd2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d027      	beq.n	8001fd2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	4798      	blx	r3
 8001f8a:	e022      	b.n	8001fd2 <HAL_DMA_IRQHandler+0x29e>
 8001f8c:	20000004 	.word	0x20000004
 8001f90:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10f      	bne.n	8001fc2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 0210 	bic.w	r2, r2, #16
 8001fb0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d032      	beq.n	8002040 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d022      	beq.n	800202c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2205      	movs	r2, #5
 8001fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 0201 	bic.w	r2, r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	3301      	adds	r3, #1
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	429a      	cmp	r2, r3
 8002008:	d307      	bcc.n	800201a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1f2      	bne.n	8001ffe <HAL_DMA_IRQHandler+0x2ca>
 8002018:	e000      	b.n	800201c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800201a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002030:	2b00      	cmp	r3, #0
 8002032:	d005      	beq.n	8002040 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	4798      	blx	r3
 800203c:	e000      	b.n	8002040 <HAL_DMA_IRQHandler+0x30c>
        return;
 800203e:	bf00      	nop
    }
  }
}
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop

08002048 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
 8002054:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002064:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2b40      	cmp	r3, #64	; 0x40
 8002074:	d108      	bne.n	8002088 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002086:	e007      	b.n	8002098 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68ba      	ldr	r2, [r7, #8]
 800208e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	60da      	str	r2, [r3, #12]
}
 8002098:	bf00      	nop
 800209a:	3714      	adds	r7, #20
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	3b10      	subs	r3, #16
 80020b4:	4a14      	ldr	r2, [pc, #80]	; (8002108 <DMA_CalcBaseAndBitshift+0x64>)
 80020b6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ba:	091b      	lsrs	r3, r3, #4
 80020bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020be:	4a13      	ldr	r2, [pc, #76]	; (800210c <DMA_CalcBaseAndBitshift+0x68>)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4413      	add	r3, r2
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	461a      	mov	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2b03      	cmp	r3, #3
 80020d0:	d909      	bls.n	80020e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020da:	f023 0303 	bic.w	r3, r3, #3
 80020de:	1d1a      	adds	r2, r3, #4
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	659a      	str	r2, [r3, #88]	; 0x58
 80020e4:	e007      	b.n	80020f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020ee:	f023 0303 	bic.w	r3, r3, #3
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	aaaaaaab 	.word	0xaaaaaaab
 800210c:	08009b8c 	.word	0x08009b8c

08002110 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002118:	2300      	movs	r3, #0
 800211a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002120:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d11f      	bne.n	800216a <DMA_CheckFifoParam+0x5a>
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	2b03      	cmp	r3, #3
 800212e:	d856      	bhi.n	80021de <DMA_CheckFifoParam+0xce>
 8002130:	a201      	add	r2, pc, #4	; (adr r2, 8002138 <DMA_CheckFifoParam+0x28>)
 8002132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002136:	bf00      	nop
 8002138:	08002149 	.word	0x08002149
 800213c:	0800215b 	.word	0x0800215b
 8002140:	08002149 	.word	0x08002149
 8002144:	080021df 	.word	0x080021df
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d046      	beq.n	80021e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002158:	e043      	b.n	80021e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002162:	d140      	bne.n	80021e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002168:	e03d      	b.n	80021e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002172:	d121      	bne.n	80021b8 <DMA_CheckFifoParam+0xa8>
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	2b03      	cmp	r3, #3
 8002178:	d837      	bhi.n	80021ea <DMA_CheckFifoParam+0xda>
 800217a:	a201      	add	r2, pc, #4	; (adr r2, 8002180 <DMA_CheckFifoParam+0x70>)
 800217c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002180:	08002191 	.word	0x08002191
 8002184:	08002197 	.word	0x08002197
 8002188:	08002191 	.word	0x08002191
 800218c:	080021a9 	.word	0x080021a9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	73fb      	strb	r3, [r7, #15]
      break;
 8002194:	e030      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d025      	beq.n	80021ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021a6:	e022      	b.n	80021ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021b0:	d11f      	bne.n	80021f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021b6:	e01c      	b.n	80021f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d903      	bls.n	80021c6 <DMA_CheckFifoParam+0xb6>
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	2b03      	cmp	r3, #3
 80021c2:	d003      	beq.n	80021cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021c4:	e018      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	73fb      	strb	r3, [r7, #15]
      break;
 80021ca:	e015      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00e      	beq.n	80021f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	73fb      	strb	r3, [r7, #15]
      break;
 80021dc:	e00b      	b.n	80021f6 <DMA_CheckFifoParam+0xe6>
      break;
 80021de:	bf00      	nop
 80021e0:	e00a      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
      break;
 80021e2:	bf00      	nop
 80021e4:	e008      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
      break;
 80021e6:	bf00      	nop
 80021e8:	e006      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
      break;
 80021ea:	bf00      	nop
 80021ec:	e004      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
      break;
 80021ee:	bf00      	nop
 80021f0:	e002      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80021f2:	bf00      	nop
 80021f4:	e000      	b.n	80021f8 <DMA_CheckFifoParam+0xe8>
      break;
 80021f6:	bf00      	nop
    }
  } 
  
  return status; 
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop

08002208 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002208:	b480      	push	{r7}
 800220a:	b089      	sub	sp, #36	; 0x24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800221a:	2300      	movs	r3, #0
 800221c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
 8002222:	e159      	b.n	80024d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002224:	2201      	movs	r2, #1
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	4013      	ands	r3, r2
 8002236:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	429a      	cmp	r2, r3
 800223e:	f040 8148 	bne.w	80024d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d00b      	beq.n	8002262 <HAL_GPIO_Init+0x5a>
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b02      	cmp	r3, #2
 8002250:	d007      	beq.n	8002262 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002256:	2b11      	cmp	r3, #17
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b12      	cmp	r3, #18
 8002260:	d130      	bne.n	80022c4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	2203      	movs	r2, #3
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43db      	mvns	r3, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4013      	ands	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	68da      	ldr	r2, [r3, #12]
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002298:	2201      	movs	r2, #1
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	091b      	lsrs	r3, r3, #4
 80022ae:	f003 0201 	and.w	r2, r3, #1
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	2203      	movs	r2, #3
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	43db      	mvns	r3, r3
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4013      	ands	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d003      	beq.n	8002304 <HAL_GPIO_Init+0xfc>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	2b12      	cmp	r3, #18
 8002302:	d123      	bne.n	800234c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	08da      	lsrs	r2, r3, #3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3208      	adds	r2, #8
 800230c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002310:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	220f      	movs	r2, #15
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	691a      	ldr	r2, [r3, #16]
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	08da      	lsrs	r2, r3, #3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3208      	adds	r2, #8
 8002346:	69b9      	ldr	r1, [r7, #24]
 8002348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	2203      	movs	r2, #3
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	43db      	mvns	r3, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 0203 	and.w	r2, r3, #3
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4313      	orrs	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 80a2 	beq.w	80024d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	4b57      	ldr	r3, [pc, #348]	; (80024f0 <HAL_GPIO_Init+0x2e8>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	4a56      	ldr	r2, [pc, #344]	; (80024f0 <HAL_GPIO_Init+0x2e8>)
 8002398:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800239c:	6453      	str	r3, [r2, #68]	; 0x44
 800239e:	4b54      	ldr	r3, [pc, #336]	; (80024f0 <HAL_GPIO_Init+0x2e8>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023aa:	4a52      	ldr	r2, [pc, #328]	; (80024f4 <HAL_GPIO_Init+0x2ec>)
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	089b      	lsrs	r3, r3, #2
 80023b0:	3302      	adds	r3, #2
 80023b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	220f      	movs	r2, #15
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4013      	ands	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a49      	ldr	r2, [pc, #292]	; (80024f8 <HAL_GPIO_Init+0x2f0>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d019      	beq.n	800240a <HAL_GPIO_Init+0x202>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a48      	ldr	r2, [pc, #288]	; (80024fc <HAL_GPIO_Init+0x2f4>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d013      	beq.n	8002406 <HAL_GPIO_Init+0x1fe>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a47      	ldr	r2, [pc, #284]	; (8002500 <HAL_GPIO_Init+0x2f8>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d00d      	beq.n	8002402 <HAL_GPIO_Init+0x1fa>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a46      	ldr	r2, [pc, #280]	; (8002504 <HAL_GPIO_Init+0x2fc>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d007      	beq.n	80023fe <HAL_GPIO_Init+0x1f6>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a45      	ldr	r2, [pc, #276]	; (8002508 <HAL_GPIO_Init+0x300>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d101      	bne.n	80023fa <HAL_GPIO_Init+0x1f2>
 80023f6:	2304      	movs	r3, #4
 80023f8:	e008      	b.n	800240c <HAL_GPIO_Init+0x204>
 80023fa:	2307      	movs	r3, #7
 80023fc:	e006      	b.n	800240c <HAL_GPIO_Init+0x204>
 80023fe:	2303      	movs	r3, #3
 8002400:	e004      	b.n	800240c <HAL_GPIO_Init+0x204>
 8002402:	2302      	movs	r3, #2
 8002404:	e002      	b.n	800240c <HAL_GPIO_Init+0x204>
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <HAL_GPIO_Init+0x204>
 800240a:	2300      	movs	r3, #0
 800240c:	69fa      	ldr	r2, [r7, #28]
 800240e:	f002 0203 	and.w	r2, r2, #3
 8002412:	0092      	lsls	r2, r2, #2
 8002414:	4093      	lsls	r3, r2
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4313      	orrs	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800241c:	4935      	ldr	r1, [pc, #212]	; (80024f4 <HAL_GPIO_Init+0x2ec>)
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	089b      	lsrs	r3, r3, #2
 8002422:	3302      	adds	r3, #2
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800242a:	4b38      	ldr	r3, [pc, #224]	; (800250c <HAL_GPIO_Init+0x304>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	43db      	mvns	r3, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4013      	ands	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800244e:	4a2f      	ldr	r2, [pc, #188]	; (800250c <HAL_GPIO_Init+0x304>)
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002454:	4b2d      	ldr	r3, [pc, #180]	; (800250c <HAL_GPIO_Init+0x304>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	43db      	mvns	r3, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4013      	ands	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	4313      	orrs	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002478:	4a24      	ldr	r2, [pc, #144]	; (800250c <HAL_GPIO_Init+0x304>)
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800247e:	4b23      	ldr	r3, [pc, #140]	; (800250c <HAL_GPIO_Init+0x304>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	43db      	mvns	r3, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4013      	ands	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4313      	orrs	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024a2:	4a1a      	ldr	r2, [pc, #104]	; (800250c <HAL_GPIO_Init+0x304>)
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024a8:	4b18      	ldr	r3, [pc, #96]	; (800250c <HAL_GPIO_Init+0x304>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	43db      	mvns	r3, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4013      	ands	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024cc:	4a0f      	ldr	r2, [pc, #60]	; (800250c <HAL_GPIO_Init+0x304>)
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	3301      	adds	r3, #1
 80024d6:	61fb      	str	r3, [r7, #28]
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	2b0f      	cmp	r3, #15
 80024dc:	f67f aea2 	bls.w	8002224 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024e0:	bf00      	nop
 80024e2:	bf00      	nop
 80024e4:	3724      	adds	r7, #36	; 0x24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	40023800 	.word	0x40023800
 80024f4:	40013800 	.word	0x40013800
 80024f8:	40020000 	.word	0x40020000
 80024fc:	40020400 	.word	0x40020400
 8002500:	40020800 	.word	0x40020800
 8002504:	40020c00 	.word	0x40020c00
 8002508:	40021000 	.word	0x40021000
 800250c:	40013c00 	.word	0x40013c00

08002510 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	460b      	mov	r3, r1
 800251a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691a      	ldr	r2, [r3, #16]
 8002520:	887b      	ldrh	r3, [r7, #2]
 8002522:	4013      	ands	r3, r2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d002      	beq.n	800252e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002528:	2301      	movs	r3, #1
 800252a:	73fb      	strb	r3, [r7, #15]
 800252c:	e001      	b.n	8002532 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800252e:	2300      	movs	r3, #0
 8002530:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002532:	7bfb      	ldrb	r3, [r7, #15]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	807b      	strh	r3, [r7, #2]
 800254c:	4613      	mov	r3, r2
 800254e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002550:	787b      	ldrb	r3, [r7, #1]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002556:	887a      	ldrh	r2, [r7, #2]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800255c:	e003      	b.n	8002566 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800255e:	887b      	ldrh	r3, [r7, #2]
 8002560:	041a      	lsls	r2, r3, #16
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	619a      	str	r2, [r3, #24]
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
	...

08002574 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e25b      	b.n	8002a3e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	d075      	beq.n	800267e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002592:	4ba3      	ldr	r3, [pc, #652]	; (8002820 <HAL_RCC_OscConfig+0x2ac>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 030c 	and.w	r3, r3, #12
 800259a:	2b04      	cmp	r3, #4
 800259c:	d00c      	beq.n	80025b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800259e:	4ba0      	ldr	r3, [pc, #640]	; (8002820 <HAL_RCC_OscConfig+0x2ac>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025a6:	2b08      	cmp	r3, #8
 80025a8:	d112      	bne.n	80025d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025aa:	4b9d      	ldr	r3, [pc, #628]	; (8002820 <HAL_RCC_OscConfig+0x2ac>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025b6:	d10b      	bne.n	80025d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b8:	4b99      	ldr	r3, [pc, #612]	; (8002820 <HAL_RCC_OscConfig+0x2ac>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d05b      	beq.n	800267c <HAL_RCC_OscConfig+0x108>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d157      	bne.n	800267c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e236      	b.n	8002a3e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025d8:	d106      	bne.n	80025e8 <HAL_RCC_OscConfig+0x74>
 80025da:	4b91      	ldr	r3, [pc, #580]	; (8002820 <HAL_RCC_OscConfig+0x2ac>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a90      	ldr	r2, [pc, #576]	; (8002820 <HAL_RCC_OscConfig+0x2ac>)
 80025e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	e01d      	b.n	8002624 <HAL_RCC_OscConfig+0xb0>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025f0:	d10c      	bne.n	800260c <HAL_RCC_OscConfig+0x98>
 80025f2:	4b8b      	ldr	r3, [pc, #556]	; (8002820 <HAL_RCC_OscConfig+0x2ac>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a8a      	ldr	r2, [pc, #552]	; (8002820 <HAL_RCC_OscConfig+0x2ac>)
 80025f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025fc:	6013      	str	r3, [r2, #0]
 80025fe:	4b88      	ldr	r3, [pc, #544]	; (8002820 <HAL_RCC_OscConfig+0x2ac>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a87      	ldr	r2, [pc, #540]	; (8002820 <HAL_RCC_OscConfig+0x2ac>)
 8002604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002608:	6013      	str	r3, [r2, #0]
 800260a:	e00b      	b.n	8002624 <HAL_RCC_OscConfig+0xb0>
 800260c:	4b84      	ldr	r3, [pc, #528]	; (8002820 <HAL_RCC_OscConfig+0x2ac>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a83      	ldr	r2, [pc, #524]	; (8002820 <HAL_RCC_OscConfig+0x2ac>)
 8002612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002616:	6013      	str	r3, [r2, #0]
 8002618:	4b81      	ldr	r3, [pc, #516]	; (8002820 <HAL_RCC_OscConfig+0x2ac>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a80      	ldr	r2, [pc, #512]	; (8002820 <HAL_RCC_OscConfig+0x2ac>)
 800261e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002622:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d013      	beq.n	8002654 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262c:	f7ff f918 	bl	8001860 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002634:	f7ff f914 	bl	8001860 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b64      	cmp	r3, #100	; 0x64
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e1fb      	b.n	8002a3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002646:	4b76      	ldr	r3, [pc, #472]	; (8002820 <HAL_RCC_OscConfig+0x2ac>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0f0      	beq.n	8002634 <HAL_RCC_OscConfig+0xc0>
 8002652:	e014      	b.n	800267e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002654:	f7ff f904 	bl	8001860 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800265c:	f7ff f900 	bl	8001860 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b64      	cmp	r3, #100	; 0x64
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e1e7      	b.n	8002a3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800266e:	4b6c      	ldr	r3, [pc, #432]	; (8002820 <HAL_RCC_OscConfig+0x2ac>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f0      	bne.n	800265c <HAL_RCC_OscConfig+0xe8>
 800267a:	e000      	b.n	800267e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800267c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d063      	beq.n	8002752 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800268a:	4b65      	ldr	r3, [pc, #404]	; (8002820 <HAL_RCC_OscConfig+0x2ac>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 030c 	and.w	r3, r3, #12
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00b      	beq.n	80026ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002696:	4b62      	ldr	r3, [pc, #392]	; (8002820 <HAL_RCC_OscConfig+0x2ac>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800269e:	2b08      	cmp	r3, #8
 80026a0:	d11c      	bne.n	80026dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026a2:	4b5f      	ldr	r3, [pc, #380]	; (8002820 <HAL_RCC_OscConfig+0x2ac>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d116      	bne.n	80026dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ae:	4b5c      	ldr	r3, [pc, #368]	; (8002820 <HAL_RCC_OscConfig+0x2ac>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d005      	beq.n	80026c6 <HAL_RCC_OscConfig+0x152>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d001      	beq.n	80026c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e1bb      	b.n	8002a3e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c6:	4b56      	ldr	r3, [pc, #344]	; (8002820 <HAL_RCC_OscConfig+0x2ac>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	4952      	ldr	r1, [pc, #328]	; (8002820 <HAL_RCC_OscConfig+0x2ac>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026da:	e03a      	b.n	8002752 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d020      	beq.n	8002726 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026e4:	4b4f      	ldr	r3, [pc, #316]	; (8002824 <HAL_RCC_OscConfig+0x2b0>)
 80026e6:	2201      	movs	r2, #1
 80026e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ea:	f7ff f8b9 	bl	8001860 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026f2:	f7ff f8b5 	bl	8001860 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e19c      	b.n	8002a3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002704:	4b46      	ldr	r3, [pc, #280]	; (8002820 <HAL_RCC_OscConfig+0x2ac>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0f0      	beq.n	80026f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002710:	4b43      	ldr	r3, [pc, #268]	; (8002820 <HAL_RCC_OscConfig+0x2ac>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	4940      	ldr	r1, [pc, #256]	; (8002820 <HAL_RCC_OscConfig+0x2ac>)
 8002720:	4313      	orrs	r3, r2
 8002722:	600b      	str	r3, [r1, #0]
 8002724:	e015      	b.n	8002752 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002726:	4b3f      	ldr	r3, [pc, #252]	; (8002824 <HAL_RCC_OscConfig+0x2b0>)
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272c:	f7ff f898 	bl	8001860 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002734:	f7ff f894 	bl	8001860 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e17b      	b.n	8002a3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002746:	4b36      	ldr	r3, [pc, #216]	; (8002820 <HAL_RCC_OscConfig+0x2ac>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f0      	bne.n	8002734 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0308 	and.w	r3, r3, #8
 800275a:	2b00      	cmp	r3, #0
 800275c:	d030      	beq.n	80027c0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d016      	beq.n	8002794 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002766:	4b30      	ldr	r3, [pc, #192]	; (8002828 <HAL_RCC_OscConfig+0x2b4>)
 8002768:	2201      	movs	r2, #1
 800276a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276c:	f7ff f878 	bl	8001860 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002774:	f7ff f874 	bl	8001860 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e15b      	b.n	8002a3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002786:	4b26      	ldr	r3, [pc, #152]	; (8002820 <HAL_RCC_OscConfig+0x2ac>)
 8002788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0f0      	beq.n	8002774 <HAL_RCC_OscConfig+0x200>
 8002792:	e015      	b.n	80027c0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002794:	4b24      	ldr	r3, [pc, #144]	; (8002828 <HAL_RCC_OscConfig+0x2b4>)
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800279a:	f7ff f861 	bl	8001860 <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027a2:	f7ff f85d 	bl	8001860 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e144      	b.n	8002a3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b4:	4b1a      	ldr	r3, [pc, #104]	; (8002820 <HAL_RCC_OscConfig+0x2ac>)
 80027b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1f0      	bne.n	80027a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f000 80a0 	beq.w	800290e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ce:	2300      	movs	r3, #0
 80027d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027d2:	4b13      	ldr	r3, [pc, #76]	; (8002820 <HAL_RCC_OscConfig+0x2ac>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10f      	bne.n	80027fe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	4b0f      	ldr	r3, [pc, #60]	; (8002820 <HAL_RCC_OscConfig+0x2ac>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	4a0e      	ldr	r2, [pc, #56]	; (8002820 <HAL_RCC_OscConfig+0x2ac>)
 80027e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ec:	6413      	str	r3, [r2, #64]	; 0x40
 80027ee:	4b0c      	ldr	r3, [pc, #48]	; (8002820 <HAL_RCC_OscConfig+0x2ac>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f6:	60bb      	str	r3, [r7, #8]
 80027f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027fa:	2301      	movs	r3, #1
 80027fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027fe:	4b0b      	ldr	r3, [pc, #44]	; (800282c <HAL_RCC_OscConfig+0x2b8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002806:	2b00      	cmp	r3, #0
 8002808:	d121      	bne.n	800284e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800280a:	4b08      	ldr	r3, [pc, #32]	; (800282c <HAL_RCC_OscConfig+0x2b8>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a07      	ldr	r2, [pc, #28]	; (800282c <HAL_RCC_OscConfig+0x2b8>)
 8002810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002814:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002816:	f7ff f823 	bl	8001860 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281c:	e011      	b.n	8002842 <HAL_RCC_OscConfig+0x2ce>
 800281e:	bf00      	nop
 8002820:	40023800 	.word	0x40023800
 8002824:	42470000 	.word	0x42470000
 8002828:	42470e80 	.word	0x42470e80
 800282c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002830:	f7ff f816 	bl	8001860 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e0fd      	b.n	8002a3e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002842:	4b81      	ldr	r3, [pc, #516]	; (8002a48 <HAL_RCC_OscConfig+0x4d4>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0f0      	beq.n	8002830 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d106      	bne.n	8002864 <HAL_RCC_OscConfig+0x2f0>
 8002856:	4b7d      	ldr	r3, [pc, #500]	; (8002a4c <HAL_RCC_OscConfig+0x4d8>)
 8002858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285a:	4a7c      	ldr	r2, [pc, #496]	; (8002a4c <HAL_RCC_OscConfig+0x4d8>)
 800285c:	f043 0301 	orr.w	r3, r3, #1
 8002860:	6713      	str	r3, [r2, #112]	; 0x70
 8002862:	e01c      	b.n	800289e <HAL_RCC_OscConfig+0x32a>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	2b05      	cmp	r3, #5
 800286a:	d10c      	bne.n	8002886 <HAL_RCC_OscConfig+0x312>
 800286c:	4b77      	ldr	r3, [pc, #476]	; (8002a4c <HAL_RCC_OscConfig+0x4d8>)
 800286e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002870:	4a76      	ldr	r2, [pc, #472]	; (8002a4c <HAL_RCC_OscConfig+0x4d8>)
 8002872:	f043 0304 	orr.w	r3, r3, #4
 8002876:	6713      	str	r3, [r2, #112]	; 0x70
 8002878:	4b74      	ldr	r3, [pc, #464]	; (8002a4c <HAL_RCC_OscConfig+0x4d8>)
 800287a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287c:	4a73      	ldr	r2, [pc, #460]	; (8002a4c <HAL_RCC_OscConfig+0x4d8>)
 800287e:	f043 0301 	orr.w	r3, r3, #1
 8002882:	6713      	str	r3, [r2, #112]	; 0x70
 8002884:	e00b      	b.n	800289e <HAL_RCC_OscConfig+0x32a>
 8002886:	4b71      	ldr	r3, [pc, #452]	; (8002a4c <HAL_RCC_OscConfig+0x4d8>)
 8002888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288a:	4a70      	ldr	r2, [pc, #448]	; (8002a4c <HAL_RCC_OscConfig+0x4d8>)
 800288c:	f023 0301 	bic.w	r3, r3, #1
 8002890:	6713      	str	r3, [r2, #112]	; 0x70
 8002892:	4b6e      	ldr	r3, [pc, #440]	; (8002a4c <HAL_RCC_OscConfig+0x4d8>)
 8002894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002896:	4a6d      	ldr	r2, [pc, #436]	; (8002a4c <HAL_RCC_OscConfig+0x4d8>)
 8002898:	f023 0304 	bic.w	r3, r3, #4
 800289c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d015      	beq.n	80028d2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a6:	f7fe ffdb 	bl	8001860 <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ac:	e00a      	b.n	80028c4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028ae:	f7fe ffd7 	bl	8001860 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028bc:	4293      	cmp	r3, r2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e0bc      	b.n	8002a3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c4:	4b61      	ldr	r3, [pc, #388]	; (8002a4c <HAL_RCC_OscConfig+0x4d8>)
 80028c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0ee      	beq.n	80028ae <HAL_RCC_OscConfig+0x33a>
 80028d0:	e014      	b.n	80028fc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028d2:	f7fe ffc5 	bl	8001860 <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028d8:	e00a      	b.n	80028f0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028da:	f7fe ffc1 	bl	8001860 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e0a6      	b.n	8002a3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028f0:	4b56      	ldr	r3, [pc, #344]	; (8002a4c <HAL_RCC_OscConfig+0x4d8>)
 80028f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1ee      	bne.n	80028da <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028fc:	7dfb      	ldrb	r3, [r7, #23]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d105      	bne.n	800290e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002902:	4b52      	ldr	r3, [pc, #328]	; (8002a4c <HAL_RCC_OscConfig+0x4d8>)
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	4a51      	ldr	r2, [pc, #324]	; (8002a4c <HAL_RCC_OscConfig+0x4d8>)
 8002908:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800290c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	2b00      	cmp	r3, #0
 8002914:	f000 8092 	beq.w	8002a3c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002918:	4b4c      	ldr	r3, [pc, #304]	; (8002a4c <HAL_RCC_OscConfig+0x4d8>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 030c 	and.w	r3, r3, #12
 8002920:	2b08      	cmp	r3, #8
 8002922:	d05c      	beq.n	80029de <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	2b02      	cmp	r3, #2
 800292a:	d141      	bne.n	80029b0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800292c:	4b48      	ldr	r3, [pc, #288]	; (8002a50 <HAL_RCC_OscConfig+0x4dc>)
 800292e:	2200      	movs	r2, #0
 8002930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002932:	f7fe ff95 	bl	8001860 <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800293a:	f7fe ff91 	bl	8001860 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e078      	b.n	8002a3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800294c:	4b3f      	ldr	r3, [pc, #252]	; (8002a4c <HAL_RCC_OscConfig+0x4d8>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1f0      	bne.n	800293a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	69da      	ldr	r2, [r3, #28]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	431a      	orrs	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	019b      	lsls	r3, r3, #6
 8002968:	431a      	orrs	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296e:	085b      	lsrs	r3, r3, #1
 8002970:	3b01      	subs	r3, #1
 8002972:	041b      	lsls	r3, r3, #16
 8002974:	431a      	orrs	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297a:	061b      	lsls	r3, r3, #24
 800297c:	4933      	ldr	r1, [pc, #204]	; (8002a4c <HAL_RCC_OscConfig+0x4d8>)
 800297e:	4313      	orrs	r3, r2
 8002980:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002982:	4b33      	ldr	r3, [pc, #204]	; (8002a50 <HAL_RCC_OscConfig+0x4dc>)
 8002984:	2201      	movs	r2, #1
 8002986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002988:	f7fe ff6a 	bl	8001860 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002990:	f7fe ff66 	bl	8001860 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e04d      	b.n	8002a3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a2:	4b2a      	ldr	r3, [pc, #168]	; (8002a4c <HAL_RCC_OscConfig+0x4d8>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d0f0      	beq.n	8002990 <HAL_RCC_OscConfig+0x41c>
 80029ae:	e045      	b.n	8002a3c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b0:	4b27      	ldr	r3, [pc, #156]	; (8002a50 <HAL_RCC_OscConfig+0x4dc>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b6:	f7fe ff53 	bl	8001860 <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029be:	f7fe ff4f 	bl	8001860 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e036      	b.n	8002a3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d0:	4b1e      	ldr	r3, [pc, #120]	; (8002a4c <HAL_RCC_OscConfig+0x4d8>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1f0      	bne.n	80029be <HAL_RCC_OscConfig+0x44a>
 80029dc:	e02e      	b.n	8002a3c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d101      	bne.n	80029ea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e029      	b.n	8002a3e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029ea:	4b18      	ldr	r3, [pc, #96]	; (8002a4c <HAL_RCC_OscConfig+0x4d8>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d11c      	bne.n	8002a38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d115      	bne.n	8002a38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a12:	4013      	ands	r3, r2
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d10d      	bne.n	8002a38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d106      	bne.n	8002a38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d001      	beq.n	8002a3c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e000      	b.n	8002a3e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40007000 	.word	0x40007000
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	42470060 	.word	0x42470060

08002a54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e0cc      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a68:	4b68      	ldr	r3, [pc, #416]	; (8002c0c <HAL_RCC_ClockConfig+0x1b8>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 030f 	and.w	r3, r3, #15
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d90c      	bls.n	8002a90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a76:	4b65      	ldr	r3, [pc, #404]	; (8002c0c <HAL_RCC_ClockConfig+0x1b8>)
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7e:	4b63      	ldr	r3, [pc, #396]	; (8002c0c <HAL_RCC_ClockConfig+0x1b8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 030f 	and.w	r3, r3, #15
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d001      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e0b8      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d020      	beq.n	8002ade <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d005      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aa8:	4b59      	ldr	r3, [pc, #356]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	4a58      	ldr	r2, [pc, #352]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ab2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0308 	and.w	r3, r3, #8
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d005      	beq.n	8002acc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ac0:	4b53      	ldr	r3, [pc, #332]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	4a52      	ldr	r2, [pc, #328]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002aca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002acc:	4b50      	ldr	r3, [pc, #320]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	494d      	ldr	r1, [pc, #308]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d044      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d107      	bne.n	8002b02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af2:	4b47      	ldr	r3, [pc, #284]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d119      	bne.n	8002b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e07f      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d003      	beq.n	8002b12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b0e:	2b03      	cmp	r3, #3
 8002b10:	d107      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b12:	4b3f      	ldr	r3, [pc, #252]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d109      	bne.n	8002b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e06f      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b22:	4b3b      	ldr	r3, [pc, #236]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e067      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b32:	4b37      	ldr	r3, [pc, #220]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f023 0203 	bic.w	r2, r3, #3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	4934      	ldr	r1, [pc, #208]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b44:	f7fe fe8c 	bl	8001860 <HAL_GetTick>
 8002b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4a:	e00a      	b.n	8002b62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b4c:	f7fe fe88 	bl	8001860 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e04f      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b62:	4b2b      	ldr	r3, [pc, #172]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 020c 	and.w	r2, r3, #12
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d1eb      	bne.n	8002b4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b74:	4b25      	ldr	r3, [pc, #148]	; (8002c0c <HAL_RCC_ClockConfig+0x1b8>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 030f 	and.w	r3, r3, #15
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d20c      	bcs.n	8002b9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b82:	4b22      	ldr	r3, [pc, #136]	; (8002c0c <HAL_RCC_ClockConfig+0x1b8>)
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8a:	4b20      	ldr	r3, [pc, #128]	; (8002c0c <HAL_RCC_ClockConfig+0x1b8>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d001      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e032      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d008      	beq.n	8002bba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba8:	4b19      	ldr	r3, [pc, #100]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	4916      	ldr	r1, [pc, #88]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d009      	beq.n	8002bda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bc6:	4b12      	ldr	r3, [pc, #72]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	490e      	ldr	r1, [pc, #56]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bda:	f000 f821 	bl	8002c20 <HAL_RCC_GetSysClockFreq>
 8002bde:	4602      	mov	r2, r0
 8002be0:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <HAL_RCC_ClockConfig+0x1bc>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	091b      	lsrs	r3, r3, #4
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	490a      	ldr	r1, [pc, #40]	; (8002c14 <HAL_RCC_ClockConfig+0x1c0>)
 8002bec:	5ccb      	ldrb	r3, [r1, r3]
 8002bee:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf2:	4a09      	ldr	r2, [pc, #36]	; (8002c18 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bf6:	4b09      	ldr	r3, [pc, #36]	; (8002c1c <HAL_RCC_ClockConfig+0x1c8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fe fdec 	bl	80017d8 <HAL_InitTick>

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40023c00 	.word	0x40023c00
 8002c10:	40023800 	.word	0x40023800
 8002c14:	08009b74 	.word	0x08009b74
 8002c18:	20000004 	.word	0x20000004
 8002c1c:	20000008 	.word	0x20000008

08002c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c20:	b5b0      	push	{r4, r5, r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c26:	2100      	movs	r1, #0
 8002c28:	6079      	str	r1, [r7, #4]
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	60f9      	str	r1, [r7, #12]
 8002c2e:	2100      	movs	r1, #0
 8002c30:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002c32:	2100      	movs	r1, #0
 8002c34:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c36:	4952      	ldr	r1, [pc, #328]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c38:	6889      	ldr	r1, [r1, #8]
 8002c3a:	f001 010c 	and.w	r1, r1, #12
 8002c3e:	2908      	cmp	r1, #8
 8002c40:	d00d      	beq.n	8002c5e <HAL_RCC_GetSysClockFreq+0x3e>
 8002c42:	2908      	cmp	r1, #8
 8002c44:	f200 8094 	bhi.w	8002d70 <HAL_RCC_GetSysClockFreq+0x150>
 8002c48:	2900      	cmp	r1, #0
 8002c4a:	d002      	beq.n	8002c52 <HAL_RCC_GetSysClockFreq+0x32>
 8002c4c:	2904      	cmp	r1, #4
 8002c4e:	d003      	beq.n	8002c58 <HAL_RCC_GetSysClockFreq+0x38>
 8002c50:	e08e      	b.n	8002d70 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c52:	4b4c      	ldr	r3, [pc, #304]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x164>)
 8002c54:	60bb      	str	r3, [r7, #8]
       break;
 8002c56:	e08e      	b.n	8002d76 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c58:	4b4b      	ldr	r3, [pc, #300]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x168>)
 8002c5a:	60bb      	str	r3, [r7, #8]
      break;
 8002c5c:	e08b      	b.n	8002d76 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c5e:	4948      	ldr	r1, [pc, #288]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c60:	6849      	ldr	r1, [r1, #4]
 8002c62:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002c66:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c68:	4945      	ldr	r1, [pc, #276]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c6a:	6849      	ldr	r1, [r1, #4]
 8002c6c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002c70:	2900      	cmp	r1, #0
 8002c72:	d024      	beq.n	8002cbe <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c74:	4942      	ldr	r1, [pc, #264]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c76:	6849      	ldr	r1, [r1, #4]
 8002c78:	0989      	lsrs	r1, r1, #6
 8002c7a:	4608      	mov	r0, r1
 8002c7c:	f04f 0100 	mov.w	r1, #0
 8002c80:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002c84:	f04f 0500 	mov.w	r5, #0
 8002c88:	ea00 0204 	and.w	r2, r0, r4
 8002c8c:	ea01 0305 	and.w	r3, r1, r5
 8002c90:	493d      	ldr	r1, [pc, #244]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x168>)
 8002c92:	fb01 f003 	mul.w	r0, r1, r3
 8002c96:	2100      	movs	r1, #0
 8002c98:	fb01 f102 	mul.w	r1, r1, r2
 8002c9c:	1844      	adds	r4, r0, r1
 8002c9e:	493a      	ldr	r1, [pc, #232]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x168>)
 8002ca0:	fba2 0101 	umull	r0, r1, r2, r1
 8002ca4:	1863      	adds	r3, r4, r1
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	461a      	mov	r2, r3
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	f7fd ffca 	bl	8000c48 <__aeabi_uldivmod>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	4613      	mov	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	e04a      	b.n	8002d54 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cbe:	4b30      	ldr	r3, [pc, #192]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x160>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	099b      	lsrs	r3, r3, #6
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	f04f 0300 	mov.w	r3, #0
 8002cca:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002cce:	f04f 0100 	mov.w	r1, #0
 8002cd2:	ea02 0400 	and.w	r4, r2, r0
 8002cd6:	ea03 0501 	and.w	r5, r3, r1
 8002cda:	4620      	mov	r0, r4
 8002cdc:	4629      	mov	r1, r5
 8002cde:	f04f 0200 	mov.w	r2, #0
 8002ce2:	f04f 0300 	mov.w	r3, #0
 8002ce6:	014b      	lsls	r3, r1, #5
 8002ce8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002cec:	0142      	lsls	r2, r0, #5
 8002cee:	4610      	mov	r0, r2
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	1b00      	subs	r0, r0, r4
 8002cf4:	eb61 0105 	sbc.w	r1, r1, r5
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	f04f 0300 	mov.w	r3, #0
 8002d00:	018b      	lsls	r3, r1, #6
 8002d02:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d06:	0182      	lsls	r2, r0, #6
 8002d08:	1a12      	subs	r2, r2, r0
 8002d0a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d0e:	f04f 0000 	mov.w	r0, #0
 8002d12:	f04f 0100 	mov.w	r1, #0
 8002d16:	00d9      	lsls	r1, r3, #3
 8002d18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d1c:	00d0      	lsls	r0, r2, #3
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	1912      	adds	r2, r2, r4
 8002d24:	eb45 0303 	adc.w	r3, r5, r3
 8002d28:	f04f 0000 	mov.w	r0, #0
 8002d2c:	f04f 0100 	mov.w	r1, #0
 8002d30:	0299      	lsls	r1, r3, #10
 8002d32:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002d36:	0290      	lsls	r0, r2, #10
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	4619      	mov	r1, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	461a      	mov	r2, r3
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	f7fd ff7e 	bl	8000c48 <__aeabi_uldivmod>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	460b      	mov	r3, r1
 8002d50:	4613      	mov	r3, r2
 8002d52:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d54:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x160>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	0c1b      	lsrs	r3, r3, #16
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	3301      	adds	r3, #1
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6c:	60bb      	str	r3, [r7, #8]
      break;
 8002d6e:	e002      	b.n	8002d76 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d70:	4b04      	ldr	r3, [pc, #16]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x164>)
 8002d72:	60bb      	str	r3, [r7, #8]
      break;
 8002d74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d76:	68bb      	ldr	r3, [r7, #8]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bdb0      	pop	{r4, r5, r7, pc}
 8002d80:	40023800 	.word	0x40023800
 8002d84:	00f42400 	.word	0x00f42400
 8002d88:	017d7840 	.word	0x017d7840

08002d8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d90:	4b03      	ldr	r3, [pc, #12]	; (8002da0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d92:	681b      	ldr	r3, [r3, #0]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	20000004 	.word	0x20000004

08002da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002da8:	f7ff fff0 	bl	8002d8c <HAL_RCC_GetHCLKFreq>
 8002dac:	4602      	mov	r2, r0
 8002dae:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	0a9b      	lsrs	r3, r3, #10
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	4903      	ldr	r1, [pc, #12]	; (8002dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dba:	5ccb      	ldrb	r3, [r1, r3]
 8002dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	08009b84 	.word	0x08009b84

08002dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002dd0:	f7ff ffdc 	bl	8002d8c <HAL_RCC_GetHCLKFreq>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	4b05      	ldr	r3, [pc, #20]	; (8002dec <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	0b5b      	lsrs	r3, r3, #13
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	4903      	ldr	r1, [pc, #12]	; (8002df0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002de2:	5ccb      	ldrb	r3, [r1, r3]
 8002de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40023800 	.word	0x40023800
 8002df0:	08009b84 	.word	0x08009b84

08002df4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e056      	b.n	8002eb4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d106      	bne.n	8002e26 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7fe fae9 	bl	80013f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2202      	movs	r2, #2
 8002e2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e3c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	ea42 0103 	orr.w	r1, r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	0c1b      	lsrs	r3, r3, #16
 8002e84:	f003 0104 	and.w	r1, r3, #4
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	69da      	ldr	r2, [r3, #28]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ea2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b088      	sub	sp, #32
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	603b      	str	r3, [r7, #0]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d101      	bne.n	8002ede <HAL_SPI_Transmit+0x22>
 8002eda:	2302      	movs	r3, #2
 8002edc:	e11e      	b.n	800311c <HAL_SPI_Transmit+0x260>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ee6:	f7fe fcbb 	bl	8001860 <HAL_GetTick>
 8002eea:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002eec:	88fb      	ldrh	r3, [r7, #6]
 8002eee:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d002      	beq.n	8002f02 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002efc:	2302      	movs	r3, #2
 8002efe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f00:	e103      	b.n	800310a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d002      	beq.n	8002f0e <HAL_SPI_Transmit+0x52>
 8002f08:	88fb      	ldrh	r3, [r7, #6]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d102      	bne.n	8002f14 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f12:	e0fa      	b.n	800310a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2203      	movs	r2, #3
 8002f18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	68ba      	ldr	r2, [r7, #8]
 8002f26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	88fa      	ldrh	r2, [r7, #6]
 8002f2c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	88fa      	ldrh	r2, [r7, #6]
 8002f32:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f5a:	d107      	bne.n	8002f6c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f6a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f76:	2b40      	cmp	r3, #64	; 0x40
 8002f78:	d007      	beq.n	8002f8a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f88:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f92:	d14b      	bne.n	800302c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d002      	beq.n	8002fa2 <HAL_SPI_Transmit+0xe6>
 8002f9c:	8afb      	ldrh	r3, [r7, #22]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d13e      	bne.n	8003020 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	881a      	ldrh	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	1c9a      	adds	r2, r3, #2
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002fc6:	e02b      	b.n	8003020 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d112      	bne.n	8002ffc <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	881a      	ldrh	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	1c9a      	adds	r2, r3, #2
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ffa:	e011      	b.n	8003020 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ffc:	f7fe fc30 	bl	8001860 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	429a      	cmp	r2, r3
 800300a:	d803      	bhi.n	8003014 <HAL_SPI_Transmit+0x158>
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003012:	d102      	bne.n	800301a <HAL_SPI_Transmit+0x15e>
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d102      	bne.n	8003020 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800301e:	e074      	b.n	800310a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003024:	b29b      	uxth	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1ce      	bne.n	8002fc8 <HAL_SPI_Transmit+0x10c>
 800302a:	e04c      	b.n	80030c6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d002      	beq.n	800303a <HAL_SPI_Transmit+0x17e>
 8003034:	8afb      	ldrh	r3, [r7, #22]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d140      	bne.n	80030bc <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	330c      	adds	r3, #12
 8003044:	7812      	ldrb	r2, [r2, #0]
 8003046:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304c:	1c5a      	adds	r2, r3, #1
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003056:	b29b      	uxth	r3, r3
 8003058:	3b01      	subs	r3, #1
 800305a:	b29a      	uxth	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003060:	e02c      	b.n	80030bc <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b02      	cmp	r3, #2
 800306e:	d113      	bne.n	8003098 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	330c      	adds	r3, #12
 800307a:	7812      	ldrb	r2, [r2, #0]
 800307c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003082:	1c5a      	adds	r2, r3, #1
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800308c:	b29b      	uxth	r3, r3
 800308e:	3b01      	subs	r3, #1
 8003090:	b29a      	uxth	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	86da      	strh	r2, [r3, #54]	; 0x36
 8003096:	e011      	b.n	80030bc <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003098:	f7fe fbe2 	bl	8001860 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d803      	bhi.n	80030b0 <HAL_SPI_Transmit+0x1f4>
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ae:	d102      	bne.n	80030b6 <HAL_SPI_Transmit+0x1fa>
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d102      	bne.n	80030bc <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80030ba:	e026      	b.n	800310a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1cd      	bne.n	8003062 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	6839      	ldr	r1, [r7, #0]
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 fba4 	bl	8003818 <SPI_EndRxTxTransaction>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d002      	beq.n	80030dc <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2220      	movs	r2, #32
 80030da:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10a      	bne.n	80030fa <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030e4:	2300      	movs	r3, #0
 80030e6:	613b      	str	r3, [r7, #16]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	613b      	str	r3, [r7, #16]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	613b      	str	r3, [r7, #16]
 80030f8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d002      	beq.n	8003108 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	77fb      	strb	r3, [r7, #31]
 8003106:	e000      	b.n	800310a <HAL_SPI_Transmit+0x24e>
  }

error:
 8003108:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800311a:	7ffb      	ldrb	r3, [r7, #31]
}
 800311c:	4618      	mov	r0, r3
 800311e:	3720      	adds	r7, #32
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b088      	sub	sp, #32
 8003128:	af02      	add	r7, sp, #8
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	603b      	str	r3, [r7, #0]
 8003130:	4613      	mov	r3, r2
 8003132:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003134:	2300      	movs	r3, #0
 8003136:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003140:	d112      	bne.n	8003168 <HAL_SPI_Receive+0x44>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10e      	bne.n	8003168 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2204      	movs	r2, #4
 800314e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003152:	88fa      	ldrh	r2, [r7, #6]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	4613      	mov	r3, r2
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	68b9      	ldr	r1, [r7, #8]
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 f8e9 	bl	8003336 <HAL_SPI_TransmitReceive>
 8003164:	4603      	mov	r3, r0
 8003166:	e0e2      	b.n	800332e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800316e:	2b01      	cmp	r3, #1
 8003170:	d101      	bne.n	8003176 <HAL_SPI_Receive+0x52>
 8003172:	2302      	movs	r3, #2
 8003174:	e0db      	b.n	800332e <HAL_SPI_Receive+0x20a>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800317e:	f7fe fb6f 	bl	8001860 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b01      	cmp	r3, #1
 800318e:	d002      	beq.n	8003196 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003190:	2302      	movs	r3, #2
 8003192:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003194:	e0c2      	b.n	800331c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d002      	beq.n	80031a2 <HAL_SPI_Receive+0x7e>
 800319c:	88fb      	ldrh	r3, [r7, #6]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d102      	bne.n	80031a8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80031a6:	e0b9      	b.n	800331c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2204      	movs	r2, #4
 80031ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	88fa      	ldrh	r2, [r7, #6]
 80031c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	88fa      	ldrh	r2, [r7, #6]
 80031c6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031ee:	d107      	bne.n	8003200 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80031fe:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320a:	2b40      	cmp	r3, #64	; 0x40
 800320c:	d007      	beq.n	800321e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800321c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d162      	bne.n	80032ec <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003226:	e02e      	b.n	8003286 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b01      	cmp	r3, #1
 8003234:	d115      	bne.n	8003262 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f103 020c 	add.w	r2, r3, #12
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003242:	7812      	ldrb	r2, [r2, #0]
 8003244:	b2d2      	uxtb	r2, r2
 8003246:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324c:	1c5a      	adds	r2, r3, #1
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003256:	b29b      	uxth	r3, r3
 8003258:	3b01      	subs	r3, #1
 800325a:	b29a      	uxth	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003260:	e011      	b.n	8003286 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003262:	f7fe fafd 	bl	8001860 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	429a      	cmp	r2, r3
 8003270:	d803      	bhi.n	800327a <HAL_SPI_Receive+0x156>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003278:	d102      	bne.n	8003280 <HAL_SPI_Receive+0x15c>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d102      	bne.n	8003286 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003284:	e04a      	b.n	800331c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800328a:	b29b      	uxth	r3, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1cb      	bne.n	8003228 <HAL_SPI_Receive+0x104>
 8003290:	e031      	b.n	80032f6 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b01      	cmp	r3, #1
 800329e:	d113      	bne.n	80032c8 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032aa:	b292      	uxth	r2, r2
 80032ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b2:	1c9a      	adds	r2, r3, #2
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032bc:	b29b      	uxth	r3, r3
 80032be:	3b01      	subs	r3, #1
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032c6:	e011      	b.n	80032ec <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032c8:	f7fe faca 	bl	8001860 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d803      	bhi.n	80032e0 <HAL_SPI_Receive+0x1bc>
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032de:	d102      	bne.n	80032e6 <HAL_SPI_Receive+0x1c2>
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d102      	bne.n	80032ec <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80032ea:	e017      	b.n	800331c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1cd      	bne.n	8003292 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	6839      	ldr	r1, [r7, #0]
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 fa27 	bl	800374e <SPI_EndRxTransaction>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d002      	beq.n	800330c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2220      	movs	r2, #32
 800330a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003310:	2b00      	cmp	r3, #0
 8003312:	d002      	beq.n	800331a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	75fb      	strb	r3, [r7, #23]
 8003318:	e000      	b.n	800331c <HAL_SPI_Receive+0x1f8>
  }

error :
 800331a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800332c:	7dfb      	ldrb	r3, [r7, #23]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b08c      	sub	sp, #48	; 0x30
 800333a:	af00      	add	r7, sp, #0
 800333c:	60f8      	str	r0, [r7, #12]
 800333e:	60b9      	str	r1, [r7, #8]
 8003340:	607a      	str	r2, [r7, #4]
 8003342:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003344:	2301      	movs	r3, #1
 8003346:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003348:	2300      	movs	r3, #0
 800334a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003354:	2b01      	cmp	r3, #1
 8003356:	d101      	bne.n	800335c <HAL_SPI_TransmitReceive+0x26>
 8003358:	2302      	movs	r3, #2
 800335a:	e18a      	b.n	8003672 <HAL_SPI_TransmitReceive+0x33c>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003364:	f7fe fa7c 	bl	8001860 <HAL_GetTick>
 8003368:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003370:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800337a:	887b      	ldrh	r3, [r7, #2]
 800337c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800337e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003382:	2b01      	cmp	r3, #1
 8003384:	d00f      	beq.n	80033a6 <HAL_SPI_TransmitReceive+0x70>
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800338c:	d107      	bne.n	800339e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d103      	bne.n	800339e <HAL_SPI_TransmitReceive+0x68>
 8003396:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800339a:	2b04      	cmp	r3, #4
 800339c:	d003      	beq.n	80033a6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800339e:	2302      	movs	r3, #2
 80033a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80033a4:	e15b      	b.n	800365e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d005      	beq.n	80033b8 <HAL_SPI_TransmitReceive+0x82>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d002      	beq.n	80033b8 <HAL_SPI_TransmitReceive+0x82>
 80033b2:	887b      	ldrh	r3, [r7, #2]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d103      	bne.n	80033c0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80033be:	e14e      	b.n	800365e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d003      	beq.n	80033d4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2205      	movs	r2, #5
 80033d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	887a      	ldrh	r2, [r7, #2]
 80033e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	887a      	ldrh	r2, [r7, #2]
 80033ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	887a      	ldrh	r2, [r7, #2]
 80033f6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	887a      	ldrh	r2, [r7, #2]
 80033fc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003414:	2b40      	cmp	r3, #64	; 0x40
 8003416:	d007      	beq.n	8003428 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003426:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003430:	d178      	bne.n	8003524 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d002      	beq.n	8003440 <HAL_SPI_TransmitReceive+0x10a>
 800343a:	8b7b      	ldrh	r3, [r7, #26]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d166      	bne.n	800350e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003444:	881a      	ldrh	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003450:	1c9a      	adds	r2, r3, #2
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800345a:	b29b      	uxth	r3, r3
 800345c:	3b01      	subs	r3, #1
 800345e:	b29a      	uxth	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003464:	e053      	b.n	800350e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b02      	cmp	r3, #2
 8003472:	d11b      	bne.n	80034ac <HAL_SPI_TransmitReceive+0x176>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003478:	b29b      	uxth	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d016      	beq.n	80034ac <HAL_SPI_TransmitReceive+0x176>
 800347e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003480:	2b01      	cmp	r3, #1
 8003482:	d113      	bne.n	80034ac <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003488:	881a      	ldrh	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003494:	1c9a      	adds	r2, r3, #2
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800349e:	b29b      	uxth	r3, r3
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d119      	bne.n	80034ee <HAL_SPI_TransmitReceive+0x1b8>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034be:	b29b      	uxth	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d014      	beq.n	80034ee <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68da      	ldr	r2, [r3, #12]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ce:	b292      	uxth	r2, r2
 80034d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d6:	1c9a      	adds	r2, r3, #2
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	3b01      	subs	r3, #1
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034ea:	2301      	movs	r3, #1
 80034ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80034ee:	f7fe f9b7 	bl	8001860 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d807      	bhi.n	800350e <HAL_SPI_TransmitReceive+0x1d8>
 80034fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003504:	d003      	beq.n	800350e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800350c:	e0a7      	b.n	800365e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003512:	b29b      	uxth	r3, r3
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1a6      	bne.n	8003466 <HAL_SPI_TransmitReceive+0x130>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800351c:	b29b      	uxth	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1a1      	bne.n	8003466 <HAL_SPI_TransmitReceive+0x130>
 8003522:	e07c      	b.n	800361e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d002      	beq.n	8003532 <HAL_SPI_TransmitReceive+0x1fc>
 800352c:	8b7b      	ldrh	r3, [r7, #26]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d16b      	bne.n	800360a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	330c      	adds	r3, #12
 800353c:	7812      	ldrb	r2, [r2, #0]
 800353e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800354e:	b29b      	uxth	r3, r3
 8003550:	3b01      	subs	r3, #1
 8003552:	b29a      	uxth	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003558:	e057      	b.n	800360a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b02      	cmp	r3, #2
 8003566:	d11c      	bne.n	80035a2 <HAL_SPI_TransmitReceive+0x26c>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800356c:	b29b      	uxth	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d017      	beq.n	80035a2 <HAL_SPI_TransmitReceive+0x26c>
 8003572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003574:	2b01      	cmp	r3, #1
 8003576:	d114      	bne.n	80035a2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	330c      	adds	r3, #12
 8003582:	7812      	ldrb	r2, [r2, #0]
 8003584:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	1c5a      	adds	r2, r3, #1
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003594:	b29b      	uxth	r3, r3
 8003596:	3b01      	subs	r3, #1
 8003598:	b29a      	uxth	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800359e:	2300      	movs	r3, #0
 80035a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d119      	bne.n	80035e4 <HAL_SPI_TransmitReceive+0x2ae>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d014      	beq.n	80035e4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68da      	ldr	r2, [r3, #12]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c4:	b2d2      	uxtb	r2, r2
 80035c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035cc:	1c5a      	adds	r2, r3, #1
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	3b01      	subs	r3, #1
 80035da:	b29a      	uxth	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035e0:	2301      	movs	r3, #1
 80035e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80035e4:	f7fe f93c 	bl	8001860 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d803      	bhi.n	80035fc <HAL_SPI_TransmitReceive+0x2c6>
 80035f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035fa:	d102      	bne.n	8003602 <HAL_SPI_TransmitReceive+0x2cc>
 80035fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d103      	bne.n	800360a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003608:	e029      	b.n	800365e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800360e:	b29b      	uxth	r3, r3
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1a2      	bne.n	800355a <HAL_SPI_TransmitReceive+0x224>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003618:	b29b      	uxth	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d19d      	bne.n	800355a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800361e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003620:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f000 f8f8 	bl	8003818 <SPI_EndRxTxTransaction>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d006      	beq.n	800363c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2220      	movs	r2, #32
 8003638:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800363a:	e010      	b.n	800365e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10b      	bne.n	800365c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003644:	2300      	movs	r3, #0
 8003646:	617b      	str	r3, [r7, #20]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	617b      	str	r3, [r7, #20]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	617b      	str	r3, [r7, #20]
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	e000      	b.n	800365e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800365c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800366e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003672:	4618      	mov	r0, r3
 8003674:	3730      	adds	r7, #48	; 0x30
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b084      	sub	sp, #16
 800367e:	af00      	add	r7, sp, #0
 8003680:	60f8      	str	r0, [r7, #12]
 8003682:	60b9      	str	r1, [r7, #8]
 8003684:	603b      	str	r3, [r7, #0]
 8003686:	4613      	mov	r3, r2
 8003688:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800368a:	e04c      	b.n	8003726 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003692:	d048      	beq.n	8003726 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003694:	f7fe f8e4 	bl	8001860 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d902      	bls.n	80036aa <SPI_WaitFlagStateUntilTimeout+0x30>
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d13d      	bne.n	8003726 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685a      	ldr	r2, [r3, #4]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80036b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036c2:	d111      	bne.n	80036e8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036cc:	d004      	beq.n	80036d8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036d6:	d107      	bne.n	80036e8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036f0:	d10f      	bne.n	8003712 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003710:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e00f      	b.n	8003746 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	4013      	ands	r3, r2
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	429a      	cmp	r2, r3
 8003734:	bf0c      	ite	eq
 8003736:	2301      	moveq	r3, #1
 8003738:	2300      	movne	r3, #0
 800373a:	b2db      	uxtb	r3, r3
 800373c:	461a      	mov	r2, r3
 800373e:	79fb      	ldrb	r3, [r7, #7]
 8003740:	429a      	cmp	r2, r3
 8003742:	d1a3      	bne.n	800368c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b086      	sub	sp, #24
 8003752:	af02      	add	r7, sp, #8
 8003754:	60f8      	str	r0, [r7, #12]
 8003756:	60b9      	str	r1, [r7, #8]
 8003758:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003762:	d111      	bne.n	8003788 <SPI_EndRxTransaction+0x3a>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800376c:	d004      	beq.n	8003778 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003776:	d107      	bne.n	8003788 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003786:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003790:	d12a      	bne.n	80037e8 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800379a:	d012      	beq.n	80037c2 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2200      	movs	r2, #0
 80037a4:	2180      	movs	r1, #128	; 0x80
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f7ff ff67 	bl	800367a <SPI_WaitFlagStateUntilTimeout>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d02d      	beq.n	800380e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b6:	f043 0220 	orr.w	r2, r3, #32
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e026      	b.n	8003810 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	2200      	movs	r2, #0
 80037ca:	2101      	movs	r1, #1
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f7ff ff54 	bl	800367a <SPI_WaitFlagStateUntilTimeout>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d01a      	beq.n	800380e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037dc:	f043 0220 	orr.w	r2, r3, #32
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e013      	b.n	8003810 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	2200      	movs	r2, #0
 80037f0:	2101      	movs	r1, #1
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f7ff ff41 	bl	800367a <SPI_WaitFlagStateUntilTimeout>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d007      	beq.n	800380e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003802:	f043 0220 	orr.w	r2, r3, #32
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e000      	b.n	8003810 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b088      	sub	sp, #32
 800381c:	af02      	add	r7, sp, #8
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003824:	4b1b      	ldr	r3, [pc, #108]	; (8003894 <SPI_EndRxTxTransaction+0x7c>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a1b      	ldr	r2, [pc, #108]	; (8003898 <SPI_EndRxTxTransaction+0x80>)
 800382a:	fba2 2303 	umull	r2, r3, r2, r3
 800382e:	0d5b      	lsrs	r3, r3, #21
 8003830:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003834:	fb02 f303 	mul.w	r3, r2, r3
 8003838:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003842:	d112      	bne.n	800386a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	9300      	str	r3, [sp, #0]
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	2200      	movs	r2, #0
 800384c:	2180      	movs	r1, #128	; 0x80
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f7ff ff13 	bl	800367a <SPI_WaitFlagStateUntilTimeout>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d016      	beq.n	8003888 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385e:	f043 0220 	orr.w	r2, r3, #32
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e00f      	b.n	800388a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00a      	beq.n	8003886 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	3b01      	subs	r3, #1
 8003874:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003880:	2b80      	cmp	r3, #128	; 0x80
 8003882:	d0f2      	beq.n	800386a <SPI_EndRxTxTransaction+0x52>
 8003884:	e000      	b.n	8003888 <SPI_EndRxTxTransaction+0x70>
        break;
 8003886:	bf00      	nop
  }

  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3718      	adds	r7, #24
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	20000004 	.word	0x20000004
 8003898:	165e9f81 	.word	0x165e9f81

0800389c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e03f      	b.n	800392e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d106      	bne.n	80038c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7fd fe00 	bl	80014c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2224      	movs	r2, #36	; 0x24
 80038cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 fdbf 	bl	8004464 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	691a      	ldr	r2, [r3, #16]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	695a      	ldr	r2, [r3, #20]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003904:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68da      	ldr	r2, [r3, #12]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003914:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2220      	movs	r2, #32
 8003920:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2220      	movs	r2, #32
 8003928:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b088      	sub	sp, #32
 800393a:	af02      	add	r7, sp, #8
 800393c:	60f8      	str	r0, [r7, #12]
 800393e:	60b9      	str	r1, [r7, #8]
 8003940:	603b      	str	r3, [r7, #0]
 8003942:	4613      	mov	r3, r2
 8003944:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003946:	2300      	movs	r3, #0
 8003948:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b20      	cmp	r3, #32
 8003954:	f040 8083 	bne.w	8003a5e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d002      	beq.n	8003964 <HAL_UART_Transmit+0x2e>
 800395e:	88fb      	ldrh	r3, [r7, #6]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e07b      	b.n	8003a60 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800396e:	2b01      	cmp	r3, #1
 8003970:	d101      	bne.n	8003976 <HAL_UART_Transmit+0x40>
 8003972:	2302      	movs	r3, #2
 8003974:	e074      	b.n	8003a60 <HAL_UART_Transmit+0x12a>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2221      	movs	r2, #33	; 0x21
 8003988:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800398c:	f7fd ff68 	bl	8001860 <HAL_GetTick>
 8003990:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	88fa      	ldrh	r2, [r7, #6]
 8003996:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	88fa      	ldrh	r2, [r7, #6]
 800399c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80039a6:	e042      	b.n	8003a2e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	3b01      	subs	r3, #1
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039be:	d122      	bne.n	8003a06 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	2200      	movs	r2, #0
 80039c8:	2180      	movs	r1, #128	; 0x80
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f000 fbc9 	bl	8004162 <UART_WaitOnFlagUntilTimeout>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e042      	b.n	8003a60 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	881b      	ldrh	r3, [r3, #0]
 80039e2:	461a      	mov	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039ec:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d103      	bne.n	80039fe <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	3302      	adds	r3, #2
 80039fa:	60bb      	str	r3, [r7, #8]
 80039fc:	e017      	b.n	8003a2e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	3301      	adds	r3, #1
 8003a02:	60bb      	str	r3, [r7, #8]
 8003a04:	e013      	b.n	8003a2e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	2180      	movs	r1, #128	; 0x80
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f000 fba6 	bl	8004162 <UART_WaitOnFlagUntilTimeout>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e01f      	b.n	8003a60 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	1c5a      	adds	r2, r3, #1
 8003a24:	60ba      	str	r2, [r7, #8]
 8003a26:	781a      	ldrb	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1b7      	bne.n	80039a8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	2140      	movs	r1, #64	; 0x40
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f000 fb8d 	bl	8004162 <UART_WaitOnFlagUntilTimeout>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e006      	b.n	8003a60 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2220      	movs	r2, #32
 8003a56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	e000      	b.n	8003a60 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003a5e:	2302      	movs	r3, #2
  }
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3718      	adds	r7, #24
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b088      	sub	sp, #32
 8003a6c:	af02      	add	r7, sp, #8
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	603b      	str	r3, [r7, #0]
 8003a74:	4613      	mov	r3, r2
 8003a76:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b20      	cmp	r3, #32
 8003a86:	f040 8090 	bne.w	8003baa <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d002      	beq.n	8003a96 <HAL_UART_Receive+0x2e>
 8003a90:	88fb      	ldrh	r3, [r7, #6]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e088      	b.n	8003bac <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d101      	bne.n	8003aa8 <HAL_UART_Receive+0x40>
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	e081      	b.n	8003bac <HAL_UART_Receive+0x144>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2222      	movs	r2, #34	; 0x22
 8003aba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003abe:	f7fd fecf 	bl	8001860 <HAL_GetTick>
 8003ac2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	88fa      	ldrh	r2, [r7, #6]
 8003ac8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	88fa      	ldrh	r2, [r7, #6]
 8003ace:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003ad8:	e05c      	b.n	8003b94 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af0:	d12b      	bne.n	8003b4a <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2200      	movs	r2, #0
 8003afa:	2120      	movs	r1, #32
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 fb30 	bl	8004162 <UART_WaitOnFlagUntilTimeout>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e04f      	b.n	8003bac <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10c      	bne.n	8003b32 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	3302      	adds	r3, #2
 8003b2e:	60bb      	str	r3, [r7, #8]
 8003b30:	e030      	b.n	8003b94 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	3301      	adds	r3, #1
 8003b46:	60bb      	str	r3, [r7, #8]
 8003b48:	e024      	b.n	8003b94 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	2200      	movs	r2, #0
 8003b52:	2120      	movs	r1, #32
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 fb04 	bl	8004162 <UART_WaitOnFlagUntilTimeout>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e023      	b.n	8003bac <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d108      	bne.n	8003b7e <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6859      	ldr	r1, [r3, #4]
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	1c5a      	adds	r2, r3, #1
 8003b76:	60ba      	str	r2, [r7, #8]
 8003b78:	b2ca      	uxtb	r2, r1
 8003b7a:	701a      	strb	r2, [r3, #0]
 8003b7c:	e00a      	b.n	8003b94 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	1c59      	adds	r1, r3, #1
 8003b8a:	60b9      	str	r1, [r7, #8]
 8003b8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b90:	b2d2      	uxtb	r2, r2
 8003b92:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d19d      	bne.n	8003ada <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	e000      	b.n	8003bac <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8003baa:	2302      	movs	r3, #2
  }
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3718      	adds	r7, #24
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b20      	cmp	r3, #32
 8003bcc:	d153      	bne.n	8003c76 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d002      	beq.n	8003bda <HAL_UART_Transmit_DMA+0x26>
 8003bd4:	88fb      	ldrh	r3, [r7, #6]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e04c      	b.n	8003c78 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d101      	bne.n	8003bec <HAL_UART_Transmit_DMA+0x38>
 8003be8:	2302      	movs	r3, #2
 8003bea:	e045      	b.n	8003c78 <HAL_UART_Transmit_DMA+0xc4>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	88fa      	ldrh	r2, [r7, #6]
 8003bfe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	88fa      	ldrh	r2, [r7, #6]
 8003c04:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2221      	movs	r2, #33	; 0x21
 8003c10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c18:	4a19      	ldr	r2, [pc, #100]	; (8003c80 <HAL_UART_Transmit_DMA+0xcc>)
 8003c1a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c20:	4a18      	ldr	r2, [pc, #96]	; (8003c84 <HAL_UART_Transmit_DMA+0xd0>)
 8003c22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c28:	4a17      	ldr	r2, [pc, #92]	; (8003c88 <HAL_UART_Transmit_DMA+0xd4>)
 8003c2a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c30:	2200      	movs	r2, #0
 8003c32:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8003c34:	f107 0308 	add.w	r3, r7, #8
 8003c38:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	6819      	ldr	r1, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	3304      	adds	r3, #4
 8003c48:	461a      	mov	r2, r3
 8003c4a:	88fb      	ldrh	r3, [r7, #6]
 8003c4c:	f7fd fff8 	bl	8001c40 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c58:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	695a      	ldr	r2, [r3, #20]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c70:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003c72:	2300      	movs	r3, #0
 8003c74:	e000      	b.n	8003c78 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003c76:	2302      	movs	r3, #2
  }
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3718      	adds	r7, #24
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	08003fdd 	.word	0x08003fdd
 8003c84:	0800402f 	.word	0x0800402f
 8003c88:	080040cf 	.word	0x080040cf

08003c8c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	4613      	mov	r3, r2
 8003c98:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b20      	cmp	r3, #32
 8003ca4:	d166      	bne.n	8003d74 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d002      	beq.n	8003cb2 <HAL_UART_Receive_DMA+0x26>
 8003cac:	88fb      	ldrh	r3, [r7, #6]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e05f      	b.n	8003d76 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d101      	bne.n	8003cc4 <HAL_UART_Receive_DMA+0x38>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	e058      	b.n	8003d76 <HAL_UART_Receive_DMA+0xea>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	88fa      	ldrh	r2, [r7, #6]
 8003cd6:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2222      	movs	r2, #34	; 0x22
 8003ce2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cea:	4a25      	ldr	r2, [pc, #148]	; (8003d80 <HAL_UART_Receive_DMA+0xf4>)
 8003cec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf2:	4a24      	ldr	r2, [pc, #144]	; (8003d84 <HAL_UART_Receive_DMA+0xf8>)
 8003cf4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfa:	4a23      	ldr	r2, [pc, #140]	; (8003d88 <HAL_UART_Receive_DMA+0xfc>)
 8003cfc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d02:	2200      	movs	r2, #0
 8003d04:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8003d06:	f107 0308 	add.w	r3, r7, #8
 8003d0a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	3304      	adds	r3, #4
 8003d16:	4619      	mov	r1, r3
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	88fb      	ldrh	r3, [r7, #6]
 8003d1e:	f7fd ff8f 	bl	8001c40 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003d22:	2300      	movs	r3, #0
 8003d24:	613b      	str	r3, [r7, #16]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	613b      	str	r3, [r7, #16]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	613b      	str	r3, [r7, #16]
 8003d36:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68da      	ldr	r2, [r3, #12]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d4e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	695a      	ldr	r2, [r3, #20]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0201 	orr.w	r2, r2, #1
 8003d5e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	695a      	ldr	r2, [r3, #20]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d6e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003d70:	2300      	movs	r3, #0
 8003d72:	e000      	b.n	8003d76 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003d74:	2302      	movs	r3, #2
  }
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3718      	adds	r7, #24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	0800404b 	.word	0x0800404b
 8003d84:	080040b3 	.word	0x080040b3
 8003d88:	080040cf 	.word	0x080040cf

08003d8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b088      	sub	sp, #32
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003dac:	2300      	movs	r3, #0
 8003dae:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003db0:	2300      	movs	r3, #0
 8003db2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10d      	bne.n	8003dde <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	f003 0320 	and.w	r3, r3, #32
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d008      	beq.n	8003dde <HAL_UART_IRQHandler+0x52>
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	f003 0320 	and.w	r3, r3, #32
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 fac3 	bl	8004362 <UART_Receive_IT>
      return;
 8003ddc:	e0d0      	b.n	8003f80 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 80b0 	beq.w	8003f46 <HAL_UART_IRQHandler+0x1ba>
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d105      	bne.n	8003dfc <HAL_UART_IRQHandler+0x70>
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 80a5 	beq.w	8003f46 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00a      	beq.n	8003e1c <HAL_UART_IRQHandler+0x90>
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d005      	beq.n	8003e1c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e14:	f043 0201 	orr.w	r2, r3, #1
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	f003 0304 	and.w	r3, r3, #4
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00a      	beq.n	8003e3c <HAL_UART_IRQHandler+0xb0>
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d005      	beq.n	8003e3c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e34:	f043 0202 	orr.w	r2, r3, #2
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00a      	beq.n	8003e5c <HAL_UART_IRQHandler+0xd0>
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d005      	beq.n	8003e5c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e54:	f043 0204 	orr.w	r2, r3, #4
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	f003 0308 	and.w	r3, r3, #8
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00f      	beq.n	8003e86 <HAL_UART_IRQHandler+0xfa>
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	f003 0320 	and.w	r3, r3, #32
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d104      	bne.n	8003e7a <HAL_UART_IRQHandler+0xee>
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d005      	beq.n	8003e86 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e7e:	f043 0208 	orr.w	r2, r3, #8
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d077      	beq.n	8003f7e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	f003 0320 	and.w	r3, r3, #32
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d007      	beq.n	8003ea8 <HAL_UART_IRQHandler+0x11c>
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	f003 0320 	and.w	r3, r3, #32
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 fa5d 	bl	8004362 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb2:	2b40      	cmp	r3, #64	; 0x40
 8003eb4:	bf0c      	ite	eq
 8003eb6:	2301      	moveq	r3, #1
 8003eb8:	2300      	movne	r3, #0
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec2:	f003 0308 	and.w	r3, r3, #8
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d102      	bne.n	8003ed0 <HAL_UART_IRQHandler+0x144>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d031      	beq.n	8003f34 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 f9a6 	bl	8004222 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee0:	2b40      	cmp	r3, #64	; 0x40
 8003ee2:	d123      	bne.n	8003f2c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	695a      	ldr	r2, [r3, #20]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ef2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d013      	beq.n	8003f24 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f00:	4a21      	ldr	r2, [pc, #132]	; (8003f88 <HAL_UART_IRQHandler+0x1fc>)
 8003f02:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7fd fef1 	bl	8001cf0 <HAL_DMA_Abort_IT>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d016      	beq.n	8003f42 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f1e:	4610      	mov	r0, r2
 8003f20:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f22:	e00e      	b.n	8003f42 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 f84f 	bl	8003fc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f2a:	e00a      	b.n	8003f42 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 f84b 	bl	8003fc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f32:	e006      	b.n	8003f42 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 f847 	bl	8003fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003f40:	e01d      	b.n	8003f7e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f42:	bf00      	nop
    return;
 8003f44:	e01b      	b.n	8003f7e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d008      	beq.n	8003f62 <HAL_UART_IRQHandler+0x1d6>
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f993 	bl	8004286 <UART_Transmit_IT>
    return;
 8003f60:	e00e      	b.n	8003f80 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d009      	beq.n	8003f80 <HAL_UART_IRQHandler+0x1f4>
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d004      	beq.n	8003f80 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f9db 	bl	8004332 <UART_EndTransmit_IT>
    return;
 8003f7c:	e000      	b.n	8003f80 <HAL_UART_IRQHandler+0x1f4>
    return;
 8003f7e:	bf00      	nop
  }
}
 8003f80:	3720      	adds	r7, #32
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	0800425f 	.word	0x0800425f

08003f8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d113      	bne.n	8004020 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	695a      	ldr	r2, [r3, #20]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800400c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68da      	ldr	r2, [r3, #12]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800401c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800401e:	e002      	b.n	8004026 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f7ff ffb3 	bl	8003f8c <HAL_UART_TxCpltCallback>
}
 8004026:	bf00      	nop
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b084      	sub	sp, #16
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f7ff ffaf 	bl	8003fa0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004042:	bf00      	nop
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b084      	sub	sp, #16
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004056:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004062:	2b00      	cmp	r3, #0
 8004064:	d11e      	bne.n	80040a4 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68da      	ldr	r2, [r3, #12]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800407a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	695a      	ldr	r2, [r3, #20]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 0201 	bic.w	r2, r2, #1
 800408a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	695a      	ldr	r2, [r3, #20]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800409a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2220      	movs	r2, #32
 80040a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f7fc ff89 	bl	8000fbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040aa:	bf00      	nop
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b084      	sub	sp, #16
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040be:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f7ff ff77 	bl	8003fb4 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040c6:	bf00      	nop
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b084      	sub	sp, #16
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80040d6:	2300      	movs	r3, #0
 80040d8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040de:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ea:	2b80      	cmp	r3, #128	; 0x80
 80040ec:	bf0c      	ite	eq
 80040ee:	2301      	moveq	r3, #1
 80040f0:	2300      	movne	r3, #0
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b21      	cmp	r3, #33	; 0x21
 8004100:	d108      	bne.n	8004114 <UART_DMAError+0x46>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d005      	beq.n	8004114 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	2200      	movs	r2, #0
 800410c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800410e:	68b8      	ldr	r0, [r7, #8]
 8004110:	f000 f871 	bl	80041f6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411e:	2b40      	cmp	r3, #64	; 0x40
 8004120:	bf0c      	ite	eq
 8004122:	2301      	moveq	r3, #1
 8004124:	2300      	movne	r3, #0
 8004126:	b2db      	uxtb	r3, r3
 8004128:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b22      	cmp	r3, #34	; 0x22
 8004134:	d108      	bne.n	8004148 <UART_DMAError+0x7a>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d005      	beq.n	8004148 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	2200      	movs	r2, #0
 8004140:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004142:	68b8      	ldr	r0, [r7, #8]
 8004144:	f000 f86d 	bl	8004222 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800414c:	f043 0210 	orr.w	r2, r3, #16
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004154:	68b8      	ldr	r0, [r7, #8]
 8004156:	f7ff ff37 	bl	8003fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800415a:	bf00      	nop
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b084      	sub	sp, #16
 8004166:	af00      	add	r7, sp, #0
 8004168:	60f8      	str	r0, [r7, #12]
 800416a:	60b9      	str	r1, [r7, #8]
 800416c:	603b      	str	r3, [r7, #0]
 800416e:	4613      	mov	r3, r2
 8004170:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004172:	e02c      	b.n	80041ce <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417a:	d028      	beq.n	80041ce <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d007      	beq.n	8004192 <UART_WaitOnFlagUntilTimeout+0x30>
 8004182:	f7fd fb6d 	bl	8001860 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	429a      	cmp	r2, r3
 8004190:	d21d      	bcs.n	80041ce <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68da      	ldr	r2, [r3, #12]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80041a0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	695a      	ldr	r2, [r3, #20]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 0201 	bic.w	r2, r2, #1
 80041b0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2220      	movs	r2, #32
 80041b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2220      	movs	r2, #32
 80041be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e00f      	b.n	80041ee <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	4013      	ands	r3, r2
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	429a      	cmp	r2, r3
 80041dc:	bf0c      	ite	eq
 80041de:	2301      	moveq	r3, #1
 80041e0:	2300      	movne	r3, #0
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	461a      	mov	r2, r3
 80041e6:	79fb      	ldrb	r3, [r7, #7]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d0c3      	beq.n	8004174 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b083      	sub	sp, #12
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68da      	ldr	r2, [r3, #12]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800420c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2220      	movs	r2, #32
 8004212:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8004216:	bf00      	nop
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004222:	b480      	push	{r7}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68da      	ldr	r2, [r3, #12]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004238:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	695a      	ldr	r2, [r3, #20]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0201 	bic.w	r2, r2, #1
 8004248:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004252:	bf00      	nop
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b084      	sub	sp, #16
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f7ff fea5 	bl	8003fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800427e:	bf00      	nop
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004286:	b480      	push	{r7}
 8004288:	b085      	sub	sp, #20
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b21      	cmp	r3, #33	; 0x21
 8004298:	d144      	bne.n	8004324 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042a2:	d11a      	bne.n	80042da <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	881b      	ldrh	r3, [r3, #0]
 80042ae:	461a      	mov	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042b8:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d105      	bne.n	80042ce <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	1c9a      	adds	r2, r3, #2
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	621a      	str	r2, [r3, #32]
 80042cc:	e00e      	b.n	80042ec <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	1c5a      	adds	r2, r3, #1
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	621a      	str	r2, [r3, #32]
 80042d8:	e008      	b.n	80042ec <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	1c59      	adds	r1, r3, #1
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6211      	str	r1, [r2, #32]
 80042e4:	781a      	ldrb	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	4619      	mov	r1, r3
 80042fa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10f      	bne.n	8004320 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68da      	ldr	r2, [r3, #12]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800430e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68da      	ldr	r2, [r3, #12]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800431e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004320:	2300      	movs	r3, #0
 8004322:	e000      	b.n	8004326 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004324:	2302      	movs	r3, #2
  }
}
 8004326:	4618      	mov	r0, r3
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b082      	sub	sp, #8
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68da      	ldr	r2, [r3, #12]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004348:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2220      	movs	r2, #32
 800434e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7ff fe1a 	bl	8003f8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	b084      	sub	sp, #16
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b22      	cmp	r3, #34	; 0x22
 8004374:	d171      	bne.n	800445a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800437e:	d123      	bne.n	80043c8 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004384:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10e      	bne.n	80043ac <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	b29b      	uxth	r3, r3
 8004396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800439a:	b29a      	uxth	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a4:	1c9a      	adds	r2, r3, #2
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	629a      	str	r2, [r3, #40]	; 0x28
 80043aa:	e029      	b.n	8004400 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c0:	1c5a      	adds	r2, r3, #1
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	629a      	str	r2, [r3, #40]	; 0x28
 80043c6:	e01b      	b.n	8004400 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10a      	bne.n	80043e6 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6858      	ldr	r0, [r3, #4]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043da:	1c59      	adds	r1, r3, #1
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	6291      	str	r1, [r2, #40]	; 0x28
 80043e0:	b2c2      	uxtb	r2, r0
 80043e2:	701a      	strb	r2, [r3, #0]
 80043e4:	e00c      	b.n	8004400 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f2:	1c58      	adds	r0, r3, #1
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	6288      	str	r0, [r1, #40]	; 0x28
 80043f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043fc:	b2d2      	uxtb	r2, r2
 80043fe:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004404:	b29b      	uxth	r3, r3
 8004406:	3b01      	subs	r3, #1
 8004408:	b29b      	uxth	r3, r3
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	4619      	mov	r1, r3
 800440e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004410:	2b00      	cmp	r3, #0
 8004412:	d120      	bne.n	8004456 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 0220 	bic.w	r2, r2, #32
 8004422:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68da      	ldr	r2, [r3, #12]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004432:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	695a      	ldr	r2, [r3, #20]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 0201 	bic.w	r2, r2, #1
 8004442:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2220      	movs	r2, #32
 8004448:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7fc fdb5 	bl	8000fbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004452:	2300      	movs	r3, #0
 8004454:	e002      	b.n	800445c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004456:	2300      	movs	r3, #0
 8004458:	e000      	b.n	800445c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800445a:	2302      	movs	r3, #2
  }
}
 800445c:	4618      	mov	r0, r3
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004468:	b0bd      	sub	sp, #244	; 0xf4
 800446a:	af00      	add	r7, sp, #0
 800446c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800447c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004480:	68d9      	ldr	r1, [r3, #12]
 8004482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	ea40 0301 	orr.w	r3, r0, r1
 800448c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800448e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004492:	689a      	ldr	r2, [r3, #8]
 8004494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	431a      	orrs	r2, r3
 800449c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	431a      	orrs	r2, r3
 80044a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044a8:	69db      	ldr	r3, [r3, #28]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 80044b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80044bc:	f021 010c 	bic.w	r1, r1, #12
 80044c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80044ca:	430b      	orrs	r3, r1
 80044cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80044da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044de:	6999      	ldr	r1, [r3, #24]
 80044e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	ea40 0301 	orr.w	r3, r0, r1
 80044ea:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044f6:	f040 81a5 	bne.w	8004844 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	4bcd      	ldr	r3, [pc, #820]	; (8004838 <UART_SetConfig+0x3d4>)
 8004502:	429a      	cmp	r2, r3
 8004504:	d006      	beq.n	8004514 <UART_SetConfig+0xb0>
 8004506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	4bcb      	ldr	r3, [pc, #812]	; (800483c <UART_SetConfig+0x3d8>)
 800450e:	429a      	cmp	r2, r3
 8004510:	f040 80cb 	bne.w	80046aa <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004514:	f7fe fc5a 	bl	8002dcc <HAL_RCC_GetPCLK2Freq>
 8004518:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800451c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004520:	461c      	mov	r4, r3
 8004522:	f04f 0500 	mov.w	r5, #0
 8004526:	4622      	mov	r2, r4
 8004528:	462b      	mov	r3, r5
 800452a:	1891      	adds	r1, r2, r2
 800452c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8004530:	415b      	adcs	r3, r3
 8004532:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004536:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800453a:	1912      	adds	r2, r2, r4
 800453c:	eb45 0303 	adc.w	r3, r5, r3
 8004540:	f04f 0000 	mov.w	r0, #0
 8004544:	f04f 0100 	mov.w	r1, #0
 8004548:	00d9      	lsls	r1, r3, #3
 800454a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800454e:	00d0      	lsls	r0, r2, #3
 8004550:	4602      	mov	r2, r0
 8004552:	460b      	mov	r3, r1
 8004554:	1911      	adds	r1, r2, r4
 8004556:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800455a:	416b      	adcs	r3, r5
 800455c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	461a      	mov	r2, r3
 8004568:	f04f 0300 	mov.w	r3, #0
 800456c:	1891      	adds	r1, r2, r2
 800456e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8004572:	415b      	adcs	r3, r3
 8004574:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004578:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800457c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004580:	f7fc fb62 	bl	8000c48 <__aeabi_uldivmod>
 8004584:	4602      	mov	r2, r0
 8004586:	460b      	mov	r3, r1
 8004588:	4bad      	ldr	r3, [pc, #692]	; (8004840 <UART_SetConfig+0x3dc>)
 800458a:	fba3 2302 	umull	r2, r3, r3, r2
 800458e:	095b      	lsrs	r3, r3, #5
 8004590:	011e      	lsls	r6, r3, #4
 8004592:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004596:	461c      	mov	r4, r3
 8004598:	f04f 0500 	mov.w	r5, #0
 800459c:	4622      	mov	r2, r4
 800459e:	462b      	mov	r3, r5
 80045a0:	1891      	adds	r1, r2, r2
 80045a2:	67b9      	str	r1, [r7, #120]	; 0x78
 80045a4:	415b      	adcs	r3, r3
 80045a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80045a8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80045ac:	1912      	adds	r2, r2, r4
 80045ae:	eb45 0303 	adc.w	r3, r5, r3
 80045b2:	f04f 0000 	mov.w	r0, #0
 80045b6:	f04f 0100 	mov.w	r1, #0
 80045ba:	00d9      	lsls	r1, r3, #3
 80045bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045c0:	00d0      	lsls	r0, r2, #3
 80045c2:	4602      	mov	r2, r0
 80045c4:	460b      	mov	r3, r1
 80045c6:	1911      	adds	r1, r2, r4
 80045c8:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80045cc:	416b      	adcs	r3, r5
 80045ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80045d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	461a      	mov	r2, r3
 80045da:	f04f 0300 	mov.w	r3, #0
 80045de:	1891      	adds	r1, r2, r2
 80045e0:	6739      	str	r1, [r7, #112]	; 0x70
 80045e2:	415b      	adcs	r3, r3
 80045e4:	677b      	str	r3, [r7, #116]	; 0x74
 80045e6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80045ea:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80045ee:	f7fc fb2b 	bl	8000c48 <__aeabi_uldivmod>
 80045f2:	4602      	mov	r2, r0
 80045f4:	460b      	mov	r3, r1
 80045f6:	4b92      	ldr	r3, [pc, #584]	; (8004840 <UART_SetConfig+0x3dc>)
 80045f8:	fba3 1302 	umull	r1, r3, r3, r2
 80045fc:	095b      	lsrs	r3, r3, #5
 80045fe:	2164      	movs	r1, #100	; 0x64
 8004600:	fb01 f303 	mul.w	r3, r1, r3
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	00db      	lsls	r3, r3, #3
 8004608:	3332      	adds	r3, #50	; 0x32
 800460a:	4a8d      	ldr	r2, [pc, #564]	; (8004840 <UART_SetConfig+0x3dc>)
 800460c:	fba2 2303 	umull	r2, r3, r2, r3
 8004610:	095b      	lsrs	r3, r3, #5
 8004612:	005b      	lsls	r3, r3, #1
 8004614:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004618:	441e      	add	r6, r3
 800461a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800461e:	4618      	mov	r0, r3
 8004620:	f04f 0100 	mov.w	r1, #0
 8004624:	4602      	mov	r2, r0
 8004626:	460b      	mov	r3, r1
 8004628:	1894      	adds	r4, r2, r2
 800462a:	66bc      	str	r4, [r7, #104]	; 0x68
 800462c:	415b      	adcs	r3, r3
 800462e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004630:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004634:	1812      	adds	r2, r2, r0
 8004636:	eb41 0303 	adc.w	r3, r1, r3
 800463a:	f04f 0400 	mov.w	r4, #0
 800463e:	f04f 0500 	mov.w	r5, #0
 8004642:	00dd      	lsls	r5, r3, #3
 8004644:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004648:	00d4      	lsls	r4, r2, #3
 800464a:	4622      	mov	r2, r4
 800464c:	462b      	mov	r3, r5
 800464e:	1814      	adds	r4, r2, r0
 8004650:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8004654:	414b      	adcs	r3, r1
 8004656:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800465a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	461a      	mov	r2, r3
 8004662:	f04f 0300 	mov.w	r3, #0
 8004666:	1891      	adds	r1, r2, r2
 8004668:	6639      	str	r1, [r7, #96]	; 0x60
 800466a:	415b      	adcs	r3, r3
 800466c:	667b      	str	r3, [r7, #100]	; 0x64
 800466e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004672:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004676:	f7fc fae7 	bl	8000c48 <__aeabi_uldivmod>
 800467a:	4602      	mov	r2, r0
 800467c:	460b      	mov	r3, r1
 800467e:	4b70      	ldr	r3, [pc, #448]	; (8004840 <UART_SetConfig+0x3dc>)
 8004680:	fba3 1302 	umull	r1, r3, r3, r2
 8004684:	095b      	lsrs	r3, r3, #5
 8004686:	2164      	movs	r1, #100	; 0x64
 8004688:	fb01 f303 	mul.w	r3, r1, r3
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	3332      	adds	r3, #50	; 0x32
 8004692:	4a6b      	ldr	r2, [pc, #428]	; (8004840 <UART_SetConfig+0x3dc>)
 8004694:	fba2 2303 	umull	r2, r3, r2, r3
 8004698:	095b      	lsrs	r3, r3, #5
 800469a:	f003 0207 	and.w	r2, r3, #7
 800469e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4432      	add	r2, r6
 80046a6:	609a      	str	r2, [r3, #8]
 80046a8:	e26d      	b.n	8004b86 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046aa:	f7fe fb7b 	bl	8002da4 <HAL_RCC_GetPCLK1Freq>
 80046ae:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80046b6:	461c      	mov	r4, r3
 80046b8:	f04f 0500 	mov.w	r5, #0
 80046bc:	4622      	mov	r2, r4
 80046be:	462b      	mov	r3, r5
 80046c0:	1891      	adds	r1, r2, r2
 80046c2:	65b9      	str	r1, [r7, #88]	; 0x58
 80046c4:	415b      	adcs	r3, r3
 80046c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80046cc:	1912      	adds	r2, r2, r4
 80046ce:	eb45 0303 	adc.w	r3, r5, r3
 80046d2:	f04f 0000 	mov.w	r0, #0
 80046d6:	f04f 0100 	mov.w	r1, #0
 80046da:	00d9      	lsls	r1, r3, #3
 80046dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046e0:	00d0      	lsls	r0, r2, #3
 80046e2:	4602      	mov	r2, r0
 80046e4:	460b      	mov	r3, r1
 80046e6:	1911      	adds	r1, r2, r4
 80046e8:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80046ec:	416b      	adcs	r3, r5
 80046ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80046f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	461a      	mov	r2, r3
 80046fa:	f04f 0300 	mov.w	r3, #0
 80046fe:	1891      	adds	r1, r2, r2
 8004700:	6539      	str	r1, [r7, #80]	; 0x50
 8004702:	415b      	adcs	r3, r3
 8004704:	657b      	str	r3, [r7, #84]	; 0x54
 8004706:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800470a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800470e:	f7fc fa9b 	bl	8000c48 <__aeabi_uldivmod>
 8004712:	4602      	mov	r2, r0
 8004714:	460b      	mov	r3, r1
 8004716:	4b4a      	ldr	r3, [pc, #296]	; (8004840 <UART_SetConfig+0x3dc>)
 8004718:	fba3 2302 	umull	r2, r3, r3, r2
 800471c:	095b      	lsrs	r3, r3, #5
 800471e:	011e      	lsls	r6, r3, #4
 8004720:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004724:	461c      	mov	r4, r3
 8004726:	f04f 0500 	mov.w	r5, #0
 800472a:	4622      	mov	r2, r4
 800472c:	462b      	mov	r3, r5
 800472e:	1891      	adds	r1, r2, r2
 8004730:	64b9      	str	r1, [r7, #72]	; 0x48
 8004732:	415b      	adcs	r3, r3
 8004734:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004736:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800473a:	1912      	adds	r2, r2, r4
 800473c:	eb45 0303 	adc.w	r3, r5, r3
 8004740:	f04f 0000 	mov.w	r0, #0
 8004744:	f04f 0100 	mov.w	r1, #0
 8004748:	00d9      	lsls	r1, r3, #3
 800474a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800474e:	00d0      	lsls	r0, r2, #3
 8004750:	4602      	mov	r2, r0
 8004752:	460b      	mov	r3, r1
 8004754:	1911      	adds	r1, r2, r4
 8004756:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800475a:	416b      	adcs	r3, r5
 800475c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	461a      	mov	r2, r3
 8004768:	f04f 0300 	mov.w	r3, #0
 800476c:	1891      	adds	r1, r2, r2
 800476e:	6439      	str	r1, [r7, #64]	; 0x40
 8004770:	415b      	adcs	r3, r3
 8004772:	647b      	str	r3, [r7, #68]	; 0x44
 8004774:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004778:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800477c:	f7fc fa64 	bl	8000c48 <__aeabi_uldivmod>
 8004780:	4602      	mov	r2, r0
 8004782:	460b      	mov	r3, r1
 8004784:	4b2e      	ldr	r3, [pc, #184]	; (8004840 <UART_SetConfig+0x3dc>)
 8004786:	fba3 1302 	umull	r1, r3, r3, r2
 800478a:	095b      	lsrs	r3, r3, #5
 800478c:	2164      	movs	r1, #100	; 0x64
 800478e:	fb01 f303 	mul.w	r3, r1, r3
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	00db      	lsls	r3, r3, #3
 8004796:	3332      	adds	r3, #50	; 0x32
 8004798:	4a29      	ldr	r2, [pc, #164]	; (8004840 <UART_SetConfig+0x3dc>)
 800479a:	fba2 2303 	umull	r2, r3, r2, r3
 800479e:	095b      	lsrs	r3, r3, #5
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047a6:	441e      	add	r6, r3
 80047a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80047ac:	4618      	mov	r0, r3
 80047ae:	f04f 0100 	mov.w	r1, #0
 80047b2:	4602      	mov	r2, r0
 80047b4:	460b      	mov	r3, r1
 80047b6:	1894      	adds	r4, r2, r2
 80047b8:	63bc      	str	r4, [r7, #56]	; 0x38
 80047ba:	415b      	adcs	r3, r3
 80047bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047be:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80047c2:	1812      	adds	r2, r2, r0
 80047c4:	eb41 0303 	adc.w	r3, r1, r3
 80047c8:	f04f 0400 	mov.w	r4, #0
 80047cc:	f04f 0500 	mov.w	r5, #0
 80047d0:	00dd      	lsls	r5, r3, #3
 80047d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80047d6:	00d4      	lsls	r4, r2, #3
 80047d8:	4622      	mov	r2, r4
 80047da:	462b      	mov	r3, r5
 80047dc:	1814      	adds	r4, r2, r0
 80047de:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80047e2:	414b      	adcs	r3, r1
 80047e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	461a      	mov	r2, r3
 80047f0:	f04f 0300 	mov.w	r3, #0
 80047f4:	1891      	adds	r1, r2, r2
 80047f6:	6339      	str	r1, [r7, #48]	; 0x30
 80047f8:	415b      	adcs	r3, r3
 80047fa:	637b      	str	r3, [r7, #52]	; 0x34
 80047fc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004800:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004804:	f7fc fa20 	bl	8000c48 <__aeabi_uldivmod>
 8004808:	4602      	mov	r2, r0
 800480a:	460b      	mov	r3, r1
 800480c:	4b0c      	ldr	r3, [pc, #48]	; (8004840 <UART_SetConfig+0x3dc>)
 800480e:	fba3 1302 	umull	r1, r3, r3, r2
 8004812:	095b      	lsrs	r3, r3, #5
 8004814:	2164      	movs	r1, #100	; 0x64
 8004816:	fb01 f303 	mul.w	r3, r1, r3
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	00db      	lsls	r3, r3, #3
 800481e:	3332      	adds	r3, #50	; 0x32
 8004820:	4a07      	ldr	r2, [pc, #28]	; (8004840 <UART_SetConfig+0x3dc>)
 8004822:	fba2 2303 	umull	r2, r3, r2, r3
 8004826:	095b      	lsrs	r3, r3, #5
 8004828:	f003 0207 	and.w	r2, r3, #7
 800482c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4432      	add	r2, r6
 8004834:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004836:	e1a6      	b.n	8004b86 <UART_SetConfig+0x722>
 8004838:	40011000 	.word	0x40011000
 800483c:	40011400 	.word	0x40011400
 8004840:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	4bd1      	ldr	r3, [pc, #836]	; (8004b90 <UART_SetConfig+0x72c>)
 800484c:	429a      	cmp	r2, r3
 800484e:	d006      	beq.n	800485e <UART_SetConfig+0x3fa>
 8004850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	4bcf      	ldr	r3, [pc, #828]	; (8004b94 <UART_SetConfig+0x730>)
 8004858:	429a      	cmp	r2, r3
 800485a:	f040 80ca 	bne.w	80049f2 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800485e:	f7fe fab5 	bl	8002dcc <HAL_RCC_GetPCLK2Freq>
 8004862:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004866:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800486a:	461c      	mov	r4, r3
 800486c:	f04f 0500 	mov.w	r5, #0
 8004870:	4622      	mov	r2, r4
 8004872:	462b      	mov	r3, r5
 8004874:	1891      	adds	r1, r2, r2
 8004876:	62b9      	str	r1, [r7, #40]	; 0x28
 8004878:	415b      	adcs	r3, r3
 800487a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800487c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004880:	1912      	adds	r2, r2, r4
 8004882:	eb45 0303 	adc.w	r3, r5, r3
 8004886:	f04f 0000 	mov.w	r0, #0
 800488a:	f04f 0100 	mov.w	r1, #0
 800488e:	00d9      	lsls	r1, r3, #3
 8004890:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004894:	00d0      	lsls	r0, r2, #3
 8004896:	4602      	mov	r2, r0
 8004898:	460b      	mov	r3, r1
 800489a:	eb12 0a04 	adds.w	sl, r2, r4
 800489e:	eb43 0b05 	adc.w	fp, r3, r5
 80048a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f04f 0100 	mov.w	r1, #0
 80048ae:	f04f 0200 	mov.w	r2, #0
 80048b2:	f04f 0300 	mov.w	r3, #0
 80048b6:	008b      	lsls	r3, r1, #2
 80048b8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80048bc:	0082      	lsls	r2, r0, #2
 80048be:	4650      	mov	r0, sl
 80048c0:	4659      	mov	r1, fp
 80048c2:	f7fc f9c1 	bl	8000c48 <__aeabi_uldivmod>
 80048c6:	4602      	mov	r2, r0
 80048c8:	460b      	mov	r3, r1
 80048ca:	4bb3      	ldr	r3, [pc, #716]	; (8004b98 <UART_SetConfig+0x734>)
 80048cc:	fba3 2302 	umull	r2, r3, r3, r2
 80048d0:	095b      	lsrs	r3, r3, #5
 80048d2:	011e      	lsls	r6, r3, #4
 80048d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80048d8:	4618      	mov	r0, r3
 80048da:	f04f 0100 	mov.w	r1, #0
 80048de:	4602      	mov	r2, r0
 80048e0:	460b      	mov	r3, r1
 80048e2:	1894      	adds	r4, r2, r2
 80048e4:	623c      	str	r4, [r7, #32]
 80048e6:	415b      	adcs	r3, r3
 80048e8:	627b      	str	r3, [r7, #36]	; 0x24
 80048ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048ee:	1812      	adds	r2, r2, r0
 80048f0:	eb41 0303 	adc.w	r3, r1, r3
 80048f4:	f04f 0400 	mov.w	r4, #0
 80048f8:	f04f 0500 	mov.w	r5, #0
 80048fc:	00dd      	lsls	r5, r3, #3
 80048fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004902:	00d4      	lsls	r4, r2, #3
 8004904:	4622      	mov	r2, r4
 8004906:	462b      	mov	r3, r5
 8004908:	1814      	adds	r4, r2, r0
 800490a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800490e:	414b      	adcs	r3, r1
 8004910:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	4618      	mov	r0, r3
 800491c:	f04f 0100 	mov.w	r1, #0
 8004920:	f04f 0200 	mov.w	r2, #0
 8004924:	f04f 0300 	mov.w	r3, #0
 8004928:	008b      	lsls	r3, r1, #2
 800492a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800492e:	0082      	lsls	r2, r0, #2
 8004930:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8004934:	f7fc f988 	bl	8000c48 <__aeabi_uldivmod>
 8004938:	4602      	mov	r2, r0
 800493a:	460b      	mov	r3, r1
 800493c:	4b96      	ldr	r3, [pc, #600]	; (8004b98 <UART_SetConfig+0x734>)
 800493e:	fba3 1302 	umull	r1, r3, r3, r2
 8004942:	095b      	lsrs	r3, r3, #5
 8004944:	2164      	movs	r1, #100	; 0x64
 8004946:	fb01 f303 	mul.w	r3, r1, r3
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	011b      	lsls	r3, r3, #4
 800494e:	3332      	adds	r3, #50	; 0x32
 8004950:	4a91      	ldr	r2, [pc, #580]	; (8004b98 <UART_SetConfig+0x734>)
 8004952:	fba2 2303 	umull	r2, r3, r2, r3
 8004956:	095b      	lsrs	r3, r3, #5
 8004958:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800495c:	441e      	add	r6, r3
 800495e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004962:	4618      	mov	r0, r3
 8004964:	f04f 0100 	mov.w	r1, #0
 8004968:	4602      	mov	r2, r0
 800496a:	460b      	mov	r3, r1
 800496c:	1894      	adds	r4, r2, r2
 800496e:	61bc      	str	r4, [r7, #24]
 8004970:	415b      	adcs	r3, r3
 8004972:	61fb      	str	r3, [r7, #28]
 8004974:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004978:	1812      	adds	r2, r2, r0
 800497a:	eb41 0303 	adc.w	r3, r1, r3
 800497e:	f04f 0400 	mov.w	r4, #0
 8004982:	f04f 0500 	mov.w	r5, #0
 8004986:	00dd      	lsls	r5, r3, #3
 8004988:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800498c:	00d4      	lsls	r4, r2, #3
 800498e:	4622      	mov	r2, r4
 8004990:	462b      	mov	r3, r5
 8004992:	1814      	adds	r4, r2, r0
 8004994:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8004998:	414b      	adcs	r3, r1
 800499a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800499e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f04f 0100 	mov.w	r1, #0
 80049aa:	f04f 0200 	mov.w	r2, #0
 80049ae:	f04f 0300 	mov.w	r3, #0
 80049b2:	008b      	lsls	r3, r1, #2
 80049b4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80049b8:	0082      	lsls	r2, r0, #2
 80049ba:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80049be:	f7fc f943 	bl	8000c48 <__aeabi_uldivmod>
 80049c2:	4602      	mov	r2, r0
 80049c4:	460b      	mov	r3, r1
 80049c6:	4b74      	ldr	r3, [pc, #464]	; (8004b98 <UART_SetConfig+0x734>)
 80049c8:	fba3 1302 	umull	r1, r3, r3, r2
 80049cc:	095b      	lsrs	r3, r3, #5
 80049ce:	2164      	movs	r1, #100	; 0x64
 80049d0:	fb01 f303 	mul.w	r3, r1, r3
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	011b      	lsls	r3, r3, #4
 80049d8:	3332      	adds	r3, #50	; 0x32
 80049da:	4a6f      	ldr	r2, [pc, #444]	; (8004b98 <UART_SetConfig+0x734>)
 80049dc:	fba2 2303 	umull	r2, r3, r2, r3
 80049e0:	095b      	lsrs	r3, r3, #5
 80049e2:	f003 020f 	and.w	r2, r3, #15
 80049e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4432      	add	r2, r6
 80049ee:	609a      	str	r2, [r3, #8]
 80049f0:	e0c9      	b.n	8004b86 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80049f2:	f7fe f9d7 	bl	8002da4 <HAL_RCC_GetPCLK1Freq>
 80049f6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80049fe:	461c      	mov	r4, r3
 8004a00:	f04f 0500 	mov.w	r5, #0
 8004a04:	4622      	mov	r2, r4
 8004a06:	462b      	mov	r3, r5
 8004a08:	1891      	adds	r1, r2, r2
 8004a0a:	6139      	str	r1, [r7, #16]
 8004a0c:	415b      	adcs	r3, r3
 8004a0e:	617b      	str	r3, [r7, #20]
 8004a10:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004a14:	1912      	adds	r2, r2, r4
 8004a16:	eb45 0303 	adc.w	r3, r5, r3
 8004a1a:	f04f 0000 	mov.w	r0, #0
 8004a1e:	f04f 0100 	mov.w	r1, #0
 8004a22:	00d9      	lsls	r1, r3, #3
 8004a24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a28:	00d0      	lsls	r0, r2, #3
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	eb12 0804 	adds.w	r8, r2, r4
 8004a32:	eb43 0905 	adc.w	r9, r3, r5
 8004a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f04f 0100 	mov.w	r1, #0
 8004a42:	f04f 0200 	mov.w	r2, #0
 8004a46:	f04f 0300 	mov.w	r3, #0
 8004a4a:	008b      	lsls	r3, r1, #2
 8004a4c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004a50:	0082      	lsls	r2, r0, #2
 8004a52:	4640      	mov	r0, r8
 8004a54:	4649      	mov	r1, r9
 8004a56:	f7fc f8f7 	bl	8000c48 <__aeabi_uldivmod>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	4b4e      	ldr	r3, [pc, #312]	; (8004b98 <UART_SetConfig+0x734>)
 8004a60:	fba3 2302 	umull	r2, r3, r3, r2
 8004a64:	095b      	lsrs	r3, r3, #5
 8004a66:	011e      	lsls	r6, r3, #4
 8004a68:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f04f 0100 	mov.w	r1, #0
 8004a72:	4602      	mov	r2, r0
 8004a74:	460b      	mov	r3, r1
 8004a76:	1894      	adds	r4, r2, r2
 8004a78:	60bc      	str	r4, [r7, #8]
 8004a7a:	415b      	adcs	r3, r3
 8004a7c:	60fb      	str	r3, [r7, #12]
 8004a7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a82:	1812      	adds	r2, r2, r0
 8004a84:	eb41 0303 	adc.w	r3, r1, r3
 8004a88:	f04f 0400 	mov.w	r4, #0
 8004a8c:	f04f 0500 	mov.w	r5, #0
 8004a90:	00dd      	lsls	r5, r3, #3
 8004a92:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004a96:	00d4      	lsls	r4, r2, #3
 8004a98:	4622      	mov	r2, r4
 8004a9a:	462b      	mov	r3, r5
 8004a9c:	1814      	adds	r4, r2, r0
 8004a9e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8004aa2:	414b      	adcs	r3, r1
 8004aa4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f04f 0100 	mov.w	r1, #0
 8004ab4:	f04f 0200 	mov.w	r2, #0
 8004ab8:	f04f 0300 	mov.w	r3, #0
 8004abc:	008b      	lsls	r3, r1, #2
 8004abe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004ac2:	0082      	lsls	r2, r0, #2
 8004ac4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004ac8:	f7fc f8be 	bl	8000c48 <__aeabi_uldivmod>
 8004acc:	4602      	mov	r2, r0
 8004ace:	460b      	mov	r3, r1
 8004ad0:	4b31      	ldr	r3, [pc, #196]	; (8004b98 <UART_SetConfig+0x734>)
 8004ad2:	fba3 1302 	umull	r1, r3, r3, r2
 8004ad6:	095b      	lsrs	r3, r3, #5
 8004ad8:	2164      	movs	r1, #100	; 0x64
 8004ada:	fb01 f303 	mul.w	r3, r1, r3
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	011b      	lsls	r3, r3, #4
 8004ae2:	3332      	adds	r3, #50	; 0x32
 8004ae4:	4a2c      	ldr	r2, [pc, #176]	; (8004b98 <UART_SetConfig+0x734>)
 8004ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aea:	095b      	lsrs	r3, r3, #5
 8004aec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004af0:	441e      	add	r6, r3
 8004af2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004af6:	4618      	mov	r0, r3
 8004af8:	f04f 0100 	mov.w	r1, #0
 8004afc:	4602      	mov	r2, r0
 8004afe:	460b      	mov	r3, r1
 8004b00:	1894      	adds	r4, r2, r2
 8004b02:	603c      	str	r4, [r7, #0]
 8004b04:	415b      	adcs	r3, r3
 8004b06:	607b      	str	r3, [r7, #4]
 8004b08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b0c:	1812      	adds	r2, r2, r0
 8004b0e:	eb41 0303 	adc.w	r3, r1, r3
 8004b12:	f04f 0400 	mov.w	r4, #0
 8004b16:	f04f 0500 	mov.w	r5, #0
 8004b1a:	00dd      	lsls	r5, r3, #3
 8004b1c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b20:	00d4      	lsls	r4, r2, #3
 8004b22:	4622      	mov	r2, r4
 8004b24:	462b      	mov	r3, r5
 8004b26:	1814      	adds	r4, r2, r0
 8004b28:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8004b2c:	414b      	adcs	r3, r1
 8004b2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f04f 0100 	mov.w	r1, #0
 8004b3e:	f04f 0200 	mov.w	r2, #0
 8004b42:	f04f 0300 	mov.w	r3, #0
 8004b46:	008b      	lsls	r3, r1, #2
 8004b48:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b4c:	0082      	lsls	r2, r0, #2
 8004b4e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8004b52:	f7fc f879 	bl	8000c48 <__aeabi_uldivmod>
 8004b56:	4602      	mov	r2, r0
 8004b58:	460b      	mov	r3, r1
 8004b5a:	4b0f      	ldr	r3, [pc, #60]	; (8004b98 <UART_SetConfig+0x734>)
 8004b5c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b60:	095b      	lsrs	r3, r3, #5
 8004b62:	2164      	movs	r1, #100	; 0x64
 8004b64:	fb01 f303 	mul.w	r3, r1, r3
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	011b      	lsls	r3, r3, #4
 8004b6c:	3332      	adds	r3, #50	; 0x32
 8004b6e:	4a0a      	ldr	r2, [pc, #40]	; (8004b98 <UART_SetConfig+0x734>)
 8004b70:	fba2 2303 	umull	r2, r3, r2, r3
 8004b74:	095b      	lsrs	r3, r3, #5
 8004b76:	f003 020f 	and.w	r2, r3, #15
 8004b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4432      	add	r2, r6
 8004b82:	609a      	str	r2, [r3, #8]
}
 8004b84:	e7ff      	b.n	8004b86 <UART_SetConfig+0x722>
 8004b86:	bf00      	nop
 8004b88:	37f4      	adds	r7, #244	; 0xf4
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b90:	40011000 	.word	0x40011000
 8004b94:	40011400 	.word	0x40011400
 8004b98:	51eb851f 	.word	0x51eb851f
 8004b9c:	00000000 	.word	0x00000000

08004ba0 <parse>:
bool paused;
uint8_t c;



bool parse(char *nmea) {
 8004ba0:	b590      	push	{r4, r7, lr}
 8004ba2:	b08b      	sub	sp, #44	; 0x2c
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  // do checksum check

  // first look if we even have one
  if (nmea[strlen(nmea)-4] == '*') {
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f7fb fb19 	bl	80001e0 <strlen>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	3b04      	subs	r3, #4
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	2b2a      	cmp	r3, #42	; 0x2a
 8004bba:	d139      	bne.n	8004c30 <parse+0x90>
    uint16_t sum = parseHex(nmea[strlen(nmea)-3]) * 16;
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f7fb fb0f 	bl	80001e0 <strlen>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	3b03      	subs	r3, #3
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	4413      	add	r3, r2
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f000 fc2f 	bl	8005430 <parseHex>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	011b      	lsls	r3, r3, #4
 8004bd8:	84fb      	strh	r3, [r7, #38]	; 0x26
    sum += parseHex(nmea[strlen(nmea)-2]);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7fb fb00 	bl	80001e0 <strlen>
 8004be0:	4603      	mov	r3, r0
 8004be2:	3b02      	subs	r3, #2
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	4413      	add	r3, r2
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 fc20 	bl	8005430 <parseHex>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004bf6:	4413      	add	r3, r2
 8004bf8:	84fb      	strh	r3, [r7, #38]	; 0x26
    
    // check checksum 
    for (uint8_t i=1; i < (strlen(nmea)-4); i++) {
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004c00:	e00d      	b.n	8004c1e <parse+0x7e>
      sum ^= nmea[i];
 8004c02:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	4413      	add	r3, r2
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c10:	4053      	eors	r3, r2
 8004c12:	84fb      	strh	r3, [r7, #38]	; 0x26
    for (uint8_t i=1; i < (strlen(nmea)-4); i++) {
 8004c14:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004c18:	3301      	adds	r3, #1
 8004c1a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004c1e:	f897 4025 	ldrb.w	r4, [r7, #37]	; 0x25
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f7fb fadc 	bl	80001e0 <strlen>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	3b04      	subs	r3, #4
 8004c2c:	429c      	cmp	r4, r3
 8004c2e:	d3e8      	bcc.n	8004c02 <parse+0x62>
      //return false;
    }
  }

  // look for a few common sentences
  if (strstr(nmea, "$GPGGA")) {
 8004c30:	4997      	ldr	r1, [pc, #604]	; (8004e90 <parse+0x2f0>)
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f001 feb8 	bl	80069a8 <strstr>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f000 814a 	beq.w	8004ed4 <parse+0x334>
    // found GGA
    char *p = nmea;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	613b      	str	r3, [r7, #16]
    // get time
    p = strchr(p, ',')+1;
 8004c44:	212c      	movs	r1, #44	; 0x2c
 8004c46:	6938      	ldr	r0, [r7, #16]
 8004c48:	f001 fe7c 	bl	8006944 <strchr>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	3301      	adds	r3, #1
 8004c50:	613b      	str	r3, [r7, #16]
    float timef = atof(p);
 8004c52:	6938      	ldr	r0, [r7, #16]
 8004c54:	f001 fcda 	bl	800660c <atof>
 8004c58:	ec53 2b10 	vmov	r2, r3, d0
 8004c5c:	4610      	mov	r0, r2
 8004c5e:	4619      	mov	r1, r3
 8004c60:	f7fb ffa2 	bl	8000ba8 <__aeabi_d2f>
 8004c64:	4603      	mov	r3, r0
 8004c66:	60fb      	str	r3, [r7, #12]
    uint32_t time = timef;
 8004c68:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c70:	ee17 3a90 	vmov	r3, s15
 8004c74:	60bb      	str	r3, [r7, #8]
    hour = time / 10000;
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	4a86      	ldr	r2, [pc, #536]	; (8004e94 <parse+0x2f4>)
 8004c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7e:	0b5b      	lsrs	r3, r3, #13
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	4b85      	ldr	r3, [pc, #532]	; (8004e98 <parse+0x2f8>)
 8004c84:	701a      	strb	r2, [r3, #0]
    minute = (time % 10000) / 100;
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	4b82      	ldr	r3, [pc, #520]	; (8004e94 <parse+0x2f4>)
 8004c8a:	fba3 1302 	umull	r1, r3, r3, r2
 8004c8e:	0b5b      	lsrs	r3, r3, #13
 8004c90:	f242 7110 	movw	r1, #10000	; 0x2710
 8004c94:	fb01 f303 	mul.w	r3, r1, r3
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	4a80      	ldr	r2, [pc, #512]	; (8004e9c <parse+0x2fc>)
 8004c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca0:	095b      	lsrs	r3, r3, #5
 8004ca2:	b2da      	uxtb	r2, r3
 8004ca4:	4b7e      	ldr	r3, [pc, #504]	; (8004ea0 <parse+0x300>)
 8004ca6:	701a      	strb	r2, [r3, #0]
    seconds = (time % 100);
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	4b7c      	ldr	r3, [pc, #496]	; (8004e9c <parse+0x2fc>)
 8004cac:	fba3 1302 	umull	r1, r3, r3, r2
 8004cb0:	095b      	lsrs	r3, r3, #5
 8004cb2:	2164      	movs	r1, #100	; 0x64
 8004cb4:	fb01 f303 	mul.w	r3, r1, r3
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	b2da      	uxtb	r2, r3
 8004cbc:	4b79      	ldr	r3, [pc, #484]	; (8004ea4 <parse+0x304>)
 8004cbe:	701a      	strb	r2, [r3, #0]

    milliseconds = fmod((double) timef, 1.0) * 1000;
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f7fb fc49 	bl	8000558 <__aeabi_f2d>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	460b      	mov	r3, r1
 8004cca:	ed9f 1b6f 	vldr	d1, [pc, #444]	; 8004e88 <parse+0x2e8>
 8004cce:	ec43 2b10 	vmov	d0, r2, r3
 8004cd2:	f004 fd65 	bl	80097a0 <fmod>
 8004cd6:	ec51 0b10 	vmov	r0, r1, d0
 8004cda:	f04f 0200 	mov.w	r2, #0
 8004cde:	4b72      	ldr	r3, [pc, #456]	; (8004ea8 <parse+0x308>)
 8004ce0:	f7fb fc92 	bl	8000608 <__aeabi_dmul>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	4610      	mov	r0, r2
 8004cea:	4619      	mov	r1, r3
 8004cec:	f7fb ff3c 	bl	8000b68 <__aeabi_d2uiz>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	4b6d      	ldr	r3, [pc, #436]	; (8004eac <parse+0x30c>)
 8004cf6:	801a      	strh	r2, [r3, #0]

    // parse out latitude
    p = strchr(p, ',')+1;
 8004cf8:	212c      	movs	r1, #44	; 0x2c
 8004cfa:	6938      	ldr	r0, [r7, #16]
 8004cfc:	f001 fe22 	bl	8006944 <strchr>
 8004d00:	4603      	mov	r3, r0
 8004d02:	3301      	adds	r3, #1
 8004d04:	613b      	str	r3, [r7, #16]
    latitude = atof(p);
 8004d06:	6938      	ldr	r0, [r7, #16]
 8004d08:	f001 fc80 	bl	800660c <atof>
 8004d0c:	ec53 2b10 	vmov	r2, r3, d0
 8004d10:	4610      	mov	r0, r2
 8004d12:	4619      	mov	r1, r3
 8004d14:	f7fb ff48 	bl	8000ba8 <__aeabi_d2f>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	4a65      	ldr	r2, [pc, #404]	; (8004eb0 <parse+0x310>)
 8004d1c:	6013      	str	r3, [r2, #0]

    p = strchr(p, ',')+1;
 8004d1e:	212c      	movs	r1, #44	; 0x2c
 8004d20:	6938      	ldr	r0, [r7, #16]
 8004d22:	f001 fe0f 	bl	8006944 <strchr>
 8004d26:	4603      	mov	r3, r0
 8004d28:	3301      	adds	r3, #1
 8004d2a:	613b      	str	r3, [r7, #16]
    if (p[0] == 'N') lat = 'N';
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	2b4e      	cmp	r3, #78	; 0x4e
 8004d32:	d103      	bne.n	8004d3c <parse+0x19c>
 8004d34:	4b5f      	ldr	r3, [pc, #380]	; (8004eb4 <parse+0x314>)
 8004d36:	224e      	movs	r2, #78	; 0x4e
 8004d38:	701a      	strb	r2, [r3, #0]
 8004d3a:	e011      	b.n	8004d60 <parse+0x1c0>
    else if (p[0] == 'S') lat = 'S';
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	2b53      	cmp	r3, #83	; 0x53
 8004d42:	d103      	bne.n	8004d4c <parse+0x1ac>
 8004d44:	4b5b      	ldr	r3, [pc, #364]	; (8004eb4 <parse+0x314>)
 8004d46:	2253      	movs	r2, #83	; 0x53
 8004d48:	701a      	strb	r2, [r3, #0]
 8004d4a:	e009      	b.n	8004d60 <parse+0x1c0>
    else if (p[0] == ',') lat = 0;
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	2b2c      	cmp	r3, #44	; 0x2c
 8004d52:	d103      	bne.n	8004d5c <parse+0x1bc>
 8004d54:	4b57      	ldr	r3, [pc, #348]	; (8004eb4 <parse+0x314>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	701a      	strb	r2, [r3, #0]
 8004d5a:	e001      	b.n	8004d60 <parse+0x1c0>
    else return false;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	e1fe      	b.n	800515e <parse+0x5be>

    // parse out longitude
    p = strchr(p, ',')+1;
 8004d60:	212c      	movs	r1, #44	; 0x2c
 8004d62:	6938      	ldr	r0, [r7, #16]
 8004d64:	f001 fdee 	bl	8006944 <strchr>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	613b      	str	r3, [r7, #16]
    longitude = atof(p);
 8004d6e:	6938      	ldr	r0, [r7, #16]
 8004d70:	f001 fc4c 	bl	800660c <atof>
 8004d74:	ec53 2b10 	vmov	r2, r3, d0
 8004d78:	4610      	mov	r0, r2
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	f7fb ff14 	bl	8000ba8 <__aeabi_d2f>
 8004d80:	4603      	mov	r3, r0
 8004d82:	4a4d      	ldr	r2, [pc, #308]	; (8004eb8 <parse+0x318>)
 8004d84:	6013      	str	r3, [r2, #0]

    p = strchr(p, ',')+1;
 8004d86:	212c      	movs	r1, #44	; 0x2c
 8004d88:	6938      	ldr	r0, [r7, #16]
 8004d8a:	f001 fddb 	bl	8006944 <strchr>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	3301      	adds	r3, #1
 8004d92:	613b      	str	r3, [r7, #16]
    if (p[0] == 'W') lon = 'W';
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	2b57      	cmp	r3, #87	; 0x57
 8004d9a:	d103      	bne.n	8004da4 <parse+0x204>
 8004d9c:	4b47      	ldr	r3, [pc, #284]	; (8004ebc <parse+0x31c>)
 8004d9e:	2257      	movs	r2, #87	; 0x57
 8004da0:	701a      	strb	r2, [r3, #0]
 8004da2:	e011      	b.n	8004dc8 <parse+0x228>
    else if (p[0] == 'E') lon = 'E';
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	2b45      	cmp	r3, #69	; 0x45
 8004daa:	d103      	bne.n	8004db4 <parse+0x214>
 8004dac:	4b43      	ldr	r3, [pc, #268]	; (8004ebc <parse+0x31c>)
 8004dae:	2245      	movs	r2, #69	; 0x45
 8004db0:	701a      	strb	r2, [r3, #0]
 8004db2:	e009      	b.n	8004dc8 <parse+0x228>
    else if (p[0] == ',') lon = 0;
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	2b2c      	cmp	r3, #44	; 0x2c
 8004dba:	d103      	bne.n	8004dc4 <parse+0x224>
 8004dbc:	4b3f      	ldr	r3, [pc, #252]	; (8004ebc <parse+0x31c>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	701a      	strb	r2, [r3, #0]
 8004dc2:	e001      	b.n	8004dc8 <parse+0x228>
    else return false;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	e1ca      	b.n	800515e <parse+0x5be>

    p = strchr(p, ',')+1;
 8004dc8:	212c      	movs	r1, #44	; 0x2c
 8004dca:	6938      	ldr	r0, [r7, #16]
 8004dcc:	f001 fdba 	bl	8006944 <strchr>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	613b      	str	r3, [r7, #16]
    fixquality = atoi(p);
 8004dd6:	6938      	ldr	r0, [r7, #16]
 8004dd8:	f001 fc1b 	bl	8006612 <atoi>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	b2da      	uxtb	r2, r3
 8004de0:	4b37      	ldr	r3, [pc, #220]	; (8004ec0 <parse+0x320>)
 8004de2:	701a      	strb	r2, [r3, #0]

    p = strchr(p, ',')+1;
 8004de4:	212c      	movs	r1, #44	; 0x2c
 8004de6:	6938      	ldr	r0, [r7, #16]
 8004de8:	f001 fdac 	bl	8006944 <strchr>
 8004dec:	4603      	mov	r3, r0
 8004dee:	3301      	adds	r3, #1
 8004df0:	613b      	str	r3, [r7, #16]
    satellites = atoi(p);
 8004df2:	6938      	ldr	r0, [r7, #16]
 8004df4:	f001 fc0d 	bl	8006612 <atoi>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	b2da      	uxtb	r2, r3
 8004dfc:	4b31      	ldr	r3, [pc, #196]	; (8004ec4 <parse+0x324>)
 8004dfe:	701a      	strb	r2, [r3, #0]

    p = strchr(p, ',')+1;
 8004e00:	212c      	movs	r1, #44	; 0x2c
 8004e02:	6938      	ldr	r0, [r7, #16]
 8004e04:	f001 fd9e 	bl	8006944 <strchr>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	613b      	str	r3, [r7, #16]
    HDOP = atof(p);
 8004e0e:	6938      	ldr	r0, [r7, #16]
 8004e10:	f001 fbfc 	bl	800660c <atof>
 8004e14:	ec53 2b10 	vmov	r2, r3, d0
 8004e18:	4610      	mov	r0, r2
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	f7fb fec4 	bl	8000ba8 <__aeabi_d2f>
 8004e20:	4603      	mov	r3, r0
 8004e22:	4a29      	ldr	r2, [pc, #164]	; (8004ec8 <parse+0x328>)
 8004e24:	6013      	str	r3, [r2, #0]

    p = strchr(p, ',')+1;
 8004e26:	212c      	movs	r1, #44	; 0x2c
 8004e28:	6938      	ldr	r0, [r7, #16]
 8004e2a:	f001 fd8b 	bl	8006944 <strchr>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	3301      	adds	r3, #1
 8004e32:	613b      	str	r3, [r7, #16]
    altitude = atof(p);
 8004e34:	6938      	ldr	r0, [r7, #16]
 8004e36:	f001 fbe9 	bl	800660c <atof>
 8004e3a:	ec53 2b10 	vmov	r2, r3, d0
 8004e3e:	4610      	mov	r0, r2
 8004e40:	4619      	mov	r1, r3
 8004e42:	f7fb feb1 	bl	8000ba8 <__aeabi_d2f>
 8004e46:	4603      	mov	r3, r0
 8004e48:	4a20      	ldr	r2, [pc, #128]	; (8004ecc <parse+0x32c>)
 8004e4a:	6013      	str	r3, [r2, #0]
    p = strchr(p, ',')+1;
 8004e4c:	212c      	movs	r1, #44	; 0x2c
 8004e4e:	6938      	ldr	r0, [r7, #16]
 8004e50:	f001 fd78 	bl	8006944 <strchr>
 8004e54:	4603      	mov	r3, r0
 8004e56:	3301      	adds	r3, #1
 8004e58:	613b      	str	r3, [r7, #16]
    p = strchr(p, ',')+1;
 8004e5a:	212c      	movs	r1, #44	; 0x2c
 8004e5c:	6938      	ldr	r0, [r7, #16]
 8004e5e:	f001 fd71 	bl	8006944 <strchr>
 8004e62:	4603      	mov	r3, r0
 8004e64:	3301      	adds	r3, #1
 8004e66:	613b      	str	r3, [r7, #16]
    geoidheight = atof(p);
 8004e68:	6938      	ldr	r0, [r7, #16]
 8004e6a:	f001 fbcf 	bl	800660c <atof>
 8004e6e:	ec53 2b10 	vmov	r2, r3, d0
 8004e72:	4610      	mov	r0, r2
 8004e74:	4619      	mov	r1, r3
 8004e76:	f7fb fe97 	bl	8000ba8 <__aeabi_d2f>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	4a14      	ldr	r2, [pc, #80]	; (8004ed0 <parse+0x330>)
 8004e7e:	6013      	str	r3, [r2, #0]
    return true;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e16c      	b.n	800515e <parse+0x5be>
 8004e84:	f3af 8000 	nop.w
 8004e88:	00000000 	.word	0x00000000
 8004e8c:	3ff00000 	.word	0x3ff00000
 8004e90:	08009a80 	.word	0x08009a80
 8004e94:	d1b71759 	.word	0xd1b71759
 8004e98:	200045a4 	.word	0x200045a4
 8004e9c:	51eb851f 	.word	0x51eb851f
 8004ea0:	2000459e 	.word	0x2000459e
 8004ea4:	20004635 	.word	0x20004635
 8004ea8:	408f4000 	.word	0x408f4000
 8004eac:	200045a2 	.word	0x200045a2
 8004eb0:	2000463c 	.word	0x2000463c
 8004eb4:	200046c8 	.word	0x200046c8
 8004eb8:	20004628 	.word	0x20004628
 8004ebc:	200045ac 	.word	0x200045ac
 8004ec0:	20004594 	.word	0x20004594
 8004ec4:	2000462c 	.word	0x2000462c
 8004ec8:	200046c4 	.word	0x200046c4
 8004ecc:	20004630 	.word	0x20004630
 8004ed0:	20004588 	.word	0x20004588
  }
  if (strstr(nmea, "$GPRMC")) {
 8004ed4:	49a6      	ldr	r1, [pc, #664]	; (8005170 <parse+0x5d0>)
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f001 fd66 	bl	80069a8 <strstr>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f000 813c 	beq.w	800515c <parse+0x5bc>
   // found RMC
    char *p = nmea;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	623b      	str	r3, [r7, #32]

    // get time
    p = strchr(p, ',')+1;
 8004ee8:	212c      	movs	r1, #44	; 0x2c
 8004eea:	6a38      	ldr	r0, [r7, #32]
 8004eec:	f001 fd2a 	bl	8006944 <strchr>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	623b      	str	r3, [r7, #32]
    float timef = atof(p);
 8004ef6:	6a38      	ldr	r0, [r7, #32]
 8004ef8:	f001 fb88 	bl	800660c <atof>
 8004efc:	ec53 2b10 	vmov	r2, r3, d0
 8004f00:	4610      	mov	r0, r2
 8004f02:	4619      	mov	r1, r3
 8004f04:	f7fb fe50 	bl	8000ba8 <__aeabi_d2f>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	61fb      	str	r3, [r7, #28]
    uint32_t time = timef;
 8004f0c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004f10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f14:	ee17 3a90 	vmov	r3, s15
 8004f18:	61bb      	str	r3, [r7, #24]
    hour = time / 10000;
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	4a95      	ldr	r2, [pc, #596]	; (8005174 <parse+0x5d4>)
 8004f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f22:	0b5b      	lsrs	r3, r3, #13
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	4b94      	ldr	r3, [pc, #592]	; (8005178 <parse+0x5d8>)
 8004f28:	701a      	strb	r2, [r3, #0]
    minute = (time % 10000) / 100;
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	4b91      	ldr	r3, [pc, #580]	; (8005174 <parse+0x5d4>)
 8004f2e:	fba3 1302 	umull	r1, r3, r3, r2
 8004f32:	0b5b      	lsrs	r3, r3, #13
 8004f34:	f242 7110 	movw	r1, #10000	; 0x2710
 8004f38:	fb01 f303 	mul.w	r3, r1, r3
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	4a8f      	ldr	r2, [pc, #572]	; (800517c <parse+0x5dc>)
 8004f40:	fba2 2303 	umull	r2, r3, r2, r3
 8004f44:	095b      	lsrs	r3, r3, #5
 8004f46:	b2da      	uxtb	r2, r3
 8004f48:	4b8d      	ldr	r3, [pc, #564]	; (8005180 <parse+0x5e0>)
 8004f4a:	701a      	strb	r2, [r3, #0]
    seconds = (time % 100);
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	4b8b      	ldr	r3, [pc, #556]	; (800517c <parse+0x5dc>)
 8004f50:	fba3 1302 	umull	r1, r3, r3, r2
 8004f54:	095b      	lsrs	r3, r3, #5
 8004f56:	2164      	movs	r1, #100	; 0x64
 8004f58:	fb01 f303 	mul.w	r3, r1, r3
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	b2da      	uxtb	r2, r3
 8004f60:	4b88      	ldr	r3, [pc, #544]	; (8005184 <parse+0x5e4>)
 8004f62:	701a      	strb	r2, [r3, #0]

    milliseconds = fmod((double) timef, 1.0) * 1000;
 8004f64:	69f8      	ldr	r0, [r7, #28]
 8004f66:	f7fb faf7 	bl	8000558 <__aeabi_f2d>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	ed9f 1b7e 	vldr	d1, [pc, #504]	; 8005168 <parse+0x5c8>
 8004f72:	ec43 2b10 	vmov	d0, r2, r3
 8004f76:	f004 fc13 	bl	80097a0 <fmod>
 8004f7a:	ec51 0b10 	vmov	r0, r1, d0
 8004f7e:	f04f 0200 	mov.w	r2, #0
 8004f82:	4b81      	ldr	r3, [pc, #516]	; (8005188 <parse+0x5e8>)
 8004f84:	f7fb fb40 	bl	8000608 <__aeabi_dmul>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	4610      	mov	r0, r2
 8004f8e:	4619      	mov	r1, r3
 8004f90:	f7fb fdea 	bl	8000b68 <__aeabi_d2uiz>
 8004f94:	4603      	mov	r3, r0
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	4b7c      	ldr	r3, [pc, #496]	; (800518c <parse+0x5ec>)
 8004f9a:	801a      	strh	r2, [r3, #0]

    p = strchr(p, ',')+1;
 8004f9c:	212c      	movs	r1, #44	; 0x2c
 8004f9e:	6a38      	ldr	r0, [r7, #32]
 8004fa0:	f001 fcd0 	bl	8006944 <strchr>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	623b      	str	r3, [r7, #32]
    // Serial.println(p);
    if (p[0] == 'A') 
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	2b41      	cmp	r3, #65	; 0x41
 8004fb0:	d103      	bne.n	8004fba <parse+0x41a>
      fix = true;
 8004fb2:	4b77      	ldr	r3, [pc, #476]	; (8005190 <parse+0x5f0>)
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	701a      	strb	r2, [r3, #0]
 8004fb8:	e009      	b.n	8004fce <parse+0x42e>
    else if (p[0] == 'V')
 8004fba:	6a3b      	ldr	r3, [r7, #32]
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	2b56      	cmp	r3, #86	; 0x56
 8004fc0:	d103      	bne.n	8004fca <parse+0x42a>
      fix = false;
 8004fc2:	4b73      	ldr	r3, [pc, #460]	; (8005190 <parse+0x5f0>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	701a      	strb	r2, [r3, #0]
 8004fc8:	e001      	b.n	8004fce <parse+0x42e>
    else
      return false;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	e0c7      	b.n	800515e <parse+0x5be>

    // parse out latitude
    p = strchr(p, ',')+1;
 8004fce:	212c      	movs	r1, #44	; 0x2c
 8004fd0:	6a38      	ldr	r0, [r7, #32]
 8004fd2:	f001 fcb7 	bl	8006944 <strchr>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	3301      	adds	r3, #1
 8004fda:	623b      	str	r3, [r7, #32]
    latitude = atof(p);
 8004fdc:	6a38      	ldr	r0, [r7, #32]
 8004fde:	f001 fb15 	bl	800660c <atof>
 8004fe2:	ec53 2b10 	vmov	r2, r3, d0
 8004fe6:	4610      	mov	r0, r2
 8004fe8:	4619      	mov	r1, r3
 8004fea:	f7fb fddd 	bl	8000ba8 <__aeabi_d2f>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	4a68      	ldr	r2, [pc, #416]	; (8005194 <parse+0x5f4>)
 8004ff2:	6013      	str	r3, [r2, #0]

    p = strchr(p, ',')+1;
 8004ff4:	212c      	movs	r1, #44	; 0x2c
 8004ff6:	6a38      	ldr	r0, [r7, #32]
 8004ff8:	f001 fca4 	bl	8006944 <strchr>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	3301      	adds	r3, #1
 8005000:	623b      	str	r3, [r7, #32]
    if (p[0] == 'N') lat = 'N';
 8005002:	6a3b      	ldr	r3, [r7, #32]
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	2b4e      	cmp	r3, #78	; 0x4e
 8005008:	d103      	bne.n	8005012 <parse+0x472>
 800500a:	4b63      	ldr	r3, [pc, #396]	; (8005198 <parse+0x5f8>)
 800500c:	224e      	movs	r2, #78	; 0x4e
 800500e:	701a      	strb	r2, [r3, #0]
 8005010:	e011      	b.n	8005036 <parse+0x496>
    else if (p[0] == 'S') lat = 'S';
 8005012:	6a3b      	ldr	r3, [r7, #32]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	2b53      	cmp	r3, #83	; 0x53
 8005018:	d103      	bne.n	8005022 <parse+0x482>
 800501a:	4b5f      	ldr	r3, [pc, #380]	; (8005198 <parse+0x5f8>)
 800501c:	2253      	movs	r2, #83	; 0x53
 800501e:	701a      	strb	r2, [r3, #0]
 8005020:	e009      	b.n	8005036 <parse+0x496>
    else if (p[0] == ',') lat = 0;
 8005022:	6a3b      	ldr	r3, [r7, #32]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	2b2c      	cmp	r3, #44	; 0x2c
 8005028:	d103      	bne.n	8005032 <parse+0x492>
 800502a:	4b5b      	ldr	r3, [pc, #364]	; (8005198 <parse+0x5f8>)
 800502c:	2200      	movs	r2, #0
 800502e:	701a      	strb	r2, [r3, #0]
 8005030:	e001      	b.n	8005036 <parse+0x496>
    else return false;
 8005032:	2300      	movs	r3, #0
 8005034:	e093      	b.n	800515e <parse+0x5be>

    // parse out longitude
    p = strchr(p, ',')+1;
 8005036:	212c      	movs	r1, #44	; 0x2c
 8005038:	6a38      	ldr	r0, [r7, #32]
 800503a:	f001 fc83 	bl	8006944 <strchr>
 800503e:	4603      	mov	r3, r0
 8005040:	3301      	adds	r3, #1
 8005042:	623b      	str	r3, [r7, #32]
    longitude = atof(p);
 8005044:	6a38      	ldr	r0, [r7, #32]
 8005046:	f001 fae1 	bl	800660c <atof>
 800504a:	ec53 2b10 	vmov	r2, r3, d0
 800504e:	4610      	mov	r0, r2
 8005050:	4619      	mov	r1, r3
 8005052:	f7fb fda9 	bl	8000ba8 <__aeabi_d2f>
 8005056:	4603      	mov	r3, r0
 8005058:	4a50      	ldr	r2, [pc, #320]	; (800519c <parse+0x5fc>)
 800505a:	6013      	str	r3, [r2, #0]

    p = strchr(p, ',')+1;
 800505c:	212c      	movs	r1, #44	; 0x2c
 800505e:	6a38      	ldr	r0, [r7, #32]
 8005060:	f001 fc70 	bl	8006944 <strchr>
 8005064:	4603      	mov	r3, r0
 8005066:	3301      	adds	r3, #1
 8005068:	623b      	str	r3, [r7, #32]
    if (p[0] == 'W') lon = 'W';
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	2b57      	cmp	r3, #87	; 0x57
 8005070:	d103      	bne.n	800507a <parse+0x4da>
 8005072:	4b4b      	ldr	r3, [pc, #300]	; (80051a0 <parse+0x600>)
 8005074:	2257      	movs	r2, #87	; 0x57
 8005076:	701a      	strb	r2, [r3, #0]
 8005078:	e011      	b.n	800509e <parse+0x4fe>
    else if (p[0] == 'E') lon = 'E';
 800507a:	6a3b      	ldr	r3, [r7, #32]
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	2b45      	cmp	r3, #69	; 0x45
 8005080:	d103      	bne.n	800508a <parse+0x4ea>
 8005082:	4b47      	ldr	r3, [pc, #284]	; (80051a0 <parse+0x600>)
 8005084:	2245      	movs	r2, #69	; 0x45
 8005086:	701a      	strb	r2, [r3, #0]
 8005088:	e009      	b.n	800509e <parse+0x4fe>
    else if (p[0] == ',') lon = 0;
 800508a:	6a3b      	ldr	r3, [r7, #32]
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	2b2c      	cmp	r3, #44	; 0x2c
 8005090:	d103      	bne.n	800509a <parse+0x4fa>
 8005092:	4b43      	ldr	r3, [pc, #268]	; (80051a0 <parse+0x600>)
 8005094:	2200      	movs	r2, #0
 8005096:	701a      	strb	r2, [r3, #0]
 8005098:	e001      	b.n	800509e <parse+0x4fe>
    else return false;
 800509a:	2300      	movs	r3, #0
 800509c:	e05f      	b.n	800515e <parse+0x5be>

    // speed
    p = strchr(p, ',')+1;
 800509e:	212c      	movs	r1, #44	; 0x2c
 80050a0:	6a38      	ldr	r0, [r7, #32]
 80050a2:	f001 fc4f 	bl	8006944 <strchr>
 80050a6:	4603      	mov	r3, r0
 80050a8:	3301      	adds	r3, #1
 80050aa:	623b      	str	r3, [r7, #32]
    speed = atof(p);
 80050ac:	6a38      	ldr	r0, [r7, #32]
 80050ae:	f001 faad 	bl	800660c <atof>
 80050b2:	ec53 2b10 	vmov	r2, r3, d0
 80050b6:	4610      	mov	r0, r2
 80050b8:	4619      	mov	r1, r3
 80050ba:	f7fb fd75 	bl	8000ba8 <__aeabi_d2f>
 80050be:	4603      	mov	r3, r0
 80050c0:	4a38      	ldr	r2, [pc, #224]	; (80051a4 <parse+0x604>)
 80050c2:	6013      	str	r3, [r2, #0]

    // angle
    p = strchr(p, ',')+1;
 80050c4:	212c      	movs	r1, #44	; 0x2c
 80050c6:	6a38      	ldr	r0, [r7, #32]
 80050c8:	f001 fc3c 	bl	8006944 <strchr>
 80050cc:	4603      	mov	r3, r0
 80050ce:	3301      	adds	r3, #1
 80050d0:	623b      	str	r3, [r7, #32]
    angle = atof(p);
 80050d2:	6a38      	ldr	r0, [r7, #32]
 80050d4:	f001 fa9a 	bl	800660c <atof>
 80050d8:	ec53 2b10 	vmov	r2, r3, d0
 80050dc:	4610      	mov	r0, r2
 80050de:	4619      	mov	r1, r3
 80050e0:	f7fb fd62 	bl	8000ba8 <__aeabi_d2f>
 80050e4:	4603      	mov	r3, r0
 80050e6:	4a30      	ldr	r2, [pc, #192]	; (80051a8 <parse+0x608>)
 80050e8:	6013      	str	r3, [r2, #0]

    p = strchr(p, ',')+1;
 80050ea:	212c      	movs	r1, #44	; 0x2c
 80050ec:	6a38      	ldr	r0, [r7, #32]
 80050ee:	f001 fc29 	bl	8006944 <strchr>
 80050f2:	4603      	mov	r3, r0
 80050f4:	3301      	adds	r3, #1
 80050f6:	623b      	str	r3, [r7, #32]
    uint32_t fulldate = atof(p);
 80050f8:	6a38      	ldr	r0, [r7, #32]
 80050fa:	f001 fa87 	bl	800660c <atof>
 80050fe:	ec53 2b10 	vmov	r2, r3, d0
 8005102:	4610      	mov	r0, r2
 8005104:	4619      	mov	r1, r3
 8005106:	f7fb fd2f 	bl	8000b68 <__aeabi_d2uiz>
 800510a:	4603      	mov	r3, r0
 800510c:	617b      	str	r3, [r7, #20]
    day = fulldate / 10000;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	4a18      	ldr	r2, [pc, #96]	; (8005174 <parse+0x5d4>)
 8005112:	fba2 2303 	umull	r2, r3, r2, r3
 8005116:	0b5b      	lsrs	r3, r3, #13
 8005118:	b2da      	uxtb	r2, r3
 800511a:	4b24      	ldr	r3, [pc, #144]	; (80051ac <parse+0x60c>)
 800511c:	701a      	strb	r2, [r3, #0]
    month = (fulldate % 10000) / 100;
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	4b14      	ldr	r3, [pc, #80]	; (8005174 <parse+0x5d4>)
 8005122:	fba3 1302 	umull	r1, r3, r3, r2
 8005126:	0b5b      	lsrs	r3, r3, #13
 8005128:	f242 7110 	movw	r1, #10000	; 0x2710
 800512c:	fb01 f303 	mul.w	r3, r1, r3
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	4a12      	ldr	r2, [pc, #72]	; (800517c <parse+0x5dc>)
 8005134:	fba2 2303 	umull	r2, r3, r2, r3
 8005138:	095b      	lsrs	r3, r3, #5
 800513a:	b2da      	uxtb	r2, r3
 800513c:	4b1c      	ldr	r3, [pc, #112]	; (80051b0 <parse+0x610>)
 800513e:	701a      	strb	r2, [r3, #0]
    year = (fulldate % 100);
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	4b0e      	ldr	r3, [pc, #56]	; (800517c <parse+0x5dc>)
 8005144:	fba3 1302 	umull	r1, r3, r3, r2
 8005148:	095b      	lsrs	r3, r3, #5
 800514a:	2164      	movs	r1, #100	; 0x64
 800514c:	fb01 f303 	mul.w	r3, r1, r3
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	b2da      	uxtb	r2, r3
 8005154:	4b17      	ldr	r3, [pc, #92]	; (80051b4 <parse+0x614>)
 8005156:	701a      	strb	r2, [r3, #0]

    // we dont parse the remaining, yet!
    return true;
 8005158:	2301      	movs	r3, #1
 800515a:	e000      	b.n	800515e <parse+0x5be>
  }

  return false;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	372c      	adds	r7, #44	; 0x2c
 8005162:	46bd      	mov	sp, r7
 8005164:	bd90      	pop	{r4, r7, pc}
 8005166:	bf00      	nop
 8005168:	00000000 	.word	0x00000000
 800516c:	3ff00000 	.word	0x3ff00000
 8005170:	08009a88 	.word	0x08009a88
 8005174:	d1b71759 	.word	0xd1b71759
 8005178:	200045a4 	.word	0x200045a4
 800517c:	51eb851f 	.word	0x51eb851f
 8005180:	2000459e 	.word	0x2000459e
 8005184:	20004635 	.word	0x20004635
 8005188:	408f4000 	.word	0x408f4000
 800518c:	200045a2 	.word	0x200045a2
 8005190:	20004637 	.word	0x20004637
 8005194:	2000463c 	.word	0x2000463c
 8005198:	200046c8 	.word	0x200046c8
 800519c:	20004628 	.word	0x20004628
 80051a0:	200045ac 	.word	0x200045ac
 80051a4:	200046bc 	.word	0x200046bc
 80051a8:	200045a8 	.word	0x200045a8
 80051ac:	20004640 	.word	0x20004640
 80051b0:	2000459c 	.word	0x2000459c
 80051b4:	20004639 	.word	0x20004639

080051b8 <read>:

char read(uint8_t c) {
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	4603      	mov	r3, r0
 80051c0:	71fb      	strb	r3, [r7, #7]
  
  //if (paused) return c;	
  if (c == '$') {
 80051c2:	79fb      	ldrb	r3, [r7, #7]
 80051c4:	2b24      	cmp	r3, #36	; 0x24
 80051c6:	d10a      	bne.n	80051de <read+0x26>
    currentline[lineidx] = 0;
 80051c8:	4b24      	ldr	r3, [pc, #144]	; (800525c <read+0xa4>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a24      	ldr	r2, [pc, #144]	; (8005260 <read+0xa8>)
 80051ce:	8812      	ldrh	r2, [r2, #0]
 80051d0:	b292      	uxth	r2, r2
 80051d2:	4413      	add	r3, r2
 80051d4:	2200      	movs	r2, #0
 80051d6:	701a      	strb	r2, [r3, #0]
    lineidx = 0;
 80051d8:	4b21      	ldr	r3, [pc, #132]	; (8005260 <read+0xa8>)
 80051da:	2200      	movs	r2, #0
 80051dc:	801a      	strh	r2, [r3, #0]
  }
  if (c == '\n') {
 80051de:	79fb      	ldrb	r3, [r7, #7]
 80051e0:	2b0a      	cmp	r3, #10
 80051e2:	d11f      	bne.n	8005224 <read+0x6c>
    currentline[lineidx] = 0;
 80051e4:	4b1d      	ldr	r3, [pc, #116]	; (800525c <read+0xa4>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a1d      	ldr	r2, [pc, #116]	; (8005260 <read+0xa8>)
 80051ea:	8812      	ldrh	r2, [r2, #0]
 80051ec:	b292      	uxth	r2, r2
 80051ee:	4413      	add	r3, r2
 80051f0:	2200      	movs	r2, #0
 80051f2:	701a      	strb	r2, [r3, #0]

    if (currentline == line1) {
 80051f4:	4b19      	ldr	r3, [pc, #100]	; (800525c <read+0xa4>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a1a      	ldr	r2, [pc, #104]	; (8005264 <read+0xac>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d106      	bne.n	800520c <read+0x54>
      currentline = line2;
 80051fe:	4b17      	ldr	r3, [pc, #92]	; (800525c <read+0xa4>)
 8005200:	4a19      	ldr	r2, [pc, #100]	; (8005268 <read+0xb0>)
 8005202:	601a      	str	r2, [r3, #0]
      lastline = line1;
 8005204:	4b19      	ldr	r3, [pc, #100]	; (800526c <read+0xb4>)
 8005206:	4a17      	ldr	r2, [pc, #92]	; (8005264 <read+0xac>)
 8005208:	601a      	str	r2, [r3, #0]
 800520a:	e005      	b.n	8005218 <read+0x60>
    } else {
      currentline = line1;
 800520c:	4b13      	ldr	r3, [pc, #76]	; (800525c <read+0xa4>)
 800520e:	4a15      	ldr	r2, [pc, #84]	; (8005264 <read+0xac>)
 8005210:	601a      	str	r2, [r3, #0]
      lastline = line2;
 8005212:	4b16      	ldr	r3, [pc, #88]	; (800526c <read+0xb4>)
 8005214:	4a14      	ldr	r2, [pc, #80]	; (8005268 <read+0xb0>)
 8005216:	601a      	str	r2, [r3, #0]
    }

    lineidx = 0;
 8005218:	4b11      	ldr	r3, [pc, #68]	; (8005260 <read+0xa8>)
 800521a:	2200      	movs	r2, #0
 800521c:	801a      	strh	r2, [r3, #0]
    recvdflag = true;
 800521e:	4b14      	ldr	r3, [pc, #80]	; (8005270 <read+0xb8>)
 8005220:	2201      	movs	r2, #1
 8005222:	701a      	strb	r2, [r3, #0]
  }

  currentline[lineidx++] = c;
 8005224:	4b0d      	ldr	r3, [pc, #52]	; (800525c <read+0xa4>)
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	4b0d      	ldr	r3, [pc, #52]	; (8005260 <read+0xa8>)
 800522a:	881b      	ldrh	r3, [r3, #0]
 800522c:	b29b      	uxth	r3, r3
 800522e:	1c59      	adds	r1, r3, #1
 8005230:	b288      	uxth	r0, r1
 8005232:	490b      	ldr	r1, [pc, #44]	; (8005260 <read+0xa8>)
 8005234:	8008      	strh	r0, [r1, #0]
 8005236:	4413      	add	r3, r2
 8005238:	79fa      	ldrb	r2, [r7, #7]
 800523a:	701a      	strb	r2, [r3, #0]
  if (lineidx >= MAXLINELENGTH)
 800523c:	4b08      	ldr	r3, [pc, #32]	; (8005260 <read+0xa8>)
 800523e:	881b      	ldrh	r3, [r3, #0]
 8005240:	b29b      	uxth	r3, r3
 8005242:	2b77      	cmp	r3, #119	; 0x77
 8005244:	d902      	bls.n	800524c <read+0x94>
    lineidx = MAXLINELENGTH-1;
 8005246:	4b06      	ldr	r3, [pc, #24]	; (8005260 <read+0xa8>)
 8005248:	2277      	movs	r2, #119	; 0x77
 800524a:	801a      	strh	r2, [r3, #0]

  return c;
 800524c:	79fb      	ldrb	r3, [r7, #7]
}
 800524e:	4618      	mov	r0, r3
 8005250:	370c      	adds	r7, #12
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	200046c0 	.word	0x200046c0
 8005260:	20000208 	.word	0x20000208
 8005264:	200045b0 	.word	0x200045b0
 8005268:	20004644 	.word	0x20004644
 800526c:	20004590 	.word	0x20004590
 8005270:	200045a0 	.word	0x200045a0

08005274 <Adafruit_GPS>:

void Adafruit_GPS (UART_HandleTypeDef huart)
{
 8005274:	b084      	sub	sp, #16
 8005276:	b580      	push	{r7, lr}
 8005278:	af00      	add	r7, sp, #0
 800527a:	f107 0c08 	add.w	ip, r7, #8
 800527e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  common_init();     // Set everything to common state, then...
 8005282:	f000 f807 	bl	8005294 <common_init>
	
   // ...override gpsSwSerial with value passed.
}
 8005286:	bf00      	nop
 8005288:	46bd      	mov	sp, r7
 800528a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800528e:	b004      	add	sp, #16
 8005290:	4770      	bx	lr
	...

08005294 <common_init>:

// Initialization code used by all constructor types
void common_init(void) {
 8005294:	b480      	push	{r7}
 8005296:	af00      	add	r7, sp, #0
  recvdflag   = false;
 8005298:	4b31      	ldr	r3, [pc, #196]	; (8005360 <common_init+0xcc>)
 800529a:	2200      	movs	r2, #0
 800529c:	701a      	strb	r2, [r3, #0]
  paused      = false;
 800529e:	4b31      	ldr	r3, [pc, #196]	; (8005364 <common_init+0xd0>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	701a      	strb	r2, [r3, #0]
  lineidx     = 0;
 80052a4:	4b30      	ldr	r3, [pc, #192]	; (8005368 <common_init+0xd4>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	801a      	strh	r2, [r3, #0]
  currentline = line1;
 80052aa:	4b30      	ldr	r3, [pc, #192]	; (800536c <common_init+0xd8>)
 80052ac:	4a30      	ldr	r2, [pc, #192]	; (8005370 <common_init+0xdc>)
 80052ae:	601a      	str	r2, [r3, #0]
  lastline    = line2;
 80052b0:	4b30      	ldr	r3, [pc, #192]	; (8005374 <common_init+0xe0>)
 80052b2:	4a31      	ldr	r2, [pc, #196]	; (8005378 <common_init+0xe4>)
 80052b4:	601a      	str	r2, [r3, #0]

  hour = minute = seconds = year = month = day =
    fixquality = satellites = 0; // uint8_t
 80052b6:	4b31      	ldr	r3, [pc, #196]	; (800537c <common_init+0xe8>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	701a      	strb	r2, [r3, #0]
 80052bc:	4b2f      	ldr	r3, [pc, #188]	; (800537c <common_init+0xe8>)
 80052be:	781a      	ldrb	r2, [r3, #0]
 80052c0:	4b2f      	ldr	r3, [pc, #188]	; (8005380 <common_init+0xec>)
 80052c2:	701a      	strb	r2, [r3, #0]
  hour = minute = seconds = year = month = day =
 80052c4:	4b2e      	ldr	r3, [pc, #184]	; (8005380 <common_init+0xec>)
 80052c6:	781a      	ldrb	r2, [r3, #0]
 80052c8:	4b2e      	ldr	r3, [pc, #184]	; (8005384 <common_init+0xf0>)
 80052ca:	701a      	strb	r2, [r3, #0]
 80052cc:	4b2d      	ldr	r3, [pc, #180]	; (8005384 <common_init+0xf0>)
 80052ce:	781a      	ldrb	r2, [r3, #0]
 80052d0:	4b2d      	ldr	r3, [pc, #180]	; (8005388 <common_init+0xf4>)
 80052d2:	701a      	strb	r2, [r3, #0]
 80052d4:	4b2c      	ldr	r3, [pc, #176]	; (8005388 <common_init+0xf4>)
 80052d6:	781a      	ldrb	r2, [r3, #0]
 80052d8:	4b2c      	ldr	r3, [pc, #176]	; (800538c <common_init+0xf8>)
 80052da:	701a      	strb	r2, [r3, #0]
 80052dc:	4b2b      	ldr	r3, [pc, #172]	; (800538c <common_init+0xf8>)
 80052de:	781a      	ldrb	r2, [r3, #0]
 80052e0:	4b2b      	ldr	r3, [pc, #172]	; (8005390 <common_init+0xfc>)
 80052e2:	701a      	strb	r2, [r3, #0]
 80052e4:	4b2a      	ldr	r3, [pc, #168]	; (8005390 <common_init+0xfc>)
 80052e6:	781a      	ldrb	r2, [r3, #0]
 80052e8:	4b2a      	ldr	r3, [pc, #168]	; (8005394 <common_init+0x100>)
 80052ea:	701a      	strb	r2, [r3, #0]
 80052ec:	4b29      	ldr	r3, [pc, #164]	; (8005394 <common_init+0x100>)
 80052ee:	781a      	ldrb	r2, [r3, #0]
 80052f0:	4b29      	ldr	r3, [pc, #164]	; (8005398 <common_init+0x104>)
 80052f2:	701a      	strb	r2, [r3, #0]
  lat = lon = mag = 0; // char
 80052f4:	4b29      	ldr	r3, [pc, #164]	; (800539c <common_init+0x108>)
 80052f6:	2200      	movs	r2, #0
 80052f8:	701a      	strb	r2, [r3, #0]
 80052fa:	4b28      	ldr	r3, [pc, #160]	; (800539c <common_init+0x108>)
 80052fc:	781a      	ldrb	r2, [r3, #0]
 80052fe:	4b28      	ldr	r3, [pc, #160]	; (80053a0 <common_init+0x10c>)
 8005300:	701a      	strb	r2, [r3, #0]
 8005302:	4b27      	ldr	r3, [pc, #156]	; (80053a0 <common_init+0x10c>)
 8005304:	781a      	ldrb	r2, [r3, #0]
 8005306:	4b27      	ldr	r3, [pc, #156]	; (80053a4 <common_init+0x110>)
 8005308:	701a      	strb	r2, [r3, #0]
  fix = false; // bool
 800530a:	4b27      	ldr	r3, [pc, #156]	; (80053a8 <common_init+0x114>)
 800530c:	2200      	movs	r2, #0
 800530e:	701a      	strb	r2, [r3, #0]
  milliseconds = 0; // uint16_t
 8005310:	4b26      	ldr	r3, [pc, #152]	; (80053ac <common_init+0x118>)
 8005312:	2200      	movs	r2, #0
 8005314:	801a      	strh	r2, [r3, #0]
  latitude = longitude = geoidheight = altitude =
    speed = angle = magvariation = HDOP = 0.0; // float
 8005316:	4b26      	ldr	r3, [pc, #152]	; (80053b0 <common_init+0x11c>)
 8005318:	f04f 0200 	mov.w	r2, #0
 800531c:	601a      	str	r2, [r3, #0]
 800531e:	4b24      	ldr	r3, [pc, #144]	; (80053b0 <common_init+0x11c>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a24      	ldr	r2, [pc, #144]	; (80053b4 <common_init+0x120>)
 8005324:	6013      	str	r3, [r2, #0]
 8005326:	4b23      	ldr	r3, [pc, #140]	; (80053b4 <common_init+0x120>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a23      	ldr	r2, [pc, #140]	; (80053b8 <common_init+0x124>)
 800532c:	6013      	str	r3, [r2, #0]
 800532e:	4b22      	ldr	r3, [pc, #136]	; (80053b8 <common_init+0x124>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a22      	ldr	r2, [pc, #136]	; (80053bc <common_init+0x128>)
 8005334:	6013      	str	r3, [r2, #0]
  latitude = longitude = geoidheight = altitude =
 8005336:	4b21      	ldr	r3, [pc, #132]	; (80053bc <common_init+0x128>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a21      	ldr	r2, [pc, #132]	; (80053c0 <common_init+0x12c>)
 800533c:	6013      	str	r3, [r2, #0]
 800533e:	4b20      	ldr	r3, [pc, #128]	; (80053c0 <common_init+0x12c>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a20      	ldr	r2, [pc, #128]	; (80053c4 <common_init+0x130>)
 8005344:	6013      	str	r3, [r2, #0]
 8005346:	4b1f      	ldr	r3, [pc, #124]	; (80053c4 <common_init+0x130>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a1f      	ldr	r2, [pc, #124]	; (80053c8 <common_init+0x134>)
 800534c:	6013      	str	r3, [r2, #0]
 800534e:	4b1e      	ldr	r3, [pc, #120]	; (80053c8 <common_init+0x134>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a1e      	ldr	r2, [pc, #120]	; (80053cc <common_init+0x138>)
 8005354:	6013      	str	r3, [r2, #0]
}
 8005356:	bf00      	nop
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	200045a0 	.word	0x200045a0
 8005364:	2000458c 	.word	0x2000458c
 8005368:	20000208 	.word	0x20000208
 800536c:	200046c0 	.word	0x200046c0
 8005370:	200045b0 	.word	0x200045b0
 8005374:	20004590 	.word	0x20004590
 8005378:	20004644 	.word	0x20004644
 800537c:	2000462c 	.word	0x2000462c
 8005380:	20004594 	.word	0x20004594
 8005384:	20004640 	.word	0x20004640
 8005388:	2000459c 	.word	0x2000459c
 800538c:	20004639 	.word	0x20004639
 8005390:	20004635 	.word	0x20004635
 8005394:	2000459e 	.word	0x2000459e
 8005398:	200045a4 	.word	0x200045a4
 800539c:	200046c9 	.word	0x200046c9
 80053a0:	200045ac 	.word	0x200045ac
 80053a4:	200046c8 	.word	0x200046c8
 80053a8:	20004637 	.word	0x20004637
 80053ac:	200045a2 	.word	0x200045a2
 80053b0:	200046c4 	.word	0x200046c4
 80053b4:	20004598 	.word	0x20004598
 80053b8:	200045a8 	.word	0x200045a8
 80053bc:	200046bc 	.word	0x200046bc
 80053c0:	20004630 	.word	0x20004630
 80053c4:	20004588 	.word	0x20004588
 80053c8:	20004628 	.word	0x20004628
 80053cc:	2000463c 	.word	0x2000463c

080053d0 <sendCommand>:


void sendCommand(UART_HandleTypeDef* huart, char *str) {
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
//  printf("<< %s\n\r",str);
	//printf("%d\n\r", (uint16_t) strlen(str));
#ifndef __NO_HAL_UART
	HAL_UART_Transmit_DMA(huart, (uint8_t *)str, (uint16_t) strlen(str));
 80053da:	6838      	ldr	r0, [r7, #0]
 80053dc:	f7fa ff00 	bl	80001e0 <strlen>
 80053e0:	4603      	mov	r3, r0
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	461a      	mov	r2, r3
 80053e6:	6839      	ldr	r1, [r7, #0]
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f7fe fbe3 	bl	8003bb4 <HAL_UART_Transmit_DMA>
#endif
}
 80053ee:	bf00      	nop
 80053f0:	3708      	adds	r7, #8
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
	...

080053f8 <newNMEAreceived>:

bool newNMEAreceived(void) {
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  return recvdflag;
 80053fc:	4b03      	ldr	r3, [pc, #12]	; (800540c <newNMEAreceived+0x14>)
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	b2db      	uxtb	r3, r3
}
 8005402:	4618      	mov	r0, r3
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr
 800540c:	200045a0 	.word	0x200045a0

08005410 <lastNMEA>:

void pause(bool p) {
  paused = p;
}

char *lastNMEA(void) {
 8005410:	b480      	push	{r7}
 8005412:	af00      	add	r7, sp, #0
  recvdflag = false;
 8005414:	4b04      	ldr	r3, [pc, #16]	; (8005428 <lastNMEA+0x18>)
 8005416:	2200      	movs	r2, #0
 8005418:	701a      	strb	r2, [r3, #0]
  return (char *)lastline;
 800541a:	4b04      	ldr	r3, [pc, #16]	; (800542c <lastNMEA+0x1c>)
 800541c:	681b      	ldr	r3, [r3, #0]
}
 800541e:	4618      	mov	r0, r3
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr
 8005428:	200045a0 	.word	0x200045a0
 800542c:	20004590 	.word	0x20004590

08005430 <parseHex>:

// read a Hex value and return the decimal equivalent
uint8_t parseHex(char c) {
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	4603      	mov	r3, r0
 8005438:	71fb      	strb	r3, [r7, #7]
    if (c < '0')
 800543a:	79fb      	ldrb	r3, [r7, #7]
 800543c:	2b2f      	cmp	r3, #47	; 0x2f
 800543e:	d801      	bhi.n	8005444 <parseHex+0x14>
      return 0;
 8005440:	2300      	movs	r3, #0
 8005442:	e013      	b.n	800546c <parseHex+0x3c>
    if (c <= '9')
 8005444:	79fb      	ldrb	r3, [r7, #7]
 8005446:	2b39      	cmp	r3, #57	; 0x39
 8005448:	d803      	bhi.n	8005452 <parseHex+0x22>
      return c - '0';
 800544a:	79fb      	ldrb	r3, [r7, #7]
 800544c:	3b30      	subs	r3, #48	; 0x30
 800544e:	b2db      	uxtb	r3, r3
 8005450:	e00c      	b.n	800546c <parseHex+0x3c>
    if (c < 'A')
 8005452:	79fb      	ldrb	r3, [r7, #7]
 8005454:	2b40      	cmp	r3, #64	; 0x40
 8005456:	d801      	bhi.n	800545c <parseHex+0x2c>
       return 0;
 8005458:	2300      	movs	r3, #0
 800545a:	e007      	b.n	800546c <parseHex+0x3c>
    if (c <= 'F')
 800545c:	79fb      	ldrb	r3, [r7, #7]
 800545e:	2b46      	cmp	r3, #70	; 0x46
 8005460:	d803      	bhi.n	800546a <parseHex+0x3a>
       return (c - 'A')+10;
 8005462:	79fb      	ldrb	r3, [r7, #7]
 8005464:	3b37      	subs	r3, #55	; 0x37
 8005466:	b2db      	uxtb	r3, r3
 8005468:	e000      	b.n	800546c <parseHex+0x3c>
    return 0;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <LED_init>:
 */


#include "led.h"

volatile LED_t LED_init(GPIO_TypeDef* port, uint16_t pin) {
 8005478:	b490      	push	{r4, r7}
 800547a:	b088      	sub	sp, #32
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	4613      	mov	r3, r2
 8005484:	80fb      	strh	r3, [r7, #6]
	LED_t led = {0};
 8005486:	f107 0314 	add.w	r3, r7, #20
 800548a:	2200      	movs	r2, #0
 800548c:	601a      	str	r2, [r3, #0]
 800548e:	605a      	str	r2, [r3, #4]
 8005490:	609a      	str	r2, [r3, #8]
	led.PIN.port = port;
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	61bb      	str	r3, [r7, #24]
	led.PIN.pin = pin;
 8005496:	88fb      	ldrh	r3, [r7, #6]
 8005498:	83bb      	strh	r3, [r7, #28]

	return led;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	461c      	mov	r4, r3
 800549e:	f107 0314 	add.w	r3, r7, #20
 80054a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80054a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	3720      	adds	r7, #32
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bc90      	pop	{r4, r7}
 80054b2:	4770      	bx	lr

080054b4 <MS5607_init>:
 *      Author: Jeff
 */

#include "MS5607.h"

volatile genericSensor_t MS5607_init(SPI_HandleTypeDef *bus, GPIO_TypeDef *port, uint16_t pin) {
 80054b4:	b5b0      	push	{r4, r5, r7, lr}
 80054b6:	b0b6      	sub	sp, #216	; 0xd8
 80054b8:	af02      	add	r7, sp, #8
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
 80054c0:	807b      	strh	r3, [r7, #2]
	/** Define MS5607 Struct **/
	MS5607_t _bmp = {0};
 80054c2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80054c6:	2238      	movs	r2, #56	; 0x38
 80054c8:	2100      	movs	r1, #0
 80054ca:	4618      	mov	r0, r3
 80054cc:	f001 f8de 	bl	800668c <memset>
	genericSensor_t gBMP = {0};
 80054d0:	f107 0318 	add.w	r3, r7, #24
 80054d4:	2278      	movs	r2, #120	; 0x78
 80054d6:	2100      	movs	r1, #0
 80054d8:	4618      	mov	r0, r3
 80054da:	f001 f8d7 	bl	800668c <memset>

	gBMP.sensorType = BMP_MS5607;
 80054de:	2303      	movs	r3, #3
 80054e0:	763b      	strb	r3, [r7, #24]
	gBMP.read = MS5607_read;
 80054e2:	4b97      	ldr	r3, [pc, #604]	; (8005740 <MS5607_init+0x28c>)
 80054e4:	61fb      	str	r3, [r7, #28]
	gBMP.sensor.MS5607 = _bmp;
 80054e6:	f107 0420 	add.w	r4, r7, #32
 80054ea:	f107 0590 	add.w	r5, r7, #144	; 0x90
 80054ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80054fe:	e884 0003 	stmia.w	r4, {r0, r1}
//#ifndef __NO_HAL_SPI
	gBMP.interface.SPI.bus = bus;
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	67bb      	str	r3, [r7, #120]	; 0x78
	gBMP.interface.SPI.port = port;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	67fb      	str	r3, [r7, #124]	; 0x7c
	gBMP.interface.SPI.pin = pin;
 800550a:	887b      	ldrh	r3, [r7, #2]
 800550c:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
	gBMP.interface.SPI.timeout = HAL_MAX_DELAY;
 8005510:	f04f 33ff 	mov.w	r3, #4294967295
 8005514:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	gBMP.state = HAL_OK;
 8005518:	2300      	movs	r3, #0
 800551a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
//#endif
	gBMP.hasUpdate = true;
 800551e:	2301      	movs	r3, #1
 8005520:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
	gBMP.lock = false;
 8005524:	2300      	movs	r3, #0
 8005526:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a


#ifndef __NO_HAL_SPI

	/** Define Local Variables **/
	MS5607_t* bmp = &(gBMP.sensor.MS5607);
 800552a:	f107 0318 	add.w	r3, r7, #24
 800552e:	3308      	adds	r3, #8
 8005530:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

	uint8_t dataIn[2]; // Buffer to load data received
	uint8_t cmd;       // Command sent to sensor
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 8005534:	887b      	ldrh	r3, [r7, #2]
 8005536:	2200      	movs	r2, #0
 8005538:	4619      	mov	r1, r3
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f7fd f800 	bl	8002540 <HAL_GPIO_WritePin>

	//Reset baro after power on
	cmd = 0x1E;
 8005540:	231e      	movs	r3, #30
 8005542:	74fb      	strb	r3, [r7, #19]
	if(sendSPI(&gBMP, &cmd, 1)) return gBMP;
 8005544:	f107 0113 	add.w	r1, r7, #19
 8005548:	f107 0318 	add.w	r3, r7, #24
 800554c:	2201      	movs	r2, #1
 800554e:	4618      	mov	r0, r3
 8005550:	f000 fcc3 	bl	8005eda <sendSPI>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d008      	beq.n	800556c <MS5607_init+0xb8>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	4618      	mov	r0, r3
 800555e:	f107 0318 	add.w	r3, r7, #24
 8005562:	2278      	movs	r2, #120	; 0x78
 8005564:	4619      	mov	r1, r3
 8005566:	f001 f883 	bl	8006670 <memcpy>
 800556a:	e0e5      	b.n	8005738 <MS5607_init+0x284>

	//Get value of C1
	cmd = 0xA1;
 800556c:	23a1      	movs	r3, #161	; 0xa1
 800556e:	74fb      	strb	r3, [r7, #19]
	if(receiveSPI(&gBMP, &cmd, 1, dataIn, 2)) return gBMP;
 8005570:	f107 0314 	add.w	r3, r7, #20
 8005574:	f107 0113 	add.w	r1, r7, #19
 8005578:	f107 0018 	add.w	r0, r7, #24
 800557c:	2202      	movs	r2, #2
 800557e:	9200      	str	r2, [sp, #0]
 8005580:	2201      	movs	r2, #1
 8005582:	f000 fcc8 	bl	8005f16 <receiveSPI>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d008      	beq.n	800559e <MS5607_init+0xea>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	4618      	mov	r0, r3
 8005590:	f107 0318 	add.w	r3, r7, #24
 8005594:	2278      	movs	r2, #120	; 0x78
 8005596:	4619      	mov	r1, r3
 8005598:	f001 f86a 	bl	8006670 <memcpy>
 800559c:	e0cc      	b.n	8005738 <MS5607_init+0x284>
	bmp->senst1 = (dataIn[0] << 8) | dataIn[1];
 800559e:	7d3b      	ldrb	r3, [r7, #20]
 80055a0:	021b      	lsls	r3, r3, #8
 80055a2:	b21a      	sxth	r2, r3
 80055a4:	7d7b      	ldrb	r3, [r7, #21]
 80055a6:	b21b      	sxth	r3, r3
 80055a8:	4313      	orrs	r3, r2
 80055aa:	b21b      	sxth	r3, r3
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80055b2:	801a      	strh	r2, [r3, #0]

	//Get value of C2
	cmd = 0xA2;
 80055b4:	23a2      	movs	r3, #162	; 0xa2
 80055b6:	74fb      	strb	r3, [r7, #19]
	if(receiveSPI(&gBMP, &cmd, 1, dataIn, 2)) return gBMP;
 80055b8:	f107 0314 	add.w	r3, r7, #20
 80055bc:	f107 0113 	add.w	r1, r7, #19
 80055c0:	f107 0018 	add.w	r0, r7, #24
 80055c4:	2202      	movs	r2, #2
 80055c6:	9200      	str	r2, [sp, #0]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f000 fca4 	bl	8005f16 <receiveSPI>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d008      	beq.n	80055e6 <MS5607_init+0x132>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f107 0318 	add.w	r3, r7, #24
 80055dc:	2278      	movs	r2, #120	; 0x78
 80055de:	4619      	mov	r1, r3
 80055e0:	f001 f846 	bl	8006670 <memcpy>
 80055e4:	e0a8      	b.n	8005738 <MS5607_init+0x284>
	bmp->offt1 = (dataIn[0] << 8) | dataIn[1];
 80055e6:	7d3b      	ldrb	r3, [r7, #20]
 80055e8:	021b      	lsls	r3, r3, #8
 80055ea:	b21a      	sxth	r2, r3
 80055ec:	7d7b      	ldrb	r3, [r7, #21]
 80055ee:	b21b      	sxth	r3, r3
 80055f0:	4313      	orrs	r3, r2
 80055f2:	b21b      	sxth	r3, r3
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80055fa:	805a      	strh	r2, [r3, #2]

	//Get value of C3
	cmd = 0xA3;
 80055fc:	23a3      	movs	r3, #163	; 0xa3
 80055fe:	74fb      	strb	r3, [r7, #19]
	if(receiveSPI(&gBMP, &cmd, 1, dataIn, 2)) return gBMP;
 8005600:	f107 0314 	add.w	r3, r7, #20
 8005604:	f107 0113 	add.w	r1, r7, #19
 8005608:	f107 0018 	add.w	r0, r7, #24
 800560c:	2202      	movs	r2, #2
 800560e:	9200      	str	r2, [sp, #0]
 8005610:	2201      	movs	r2, #1
 8005612:	f000 fc80 	bl	8005f16 <receiveSPI>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d008      	beq.n	800562e <MS5607_init+0x17a>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4618      	mov	r0, r3
 8005620:	f107 0318 	add.w	r3, r7, #24
 8005624:	2278      	movs	r2, #120	; 0x78
 8005626:	4619      	mov	r1, r3
 8005628:	f001 f822 	bl	8006670 <memcpy>
 800562c:	e084      	b.n	8005738 <MS5607_init+0x284>
	bmp->tcs = (dataIn[0] << 8) | dataIn[1];
 800562e:	7d3b      	ldrb	r3, [r7, #20]
 8005630:	021b      	lsls	r3, r3, #8
 8005632:	b21a      	sxth	r2, r3
 8005634:	7d7b      	ldrb	r3, [r7, #21]
 8005636:	b21b      	sxth	r3, r3
 8005638:	4313      	orrs	r3, r2
 800563a:	b21b      	sxth	r3, r3
 800563c:	b29a      	uxth	r2, r3
 800563e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005642:	809a      	strh	r2, [r3, #4]

	//Get value of C4
	cmd = 0xA4;
 8005644:	23a4      	movs	r3, #164	; 0xa4
 8005646:	74fb      	strb	r3, [r7, #19]
	if(receiveSPI(&gBMP, &cmd, 1, dataIn, 2)) return gBMP;
 8005648:	f107 0314 	add.w	r3, r7, #20
 800564c:	f107 0113 	add.w	r1, r7, #19
 8005650:	f107 0018 	add.w	r0, r7, #24
 8005654:	2202      	movs	r2, #2
 8005656:	9200      	str	r2, [sp, #0]
 8005658:	2201      	movs	r2, #1
 800565a:	f000 fc5c 	bl	8005f16 <receiveSPI>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d008      	beq.n	8005676 <MS5607_init+0x1c2>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	4618      	mov	r0, r3
 8005668:	f107 0318 	add.w	r3, r7, #24
 800566c:	2278      	movs	r2, #120	; 0x78
 800566e:	4619      	mov	r1, r3
 8005670:	f000 fffe 	bl	8006670 <memcpy>
 8005674:	e060      	b.n	8005738 <MS5607_init+0x284>
	bmp->tco = (dataIn[0] << 8) | dataIn[1];
 8005676:	7d3b      	ldrb	r3, [r7, #20]
 8005678:	021b      	lsls	r3, r3, #8
 800567a:	b21a      	sxth	r2, r3
 800567c:	7d7b      	ldrb	r3, [r7, #21]
 800567e:	b21b      	sxth	r3, r3
 8005680:	4313      	orrs	r3, r2
 8005682:	b21b      	sxth	r3, r3
 8005684:	b29a      	uxth	r2, r3
 8005686:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800568a:	80da      	strh	r2, [r3, #6]

	//Get value of C5
	cmd = 0xA5;
 800568c:	23a5      	movs	r3, #165	; 0xa5
 800568e:	74fb      	strb	r3, [r7, #19]
	if(receiveSPI(&gBMP, &cmd, 1, dataIn, 2)) return gBMP;
 8005690:	f107 0314 	add.w	r3, r7, #20
 8005694:	f107 0113 	add.w	r1, r7, #19
 8005698:	f107 0018 	add.w	r0, r7, #24
 800569c:	2202      	movs	r2, #2
 800569e:	9200      	str	r2, [sp, #0]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f000 fc38 	bl	8005f16 <receiveSPI>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d008      	beq.n	80056be <MS5607_init+0x20a>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f107 0318 	add.w	r3, r7, #24
 80056b4:	2278      	movs	r2, #120	; 0x78
 80056b6:	4619      	mov	r1, r3
 80056b8:	f000 ffda 	bl	8006670 <memcpy>
 80056bc:	e03c      	b.n	8005738 <MS5607_init+0x284>
	bmp->tref = (dataIn[0] << 8) | dataIn[1];
 80056be:	7d3b      	ldrb	r3, [r7, #20]
 80056c0:	021b      	lsls	r3, r3, #8
 80056c2:	b21a      	sxth	r2, r3
 80056c4:	7d7b      	ldrb	r3, [r7, #21]
 80056c6:	b21b      	sxth	r3, r3
 80056c8:	4313      	orrs	r3, r2
 80056ca:	b21b      	sxth	r3, r3
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80056d2:	811a      	strh	r2, [r3, #8]

	//Get value of C6
	cmd = 0xA6;
 80056d4:	23a6      	movs	r3, #166	; 0xa6
 80056d6:	74fb      	strb	r3, [r7, #19]
	if(receiveSPI(&gBMP, &cmd, 1, dataIn, 2)) return gBMP;
 80056d8:	f107 0314 	add.w	r3, r7, #20
 80056dc:	f107 0113 	add.w	r1, r7, #19
 80056e0:	f107 0018 	add.w	r0, r7, #24
 80056e4:	2202      	movs	r2, #2
 80056e6:	9200      	str	r2, [sp, #0]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f000 fc14 	bl	8005f16 <receiveSPI>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d008      	beq.n	8005706 <MS5607_init+0x252>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f107 0318 	add.w	r3, r7, #24
 80056fc:	2278      	movs	r2, #120	; 0x78
 80056fe:	4619      	mov	r1, r3
 8005700:	f000 ffb6 	bl	8006670 <memcpy>
 8005704:	e018      	b.n	8005738 <MS5607_init+0x284>
	bmp->tempsens = (dataIn[0] << 8) | dataIn[1];
 8005706:	7d3b      	ldrb	r3, [r7, #20]
 8005708:	021b      	lsls	r3, r3, #8
 800570a:	b21a      	sxth	r2, r3
 800570c:	7d7b      	ldrb	r3, [r7, #21]
 800570e:	b21b      	sxth	r3, r3
 8005710:	4313      	orrs	r3, r2
 8005712:	b21b      	sxth	r3, r3
 8005714:	b29a      	uxth	r2, r3
 8005716:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800571a:	815a      	strh	r2, [r3, #10]

	HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
 800571c:	887b      	ldrh	r3, [r7, #2]
 800571e:	2201      	movs	r2, #1
 8005720:	4619      	mov	r1, r3
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7fc ff0c 	bl	8002540 <HAL_GPIO_WritePin>
#endif
	// Update with all values

	return gBMP;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	4618      	mov	r0, r3
 800572c:	f107 0318 	add.w	r3, r7, #24
 8005730:	2278      	movs	r2, #120	; 0x78
 8005732:	4619      	mov	r1, r3
 8005734:	f000 ff9c 	bl	8006670 <memcpy>
}
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	37d0      	adds	r7, #208	; 0xd0
 800573c:	46bd      	mov	sp, r7
 800573e:	bdb0      	pop	{r4, r5, r7, pc}
 8005740:	08005745 	.word	0x08005745

08005744 <MS5607_read>:

uint8_t MS5607_read(volatile genericSensor_t* sensor) {
 8005744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005746:	b089      	sub	sp, #36	; 0x24
 8005748:	af02      	add	r7, sp, #8
 800574a:	6078      	str	r0, [r7, #4]
	while(sensor->lock)
 800574c:	e002      	b.n	8005754 <MS5607_read+0x10>
	#ifdef DEFAULT_TAKE_DELAY
		retryTakeDelay(DEFAULT_TAKE_DELAY);
 800574e:	2032      	movs	r0, #50	; 0x32
 8005750:	f000 fd25 	bl	800619e <retryTakeDelay>
	while(sensor->lock)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1f6      	bne.n	800574e <MS5607_read+0xa>
	#else
		break;
	#endif
	sensor->lock = true;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

#ifndef __NO_HAL_SPI
	volatile MS5607_t* bmp = &(sensor->sensor.MS5607);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	3308      	adds	r3, #8
 800576c:	617b      	str	r3, [r7, #20]
	uint8_t dataIn[2]; // Buffer to load data received
	uint8_t cmd;       // Command sent to sensor
	SPI_t* SPI = &(sensor->interface.SPI);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	3360      	adds	r3, #96	; 0x60
 8005772:	613b      	str	r3, [r7, #16]
	HAL_GPIO_WritePin(SPI->port, SPI->pin, GPIO_PIN_RESET);
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	6858      	ldr	r0, [r3, #4]
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	891b      	ldrh	r3, [r3, #8]
 800577c:	2200      	movs	r2, #0
 800577e:	4619      	mov	r1, r3
 8005780:	f7fc fede 	bl	8002540 <HAL_GPIO_WritePin>


	//Get values from sensor
	cmd = D1_1024; //This value will define conversion time, accuracy, and current draw
 8005784:	2344      	movs	r3, #68	; 0x44
 8005786:	72fb      	strb	r3, [r7, #11]
	if (sendSPI(sensor, &cmd, 1)) return sensor->state;
 8005788:	f107 030b 	add.w	r3, r7, #11
 800578c:	2201      	movs	r2, #1
 800578e:	4619      	mov	r1, r3
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 fba2 	bl	8005eda <sendSPI>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d004      	beq.n	80057a6 <MS5607_read+0x62>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	e0e7      	b.n	8005976 <MS5607_read+0x232>
	HAL_Delay(CONV_T_1024);
 80057a6:	2003      	movs	r0, #3
 80057a8:	f7fc f866 	bl	8001878 <HAL_Delay>

	cmd = 0x00;
 80057ac:	2300      	movs	r3, #0
 80057ae:	72fb      	strb	r3, [r7, #11]
	if (receiveSPI(sensor, &cmd, 1, dataIn, 2)) return sensor->state;
 80057b0:	f107 030c 	add.w	r3, r7, #12
 80057b4:	f107 010b 	add.w	r1, r7, #11
 80057b8:	2202      	movs	r2, #2
 80057ba:	9200      	str	r2, [sp, #0]
 80057bc:	2201      	movs	r2, #1
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 fba9 	bl	8005f16 <receiveSPI>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d004      	beq.n	80057d4 <MS5607_read+0x90>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	e0d0      	b.n	8005976 <MS5607_read+0x232>
	bmp->digitalPres = (dataIn[0] << 8) | dataIn[1];
 80057d4:	7b3b      	ldrb	r3, [r7, #12]
 80057d6:	021b      	lsls	r3, r3, #8
 80057d8:	7b7a      	ldrb	r2, [r7, #13]
 80057da:	4313      	orrs	r3, r2
 80057dc:	461a      	mov	r2, r3
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	60da      	str	r2, [r3, #12]

	cmd = D2_1024; //This value will define conversion time, accuracy, and current draw
 80057e2:	2354      	movs	r3, #84	; 0x54
 80057e4:	72fb      	strb	r3, [r7, #11]
	if (sendSPI(sensor, &cmd, 1)) return sensor->state;
 80057e6:	f107 030b 	add.w	r3, r7, #11
 80057ea:	2201      	movs	r2, #1
 80057ec:	4619      	mov	r1, r3
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 fb73 	bl	8005eda <sendSPI>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d004      	beq.n	8005804 <MS5607_read+0xc0>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005800:	b2db      	uxtb	r3, r3
 8005802:	e0b8      	b.n	8005976 <MS5607_read+0x232>
	HAL_Delay(CONV_T_1024);
 8005804:	2003      	movs	r0, #3
 8005806:	f7fc f837 	bl	8001878 <HAL_Delay>

	cmd = 0x00;
 800580a:	2300      	movs	r3, #0
 800580c:	72fb      	strb	r3, [r7, #11]
	if (receiveSPI(sensor, &cmd, 1, dataIn, 2)) return sensor->state;
 800580e:	f107 030c 	add.w	r3, r7, #12
 8005812:	f107 010b 	add.w	r1, r7, #11
 8005816:	2202      	movs	r2, #2
 8005818:	9200      	str	r2, [sp, #0]
 800581a:	2201      	movs	r2, #1
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 fb7a 	bl	8005f16 <receiveSPI>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d004      	beq.n	8005832 <MS5607_read+0xee>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800582e:	b2db      	uxtb	r3, r3
 8005830:	e0a1      	b.n	8005976 <MS5607_read+0x232>
	bmp->digitalTemp = (dataIn[0] << 8) | dataIn[1];
 8005832:	7b3b      	ldrb	r3, [r7, #12]
 8005834:	021b      	lsls	r3, r3, #8
 8005836:	7b7a      	ldrb	r2, [r7, #13]
 8005838:	4313      	orrs	r3, r2
 800583a:	461a      	mov	r2, r3
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	611a      	str	r2, [r3, #16]

	HAL_GPIO_WritePin(SPI->port, SPI->pin, GPIO_PIN_SET);
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	6858      	ldr	r0, [r3, #4]
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	891b      	ldrh	r3, [r3, #8]
 8005848:	2201      	movs	r2, #1
 800584a:	4619      	mov	r1, r3
 800584c:	f7fc fe78 	bl	8002540 <HAL_GPIO_WritePin>

	//Calculate calibrated pressure
	//T = D2 - TREF = D2 - C5 * 2 ^ 8
	bmp->deltaT = bmp->digitalTemp - bmp->tref * 256;
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	8912      	ldrh	r2, [r2, #8]
 8005858:	b292      	uxth	r2, r2
 800585a:	0212      	lsls	r2, r2, #8
 800585c:	1a9b      	subs	r3, r3, r2
 800585e:	461a      	mov	r2, r3
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	615a      	str	r2, [r3, #20]
	//TEMP = 20°C + dT* TEMPSENS = 2000 + dT * C6 / 2 ^ 23
	bmp->temp = 2000 + bmp->deltaT * bmp->tempsens / 8388608;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	8952      	ldrh	r2, [r2, #10]
 800586c:	b292      	uxth	r2, r2
 800586e:	fb02 f303 	mul.w	r3, r2, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	da02      	bge.n	800587c <MS5607_read+0x138>
 8005876:	4a42      	ldr	r2, [pc, #264]	; (8005980 <MS5607_read+0x23c>)
 8005878:	441a      	add	r2, r3
 800587a:	4613      	mov	r3, r2
 800587c:	15db      	asrs	r3, r3, #23
 800587e:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	619a      	str	r2, [r3, #24]
	//OFF = OFFT1 + TCO* dT = C2 * 2 ^ 17 + (C4 * dT) / 2 ^ 6
	bmp->off = bmp->offt1 * 131072 + (bmp->tco * bmp->deltaT) / 64;
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	885b      	ldrh	r3, [r3, #2]
 800588a:	b29b      	uxth	r3, r3
 800588c:	045a      	lsls	r2, r3, #17
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	88db      	ldrh	r3, [r3, #6]
 8005892:	b29b      	uxth	r3, r3
 8005894:	4619      	mov	r1, r3
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	fb03 f301 	mul.w	r3, r3, r1
 800589e:	2b00      	cmp	r3, #0
 80058a0:	da00      	bge.n	80058a4 <MS5607_read+0x160>
 80058a2:	333f      	adds	r3, #63	; 0x3f
 80058a4:	119b      	asrs	r3, r3, #6
 80058a6:	4413      	add	r3, r2
 80058a8:	461a      	mov	r2, r3
 80058aa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80058ae:	6979      	ldr	r1, [r7, #20]
 80058b0:	e9c1 2308 	strd	r2, r3, [r1, #32]
	//SENS = SENST1 + TCS * dT = C1 * 2 ^ 16 + (C3 * dT) / 2 ^ 7
	bmp->sens = bmp->senst1 * 65536 + (bmp->tcs * bmp->deltaT) / 128;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	881b      	ldrh	r3, [r3, #0]
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	041a      	lsls	r2, r3, #16
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	889b      	ldrh	r3, [r3, #4]
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	4619      	mov	r1, r3
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	fb03 f301 	mul.w	r3, r3, r1
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	da00      	bge.n	80058d2 <MS5607_read+0x18e>
 80058d0:	337f      	adds	r3, #127	; 0x7f
 80058d2:	11db      	asrs	r3, r3, #7
 80058d4:	4413      	add	r3, r2
 80058d6:	461a      	mov	r2, r3
 80058d8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80058dc:	6979      	ldr	r1, [r7, #20]
 80058de:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	//P = D1 * SENS - OFF = (D1 * SENS / 2 ^ 21 - OFF) / 2 ^ 15
	bmp->pressure = (bmp->digitalPres * bmp->sens / 2097152 - bmp->off) / 32768; //This is the magic number in mbar
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f04f 0100 	mov.w	r1, #0
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80058f2:	fb02 fc01 	mul.w	ip, r2, r1
 80058f6:	fb00 f603 	mul.w	r6, r0, r3
 80058fa:	4466      	add	r6, ip
 80058fc:	fba0 2302 	umull	r2, r3, r0, r2
 8005900:	18f1      	adds	r1, r6, r3
 8005902:	460b      	mov	r3, r1
 8005904:	2a00      	cmp	r2, #0
 8005906:	f173 0100 	sbcs.w	r1, r3, #0
 800590a:	da05      	bge.n	8005918 <MS5607_read+0x1d4>
 800590c:	481d      	ldr	r0, [pc, #116]	; (8005984 <MS5607_read+0x240>)
 800590e:	f04f 0100 	mov.w	r1, #0
 8005912:	1812      	adds	r2, r2, r0
 8005914:	eb41 0303 	adc.w	r3, r1, r3
 8005918:	f04f 0000 	mov.w	r0, #0
 800591c:	f04f 0100 	mov.w	r1, #0
 8005920:	0d50      	lsrs	r0, r2, #21
 8005922:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 8005926:	1559      	asrs	r1, r3, #21
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800592e:	1a84      	subs	r4, r0, r2
 8005930:	eb61 0503 	sbc.w	r5, r1, r3
 8005934:	4622      	mov	r2, r4
 8005936:	462b      	mov	r3, r5
 8005938:	2a00      	cmp	r2, #0
 800593a:	f173 0100 	sbcs.w	r1, r3, #0
 800593e:	da06      	bge.n	800594e <MS5607_read+0x20a>
 8005940:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8005944:	f04f 0100 	mov.w	r1, #0
 8005948:	1812      	adds	r2, r2, r0
 800594a:	eb41 0303 	adc.w	r3, r1, r3
 800594e:	f04f 0000 	mov.w	r0, #0
 8005952:	f04f 0100 	mov.w	r1, #0
 8005956:	0bd0      	lsrs	r0, r2, #15
 8005958:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 800595c:	13d9      	asrs	r1, r3, #15
 800595e:	4602      	mov	r2, r0
 8005960:	460b      	mov	r3, r1
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	631a      	str	r2, [r3, #48]	; 0x30
#else
	sensor->state = HAL_ERROR;
#endif


	sensor->lock = false;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

	return sensor->state;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005974:	b2db      	uxtb	r3, r3
}
 8005976:	4618      	mov	r0, r3
 8005978:	371c      	adds	r7, #28
 800597a:	46bd      	mov	sp, r7
 800597c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800597e:	bf00      	nop
 8005980:	007fffff 	.word	0x007fffff
 8005984:	001fffff 	.word	0x001fffff

08005988 <MT3339_init>:
#include "Adafruit_GPS.h"

#include "MT3339.h"
#include <string.h>

genericSensor_t MT3339_init(UART_HandleTypeDef *huart) {
 8005988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800598a:	b0c5      	sub	sp, #276	; 0x114
 800598c:	af0c      	add	r7, sp, #48	; 0x30
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
	/** Define MT3339 Struct **/
	MT3339_t _gps = {0};
 8005992:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005996:	2251      	movs	r2, #81	; 0x51
 8005998:	2100      	movs	r1, #0
 800599a:	4618      	mov	r0, r3
 800599c:	f000 fe76 	bl	800668c <memset>

	genericSensor_t gGPS = {0};
 80059a0:	f107 0310 	add.w	r3, r7, #16
 80059a4:	2278      	movs	r2, #120	; 0x78
 80059a6:	2100      	movs	r1, #0
 80059a8:	4618      	mov	r0, r3
 80059aa:	f000 fe6f 	bl	800668c <memset>
	gGPS.sensorType = GPS_MT3339;
 80059ae:	2301      	movs	r3, #1
 80059b0:	743b      	strb	r3, [r7, #16]
	gGPS.read = MT3339_read;
 80059b2:	4b2c      	ldr	r3, [pc, #176]	; (8005a64 <MT3339_init+0xdc>)
 80059b4:	617b      	str	r3, [r7, #20]
	gGPS.sensor.MT3339 = _gps;
 80059b6:	f107 0318 	add.w	r3, r7, #24
 80059ba:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80059be:	2251      	movs	r2, #81	; 0x51
 80059c0:	4618      	mov	r0, r3
 80059c2:	f000 fe55 	bl	8006670 <memcpy>
	gGPS.interface.UART.huart = huart;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	673b      	str	r3, [r7, #112]	; 0x70
	/** Define Local Variables **/
	//MT3339_t* gps = &(gGPS.sensor.MT3339);
	uint8_t temporary; // Buffer to load data received


	HAL_Delay(10);
 80059ca:	200a      	movs	r0, #10
 80059cc:	f7fb ff54 	bl	8001878 <HAL_Delay>
	//printf("\nthe size is: %d\n",sizeof(trans));

	HAL_Delay(10);
 80059d0:	200a      	movs	r0, #10
 80059d2:	f7fb ff51 	bl	8001878 <HAL_Delay>

	Adafruit_GPS(*huart);
 80059d6:	683e      	ldr	r6, [r7, #0]
 80059d8:	466d      	mov	r5, sp
 80059da:	f106 0410 	add.w	r4, r6, #16
 80059de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059e6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80059ea:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80059ee:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80059f2:	f7ff fc3f 	bl	8005274 <Adafruit_GPS>

	HAL_Delay(10);
 80059f6:	200a      	movs	r0, #10
 80059f8:	f7fb ff3e 	bl	8001878 <HAL_Delay>

	sendCommand(huart, PMTK_SET_BAUD_9600);
 80059fc:	491a      	ldr	r1, [pc, #104]	; (8005a68 <MT3339_init+0xe0>)
 80059fe:	6838      	ldr	r0, [r7, #0]
 8005a00:	f7ff fce6 	bl	80053d0 <sendCommand>
	HAL_Delay(10);
 8005a04:	200a      	movs	r0, #10
 8005a06:	f7fb ff37 	bl	8001878 <HAL_Delay>
	sendCommand(huart, PMTK_SET_NMEA_OUTPUT_RMCGGA);
 8005a0a:	4918      	ldr	r1, [pc, #96]	; (8005a6c <MT3339_init+0xe4>)
 8005a0c:	6838      	ldr	r0, [r7, #0]
 8005a0e:	f7ff fcdf 	bl	80053d0 <sendCommand>
	HAL_Delay(10);
 8005a12:	200a      	movs	r0, #10
 8005a14:	f7fb ff30 	bl	8001878 <HAL_Delay>
	//sendCommand(huart2, PMTK_SET_NMEA_UPDATE_10HZ);
	sendCommand(huart, PMTK_API_SET_FIX_CTL_5HZ);
 8005a18:	4915      	ldr	r1, [pc, #84]	; (8005a70 <MT3339_init+0xe8>)
 8005a1a:	6838      	ldr	r0, [r7, #0]
 8005a1c:	f7ff fcd8 	bl	80053d0 <sendCommand>

	HAL_Delay(10);
 8005a20:	200a      	movs	r0, #10
 8005a22:	f7fb ff29 	bl	8001878 <HAL_Delay>
	sendCommand(huart, PGCMD_ANTENNA);
 8005a26:	4913      	ldr	r1, [pc, #76]	; (8005a74 <MT3339_init+0xec>)
 8005a28:	6838      	ldr	r0, [r7, #0]
 8005a2a:	f7ff fcd1 	bl	80053d0 <sendCommand>
	HAL_Delay(1000);
 8005a2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a32:	f7fb ff21 	bl	8001878 <HAL_Delay>
	HAL_UART_Receive_DMA(huart, &temporary, 1);
 8005a36:	f107 030f 	add.w	r3, r7, #15
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	6838      	ldr	r0, [r7, #0]
 8005a40:	f7fe f924 	bl	8003c8c <HAL_UART_Receive_DMA>
	//printf(PMTK_Q_RELEASE);
	//printf("Connection established at 9600 baud...\n");
	HAL_Delay(1);
 8005a44:	2001      	movs	r0, #1
 8005a46:	f7fb ff17 	bl	8001878 <HAL_Delay>
#endif


	return gGPS;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f107 0310 	add.w	r3, r7, #16
 8005a52:	2278      	movs	r2, #120	; 0x78
 8005a54:	4619      	mov	r1, r3
 8005a56:	f000 fe0b 	bl	8006670 <memcpy>
}
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	37e4      	adds	r7, #228	; 0xe4
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a62:	bf00      	nop
 8005a64:	08005a79 	.word	0x08005a79
 8005a68:	08009af0 	.word	0x08009af0
 8005a6c:	08009b04 	.word	0x08009b04
 8005a70:	08009b38 	.word	0x08009b38
 8005a74:	08009b54 	.word	0x08009b54

08005a78 <MT3339_read>:

uint8_t MT3339_read(genericSensor_t* sensor) {
 8005a78:	b590      	push	{r4, r7, lr}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
	MT3339_t* gps = &(sensor->sensor.MT3339);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	3308      	adds	r3, #8
 8005a84:	60fb      	str	r3, [r7, #12]

	 if ( !parse(lastNMEA()) ) {
 8005a86:	f7ff fcc3 	bl	8005410 <lastNMEA>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7ff f887 	bl	8004ba0 <parse>
 8005a92:	4603      	mov	r3, r0
 8005a94:	f083 0301 	eor.w	r3, r3, #1
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d003      	beq.n	8005aa6 <MT3339_read+0x2e>
		 return (uint8_t) sensor->state;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005aa4:	e00b      	b.n	8005abe <MT3339_read+0x46>
	 }
	 strncpy(gps->gpsString,lastNMEA(),MAX_NMEA);
 8005aa6:	68fc      	ldr	r4, [r7, #12]
 8005aa8:	f7ff fcb2 	bl	8005410 <lastNMEA>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2250      	movs	r2, #80	; 0x50
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	f000 ff65 	bl	8006982 <strncpy>


	return (uint8_t) sensor->state;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70

}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3714      	adds	r7, #20
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd90      	pop	{r4, r7, pc}

08005ac6 <MT3339_receive>:


HAL_StatusTypeDef MT3339_receive(genericSensor_t* sensor,uint8_t* buffer, char* target) {
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b086      	sub	sp, #24
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	60f8      	str	r0, [r7, #12]
 8005ace:	60b9      	str	r1, [r7, #8]
 8005ad0:	607a      	str	r2, [r7, #4]
#ifndef __NO_HAL_UART
	MT3339_t* gps = &(sensor->sensor.MT3339);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	3308      	adds	r3, #8
 8005ad6:	617b      	str	r3, [r7, #20]
	UART_HandleTypeDef* huart = sensor->interface.UART.huart;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005adc:	613b      	str	r3, [r7, #16]
	 // Buffer to load data received
	//if (huart->Instance == sensor->interface.UART.huart->Instance)  {
//			printf("hi");
			read(*buffer);
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7ff fb68 	bl	80051b8 <read>
			if (newNMEAreceived()) {
 8005ae8:	f7ff fc86 	bl	80053f8 <newNMEAreceived>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d010      	beq.n	8005b14 <MT3339_receive+0x4e>

				if ( parse(lastNMEA()) ) {
 8005af2:	f7ff fc8d 	bl	8005410 <lastNMEA>
 8005af6:	4603      	mov	r3, r0
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7ff f851 	bl	8004ba0 <parse>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d007      	beq.n	8005b14 <MT3339_receive+0x4e>
					strncpy(target,lastNMEA(),MAX_NMEA);
 8005b04:	f7ff fc84 	bl	8005410 <lastNMEA>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2250      	movs	r2, #80	; 0x50
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 ff37 	bl	8006982 <strncpy>
//					printf("^%s\r\n",sensor->sensor.MT3339.gpsString);
				}
			}
	//}
#endif
	return sensor->state;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3718      	adds	r7, #24
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
	...

08005b24 <button_init>:
 *      Author: Jeff
 */

#include "button.h"

genericSensor_t button_init(GPIO_TypeDef *port, uint16_t pin) {
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b0a4      	sub	sp, #144	; 0x90
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	80fb      	strh	r3, [r7, #6]
	button_t _btn = {0};
 8005b32:	2300      	movs	r3, #0
 8005b34:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
	genericSensor_t gBTN = {0};
 8005b38:	f107 0310 	add.w	r3, r7, #16
 8005b3c:	2278      	movs	r2, #120	; 0x78
 8005b3e:	2100      	movs	r1, #0
 8005b40:	4618      	mov	r0, r3
 8005b42:	f000 fda3 	bl	800668c <memset>

	gBTN.sensorType = GPIO_BUTTON;
 8005b46:	2300      	movs	r3, #0
 8005b48:	743b      	strb	r3, [r7, #16]
	gBTN.read = button_read;
 8005b4a:	4b0f      	ldr	r3, [pc, #60]	; (8005b88 <button_init+0x64>)
 8005b4c:	617b      	str	r3, [r7, #20]

	gBTN.sensor.button = _btn;
 8005b4e:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8005b52:	763b      	strb	r3, [r7, #24]

	gBTN.interface.PIN.port = port;
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	673b      	str	r3, [r7, #112]	; 0x70
	gBTN.interface.PIN.pin = pin;
 8005b58:	88fb      	ldrh	r3, [r7, #6]
 8005b5a:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74

	//#ifndef HARDWARE_EMULATOR
	gBTN.state = HAL_OK;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
	//#endif

	gBTN.hasUpdate = false;
 8005b64:	2300      	movs	r3, #0
 8005b66:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
	gBTN.lock = false;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82

	return gBTN;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f107 0310 	add.w	r3, r7, #16
 8005b78:	2278      	movs	r2, #120	; 0x78
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	f000 fd78 	bl	8006670 <memcpy>
}
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	3790      	adds	r7, #144	; 0x90
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	08005b8d 	.word	0x08005b8d

08005b8c <button_read>:


uint8_t button_read(volatile genericSensor_t* sensor) {
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b086      	sub	sp, #24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
	bool prevValue = _getBValue(sensor);
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 f968 	bl	8005e6a <_getBValue>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	75bb      	strb	r3, [r7, #22]
	bool value = prevValue;
 8005b9e:	7dbb      	ldrb	r3, [r7, #22]
 8005ba0:	75fb      	strb	r3, [r7, #23]

	#ifndef HARDWARE_EMULATOR
		PIN_t pin = sensor->interface.PIN;
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	f107 030c 	add.w	r3, r7, #12
 8005ba8:	3260      	adds	r2, #96	; 0x60
 8005baa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005bae:	e883 0003 	stmia.w	r3, {r0, r1}
		value = HAL_GPIO_ReadPin(pin.port, pin.pin);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	8a3a      	ldrh	r2, [r7, #16]
 8005bb6:	4611      	mov	r1, r2
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7fc fca9 	bl	8002510 <HAL_GPIO_ReadPin>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	bf14      	ite	ne
 8005bc4:	2301      	movne	r3, #1
 8005bc6:	2300      	moveq	r3, #0
 8005bc8:	75fb      	strb	r3, [r7, #23]
		if(_getBINV(sensor)) value = !value;
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f857 	bl	8005c7e <_getBINV>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00d      	beq.n	8005bf2 <button_read+0x66>
 8005bd6:	7dfb      	ldrb	r3, [r7, #23]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	bf14      	ite	ne
 8005bdc:	2301      	movne	r3, #1
 8005bde:	2300      	moveq	r3, #0
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	f083 0301 	eor.w	r3, r3, #1
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	75fb      	strb	r3, [r7, #23]
 8005bea:	7dfb      	ldrb	r3, [r7, #23]
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	75fb      	strb	r3, [r7, #23]
	#endif

	// Handle Change Flag
	if(value != prevValue) _setBChange(sensor);
 8005bf2:	7dfa      	ldrb	r2, [r7, #23]
 8005bf4:	7dbb      	ldrb	r3, [r7, #22]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d003      	beq.n	8005c02 <button_read+0x76>
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 f911 	bl	8005e22 <_setBChange>
 8005c00:	e002      	b.n	8005c08 <button_read+0x7c>
	else _clrBChange(sensor);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 f91f 	bl	8005e46 <_clrBChange>

	// Handle Value Flag;
	if(value) _setBValue(sensor);
 8005c08:	7dfb      	ldrb	r3, [r7, #23]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d003      	beq.n	8005c16 <button_read+0x8a>
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f93f 	bl	8005e92 <_setBValue>
 8005c14:	e002      	b.n	8005c1c <button_read+0x90>
	else _clrBValue(sensor);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 f94d 	bl	8005eb6 <_clrBValue>


	if((value != prevValue) && value) _doRToggle(sensor);
 8005c1c:	7dfa      	ldrb	r2, [r7, #23]
 8005c1e:	7dbb      	ldrb	r3, [r7, #22]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d005      	beq.n	8005c30 <button_read+0xa4>
 8005c24:	7dfb      	ldrb	r3, [r7, #23]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d002      	beq.n	8005c30 <button_read+0xa4>
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 f897 	bl	8005d5e <_doRToggle>
	if((value != prevValue) && !value) _doFToggle(sensor);
 8005c30:	7dfa      	ldrb	r2, [r7, #23]
 8005c32:	7dbb      	ldrb	r3, [r7, #22]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d008      	beq.n	8005c4a <button_read+0xbe>
 8005c38:	7dfb      	ldrb	r3, [r7, #23]
 8005c3a:	f083 0301 	eor.w	r3, r3, #1
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d002      	beq.n	8005c4a <button_read+0xbe>
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 f8d7 	bl	8005df8 <_doFToggle>
	return (uint8_t) value;
 8005c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3718      	adds	r7, #24
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <button_Invert>:
	default:
		return -1;
	}
}

void button_Invert(volatile genericSensor_t* sensor) {
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
	_getBINV(sensor) ? _clrBINV(sensor) : _setBINV(sensor);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 f80e 	bl	8005c7e <_getBINV>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d003      	beq.n	8005c70 <button_Invert+0x1c>
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 f82e 	bl	8005cca <_clrBINV>
}
 8005c6e:	e002      	b.n	8005c76 <button_Invert+0x22>
	_getBINV(sensor) ? _clrBINV(sensor) : _setBINV(sensor);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 f818 	bl	8005ca6 <_setBINV>
}
 8005c76:	bf00      	nop
 8005c78:	3708      	adds	r7, #8
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <_getBINV>:
	return button_OnFalling(sensor) && _getFToggle(sensor);
}


// INV
bool _getBINV(volatile genericSensor_t* sensor) {
 8005c7e:	b480      	push	{r7}
 8005c80:	b083      	sub	sp, #12
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
	return EVAL(sensor->sensor.button.status & _BUTTON_INV_MASK);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	7a1b      	ldrb	r3, [r3, #8]
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	f003 0310 	and.w	r3, r3, #16
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	bf14      	ite	ne
 8005c94:	2301      	movne	r3, #1
 8005c96:	2300      	moveq	r3, #0
 8005c98:	b2db      	uxtb	r3, r3
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	370c      	adds	r7, #12
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <_setBINV>:
void _setBINV(volatile genericSensor_t* sensor) {
 8005ca6:	b480      	push	{r7}
 8005ca8:	b083      	sub	sp, #12
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
	sensor->sensor.button.status |= _BUTTON_INV_MASK;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	7a1b      	ldrb	r3, [r3, #8]
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	f043 0310 	orr.w	r3, r3, #16
 8005cb8:	b2da      	uxtb	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	721a      	strb	r2, [r3, #8]
}
 8005cbe:	bf00      	nop
 8005cc0:	370c      	adds	r7, #12
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr

08005cca <_clrBINV>:
void _clrBINV(volatile genericSensor_t* sensor) {
 8005cca:	b480      	push	{r7}
 8005ccc:	b083      	sub	sp, #12
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
	sensor->sensor.button.status &= INV(_BUTTON_INV_MASK);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	7a1b      	ldrb	r3, [r3, #8]
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	f023 0310 	bic.w	r3, r3, #16
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	721a      	strb	r2, [r3, #8]
}
 8005ce2:	bf00      	nop
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <_getRToggle>:


// Button Rising Toggle
bool _getRToggle(volatile genericSensor_t* sensor) {
 8005cee:	b480      	push	{r7}
 8005cf0:	b083      	sub	sp, #12
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
	return EVAL(sensor->sensor.button.status & _BUTTON_RTOGGLE_MASK);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	7a1b      	ldrb	r3, [r3, #8]
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	f003 0308 	and.w	r3, r3, #8
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	bf14      	ite	ne
 8005d04:	2301      	movne	r3, #1
 8005d06:	2300      	moveq	r3, #0
 8005d08:	b2db      	uxtb	r3, r3
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <_setRToggle>:
void _setRToggle(volatile genericSensor_t* sensor) {
 8005d16:	b480      	push	{r7}
 8005d18:	b083      	sub	sp, #12
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
	sensor->sensor.button.status |= _BUTTON_RTOGGLE_MASK;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	7a1b      	ldrb	r3, [r3, #8]
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	f043 0308 	orr.w	r3, r3, #8
 8005d28:	b2da      	uxtb	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	721a      	strb	r2, [r3, #8]
}
 8005d2e:	bf00      	nop
 8005d30:	370c      	adds	r7, #12
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <_clrRToggle>:
void _clrRToggle(volatile genericSensor_t* sensor) {
 8005d3a:	b480      	push	{r7}
 8005d3c:	b083      	sub	sp, #12
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
	sensor->sensor.button.status &= INV(_BUTTON_RTOGGLE_MASK);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	7a1b      	ldrb	r3, [r3, #8]
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	f023 0308 	bic.w	r3, r3, #8
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	721a      	strb	r2, [r3, #8]
}
 8005d52:	bf00      	nop
 8005d54:	370c      	adds	r7, #12
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr

08005d5e <_doRToggle>:
void _doRToggle(volatile genericSensor_t* sensor) {
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b082      	sub	sp, #8
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
	(_getRToggle(sensor)) ? (_clrRToggle(sensor)) : (_setRToggle(sensor));
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7ff ffc1 	bl	8005cee <_getRToggle>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d003      	beq.n	8005d7a <_doRToggle+0x1c>
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f7ff ffe1 	bl	8005d3a <_clrRToggle>
}
 8005d78:	e002      	b.n	8005d80 <_doRToggle+0x22>
	(_getRToggle(sensor)) ? (_clrRToggle(sensor)) : (_setRToggle(sensor));
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7ff ffcb 	bl	8005d16 <_setRToggle>
}
 8005d80:	bf00      	nop
 8005d82:	3708      	adds	r7, #8
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <_getFToggle>:


// Button Falling Toggle
bool _getFToggle(volatile genericSensor_t* sensor) {
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
	return EVAL(sensor->sensor.button.status & _BUTTON_FTOGGLE_MASK);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	7a1b      	ldrb	r3, [r3, #8]
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	f003 0304 	and.w	r3, r3, #4
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	bf14      	ite	ne
 8005d9e:	2301      	movne	r3, #1
 8005da0:	2300      	moveq	r3, #0
 8005da2:	b2db      	uxtb	r3, r3
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <_setFToggle>:
void _setFToggle(volatile genericSensor_t* sensor) {
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
	sensor->sensor.button.status |= _BUTTON_FTOGGLE_MASK;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	7a1b      	ldrb	r3, [r3, #8]
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	f043 0304 	orr.w	r3, r3, #4
 8005dc2:	b2da      	uxtb	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	721a      	strb	r2, [r3, #8]
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <_clrFToggle>:

void _clrFToggle(volatile genericSensor_t* sensor) {
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
	sensor->sensor.button.status &= INV(_BUTTON_FTOGGLE_MASK);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	7a1b      	ldrb	r3, [r3, #8]
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	f023 0304 	bic.w	r3, r3, #4
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	721a      	strb	r2, [r3, #8]
}
 8005dec:	bf00      	nop
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <_doFToggle>:
void _doFToggle(volatile genericSensor_t* sensor) {
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
	(_getFToggle(sensor)) ? (_clrFToggle(sensor)) : (_setFToggle(sensor));
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f7ff ffc1 	bl	8005d88 <_getFToggle>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d003      	beq.n	8005e14 <_doFToggle+0x1c>
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f7ff ffe1 	bl	8005dd4 <_clrFToggle>
}
 8005e12:	e002      	b.n	8005e1a <_doFToggle+0x22>
	(_getFToggle(sensor)) ? (_clrFToggle(sensor)) : (_setFToggle(sensor));
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f7ff ffcb 	bl	8005db0 <_setFToggle>
}
 8005e1a:	bf00      	nop
 8005e1c:	3708      	adds	r7, #8
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <_setBChange>:

// Button Change
bool _getBChange(volatile genericSensor_t* sensor) {
	return EVAL(sensor->sensor.button.status & _BUTTON_CHANGE_MASK);
}
void _setBChange(volatile genericSensor_t* sensor) {
 8005e22:	b480      	push	{r7}
 8005e24:	b083      	sub	sp, #12
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
	sensor->sensor.button.status |= _BUTTON_CHANGE_MASK;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	7a1b      	ldrb	r3, [r3, #8]
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	f043 0302 	orr.w	r3, r3, #2
 8005e34:	b2da      	uxtb	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	721a      	strb	r2, [r3, #8]
}
 8005e3a:	bf00      	nop
 8005e3c:	370c      	adds	r7, #12
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr

08005e46 <_clrBChange>:

void _clrBChange(volatile genericSensor_t* sensor) {
 8005e46:	b480      	push	{r7}
 8005e48:	b083      	sub	sp, #12
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
	sensor->sensor.button.status &= INV(_BUTTON_CHANGE_MASK);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	7a1b      	ldrb	r3, [r3, #8]
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	f023 0302 	bic.w	r3, r3, #2
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	721a      	strb	r2, [r3, #8]
}
 8005e5e:	bf00      	nop
 8005e60:	370c      	adds	r7, #12
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr

08005e6a <_getBValue>:

// Button Value
bool _getBValue(volatile genericSensor_t* sensor) {
 8005e6a:	b480      	push	{r7}
 8005e6c:	b083      	sub	sp, #12
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
	return EVAL(sensor->sensor.button.status & _BUTTON_VALUE_MASK);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	7a1b      	ldrb	r3, [r3, #8]
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	f003 0301 	and.w	r3, r3, #1
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	bf14      	ite	ne
 8005e80:	2301      	movne	r3, #1
 8005e82:	2300      	moveq	r3, #0
 8005e84:	b2db      	uxtb	r3, r3
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	370c      	adds	r7, #12
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <_setBValue>:
void _setBValue(volatile genericSensor_t* sensor) {
 8005e92:	b480      	push	{r7}
 8005e94:	b083      	sub	sp, #12
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
	sensor->sensor.button.status |= _BUTTON_VALUE_MASK;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	7a1b      	ldrb	r3, [r3, #8]
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	f043 0301 	orr.w	r3, r3, #1
 8005ea4:	b2da      	uxtb	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	721a      	strb	r2, [r3, #8]
}
 8005eaa:	bf00      	nop
 8005eac:	370c      	adds	r7, #12
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <_clrBValue>:

void _clrBValue(volatile genericSensor_t* sensor) {
 8005eb6:	b480      	push	{r7}
 8005eb8:	b083      	sub	sp, #12
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
	sensor->sensor.button.status &= INV(_BUTTON_VALUE_MASK);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	7a1b      	ldrb	r3, [r3, #8]
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	f023 0301 	bic.w	r3, r3, #1
 8005ec8:	b2da      	uxtb	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	721a      	strb	r2, [r3, #8]
}
 8005ece:	bf00      	nop
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <sendSPI>:
#include "generic_interface.h"



/** Sensor, InterfaceLock should already be locked. CS Pin is left low.  **/
HAL_StatusTypeDef sendSPI(genericSensor_t* sensor, uint8_t* cmd, int cmdlen) {
 8005eda:	b580      	push	{r7, lr}
 8005edc:	b086      	sub	sp, #24
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	60f8      	str	r0, [r7, #12]
 8005ee2:	60b9      	str	r1, [r7, #8]
 8005ee4:	607a      	str	r2, [r7, #4]



#ifndef __NO_HAL_SPI
	// Declares convenient SPI pointer
	SPI_t* SPI = &(sensor->interface.SPI);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	3360      	adds	r3, #96	; 0x60
 8005eea:	617b      	str	r3, [r7, #20]
	// SPI Transmission

	// Sends cmd
	sensor->state = HAL_SPI_Transmit(SPI->bus, cmd, cmdlen, SPI->timeout);
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	6818      	ldr	r0, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	68b9      	ldr	r1, [r7, #8]
 8005efa:	f7fc ffdf 	bl	8002ebc <HAL_SPI_Transmit>
 8005efe:	4603      	mov	r3, r0
 8005f00:	461a      	mov	r2, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif

	// Returns sensor state
	return sensor->state;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3718      	adds	r7, #24
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <receiveSPI>:

HAL_StatusTypeDef receiveSPI(genericSensor_t* sensor, uint8_t* cmd, int cmdlen, uint8_t * data, int datalen) {
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b086      	sub	sp, #24
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	60f8      	str	r0, [r7, #12]
 8005f1e:	60b9      	str	r1, [r7, #8]
 8005f20:	607a      	str	r2, [r7, #4]
 8005f22:	603b      	str	r3, [r7, #0]


#ifndef __NO_HAL_SPI

	SPI_t *SPI = &(sensor->interface.SPI);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	3360      	adds	r3, #96	; 0x60
 8005f28:	617b      	str	r3, [r7, #20]
	sensor->state = HAL_SPI_Transmit(SPI->bus, cmd, cmdlen, SPI->timeout);
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	6818      	ldr	r0, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	68b9      	ldr	r1, [r7, #8]
 8005f38:	f7fc ffc0 	bl	8002ebc <HAL_SPI_Transmit>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	461a      	mov	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

	if(sensor->state == HAL_OK)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10d      	bne.n	8005f6c <receiveSPI+0x56>
	sensor->state = HAL_SPI_Receive(SPI->bus, data, datalen, SPI->timeout);
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	6818      	ldr	r0, [r3, #0]
 8005f54:	6a3b      	ldr	r3, [r7, #32]
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	6839      	ldr	r1, [r7, #0]
 8005f5e:	f7fd f8e1 	bl	8003124 <HAL_SPI_Receive>
 8005f62:	4603      	mov	r3, r0
 8005f64:	461a      	mov	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70


#endif
	return sensor->state;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3718      	adds	r7, #24
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
	...

08005f7c <NucleoF4_Init>:

#include "Nucleo_Profiles.h"


#ifdef NUCLEO_F4
void NucleoF4_Init() {
 8005f7c:	b590      	push	{r4, r7, lr}
 8005f7e:	b0a1      	sub	sp, #132	; 0x84
 8005f80:	af00      	add	r7, sp, #0

	#ifdef DO_RETARGET
	#include "retarget.h"
	extern UART_HandleTypeDef huart2;
	RetargetInit(&huart2);
 8005f82:	481d      	ldr	r0, [pc, #116]	; (8005ff8 <NucleoF4_Init+0x7c>)
 8005f84:	f000 f846 	bl	8006014 <RetargetInit>

#ifndef NO_CLEAR
	for(int i = 0; i < 500; i++) printf(" \r\n");
 8005f88:	2300      	movs	r3, #0
 8005f8a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f8c:	e005      	b.n	8005f9a <NucleoF4_Init+0x1e>
 8005f8e:	481b      	ldr	r0, [pc, #108]	; (8005ffc <NucleoF4_Init+0x80>)
 8005f90:	f000 fc0a 	bl	80067a8 <puts>
 8005f94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f96:	3301      	adds	r3, #1
 8005f98:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f9c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005fa0:	dbf5      	blt.n	8005f8e <NucleoF4_Init+0x12>
	HAL_Delay(250);
 8005fa2:	20fa      	movs	r0, #250	; 0xfa
 8005fa4:	f7fb fc68 	bl	8001878 <HAL_Delay>
	printf("Starting:\r\n");
 8005fa8:	4815      	ldr	r0, [pc, #84]	; (8006000 <NucleoF4_Init+0x84>)
 8005faa:	f000 fbfd 	bl	80067a8 <puts>
	HAL_Delay(250);
 8005fae:	20fa      	movs	r0, #250	; 0xfa
 8005fb0:	f7fb fc62 	bl	8001878 <HAL_Delay>
#endif
	#endif

	#ifndef NO_BUTTON
	btn = button_init(B1_GPIO_Port, B1_Pin);
 8005fb4:	4c13      	ldr	r4, [pc, #76]	; (8006004 <NucleoF4_Init+0x88>)
 8005fb6:	463b      	mov	r3, r7
 8005fb8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005fbc:	4912      	ldr	r1, [pc, #72]	; (8006008 <NucleoF4_Init+0x8c>)
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f7ff fdb0 	bl	8005b24 <button_init>
 8005fc4:	4620      	mov	r0, r4
 8005fc6:	463b      	mov	r3, r7
 8005fc8:	2278      	movs	r2, #120	; 0x78
 8005fca:	4619      	mov	r1, r3
 8005fcc:	f000 fb50 	bl	8006670 <memcpy>
	button_Invert(&btn);
 8005fd0:	480c      	ldr	r0, [pc, #48]	; (8006004 <NucleoF4_Init+0x88>)
 8005fd2:	f7ff fe3f 	bl	8005c54 <button_Invert>
	#endif

	#ifndef NO_LED
	LD2 = LED_init(LD2_GPIO_Port, LD2_Pin);
 8005fd6:	4c0d      	ldr	r4, [pc, #52]	; (800600c <NucleoF4_Init+0x90>)
 8005fd8:	463b      	mov	r3, r7
 8005fda:	2220      	movs	r2, #32
 8005fdc:	490c      	ldr	r1, [pc, #48]	; (8006010 <NucleoF4_Init+0x94>)
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7ff fa4a 	bl	8005478 <LED_init>
 8005fe4:	463b      	mov	r3, r7
 8005fe6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005fea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	#endif
}
 8005fee:	bf00      	nop
 8005ff0:	3784      	adds	r7, #132	; 0x84
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd90      	pop	{r4, r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	200044c4 	.word	0x200044c4
 8005ffc:	08009b64 	.word	0x08009b64
 8006000:	08009b68 	.word	0x08009b68
 8006004:	20004508 	.word	0x20004508
 8006008:	40020800 	.word	0x40020800
 800600c:	20000414 	.word	0x20000414
 8006010:	40020000 	.word	0x40020000

08006014 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 800601c:	4a07      	ldr	r2, [pc, #28]	; (800603c <RetargetInit+0x28>)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8006022:	4b07      	ldr	r3, [pc, #28]	; (8006040 <RetargetInit+0x2c>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	6898      	ldr	r0, [r3, #8]
 8006028:	2300      	movs	r3, #0
 800602a:	2202      	movs	r2, #2
 800602c:	2100      	movs	r1, #0
 800602e:	f000 fbc3 	bl	80067b8 <setvbuf>
}
 8006032:	bf00      	nop
 8006034:	3708      	adds	r7, #8
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	200046cc 	.word	0x200046cc
 8006040:	20000010 	.word	0x20000010

08006044 <_isatty>:

int _isatty(int fd) {
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	db04      	blt.n	800605c <_isatty+0x18>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2b02      	cmp	r3, #2
 8006056:	dc01      	bgt.n	800605c <_isatty+0x18>
    return 1;
 8006058:	2301      	movs	r3, #1
 800605a:	e005      	b.n	8006068 <_isatty+0x24>

  errno = EBADF;
 800605c:	f000 fade 	bl	800661c <__errno>
 8006060:	4603      	mov	r3, r0
 8006062:	2209      	movs	r2, #9
 8006064:	601a      	str	r2, [r3, #0]
  return 0;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3708      	adds	r7, #8
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <_write>:

int _write(int fd, char* ptr, int len) {
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d002      	beq.n	8006088 <_write+0x18>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2b02      	cmp	r3, #2
 8006086:	d111      	bne.n	80060ac <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8006088:	4b0e      	ldr	r3, [pc, #56]	; (80060c4 <_write+0x54>)
 800608a:	6818      	ldr	r0, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	b29a      	uxth	r2, r3
 8006090:	f04f 33ff 	mov.w	r3, #4294967295
 8006094:	68b9      	ldr	r1, [r7, #8]
 8006096:	f7fd fc4e 	bl	8003936 <HAL_UART_Transmit>
 800609a:	4603      	mov	r3, r0
 800609c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800609e:	7dfb      	ldrb	r3, [r7, #23]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d101      	bne.n	80060a8 <_write+0x38>
      return len;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	e008      	b.n	80060ba <_write+0x4a>
    else
      return EIO;
 80060a8:	2305      	movs	r3, #5
 80060aa:	e006      	b.n	80060ba <_write+0x4a>
  }
  errno = EBADF;
 80060ac:	f000 fab6 	bl	800661c <__errno>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2209      	movs	r2, #9
 80060b4:	601a      	str	r2, [r3, #0]
  return -1;
 80060b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3718      	adds	r7, #24
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	200046cc 	.word	0x200046cc

080060c8 <_close>:

int _close(int fd) {
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	db04      	blt.n	80060e0 <_close+0x18>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2b02      	cmp	r3, #2
 80060da:	dc01      	bgt.n	80060e0 <_close+0x18>
    return 0;
 80060dc:	2300      	movs	r3, #0
 80060de:	e006      	b.n	80060ee <_close+0x26>

  errno = EBADF;
 80060e0:	f000 fa9c 	bl	800661c <__errno>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2209      	movs	r2, #9
 80060e8:	601a      	str	r2, [r3, #0]
  return -1;
 80060ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3708      	adds	r7, #8
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b084      	sub	sp, #16
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	60f8      	str	r0, [r7, #12]
 80060fe:	60b9      	str	r1, [r7, #8]
 8006100:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8006102:	f000 fa8b 	bl	800661c <__errno>
 8006106:	4603      	mov	r3, r0
 8006108:	2209      	movs	r2, #9
 800610a:	601a      	str	r2, [r3, #0]
  return -1;
 800610c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006110:	4618      	mov	r0, r3
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <_read>:

int _read(int fd, char* ptr, int len) {
 8006118:	b580      	push	{r7, lr}
 800611a:	b086      	sub	sp, #24
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d110      	bne.n	800614c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800612a:	4b0e      	ldr	r3, [pc, #56]	; (8006164 <_read+0x4c>)
 800612c:	6818      	ldr	r0, [r3, #0]
 800612e:	f04f 33ff 	mov.w	r3, #4294967295
 8006132:	2201      	movs	r2, #1
 8006134:	68b9      	ldr	r1, [r7, #8]
 8006136:	f7fd fc97 	bl	8003a68 <HAL_UART_Receive>
 800613a:	4603      	mov	r3, r0
 800613c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800613e:	7dfb      	ldrb	r3, [r7, #23]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d101      	bne.n	8006148 <_read+0x30>
      return 1;
 8006144:	2301      	movs	r3, #1
 8006146:	e008      	b.n	800615a <_read+0x42>
    else
      return EIO;
 8006148:	2305      	movs	r3, #5
 800614a:	e006      	b.n	800615a <_read+0x42>
  }
  errno = EBADF;
 800614c:	f000 fa66 	bl	800661c <__errno>
 8006150:	4603      	mov	r3, r0
 8006152:	2209      	movs	r2, #9
 8006154:	601a      	str	r2, [r3, #0]
  return -1;
 8006156:	f04f 33ff 	mov.w	r3, #4294967295
}
 800615a:	4618      	mov	r0, r3
 800615c:	3718      	adds	r7, #24
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	200046cc 	.word	0x200046cc

08006168 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2b00      	cmp	r3, #0
 8006176:	db08      	blt.n	800618a <_fstat+0x22>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b02      	cmp	r3, #2
 800617c:	dc05      	bgt.n	800618a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006184:	605a      	str	r2, [r3, #4]
    return 0;
 8006186:	2300      	movs	r3, #0
 8006188:	e005      	b.n	8006196 <_fstat+0x2e>
  }

  errno = EBADF;
 800618a:	f000 fa47 	bl	800661c <__errno>
 800618e:	4603      	mov	r3, r0
 8006190:	2209      	movs	r2, #9
 8006192:	601a      	str	r2, [r3, #0]
  return 0;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3708      	adds	r7, #8
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <retryTakeDelay>:
 * @retval None
 *
 * @author Jeff Kaji
 * @date 12/28/2020
 */
void retryTakeDelay(TickType_t length) {
 800619e:	b480      	push	{r7}
 80061a0:	b083      	sub	sp, #12
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
#ifdef INC_TASK_H
	vTaskDelay(length);
#endif
}
 80061a6:	bf00      	nop
 80061a8:	370c      	adds	r7, #12
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr

080061b2 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80061b2:	b480      	push	{r7}
 80061b4:	b085      	sub	sp, #20
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
 80061ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	689a      	ldr	r2, [r3, #8]
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	683a      	ldr	r2, [r7, #0]
 80061d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	683a      	ldr	r2, [r7, #0]
 80061dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	1c5a      	adds	r2, r3, #1
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	601a      	str	r2, [r3, #0]
}
 80061ee:	bf00      	nop
 80061f0:	3714      	adds	r7, #20
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80061fa:	b480      	push	{r7}
 80061fc:	b085      	sub	sp, #20
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	6892      	ldr	r2, [r2, #8]
 8006210:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	6852      	ldr	r2, [r2, #4]
 800621a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	429a      	cmp	r2, r3
 8006224:	d103      	bne.n	800622e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	689a      	ldr	r2, [r3, #8]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	1e5a      	subs	r2, r3, #1
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
}
 8006242:	4618      	mov	r0, r3
 8006244:	3714      	adds	r7, #20
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
	...

08006250 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b086      	sub	sp, #24
 8006254:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006256:	2300      	movs	r3, #0
 8006258:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800625a:	4b4e      	ldr	r3, [pc, #312]	; (8006394 <xTaskIncrementTick+0x144>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	f040 8088 	bne.w	8006374 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006264:	4b4c      	ldr	r3, [pc, #304]	; (8006398 <xTaskIncrementTick+0x148>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	3301      	adds	r3, #1
 800626a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800626c:	4a4a      	ldr	r2, [pc, #296]	; (8006398 <xTaskIncrementTick+0x148>)
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d120      	bne.n	80062ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006278:	4b48      	ldr	r3, [pc, #288]	; (800639c <xTaskIncrementTick+0x14c>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00a      	beq.n	8006298 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006286:	f383 8811 	msr	BASEPRI, r3
 800628a:	f3bf 8f6f 	isb	sy
 800628e:	f3bf 8f4f 	dsb	sy
 8006292:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006294:	bf00      	nop
 8006296:	e7fe      	b.n	8006296 <xTaskIncrementTick+0x46>
 8006298:	4b40      	ldr	r3, [pc, #256]	; (800639c <xTaskIncrementTick+0x14c>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	60fb      	str	r3, [r7, #12]
 800629e:	4b40      	ldr	r3, [pc, #256]	; (80063a0 <xTaskIncrementTick+0x150>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a3e      	ldr	r2, [pc, #248]	; (800639c <xTaskIncrementTick+0x14c>)
 80062a4:	6013      	str	r3, [r2, #0]
 80062a6:	4a3e      	ldr	r2, [pc, #248]	; (80063a0 <xTaskIncrementTick+0x150>)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6013      	str	r3, [r2, #0]
 80062ac:	4b3d      	ldr	r3, [pc, #244]	; (80063a4 <xTaskIncrementTick+0x154>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	3301      	adds	r3, #1
 80062b2:	4a3c      	ldr	r2, [pc, #240]	; (80063a4 <xTaskIncrementTick+0x154>)
 80062b4:	6013      	str	r3, [r2, #0]
 80062b6:	f000 f8f9 	bl	80064ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80062ba:	4b3b      	ldr	r3, [pc, #236]	; (80063a8 <xTaskIncrementTick+0x158>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d348      	bcc.n	8006356 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062c4:	4b35      	ldr	r3, [pc, #212]	; (800639c <xTaskIncrementTick+0x14c>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d104      	bne.n	80062d8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062ce:	4b36      	ldr	r3, [pc, #216]	; (80063a8 <xTaskIncrementTick+0x158>)
 80062d0:	f04f 32ff 	mov.w	r2, #4294967295
 80062d4:	601a      	str	r2, [r3, #0]
					break;
 80062d6:	e03e      	b.n	8006356 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062d8:	4b30      	ldr	r3, [pc, #192]	; (800639c <xTaskIncrementTick+0x14c>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d203      	bcs.n	80062f8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80062f0:	4a2d      	ldr	r2, [pc, #180]	; (80063a8 <xTaskIncrementTick+0x158>)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80062f6:	e02e      	b.n	8006356 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	3304      	adds	r3, #4
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7ff ff7c 	bl	80061fa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006306:	2b00      	cmp	r3, #0
 8006308:	d004      	beq.n	8006314 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	3318      	adds	r3, #24
 800630e:	4618      	mov	r0, r3
 8006310:	f7ff ff73 	bl	80061fa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006318:	2201      	movs	r2, #1
 800631a:	409a      	lsls	r2, r3
 800631c:	4b23      	ldr	r3, [pc, #140]	; (80063ac <xTaskIncrementTick+0x15c>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4313      	orrs	r3, r2
 8006322:	4a22      	ldr	r2, [pc, #136]	; (80063ac <xTaskIncrementTick+0x15c>)
 8006324:	6013      	str	r3, [r2, #0]
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800632a:	4613      	mov	r3, r2
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	4413      	add	r3, r2
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	4a1f      	ldr	r2, [pc, #124]	; (80063b0 <xTaskIncrementTick+0x160>)
 8006334:	441a      	add	r2, r3
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	3304      	adds	r3, #4
 800633a:	4619      	mov	r1, r3
 800633c:	4610      	mov	r0, r2
 800633e:	f7ff ff38 	bl	80061b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006346:	4b1b      	ldr	r3, [pc, #108]	; (80063b4 <xTaskIncrementTick+0x164>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634c:	429a      	cmp	r2, r3
 800634e:	d3b9      	bcc.n	80062c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006350:	2301      	movs	r3, #1
 8006352:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006354:	e7b6      	b.n	80062c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006356:	4b17      	ldr	r3, [pc, #92]	; (80063b4 <xTaskIncrementTick+0x164>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800635c:	4914      	ldr	r1, [pc, #80]	; (80063b0 <xTaskIncrementTick+0x160>)
 800635e:	4613      	mov	r3, r2
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	4413      	add	r3, r2
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	440b      	add	r3, r1
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2b01      	cmp	r3, #1
 800636c:	d907      	bls.n	800637e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800636e:	2301      	movs	r3, #1
 8006370:	617b      	str	r3, [r7, #20]
 8006372:	e004      	b.n	800637e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006374:	4b10      	ldr	r3, [pc, #64]	; (80063b8 <xTaskIncrementTick+0x168>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	3301      	adds	r3, #1
 800637a:	4a0f      	ldr	r2, [pc, #60]	; (80063b8 <xTaskIncrementTick+0x168>)
 800637c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800637e:	4b0f      	ldr	r3, [pc, #60]	; (80063bc <xTaskIncrementTick+0x16c>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d001      	beq.n	800638a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8006386:	2301      	movs	r3, #1
 8006388:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800638a:	697b      	ldr	r3, [r7, #20]
}
 800638c:	4618      	mov	r0, r3
 800638e:	3718      	adds	r7, #24
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	200002c0 	.word	0x200002c0
 8006398:	200002a4 	.word	0x200002a4
 800639c:	2000029c 	.word	0x2000029c
 80063a0:	200002a0 	.word	0x200002a0
 80063a4:	200002b8 	.word	0x200002b8
 80063a8:	200002bc 	.word	0x200002bc
 80063ac:	200002a8 	.word	0x200002a8
 80063b0:	20000210 	.word	0x20000210
 80063b4:	2000020c 	.word	0x2000020c
 80063b8:	200002b0 	.word	0x200002b0
 80063bc:	200002b4 	.word	0x200002b4

080063c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b086      	sub	sp, #24
 80063c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80063c6:	4b32      	ldr	r3, [pc, #200]	; (8006490 <vTaskSwitchContext+0xd0>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d003      	beq.n	80063d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80063ce:	4b31      	ldr	r3, [pc, #196]	; (8006494 <vTaskSwitchContext+0xd4>)
 80063d0:	2201      	movs	r2, #1
 80063d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80063d4:	e058      	b.n	8006488 <vTaskSwitchContext+0xc8>
		xYieldPending = pdFALSE;
 80063d6:	4b2f      	ldr	r3, [pc, #188]	; (8006494 <vTaskSwitchContext+0xd4>)
 80063d8:	2200      	movs	r2, #0
 80063da:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80063dc:	f7fa fde6 	bl	8000fac <getRunTimeCounterValue>
 80063e0:	4603      	mov	r3, r0
 80063e2:	4a2d      	ldr	r2, [pc, #180]	; (8006498 <vTaskSwitchContext+0xd8>)
 80063e4:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80063e6:	4b2c      	ldr	r3, [pc, #176]	; (8006498 <vTaskSwitchContext+0xd8>)
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	4b2c      	ldr	r3, [pc, #176]	; (800649c <vTaskSwitchContext+0xdc>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d909      	bls.n	8006406 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80063f2:	4b2b      	ldr	r3, [pc, #172]	; (80064a0 <vTaskSwitchContext+0xe0>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80063f8:	4a27      	ldr	r2, [pc, #156]	; (8006498 <vTaskSwitchContext+0xd8>)
 80063fa:	6810      	ldr	r0, [r2, #0]
 80063fc:	4a27      	ldr	r2, [pc, #156]	; (800649c <vTaskSwitchContext+0xdc>)
 80063fe:	6812      	ldr	r2, [r2, #0]
 8006400:	1a82      	subs	r2, r0, r2
 8006402:	440a      	add	r2, r1
 8006404:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8006406:	4b24      	ldr	r3, [pc, #144]	; (8006498 <vTaskSwitchContext+0xd8>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a24      	ldr	r2, [pc, #144]	; (800649c <vTaskSwitchContext+0xdc>)
 800640c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800640e:	4b25      	ldr	r3, [pc, #148]	; (80064a4 <vTaskSwitchContext+0xe4>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	fab3 f383 	clz	r3, r3
 800641a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800641c:	7afb      	ldrb	r3, [r7, #11]
 800641e:	f1c3 031f 	rsb	r3, r3, #31
 8006422:	617b      	str	r3, [r7, #20]
 8006424:	4920      	ldr	r1, [pc, #128]	; (80064a8 <vTaskSwitchContext+0xe8>)
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	4613      	mov	r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	4413      	add	r3, r2
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	440b      	add	r3, r1
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d10a      	bne.n	800644e <vTaskSwitchContext+0x8e>
	__asm volatile
 8006438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643c:	f383 8811 	msr	BASEPRI, r3
 8006440:	f3bf 8f6f 	isb	sy
 8006444:	f3bf 8f4f 	dsb	sy
 8006448:	607b      	str	r3, [r7, #4]
}
 800644a:	bf00      	nop
 800644c:	e7fe      	b.n	800644c <vTaskSwitchContext+0x8c>
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	4613      	mov	r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	4413      	add	r3, r2
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	4a13      	ldr	r2, [pc, #76]	; (80064a8 <vTaskSwitchContext+0xe8>)
 800645a:	4413      	add	r3, r2
 800645c:	613b      	str	r3, [r7, #16]
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	685a      	ldr	r2, [r3, #4]
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	605a      	str	r2, [r3, #4]
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	3308      	adds	r3, #8
 8006470:	429a      	cmp	r2, r3
 8006472:	d104      	bne.n	800647e <vTaskSwitchContext+0xbe>
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	685a      	ldr	r2, [r3, #4]
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	605a      	str	r2, [r3, #4]
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	4a06      	ldr	r2, [pc, #24]	; (80064a0 <vTaskSwitchContext+0xe0>)
 8006486:	6013      	str	r3, [r2, #0]
}
 8006488:	bf00      	nop
 800648a:	3718      	adds	r7, #24
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	200002c0 	.word	0x200002c0
 8006494:	200002b4 	.word	0x200002b4
 8006498:	200002c8 	.word	0x200002c8
 800649c:	200002c4 	.word	0x200002c4
 80064a0:	2000020c 	.word	0x2000020c
 80064a4:	200002a8 	.word	0x200002a8
 80064a8:	20000210 	.word	0x20000210

080064ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064b2:	4b0c      	ldr	r3, [pc, #48]	; (80064e4 <prvResetNextTaskUnblockTime+0x38>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d104      	bne.n	80064c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80064bc:	4b0a      	ldr	r3, [pc, #40]	; (80064e8 <prvResetNextTaskUnblockTime+0x3c>)
 80064be:	f04f 32ff 	mov.w	r2, #4294967295
 80064c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80064c4:	e008      	b.n	80064d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064c6:	4b07      	ldr	r3, [pc, #28]	; (80064e4 <prvResetNextTaskUnblockTime+0x38>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	4a04      	ldr	r2, [pc, #16]	; (80064e8 <prvResetNextTaskUnblockTime+0x3c>)
 80064d6:	6013      	str	r3, [r2, #0]
}
 80064d8:	bf00      	nop
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr
 80064e4:	2000029c 	.word	0x2000029c
 80064e8:	200002bc 	.word	0x200002bc

080064ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80064f2:	4b0b      	ldr	r3, [pc, #44]	; (8006520 <xTaskGetSchedulerState+0x34>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d102      	bne.n	8006500 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80064fa:	2301      	movs	r3, #1
 80064fc:	607b      	str	r3, [r7, #4]
 80064fe:	e008      	b.n	8006512 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006500:	4b08      	ldr	r3, [pc, #32]	; (8006524 <xTaskGetSchedulerState+0x38>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d102      	bne.n	800650e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006508:	2302      	movs	r3, #2
 800650a:	607b      	str	r3, [r7, #4]
 800650c:	e001      	b.n	8006512 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800650e:	2300      	movs	r3, #0
 8006510:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006512:	687b      	ldr	r3, [r7, #4]
	}
 8006514:	4618      	mov	r0, r3
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr
 8006520:	200002ac 	.word	0x200002ac
 8006524:	200002c0 	.word	0x200002c0
	...

08006530 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006530:	4b07      	ldr	r3, [pc, #28]	; (8006550 <pxCurrentTCBConst2>)
 8006532:	6819      	ldr	r1, [r3, #0]
 8006534:	6808      	ldr	r0, [r1, #0]
 8006536:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800653a:	f380 8809 	msr	PSP, r0
 800653e:	f3bf 8f6f 	isb	sy
 8006542:	f04f 0000 	mov.w	r0, #0
 8006546:	f380 8811 	msr	BASEPRI, r0
 800654a:	4770      	bx	lr
 800654c:	f3af 8000 	nop.w

08006550 <pxCurrentTCBConst2>:
 8006550:	2000020c 	.word	0x2000020c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006554:	bf00      	nop
 8006556:	bf00      	nop
	...

08006560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006560:	f3ef 8009 	mrs	r0, PSP
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	4b15      	ldr	r3, [pc, #84]	; (80065c0 <pxCurrentTCBConst>)
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	f01e 0f10 	tst.w	lr, #16
 8006570:	bf08      	it	eq
 8006572:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006576:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800657a:	6010      	str	r0, [r2, #0]
 800657c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006580:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006584:	f380 8811 	msr	BASEPRI, r0
 8006588:	f3bf 8f4f 	dsb	sy
 800658c:	f3bf 8f6f 	isb	sy
 8006590:	f7ff ff16 	bl	80063c0 <vTaskSwitchContext>
 8006594:	f04f 0000 	mov.w	r0, #0
 8006598:	f380 8811 	msr	BASEPRI, r0
 800659c:	bc09      	pop	{r0, r3}
 800659e:	6819      	ldr	r1, [r3, #0]
 80065a0:	6808      	ldr	r0, [r1, #0]
 80065a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a6:	f01e 0f10 	tst.w	lr, #16
 80065aa:	bf08      	it	eq
 80065ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80065b0:	f380 8809 	msr	PSP, r0
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	4770      	bx	lr
 80065ba:	bf00      	nop
 80065bc:	f3af 8000 	nop.w

080065c0 <pxCurrentTCBConst>:
 80065c0:	2000020c 	.word	0x2000020c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80065c4:	bf00      	nop
 80065c6:	bf00      	nop

080065c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
	__asm volatile
 80065ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d2:	f383 8811 	msr	BASEPRI, r3
 80065d6:	f3bf 8f6f 	isb	sy
 80065da:	f3bf 8f4f 	dsb	sy
 80065de:	607b      	str	r3, [r7, #4]
}
 80065e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80065e2:	f7ff fe35 	bl	8006250 <xTaskIncrementTick>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d003      	beq.n	80065f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80065ec:	4b06      	ldr	r3, [pc, #24]	; (8006608 <xPortSysTickHandler+0x40>)
 80065ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065f2:	601a      	str	r2, [r3, #0]
 80065f4:	2300      	movs	r3, #0
 80065f6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80065fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006600:	bf00      	nop
 8006602:	3708      	adds	r7, #8
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	e000ed04 	.word	0xe000ed04

0800660c <atof>:
 800660c:	2100      	movs	r1, #0
 800660e:	f001 b809 	b.w	8007624 <strtod>

08006612 <atoi>:
 8006612:	220a      	movs	r2, #10
 8006614:	2100      	movs	r1, #0
 8006616:	f001 b895 	b.w	8007744 <strtol>
	...

0800661c <__errno>:
 800661c:	4b01      	ldr	r3, [pc, #4]	; (8006624 <__errno+0x8>)
 800661e:	6818      	ldr	r0, [r3, #0]
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	20000010 	.word	0x20000010

08006628 <__libc_init_array>:
 8006628:	b570      	push	{r4, r5, r6, lr}
 800662a:	4d0d      	ldr	r5, [pc, #52]	; (8006660 <__libc_init_array+0x38>)
 800662c:	4c0d      	ldr	r4, [pc, #52]	; (8006664 <__libc_init_array+0x3c>)
 800662e:	1b64      	subs	r4, r4, r5
 8006630:	10a4      	asrs	r4, r4, #2
 8006632:	2600      	movs	r6, #0
 8006634:	42a6      	cmp	r6, r4
 8006636:	d109      	bne.n	800664c <__libc_init_array+0x24>
 8006638:	4d0b      	ldr	r5, [pc, #44]	; (8006668 <__libc_init_array+0x40>)
 800663a:	4c0c      	ldr	r4, [pc, #48]	; (800666c <__libc_init_array+0x44>)
 800663c:	f003 fa10 	bl	8009a60 <_init>
 8006640:	1b64      	subs	r4, r4, r5
 8006642:	10a4      	asrs	r4, r4, #2
 8006644:	2600      	movs	r6, #0
 8006646:	42a6      	cmp	r6, r4
 8006648:	d105      	bne.n	8006656 <__libc_init_array+0x2e>
 800664a:	bd70      	pop	{r4, r5, r6, pc}
 800664c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006650:	4798      	blx	r3
 8006652:	3601      	adds	r6, #1
 8006654:	e7ee      	b.n	8006634 <__libc_init_array+0xc>
 8006656:	f855 3b04 	ldr.w	r3, [r5], #4
 800665a:	4798      	blx	r3
 800665c:	3601      	adds	r6, #1
 800665e:	e7f2      	b.n	8006646 <__libc_init_array+0x1e>
 8006660:	08009fe8 	.word	0x08009fe8
 8006664:	08009fe8 	.word	0x08009fe8
 8006668:	08009fe8 	.word	0x08009fe8
 800666c:	08009fec 	.word	0x08009fec

08006670 <memcpy>:
 8006670:	440a      	add	r2, r1
 8006672:	4291      	cmp	r1, r2
 8006674:	f100 33ff 	add.w	r3, r0, #4294967295
 8006678:	d100      	bne.n	800667c <memcpy+0xc>
 800667a:	4770      	bx	lr
 800667c:	b510      	push	{r4, lr}
 800667e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006682:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006686:	4291      	cmp	r1, r2
 8006688:	d1f9      	bne.n	800667e <memcpy+0xe>
 800668a:	bd10      	pop	{r4, pc}

0800668c <memset>:
 800668c:	4402      	add	r2, r0
 800668e:	4603      	mov	r3, r0
 8006690:	4293      	cmp	r3, r2
 8006692:	d100      	bne.n	8006696 <memset+0xa>
 8006694:	4770      	bx	lr
 8006696:	f803 1b01 	strb.w	r1, [r3], #1
 800669a:	e7f9      	b.n	8006690 <memset+0x4>

0800669c <iprintf>:
 800669c:	b40f      	push	{r0, r1, r2, r3}
 800669e:	4b0a      	ldr	r3, [pc, #40]	; (80066c8 <iprintf+0x2c>)
 80066a0:	b513      	push	{r0, r1, r4, lr}
 80066a2:	681c      	ldr	r4, [r3, #0]
 80066a4:	b124      	cbz	r4, 80066b0 <iprintf+0x14>
 80066a6:	69a3      	ldr	r3, [r4, #24]
 80066a8:	b913      	cbnz	r3, 80066b0 <iprintf+0x14>
 80066aa:	4620      	mov	r0, r4
 80066ac:	f001 fa2e 	bl	8007b0c <__sinit>
 80066b0:	ab05      	add	r3, sp, #20
 80066b2:	9a04      	ldr	r2, [sp, #16]
 80066b4:	68a1      	ldr	r1, [r4, #8]
 80066b6:	9301      	str	r3, [sp, #4]
 80066b8:	4620      	mov	r0, r4
 80066ba:	f002 fc53 	bl	8008f64 <_vfiprintf_r>
 80066be:	b002      	add	sp, #8
 80066c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066c4:	b004      	add	sp, #16
 80066c6:	4770      	bx	lr
 80066c8:	20000010 	.word	0x20000010

080066cc <_puts_r>:
 80066cc:	b570      	push	{r4, r5, r6, lr}
 80066ce:	460e      	mov	r6, r1
 80066d0:	4605      	mov	r5, r0
 80066d2:	b118      	cbz	r0, 80066dc <_puts_r+0x10>
 80066d4:	6983      	ldr	r3, [r0, #24]
 80066d6:	b90b      	cbnz	r3, 80066dc <_puts_r+0x10>
 80066d8:	f001 fa18 	bl	8007b0c <__sinit>
 80066dc:	69ab      	ldr	r3, [r5, #24]
 80066de:	68ac      	ldr	r4, [r5, #8]
 80066e0:	b913      	cbnz	r3, 80066e8 <_puts_r+0x1c>
 80066e2:	4628      	mov	r0, r5
 80066e4:	f001 fa12 	bl	8007b0c <__sinit>
 80066e8:	4b2c      	ldr	r3, [pc, #176]	; (800679c <_puts_r+0xd0>)
 80066ea:	429c      	cmp	r4, r3
 80066ec:	d120      	bne.n	8006730 <_puts_r+0x64>
 80066ee:	686c      	ldr	r4, [r5, #4]
 80066f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066f2:	07db      	lsls	r3, r3, #31
 80066f4:	d405      	bmi.n	8006702 <_puts_r+0x36>
 80066f6:	89a3      	ldrh	r3, [r4, #12]
 80066f8:	0598      	lsls	r0, r3, #22
 80066fa:	d402      	bmi.n	8006702 <_puts_r+0x36>
 80066fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066fe:	f001 fe12 	bl	8008326 <__retarget_lock_acquire_recursive>
 8006702:	89a3      	ldrh	r3, [r4, #12]
 8006704:	0719      	lsls	r1, r3, #28
 8006706:	d51d      	bpl.n	8006744 <_puts_r+0x78>
 8006708:	6923      	ldr	r3, [r4, #16]
 800670a:	b1db      	cbz	r3, 8006744 <_puts_r+0x78>
 800670c:	3e01      	subs	r6, #1
 800670e:	68a3      	ldr	r3, [r4, #8]
 8006710:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006714:	3b01      	subs	r3, #1
 8006716:	60a3      	str	r3, [r4, #8]
 8006718:	bb39      	cbnz	r1, 800676a <_puts_r+0x9e>
 800671a:	2b00      	cmp	r3, #0
 800671c:	da38      	bge.n	8006790 <_puts_r+0xc4>
 800671e:	4622      	mov	r2, r4
 8006720:	210a      	movs	r1, #10
 8006722:	4628      	mov	r0, r5
 8006724:	f001 f818 	bl	8007758 <__swbuf_r>
 8006728:	3001      	adds	r0, #1
 800672a:	d011      	beq.n	8006750 <_puts_r+0x84>
 800672c:	250a      	movs	r5, #10
 800672e:	e011      	b.n	8006754 <_puts_r+0x88>
 8006730:	4b1b      	ldr	r3, [pc, #108]	; (80067a0 <_puts_r+0xd4>)
 8006732:	429c      	cmp	r4, r3
 8006734:	d101      	bne.n	800673a <_puts_r+0x6e>
 8006736:	68ac      	ldr	r4, [r5, #8]
 8006738:	e7da      	b.n	80066f0 <_puts_r+0x24>
 800673a:	4b1a      	ldr	r3, [pc, #104]	; (80067a4 <_puts_r+0xd8>)
 800673c:	429c      	cmp	r4, r3
 800673e:	bf08      	it	eq
 8006740:	68ec      	ldreq	r4, [r5, #12]
 8006742:	e7d5      	b.n	80066f0 <_puts_r+0x24>
 8006744:	4621      	mov	r1, r4
 8006746:	4628      	mov	r0, r5
 8006748:	f001 f858 	bl	80077fc <__swsetup_r>
 800674c:	2800      	cmp	r0, #0
 800674e:	d0dd      	beq.n	800670c <_puts_r+0x40>
 8006750:	f04f 35ff 	mov.w	r5, #4294967295
 8006754:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006756:	07da      	lsls	r2, r3, #31
 8006758:	d405      	bmi.n	8006766 <_puts_r+0x9a>
 800675a:	89a3      	ldrh	r3, [r4, #12]
 800675c:	059b      	lsls	r3, r3, #22
 800675e:	d402      	bmi.n	8006766 <_puts_r+0x9a>
 8006760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006762:	f001 fde1 	bl	8008328 <__retarget_lock_release_recursive>
 8006766:	4628      	mov	r0, r5
 8006768:	bd70      	pop	{r4, r5, r6, pc}
 800676a:	2b00      	cmp	r3, #0
 800676c:	da04      	bge.n	8006778 <_puts_r+0xac>
 800676e:	69a2      	ldr	r2, [r4, #24]
 8006770:	429a      	cmp	r2, r3
 8006772:	dc06      	bgt.n	8006782 <_puts_r+0xb6>
 8006774:	290a      	cmp	r1, #10
 8006776:	d004      	beq.n	8006782 <_puts_r+0xb6>
 8006778:	6823      	ldr	r3, [r4, #0]
 800677a:	1c5a      	adds	r2, r3, #1
 800677c:	6022      	str	r2, [r4, #0]
 800677e:	7019      	strb	r1, [r3, #0]
 8006780:	e7c5      	b.n	800670e <_puts_r+0x42>
 8006782:	4622      	mov	r2, r4
 8006784:	4628      	mov	r0, r5
 8006786:	f000 ffe7 	bl	8007758 <__swbuf_r>
 800678a:	3001      	adds	r0, #1
 800678c:	d1bf      	bne.n	800670e <_puts_r+0x42>
 800678e:	e7df      	b.n	8006750 <_puts_r+0x84>
 8006790:	6823      	ldr	r3, [r4, #0]
 8006792:	250a      	movs	r5, #10
 8006794:	1c5a      	adds	r2, r3, #1
 8006796:	6022      	str	r2, [r4, #0]
 8006798:	701d      	strb	r5, [r3, #0]
 800679a:	e7db      	b.n	8006754 <_puts_r+0x88>
 800679c:	08009d18 	.word	0x08009d18
 80067a0:	08009d38 	.word	0x08009d38
 80067a4:	08009cf8 	.word	0x08009cf8

080067a8 <puts>:
 80067a8:	4b02      	ldr	r3, [pc, #8]	; (80067b4 <puts+0xc>)
 80067aa:	4601      	mov	r1, r0
 80067ac:	6818      	ldr	r0, [r3, #0]
 80067ae:	f7ff bf8d 	b.w	80066cc <_puts_r>
 80067b2:	bf00      	nop
 80067b4:	20000010 	.word	0x20000010

080067b8 <setvbuf>:
 80067b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80067bc:	461d      	mov	r5, r3
 80067be:	4b5d      	ldr	r3, [pc, #372]	; (8006934 <setvbuf+0x17c>)
 80067c0:	681f      	ldr	r7, [r3, #0]
 80067c2:	4604      	mov	r4, r0
 80067c4:	460e      	mov	r6, r1
 80067c6:	4690      	mov	r8, r2
 80067c8:	b127      	cbz	r7, 80067d4 <setvbuf+0x1c>
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	b913      	cbnz	r3, 80067d4 <setvbuf+0x1c>
 80067ce:	4638      	mov	r0, r7
 80067d0:	f001 f99c 	bl	8007b0c <__sinit>
 80067d4:	4b58      	ldr	r3, [pc, #352]	; (8006938 <setvbuf+0x180>)
 80067d6:	429c      	cmp	r4, r3
 80067d8:	d167      	bne.n	80068aa <setvbuf+0xf2>
 80067da:	687c      	ldr	r4, [r7, #4]
 80067dc:	f1b8 0f02 	cmp.w	r8, #2
 80067e0:	d006      	beq.n	80067f0 <setvbuf+0x38>
 80067e2:	f1b8 0f01 	cmp.w	r8, #1
 80067e6:	f200 809f 	bhi.w	8006928 <setvbuf+0x170>
 80067ea:	2d00      	cmp	r5, #0
 80067ec:	f2c0 809c 	blt.w	8006928 <setvbuf+0x170>
 80067f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067f2:	07db      	lsls	r3, r3, #31
 80067f4:	d405      	bmi.n	8006802 <setvbuf+0x4a>
 80067f6:	89a3      	ldrh	r3, [r4, #12]
 80067f8:	0598      	lsls	r0, r3, #22
 80067fa:	d402      	bmi.n	8006802 <setvbuf+0x4a>
 80067fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067fe:	f001 fd92 	bl	8008326 <__retarget_lock_acquire_recursive>
 8006802:	4621      	mov	r1, r4
 8006804:	4638      	mov	r0, r7
 8006806:	f001 f8ed 	bl	80079e4 <_fflush_r>
 800680a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800680c:	b141      	cbz	r1, 8006820 <setvbuf+0x68>
 800680e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006812:	4299      	cmp	r1, r3
 8006814:	d002      	beq.n	800681c <setvbuf+0x64>
 8006816:	4638      	mov	r0, r7
 8006818:	f002 fad0 	bl	8008dbc <_free_r>
 800681c:	2300      	movs	r3, #0
 800681e:	6363      	str	r3, [r4, #52]	; 0x34
 8006820:	2300      	movs	r3, #0
 8006822:	61a3      	str	r3, [r4, #24]
 8006824:	6063      	str	r3, [r4, #4]
 8006826:	89a3      	ldrh	r3, [r4, #12]
 8006828:	0619      	lsls	r1, r3, #24
 800682a:	d503      	bpl.n	8006834 <setvbuf+0x7c>
 800682c:	6921      	ldr	r1, [r4, #16]
 800682e:	4638      	mov	r0, r7
 8006830:	f002 fac4 	bl	8008dbc <_free_r>
 8006834:	89a3      	ldrh	r3, [r4, #12]
 8006836:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800683a:	f023 0303 	bic.w	r3, r3, #3
 800683e:	f1b8 0f02 	cmp.w	r8, #2
 8006842:	81a3      	strh	r3, [r4, #12]
 8006844:	d06c      	beq.n	8006920 <setvbuf+0x168>
 8006846:	ab01      	add	r3, sp, #4
 8006848:	466a      	mov	r2, sp
 800684a:	4621      	mov	r1, r4
 800684c:	4638      	mov	r0, r7
 800684e:	f001 fd6c 	bl	800832a <__swhatbuf_r>
 8006852:	89a3      	ldrh	r3, [r4, #12]
 8006854:	4318      	orrs	r0, r3
 8006856:	81a0      	strh	r0, [r4, #12]
 8006858:	2d00      	cmp	r5, #0
 800685a:	d130      	bne.n	80068be <setvbuf+0x106>
 800685c:	9d00      	ldr	r5, [sp, #0]
 800685e:	4628      	mov	r0, r5
 8006860:	f001 fdc8 	bl	80083f4 <malloc>
 8006864:	4606      	mov	r6, r0
 8006866:	2800      	cmp	r0, #0
 8006868:	d155      	bne.n	8006916 <setvbuf+0x15e>
 800686a:	f8dd 9000 	ldr.w	r9, [sp]
 800686e:	45a9      	cmp	r9, r5
 8006870:	d14a      	bne.n	8006908 <setvbuf+0x150>
 8006872:	f04f 35ff 	mov.w	r5, #4294967295
 8006876:	2200      	movs	r2, #0
 8006878:	60a2      	str	r2, [r4, #8]
 800687a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800687e:	6022      	str	r2, [r4, #0]
 8006880:	6122      	str	r2, [r4, #16]
 8006882:	2201      	movs	r2, #1
 8006884:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006888:	6162      	str	r2, [r4, #20]
 800688a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800688c:	f043 0302 	orr.w	r3, r3, #2
 8006890:	07d2      	lsls	r2, r2, #31
 8006892:	81a3      	strh	r3, [r4, #12]
 8006894:	d405      	bmi.n	80068a2 <setvbuf+0xea>
 8006896:	f413 7f00 	tst.w	r3, #512	; 0x200
 800689a:	d102      	bne.n	80068a2 <setvbuf+0xea>
 800689c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800689e:	f001 fd43 	bl	8008328 <__retarget_lock_release_recursive>
 80068a2:	4628      	mov	r0, r5
 80068a4:	b003      	add	sp, #12
 80068a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068aa:	4b24      	ldr	r3, [pc, #144]	; (800693c <setvbuf+0x184>)
 80068ac:	429c      	cmp	r4, r3
 80068ae:	d101      	bne.n	80068b4 <setvbuf+0xfc>
 80068b0:	68bc      	ldr	r4, [r7, #8]
 80068b2:	e793      	b.n	80067dc <setvbuf+0x24>
 80068b4:	4b22      	ldr	r3, [pc, #136]	; (8006940 <setvbuf+0x188>)
 80068b6:	429c      	cmp	r4, r3
 80068b8:	bf08      	it	eq
 80068ba:	68fc      	ldreq	r4, [r7, #12]
 80068bc:	e78e      	b.n	80067dc <setvbuf+0x24>
 80068be:	2e00      	cmp	r6, #0
 80068c0:	d0cd      	beq.n	800685e <setvbuf+0xa6>
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	b913      	cbnz	r3, 80068cc <setvbuf+0x114>
 80068c6:	4638      	mov	r0, r7
 80068c8:	f001 f920 	bl	8007b0c <__sinit>
 80068cc:	f1b8 0f01 	cmp.w	r8, #1
 80068d0:	bf08      	it	eq
 80068d2:	89a3      	ldrheq	r3, [r4, #12]
 80068d4:	6026      	str	r6, [r4, #0]
 80068d6:	bf04      	itt	eq
 80068d8:	f043 0301 	orreq.w	r3, r3, #1
 80068dc:	81a3      	strheq	r3, [r4, #12]
 80068de:	89a2      	ldrh	r2, [r4, #12]
 80068e0:	f012 0308 	ands.w	r3, r2, #8
 80068e4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80068e8:	d01c      	beq.n	8006924 <setvbuf+0x16c>
 80068ea:	07d3      	lsls	r3, r2, #31
 80068ec:	bf41      	itttt	mi
 80068ee:	2300      	movmi	r3, #0
 80068f0:	426d      	negmi	r5, r5
 80068f2:	60a3      	strmi	r3, [r4, #8]
 80068f4:	61a5      	strmi	r5, [r4, #24]
 80068f6:	bf58      	it	pl
 80068f8:	60a5      	strpl	r5, [r4, #8]
 80068fa:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80068fc:	f015 0501 	ands.w	r5, r5, #1
 8006900:	d115      	bne.n	800692e <setvbuf+0x176>
 8006902:	f412 7f00 	tst.w	r2, #512	; 0x200
 8006906:	e7c8      	b.n	800689a <setvbuf+0xe2>
 8006908:	4648      	mov	r0, r9
 800690a:	f001 fd73 	bl	80083f4 <malloc>
 800690e:	4606      	mov	r6, r0
 8006910:	2800      	cmp	r0, #0
 8006912:	d0ae      	beq.n	8006872 <setvbuf+0xba>
 8006914:	464d      	mov	r5, r9
 8006916:	89a3      	ldrh	r3, [r4, #12]
 8006918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800691c:	81a3      	strh	r3, [r4, #12]
 800691e:	e7d0      	b.n	80068c2 <setvbuf+0x10a>
 8006920:	2500      	movs	r5, #0
 8006922:	e7a8      	b.n	8006876 <setvbuf+0xbe>
 8006924:	60a3      	str	r3, [r4, #8]
 8006926:	e7e8      	b.n	80068fa <setvbuf+0x142>
 8006928:	f04f 35ff 	mov.w	r5, #4294967295
 800692c:	e7b9      	b.n	80068a2 <setvbuf+0xea>
 800692e:	2500      	movs	r5, #0
 8006930:	e7b7      	b.n	80068a2 <setvbuf+0xea>
 8006932:	bf00      	nop
 8006934:	20000010 	.word	0x20000010
 8006938:	08009d18 	.word	0x08009d18
 800693c:	08009d38 	.word	0x08009d38
 8006940:	08009cf8 	.word	0x08009cf8

08006944 <strchr>:
 8006944:	b2c9      	uxtb	r1, r1
 8006946:	4603      	mov	r3, r0
 8006948:	f810 2b01 	ldrb.w	r2, [r0], #1
 800694c:	b11a      	cbz	r2, 8006956 <strchr+0x12>
 800694e:	428a      	cmp	r2, r1
 8006950:	d1f9      	bne.n	8006946 <strchr+0x2>
 8006952:	4618      	mov	r0, r3
 8006954:	4770      	bx	lr
 8006956:	2900      	cmp	r1, #0
 8006958:	bf18      	it	ne
 800695a:	2300      	movne	r3, #0
 800695c:	e7f9      	b.n	8006952 <strchr+0xe>

0800695e <strncmp>:
 800695e:	b510      	push	{r4, lr}
 8006960:	b16a      	cbz	r2, 800697e <strncmp+0x20>
 8006962:	3901      	subs	r1, #1
 8006964:	1884      	adds	r4, r0, r2
 8006966:	f810 3b01 	ldrb.w	r3, [r0], #1
 800696a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800696e:	4293      	cmp	r3, r2
 8006970:	d103      	bne.n	800697a <strncmp+0x1c>
 8006972:	42a0      	cmp	r0, r4
 8006974:	d001      	beq.n	800697a <strncmp+0x1c>
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1f5      	bne.n	8006966 <strncmp+0x8>
 800697a:	1a98      	subs	r0, r3, r2
 800697c:	bd10      	pop	{r4, pc}
 800697e:	4610      	mov	r0, r2
 8006980:	e7fc      	b.n	800697c <strncmp+0x1e>

08006982 <strncpy>:
 8006982:	b510      	push	{r4, lr}
 8006984:	3901      	subs	r1, #1
 8006986:	4603      	mov	r3, r0
 8006988:	b132      	cbz	r2, 8006998 <strncpy+0x16>
 800698a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800698e:	f803 4b01 	strb.w	r4, [r3], #1
 8006992:	3a01      	subs	r2, #1
 8006994:	2c00      	cmp	r4, #0
 8006996:	d1f7      	bne.n	8006988 <strncpy+0x6>
 8006998:	441a      	add	r2, r3
 800699a:	2100      	movs	r1, #0
 800699c:	4293      	cmp	r3, r2
 800699e:	d100      	bne.n	80069a2 <strncpy+0x20>
 80069a0:	bd10      	pop	{r4, pc}
 80069a2:	f803 1b01 	strb.w	r1, [r3], #1
 80069a6:	e7f9      	b.n	800699c <strncpy+0x1a>

080069a8 <strstr>:
 80069a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069aa:	780c      	ldrb	r4, [r1, #0]
 80069ac:	b164      	cbz	r4, 80069c8 <strstr+0x20>
 80069ae:	4603      	mov	r3, r0
 80069b0:	781a      	ldrb	r2, [r3, #0]
 80069b2:	4618      	mov	r0, r3
 80069b4:	1c5e      	adds	r6, r3, #1
 80069b6:	b90a      	cbnz	r2, 80069bc <strstr+0x14>
 80069b8:	4610      	mov	r0, r2
 80069ba:	e005      	b.n	80069c8 <strstr+0x20>
 80069bc:	4294      	cmp	r4, r2
 80069be:	d108      	bne.n	80069d2 <strstr+0x2a>
 80069c0:	460d      	mov	r5, r1
 80069c2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80069c6:	b902      	cbnz	r2, 80069ca <strstr+0x22>
 80069c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069ca:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80069ce:	4297      	cmp	r7, r2
 80069d0:	d0f7      	beq.n	80069c2 <strstr+0x1a>
 80069d2:	4633      	mov	r3, r6
 80069d4:	e7ec      	b.n	80069b0 <strstr+0x8>

080069d6 <sulp>:
 80069d6:	b570      	push	{r4, r5, r6, lr}
 80069d8:	4604      	mov	r4, r0
 80069da:	460d      	mov	r5, r1
 80069dc:	ec45 4b10 	vmov	d0, r4, r5
 80069e0:	4616      	mov	r6, r2
 80069e2:	f002 f88d 	bl	8008b00 <__ulp>
 80069e6:	ec51 0b10 	vmov	r0, r1, d0
 80069ea:	b17e      	cbz	r6, 8006a0c <sulp+0x36>
 80069ec:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80069f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	dd09      	ble.n	8006a0c <sulp+0x36>
 80069f8:	051b      	lsls	r3, r3, #20
 80069fa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80069fe:	2400      	movs	r4, #0
 8006a00:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006a04:	4622      	mov	r2, r4
 8006a06:	462b      	mov	r3, r5
 8006a08:	f7f9 fdfe 	bl	8000608 <__aeabi_dmul>
 8006a0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006a10 <_strtod_l>:
 8006a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a14:	b0a3      	sub	sp, #140	; 0x8c
 8006a16:	461f      	mov	r7, r3
 8006a18:	2300      	movs	r3, #0
 8006a1a:	931e      	str	r3, [sp, #120]	; 0x78
 8006a1c:	4ba4      	ldr	r3, [pc, #656]	; (8006cb0 <_strtod_l+0x2a0>)
 8006a1e:	9219      	str	r2, [sp, #100]	; 0x64
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	9307      	str	r3, [sp, #28]
 8006a24:	4604      	mov	r4, r0
 8006a26:	4618      	mov	r0, r3
 8006a28:	4688      	mov	r8, r1
 8006a2a:	f7f9 fbd9 	bl	80001e0 <strlen>
 8006a2e:	f04f 0a00 	mov.w	sl, #0
 8006a32:	4605      	mov	r5, r0
 8006a34:	f04f 0b00 	mov.w	fp, #0
 8006a38:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006a3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006a3e:	781a      	ldrb	r2, [r3, #0]
 8006a40:	2a2b      	cmp	r2, #43	; 0x2b
 8006a42:	d04c      	beq.n	8006ade <_strtod_l+0xce>
 8006a44:	d839      	bhi.n	8006aba <_strtod_l+0xaa>
 8006a46:	2a0d      	cmp	r2, #13
 8006a48:	d832      	bhi.n	8006ab0 <_strtod_l+0xa0>
 8006a4a:	2a08      	cmp	r2, #8
 8006a4c:	d832      	bhi.n	8006ab4 <_strtod_l+0xa4>
 8006a4e:	2a00      	cmp	r2, #0
 8006a50:	d03c      	beq.n	8006acc <_strtod_l+0xbc>
 8006a52:	2300      	movs	r3, #0
 8006a54:	930e      	str	r3, [sp, #56]	; 0x38
 8006a56:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8006a58:	7833      	ldrb	r3, [r6, #0]
 8006a5a:	2b30      	cmp	r3, #48	; 0x30
 8006a5c:	f040 80b4 	bne.w	8006bc8 <_strtod_l+0x1b8>
 8006a60:	7873      	ldrb	r3, [r6, #1]
 8006a62:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006a66:	2b58      	cmp	r3, #88	; 0x58
 8006a68:	d16c      	bne.n	8006b44 <_strtod_l+0x134>
 8006a6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a6c:	9301      	str	r3, [sp, #4]
 8006a6e:	ab1e      	add	r3, sp, #120	; 0x78
 8006a70:	9702      	str	r7, [sp, #8]
 8006a72:	9300      	str	r3, [sp, #0]
 8006a74:	4a8f      	ldr	r2, [pc, #572]	; (8006cb4 <_strtod_l+0x2a4>)
 8006a76:	ab1f      	add	r3, sp, #124	; 0x7c
 8006a78:	a91d      	add	r1, sp, #116	; 0x74
 8006a7a:	4620      	mov	r0, r4
 8006a7c:	f001 f94a 	bl	8007d14 <__gethex>
 8006a80:	f010 0707 	ands.w	r7, r0, #7
 8006a84:	4605      	mov	r5, r0
 8006a86:	d005      	beq.n	8006a94 <_strtod_l+0x84>
 8006a88:	2f06      	cmp	r7, #6
 8006a8a:	d12a      	bne.n	8006ae2 <_strtod_l+0xd2>
 8006a8c:	3601      	adds	r6, #1
 8006a8e:	2300      	movs	r3, #0
 8006a90:	961d      	str	r6, [sp, #116]	; 0x74
 8006a92:	930e      	str	r3, [sp, #56]	; 0x38
 8006a94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	f040 8596 	bne.w	80075c8 <_strtod_l+0xbb8>
 8006a9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a9e:	b1db      	cbz	r3, 8006ad8 <_strtod_l+0xc8>
 8006aa0:	4652      	mov	r2, sl
 8006aa2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006aa6:	ec43 2b10 	vmov	d0, r2, r3
 8006aaa:	b023      	add	sp, #140	; 0x8c
 8006aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ab0:	2a20      	cmp	r2, #32
 8006ab2:	d1ce      	bne.n	8006a52 <_strtod_l+0x42>
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	931d      	str	r3, [sp, #116]	; 0x74
 8006ab8:	e7c0      	b.n	8006a3c <_strtod_l+0x2c>
 8006aba:	2a2d      	cmp	r2, #45	; 0x2d
 8006abc:	d1c9      	bne.n	8006a52 <_strtod_l+0x42>
 8006abe:	2201      	movs	r2, #1
 8006ac0:	920e      	str	r2, [sp, #56]	; 0x38
 8006ac2:	1c5a      	adds	r2, r3, #1
 8006ac4:	921d      	str	r2, [sp, #116]	; 0x74
 8006ac6:	785b      	ldrb	r3, [r3, #1]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1c4      	bne.n	8006a56 <_strtod_l+0x46>
 8006acc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006ace:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	f040 8576 	bne.w	80075c4 <_strtod_l+0xbb4>
 8006ad8:	4652      	mov	r2, sl
 8006ada:	465b      	mov	r3, fp
 8006adc:	e7e3      	b.n	8006aa6 <_strtod_l+0x96>
 8006ade:	2200      	movs	r2, #0
 8006ae0:	e7ee      	b.n	8006ac0 <_strtod_l+0xb0>
 8006ae2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006ae4:	b13a      	cbz	r2, 8006af6 <_strtod_l+0xe6>
 8006ae6:	2135      	movs	r1, #53	; 0x35
 8006ae8:	a820      	add	r0, sp, #128	; 0x80
 8006aea:	f002 f914 	bl	8008d16 <__copybits>
 8006aee:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006af0:	4620      	mov	r0, r4
 8006af2:	f001 fcd9 	bl	80084a8 <_Bfree>
 8006af6:	3f01      	subs	r7, #1
 8006af8:	2f05      	cmp	r7, #5
 8006afa:	d807      	bhi.n	8006b0c <_strtod_l+0xfc>
 8006afc:	e8df f007 	tbb	[pc, r7]
 8006b00:	1d180b0e 	.word	0x1d180b0e
 8006b04:	030e      	.short	0x030e
 8006b06:	f04f 0b00 	mov.w	fp, #0
 8006b0a:	46da      	mov	sl, fp
 8006b0c:	0728      	lsls	r0, r5, #28
 8006b0e:	d5c1      	bpl.n	8006a94 <_strtod_l+0x84>
 8006b10:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006b14:	e7be      	b.n	8006a94 <_strtod_l+0x84>
 8006b16:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8006b1a:	e7f7      	b.n	8006b0c <_strtod_l+0xfc>
 8006b1c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8006b20:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006b22:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006b26:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006b2a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006b2e:	e7ed      	b.n	8006b0c <_strtod_l+0xfc>
 8006b30:	f8df b184 	ldr.w	fp, [pc, #388]	; 8006cb8 <_strtod_l+0x2a8>
 8006b34:	f04f 0a00 	mov.w	sl, #0
 8006b38:	e7e8      	b.n	8006b0c <_strtod_l+0xfc>
 8006b3a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006b3e:	f04f 3aff 	mov.w	sl, #4294967295
 8006b42:	e7e3      	b.n	8006b0c <_strtod_l+0xfc>
 8006b44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006b46:	1c5a      	adds	r2, r3, #1
 8006b48:	921d      	str	r2, [sp, #116]	; 0x74
 8006b4a:	785b      	ldrb	r3, [r3, #1]
 8006b4c:	2b30      	cmp	r3, #48	; 0x30
 8006b4e:	d0f9      	beq.n	8006b44 <_strtod_l+0x134>
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d09f      	beq.n	8006a94 <_strtod_l+0x84>
 8006b54:	2301      	movs	r3, #1
 8006b56:	f04f 0900 	mov.w	r9, #0
 8006b5a:	9304      	str	r3, [sp, #16]
 8006b5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006b5e:	930a      	str	r3, [sp, #40]	; 0x28
 8006b60:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006b64:	464f      	mov	r7, r9
 8006b66:	220a      	movs	r2, #10
 8006b68:	981d      	ldr	r0, [sp, #116]	; 0x74
 8006b6a:	7806      	ldrb	r6, [r0, #0]
 8006b6c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006b70:	b2d9      	uxtb	r1, r3
 8006b72:	2909      	cmp	r1, #9
 8006b74:	d92a      	bls.n	8006bcc <_strtod_l+0x1bc>
 8006b76:	9907      	ldr	r1, [sp, #28]
 8006b78:	462a      	mov	r2, r5
 8006b7a:	f7ff fef0 	bl	800695e <strncmp>
 8006b7e:	b398      	cbz	r0, 8006be8 <_strtod_l+0x1d8>
 8006b80:	2000      	movs	r0, #0
 8006b82:	4633      	mov	r3, r6
 8006b84:	463d      	mov	r5, r7
 8006b86:	9007      	str	r0, [sp, #28]
 8006b88:	4602      	mov	r2, r0
 8006b8a:	2b65      	cmp	r3, #101	; 0x65
 8006b8c:	d001      	beq.n	8006b92 <_strtod_l+0x182>
 8006b8e:	2b45      	cmp	r3, #69	; 0x45
 8006b90:	d118      	bne.n	8006bc4 <_strtod_l+0x1b4>
 8006b92:	b91d      	cbnz	r5, 8006b9c <_strtod_l+0x18c>
 8006b94:	9b04      	ldr	r3, [sp, #16]
 8006b96:	4303      	orrs	r3, r0
 8006b98:	d098      	beq.n	8006acc <_strtod_l+0xbc>
 8006b9a:	2500      	movs	r5, #0
 8006b9c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8006ba0:	f108 0301 	add.w	r3, r8, #1
 8006ba4:	931d      	str	r3, [sp, #116]	; 0x74
 8006ba6:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006baa:	2b2b      	cmp	r3, #43	; 0x2b
 8006bac:	d075      	beq.n	8006c9a <_strtod_l+0x28a>
 8006bae:	2b2d      	cmp	r3, #45	; 0x2d
 8006bb0:	d07b      	beq.n	8006caa <_strtod_l+0x29a>
 8006bb2:	f04f 0c00 	mov.w	ip, #0
 8006bb6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006bba:	2909      	cmp	r1, #9
 8006bbc:	f240 8082 	bls.w	8006cc4 <_strtod_l+0x2b4>
 8006bc0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006bc4:	2600      	movs	r6, #0
 8006bc6:	e09d      	b.n	8006d04 <_strtod_l+0x2f4>
 8006bc8:	2300      	movs	r3, #0
 8006bca:	e7c4      	b.n	8006b56 <_strtod_l+0x146>
 8006bcc:	2f08      	cmp	r7, #8
 8006bce:	bfd8      	it	le
 8006bd0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006bd2:	f100 0001 	add.w	r0, r0, #1
 8006bd6:	bfda      	itte	le
 8006bd8:	fb02 3301 	mlale	r3, r2, r1, r3
 8006bdc:	9309      	strle	r3, [sp, #36]	; 0x24
 8006bde:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006be2:	3701      	adds	r7, #1
 8006be4:	901d      	str	r0, [sp, #116]	; 0x74
 8006be6:	e7bf      	b.n	8006b68 <_strtod_l+0x158>
 8006be8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006bea:	195a      	adds	r2, r3, r5
 8006bec:	921d      	str	r2, [sp, #116]	; 0x74
 8006bee:	5d5b      	ldrb	r3, [r3, r5]
 8006bf0:	2f00      	cmp	r7, #0
 8006bf2:	d037      	beq.n	8006c64 <_strtod_l+0x254>
 8006bf4:	9007      	str	r0, [sp, #28]
 8006bf6:	463d      	mov	r5, r7
 8006bf8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006bfc:	2a09      	cmp	r2, #9
 8006bfe:	d912      	bls.n	8006c26 <_strtod_l+0x216>
 8006c00:	2201      	movs	r2, #1
 8006c02:	e7c2      	b.n	8006b8a <_strtod_l+0x17a>
 8006c04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006c06:	1c5a      	adds	r2, r3, #1
 8006c08:	921d      	str	r2, [sp, #116]	; 0x74
 8006c0a:	785b      	ldrb	r3, [r3, #1]
 8006c0c:	3001      	adds	r0, #1
 8006c0e:	2b30      	cmp	r3, #48	; 0x30
 8006c10:	d0f8      	beq.n	8006c04 <_strtod_l+0x1f4>
 8006c12:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006c16:	2a08      	cmp	r2, #8
 8006c18:	f200 84db 	bhi.w	80075d2 <_strtod_l+0xbc2>
 8006c1c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006c1e:	9007      	str	r0, [sp, #28]
 8006c20:	2000      	movs	r0, #0
 8006c22:	920a      	str	r2, [sp, #40]	; 0x28
 8006c24:	4605      	mov	r5, r0
 8006c26:	3b30      	subs	r3, #48	; 0x30
 8006c28:	f100 0201 	add.w	r2, r0, #1
 8006c2c:	d014      	beq.n	8006c58 <_strtod_l+0x248>
 8006c2e:	9907      	ldr	r1, [sp, #28]
 8006c30:	4411      	add	r1, r2
 8006c32:	9107      	str	r1, [sp, #28]
 8006c34:	462a      	mov	r2, r5
 8006c36:	eb00 0e05 	add.w	lr, r0, r5
 8006c3a:	210a      	movs	r1, #10
 8006c3c:	4572      	cmp	r2, lr
 8006c3e:	d113      	bne.n	8006c68 <_strtod_l+0x258>
 8006c40:	182a      	adds	r2, r5, r0
 8006c42:	2a08      	cmp	r2, #8
 8006c44:	f105 0501 	add.w	r5, r5, #1
 8006c48:	4405      	add	r5, r0
 8006c4a:	dc1c      	bgt.n	8006c86 <_strtod_l+0x276>
 8006c4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c4e:	220a      	movs	r2, #10
 8006c50:	fb02 3301 	mla	r3, r2, r1, r3
 8006c54:	9309      	str	r3, [sp, #36]	; 0x24
 8006c56:	2200      	movs	r2, #0
 8006c58:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006c5a:	1c59      	adds	r1, r3, #1
 8006c5c:	911d      	str	r1, [sp, #116]	; 0x74
 8006c5e:	785b      	ldrb	r3, [r3, #1]
 8006c60:	4610      	mov	r0, r2
 8006c62:	e7c9      	b.n	8006bf8 <_strtod_l+0x1e8>
 8006c64:	4638      	mov	r0, r7
 8006c66:	e7d2      	b.n	8006c0e <_strtod_l+0x1fe>
 8006c68:	2a08      	cmp	r2, #8
 8006c6a:	dc04      	bgt.n	8006c76 <_strtod_l+0x266>
 8006c6c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006c6e:	434e      	muls	r6, r1
 8006c70:	9609      	str	r6, [sp, #36]	; 0x24
 8006c72:	3201      	adds	r2, #1
 8006c74:	e7e2      	b.n	8006c3c <_strtod_l+0x22c>
 8006c76:	f102 0c01 	add.w	ip, r2, #1
 8006c7a:	f1bc 0f10 	cmp.w	ip, #16
 8006c7e:	bfd8      	it	le
 8006c80:	fb01 f909 	mulle.w	r9, r1, r9
 8006c84:	e7f5      	b.n	8006c72 <_strtod_l+0x262>
 8006c86:	2d10      	cmp	r5, #16
 8006c88:	bfdc      	itt	le
 8006c8a:	220a      	movle	r2, #10
 8006c8c:	fb02 3909 	mlale	r9, r2, r9, r3
 8006c90:	e7e1      	b.n	8006c56 <_strtod_l+0x246>
 8006c92:	2300      	movs	r3, #0
 8006c94:	9307      	str	r3, [sp, #28]
 8006c96:	2201      	movs	r2, #1
 8006c98:	e77c      	b.n	8006b94 <_strtod_l+0x184>
 8006c9a:	f04f 0c00 	mov.w	ip, #0
 8006c9e:	f108 0302 	add.w	r3, r8, #2
 8006ca2:	931d      	str	r3, [sp, #116]	; 0x74
 8006ca4:	f898 3002 	ldrb.w	r3, [r8, #2]
 8006ca8:	e785      	b.n	8006bb6 <_strtod_l+0x1a6>
 8006caa:	f04f 0c01 	mov.w	ip, #1
 8006cae:	e7f6      	b.n	8006c9e <_strtod_l+0x28e>
 8006cb0:	08009dd4 	.word	0x08009dd4
 8006cb4:	08009ca8 	.word	0x08009ca8
 8006cb8:	7ff00000 	.word	0x7ff00000
 8006cbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006cbe:	1c59      	adds	r1, r3, #1
 8006cc0:	911d      	str	r1, [sp, #116]	; 0x74
 8006cc2:	785b      	ldrb	r3, [r3, #1]
 8006cc4:	2b30      	cmp	r3, #48	; 0x30
 8006cc6:	d0f9      	beq.n	8006cbc <_strtod_l+0x2ac>
 8006cc8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8006ccc:	2908      	cmp	r1, #8
 8006cce:	f63f af79 	bhi.w	8006bc4 <_strtod_l+0x1b4>
 8006cd2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006cd6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006cd8:	9308      	str	r3, [sp, #32]
 8006cda:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006cdc:	1c59      	adds	r1, r3, #1
 8006cde:	911d      	str	r1, [sp, #116]	; 0x74
 8006ce0:	785b      	ldrb	r3, [r3, #1]
 8006ce2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8006ce6:	2e09      	cmp	r6, #9
 8006ce8:	d937      	bls.n	8006d5a <_strtod_l+0x34a>
 8006cea:	9e08      	ldr	r6, [sp, #32]
 8006cec:	1b89      	subs	r1, r1, r6
 8006cee:	2908      	cmp	r1, #8
 8006cf0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006cf4:	dc02      	bgt.n	8006cfc <_strtod_l+0x2ec>
 8006cf6:	4576      	cmp	r6, lr
 8006cf8:	bfa8      	it	ge
 8006cfa:	4676      	movge	r6, lr
 8006cfc:	f1bc 0f00 	cmp.w	ip, #0
 8006d00:	d000      	beq.n	8006d04 <_strtod_l+0x2f4>
 8006d02:	4276      	negs	r6, r6
 8006d04:	2d00      	cmp	r5, #0
 8006d06:	d14f      	bne.n	8006da8 <_strtod_l+0x398>
 8006d08:	9904      	ldr	r1, [sp, #16]
 8006d0a:	4301      	orrs	r1, r0
 8006d0c:	f47f aec2 	bne.w	8006a94 <_strtod_l+0x84>
 8006d10:	2a00      	cmp	r2, #0
 8006d12:	f47f aedb 	bne.w	8006acc <_strtod_l+0xbc>
 8006d16:	2b69      	cmp	r3, #105	; 0x69
 8006d18:	d027      	beq.n	8006d6a <_strtod_l+0x35a>
 8006d1a:	dc24      	bgt.n	8006d66 <_strtod_l+0x356>
 8006d1c:	2b49      	cmp	r3, #73	; 0x49
 8006d1e:	d024      	beq.n	8006d6a <_strtod_l+0x35a>
 8006d20:	2b4e      	cmp	r3, #78	; 0x4e
 8006d22:	f47f aed3 	bne.w	8006acc <_strtod_l+0xbc>
 8006d26:	499e      	ldr	r1, [pc, #632]	; (8006fa0 <_strtod_l+0x590>)
 8006d28:	a81d      	add	r0, sp, #116	; 0x74
 8006d2a:	f001 fa4b 	bl	80081c4 <__match>
 8006d2e:	2800      	cmp	r0, #0
 8006d30:	f43f aecc 	beq.w	8006acc <_strtod_l+0xbc>
 8006d34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	2b28      	cmp	r3, #40	; 0x28
 8006d3a:	d12d      	bne.n	8006d98 <_strtod_l+0x388>
 8006d3c:	4999      	ldr	r1, [pc, #612]	; (8006fa4 <_strtod_l+0x594>)
 8006d3e:	aa20      	add	r2, sp, #128	; 0x80
 8006d40:	a81d      	add	r0, sp, #116	; 0x74
 8006d42:	f001 fa53 	bl	80081ec <__hexnan>
 8006d46:	2805      	cmp	r0, #5
 8006d48:	d126      	bne.n	8006d98 <_strtod_l+0x388>
 8006d4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d4c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8006d50:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006d54:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006d58:	e69c      	b.n	8006a94 <_strtod_l+0x84>
 8006d5a:	210a      	movs	r1, #10
 8006d5c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006d60:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006d64:	e7b9      	b.n	8006cda <_strtod_l+0x2ca>
 8006d66:	2b6e      	cmp	r3, #110	; 0x6e
 8006d68:	e7db      	b.n	8006d22 <_strtod_l+0x312>
 8006d6a:	498f      	ldr	r1, [pc, #572]	; (8006fa8 <_strtod_l+0x598>)
 8006d6c:	a81d      	add	r0, sp, #116	; 0x74
 8006d6e:	f001 fa29 	bl	80081c4 <__match>
 8006d72:	2800      	cmp	r0, #0
 8006d74:	f43f aeaa 	beq.w	8006acc <_strtod_l+0xbc>
 8006d78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006d7a:	498c      	ldr	r1, [pc, #560]	; (8006fac <_strtod_l+0x59c>)
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	a81d      	add	r0, sp, #116	; 0x74
 8006d80:	931d      	str	r3, [sp, #116]	; 0x74
 8006d82:	f001 fa1f 	bl	80081c4 <__match>
 8006d86:	b910      	cbnz	r0, 8006d8e <_strtod_l+0x37e>
 8006d88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	931d      	str	r3, [sp, #116]	; 0x74
 8006d8e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8006fbc <_strtod_l+0x5ac>
 8006d92:	f04f 0a00 	mov.w	sl, #0
 8006d96:	e67d      	b.n	8006a94 <_strtod_l+0x84>
 8006d98:	4885      	ldr	r0, [pc, #532]	; (8006fb0 <_strtod_l+0x5a0>)
 8006d9a:	f002 fba9 	bl	80094f0 <nan>
 8006d9e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006da2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006da6:	e675      	b.n	8006a94 <_strtod_l+0x84>
 8006da8:	9b07      	ldr	r3, [sp, #28]
 8006daa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006dac:	1af3      	subs	r3, r6, r3
 8006dae:	2f00      	cmp	r7, #0
 8006db0:	bf08      	it	eq
 8006db2:	462f      	moveq	r7, r5
 8006db4:	2d10      	cmp	r5, #16
 8006db6:	9308      	str	r3, [sp, #32]
 8006db8:	46a8      	mov	r8, r5
 8006dba:	bfa8      	it	ge
 8006dbc:	f04f 0810 	movge.w	r8, #16
 8006dc0:	f7f9 fba8 	bl	8000514 <__aeabi_ui2d>
 8006dc4:	2d09      	cmp	r5, #9
 8006dc6:	4682      	mov	sl, r0
 8006dc8:	468b      	mov	fp, r1
 8006dca:	dd13      	ble.n	8006df4 <_strtod_l+0x3e4>
 8006dcc:	4b79      	ldr	r3, [pc, #484]	; (8006fb4 <_strtod_l+0x5a4>)
 8006dce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006dd2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006dd6:	f7f9 fc17 	bl	8000608 <__aeabi_dmul>
 8006dda:	4682      	mov	sl, r0
 8006ddc:	4648      	mov	r0, r9
 8006dde:	468b      	mov	fp, r1
 8006de0:	f7f9 fb98 	bl	8000514 <__aeabi_ui2d>
 8006de4:	4602      	mov	r2, r0
 8006de6:	460b      	mov	r3, r1
 8006de8:	4650      	mov	r0, sl
 8006dea:	4659      	mov	r1, fp
 8006dec:	f7f9 fa56 	bl	800029c <__adddf3>
 8006df0:	4682      	mov	sl, r0
 8006df2:	468b      	mov	fp, r1
 8006df4:	2d0f      	cmp	r5, #15
 8006df6:	dc38      	bgt.n	8006e6a <_strtod_l+0x45a>
 8006df8:	9b08      	ldr	r3, [sp, #32]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	f43f ae4a 	beq.w	8006a94 <_strtod_l+0x84>
 8006e00:	dd24      	ble.n	8006e4c <_strtod_l+0x43c>
 8006e02:	2b16      	cmp	r3, #22
 8006e04:	dc0b      	bgt.n	8006e1e <_strtod_l+0x40e>
 8006e06:	4d6b      	ldr	r5, [pc, #428]	; (8006fb4 <_strtod_l+0x5a4>)
 8006e08:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8006e0c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006e10:	4652      	mov	r2, sl
 8006e12:	465b      	mov	r3, fp
 8006e14:	f7f9 fbf8 	bl	8000608 <__aeabi_dmul>
 8006e18:	4682      	mov	sl, r0
 8006e1a:	468b      	mov	fp, r1
 8006e1c:	e63a      	b.n	8006a94 <_strtod_l+0x84>
 8006e1e:	9a08      	ldr	r2, [sp, #32]
 8006e20:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006e24:	4293      	cmp	r3, r2
 8006e26:	db20      	blt.n	8006e6a <_strtod_l+0x45a>
 8006e28:	4c62      	ldr	r4, [pc, #392]	; (8006fb4 <_strtod_l+0x5a4>)
 8006e2a:	f1c5 050f 	rsb	r5, r5, #15
 8006e2e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006e32:	4652      	mov	r2, sl
 8006e34:	465b      	mov	r3, fp
 8006e36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e3a:	f7f9 fbe5 	bl	8000608 <__aeabi_dmul>
 8006e3e:	9b08      	ldr	r3, [sp, #32]
 8006e40:	1b5d      	subs	r5, r3, r5
 8006e42:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006e46:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006e4a:	e7e3      	b.n	8006e14 <_strtod_l+0x404>
 8006e4c:	9b08      	ldr	r3, [sp, #32]
 8006e4e:	3316      	adds	r3, #22
 8006e50:	db0b      	blt.n	8006e6a <_strtod_l+0x45a>
 8006e52:	9b07      	ldr	r3, [sp, #28]
 8006e54:	4a57      	ldr	r2, [pc, #348]	; (8006fb4 <_strtod_l+0x5a4>)
 8006e56:	1b9e      	subs	r6, r3, r6
 8006e58:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8006e5c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006e60:	4650      	mov	r0, sl
 8006e62:	4659      	mov	r1, fp
 8006e64:	f7f9 fcfa 	bl	800085c <__aeabi_ddiv>
 8006e68:	e7d6      	b.n	8006e18 <_strtod_l+0x408>
 8006e6a:	9b08      	ldr	r3, [sp, #32]
 8006e6c:	eba5 0808 	sub.w	r8, r5, r8
 8006e70:	4498      	add	r8, r3
 8006e72:	f1b8 0f00 	cmp.w	r8, #0
 8006e76:	dd71      	ble.n	8006f5c <_strtod_l+0x54c>
 8006e78:	f018 030f 	ands.w	r3, r8, #15
 8006e7c:	d00a      	beq.n	8006e94 <_strtod_l+0x484>
 8006e7e:	494d      	ldr	r1, [pc, #308]	; (8006fb4 <_strtod_l+0x5a4>)
 8006e80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006e84:	4652      	mov	r2, sl
 8006e86:	465b      	mov	r3, fp
 8006e88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e8c:	f7f9 fbbc 	bl	8000608 <__aeabi_dmul>
 8006e90:	4682      	mov	sl, r0
 8006e92:	468b      	mov	fp, r1
 8006e94:	f038 080f 	bics.w	r8, r8, #15
 8006e98:	d04d      	beq.n	8006f36 <_strtod_l+0x526>
 8006e9a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006e9e:	dd22      	ble.n	8006ee6 <_strtod_l+0x4d6>
 8006ea0:	2500      	movs	r5, #0
 8006ea2:	462e      	mov	r6, r5
 8006ea4:	9509      	str	r5, [sp, #36]	; 0x24
 8006ea6:	9507      	str	r5, [sp, #28]
 8006ea8:	2322      	movs	r3, #34	; 0x22
 8006eaa:	f8df b110 	ldr.w	fp, [pc, #272]	; 8006fbc <_strtod_l+0x5ac>
 8006eae:	6023      	str	r3, [r4, #0]
 8006eb0:	f04f 0a00 	mov.w	sl, #0
 8006eb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f43f adec 	beq.w	8006a94 <_strtod_l+0x84>
 8006ebc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	f001 faf2 	bl	80084a8 <_Bfree>
 8006ec4:	9907      	ldr	r1, [sp, #28]
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	f001 faee 	bl	80084a8 <_Bfree>
 8006ecc:	4631      	mov	r1, r6
 8006ece:	4620      	mov	r0, r4
 8006ed0:	f001 faea 	bl	80084a8 <_Bfree>
 8006ed4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	f001 fae6 	bl	80084a8 <_Bfree>
 8006edc:	4629      	mov	r1, r5
 8006ede:	4620      	mov	r0, r4
 8006ee0:	f001 fae2 	bl	80084a8 <_Bfree>
 8006ee4:	e5d6      	b.n	8006a94 <_strtod_l+0x84>
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006eec:	4650      	mov	r0, sl
 8006eee:	4659      	mov	r1, fp
 8006ef0:	4699      	mov	r9, r3
 8006ef2:	f1b8 0f01 	cmp.w	r8, #1
 8006ef6:	dc21      	bgt.n	8006f3c <_strtod_l+0x52c>
 8006ef8:	b10b      	cbz	r3, 8006efe <_strtod_l+0x4ee>
 8006efa:	4682      	mov	sl, r0
 8006efc:	468b      	mov	fp, r1
 8006efe:	4b2e      	ldr	r3, [pc, #184]	; (8006fb8 <_strtod_l+0x5a8>)
 8006f00:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006f04:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006f08:	4652      	mov	r2, sl
 8006f0a:	465b      	mov	r3, fp
 8006f0c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006f10:	f7f9 fb7a 	bl	8000608 <__aeabi_dmul>
 8006f14:	4b29      	ldr	r3, [pc, #164]	; (8006fbc <_strtod_l+0x5ac>)
 8006f16:	460a      	mov	r2, r1
 8006f18:	400b      	ands	r3, r1
 8006f1a:	4929      	ldr	r1, [pc, #164]	; (8006fc0 <_strtod_l+0x5b0>)
 8006f1c:	428b      	cmp	r3, r1
 8006f1e:	4682      	mov	sl, r0
 8006f20:	d8be      	bhi.n	8006ea0 <_strtod_l+0x490>
 8006f22:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006f26:	428b      	cmp	r3, r1
 8006f28:	bf86      	itte	hi
 8006f2a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8006fc4 <_strtod_l+0x5b4>
 8006f2e:	f04f 3aff 	movhi.w	sl, #4294967295
 8006f32:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006f36:	2300      	movs	r3, #0
 8006f38:	9304      	str	r3, [sp, #16]
 8006f3a:	e081      	b.n	8007040 <_strtod_l+0x630>
 8006f3c:	f018 0f01 	tst.w	r8, #1
 8006f40:	d007      	beq.n	8006f52 <_strtod_l+0x542>
 8006f42:	4b1d      	ldr	r3, [pc, #116]	; (8006fb8 <_strtod_l+0x5a8>)
 8006f44:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4c:	f7f9 fb5c 	bl	8000608 <__aeabi_dmul>
 8006f50:	2301      	movs	r3, #1
 8006f52:	f109 0901 	add.w	r9, r9, #1
 8006f56:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006f5a:	e7ca      	b.n	8006ef2 <_strtod_l+0x4e2>
 8006f5c:	d0eb      	beq.n	8006f36 <_strtod_l+0x526>
 8006f5e:	f1c8 0800 	rsb	r8, r8, #0
 8006f62:	f018 020f 	ands.w	r2, r8, #15
 8006f66:	d00a      	beq.n	8006f7e <_strtod_l+0x56e>
 8006f68:	4b12      	ldr	r3, [pc, #72]	; (8006fb4 <_strtod_l+0x5a4>)
 8006f6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f6e:	4650      	mov	r0, sl
 8006f70:	4659      	mov	r1, fp
 8006f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f76:	f7f9 fc71 	bl	800085c <__aeabi_ddiv>
 8006f7a:	4682      	mov	sl, r0
 8006f7c:	468b      	mov	fp, r1
 8006f7e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006f82:	d0d8      	beq.n	8006f36 <_strtod_l+0x526>
 8006f84:	f1b8 0f1f 	cmp.w	r8, #31
 8006f88:	dd1e      	ble.n	8006fc8 <_strtod_l+0x5b8>
 8006f8a:	2500      	movs	r5, #0
 8006f8c:	462e      	mov	r6, r5
 8006f8e:	9509      	str	r5, [sp, #36]	; 0x24
 8006f90:	9507      	str	r5, [sp, #28]
 8006f92:	2322      	movs	r3, #34	; 0x22
 8006f94:	f04f 0a00 	mov.w	sl, #0
 8006f98:	f04f 0b00 	mov.w	fp, #0
 8006f9c:	6023      	str	r3, [r4, #0]
 8006f9e:	e789      	b.n	8006eb4 <_strtod_l+0x4a4>
 8006fa0:	08009ca5 	.word	0x08009ca5
 8006fa4:	08009cbc 	.word	0x08009cbc
 8006fa8:	08009c9c 	.word	0x08009c9c
 8006fac:	08009c9f 	.word	0x08009c9f
 8006fb0:	08009fca 	.word	0x08009fca
 8006fb4:	08009e88 	.word	0x08009e88
 8006fb8:	08009e60 	.word	0x08009e60
 8006fbc:	7ff00000 	.word	0x7ff00000
 8006fc0:	7ca00000 	.word	0x7ca00000
 8006fc4:	7fefffff 	.word	0x7fefffff
 8006fc8:	f018 0310 	ands.w	r3, r8, #16
 8006fcc:	bf18      	it	ne
 8006fce:	236a      	movne	r3, #106	; 0x6a
 8006fd0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8007388 <_strtod_l+0x978>
 8006fd4:	9304      	str	r3, [sp, #16]
 8006fd6:	4650      	mov	r0, sl
 8006fd8:	4659      	mov	r1, fp
 8006fda:	2300      	movs	r3, #0
 8006fdc:	f018 0f01 	tst.w	r8, #1
 8006fe0:	d004      	beq.n	8006fec <_strtod_l+0x5dc>
 8006fe2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006fe6:	f7f9 fb0f 	bl	8000608 <__aeabi_dmul>
 8006fea:	2301      	movs	r3, #1
 8006fec:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006ff0:	f109 0908 	add.w	r9, r9, #8
 8006ff4:	d1f2      	bne.n	8006fdc <_strtod_l+0x5cc>
 8006ff6:	b10b      	cbz	r3, 8006ffc <_strtod_l+0x5ec>
 8006ff8:	4682      	mov	sl, r0
 8006ffa:	468b      	mov	fp, r1
 8006ffc:	9b04      	ldr	r3, [sp, #16]
 8006ffe:	b1bb      	cbz	r3, 8007030 <_strtod_l+0x620>
 8007000:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8007004:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007008:	2b00      	cmp	r3, #0
 800700a:	4659      	mov	r1, fp
 800700c:	dd10      	ble.n	8007030 <_strtod_l+0x620>
 800700e:	2b1f      	cmp	r3, #31
 8007010:	f340 8128 	ble.w	8007264 <_strtod_l+0x854>
 8007014:	2b34      	cmp	r3, #52	; 0x34
 8007016:	bfde      	ittt	le
 8007018:	3b20      	suble	r3, #32
 800701a:	f04f 32ff 	movle.w	r2, #4294967295
 800701e:	fa02 f303 	lslle.w	r3, r2, r3
 8007022:	f04f 0a00 	mov.w	sl, #0
 8007026:	bfcc      	ite	gt
 8007028:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800702c:	ea03 0b01 	andle.w	fp, r3, r1
 8007030:	2200      	movs	r2, #0
 8007032:	2300      	movs	r3, #0
 8007034:	4650      	mov	r0, sl
 8007036:	4659      	mov	r1, fp
 8007038:	f7f9 fd4e 	bl	8000ad8 <__aeabi_dcmpeq>
 800703c:	2800      	cmp	r0, #0
 800703e:	d1a4      	bne.n	8006f8a <_strtod_l+0x57a>
 8007040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007042:	9300      	str	r3, [sp, #0]
 8007044:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007046:	462b      	mov	r3, r5
 8007048:	463a      	mov	r2, r7
 800704a:	4620      	mov	r0, r4
 800704c:	f001 fa98 	bl	8008580 <__s2b>
 8007050:	9009      	str	r0, [sp, #36]	; 0x24
 8007052:	2800      	cmp	r0, #0
 8007054:	f43f af24 	beq.w	8006ea0 <_strtod_l+0x490>
 8007058:	9b07      	ldr	r3, [sp, #28]
 800705a:	1b9e      	subs	r6, r3, r6
 800705c:	9b08      	ldr	r3, [sp, #32]
 800705e:	2b00      	cmp	r3, #0
 8007060:	bfb4      	ite	lt
 8007062:	4633      	movlt	r3, r6
 8007064:	2300      	movge	r3, #0
 8007066:	9310      	str	r3, [sp, #64]	; 0x40
 8007068:	9b08      	ldr	r3, [sp, #32]
 800706a:	2500      	movs	r5, #0
 800706c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007070:	9318      	str	r3, [sp, #96]	; 0x60
 8007072:	462e      	mov	r6, r5
 8007074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007076:	4620      	mov	r0, r4
 8007078:	6859      	ldr	r1, [r3, #4]
 800707a:	f001 f9d5 	bl	8008428 <_Balloc>
 800707e:	9007      	str	r0, [sp, #28]
 8007080:	2800      	cmp	r0, #0
 8007082:	f43f af11 	beq.w	8006ea8 <_strtod_l+0x498>
 8007086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007088:	691a      	ldr	r2, [r3, #16]
 800708a:	3202      	adds	r2, #2
 800708c:	f103 010c 	add.w	r1, r3, #12
 8007090:	0092      	lsls	r2, r2, #2
 8007092:	300c      	adds	r0, #12
 8007094:	f7ff faec 	bl	8006670 <memcpy>
 8007098:	ec4b ab10 	vmov	d0, sl, fp
 800709c:	aa20      	add	r2, sp, #128	; 0x80
 800709e:	a91f      	add	r1, sp, #124	; 0x7c
 80070a0:	4620      	mov	r0, r4
 80070a2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80070a6:	f001 fda7 	bl	8008bf8 <__d2b>
 80070aa:	901e      	str	r0, [sp, #120]	; 0x78
 80070ac:	2800      	cmp	r0, #0
 80070ae:	f43f aefb 	beq.w	8006ea8 <_strtod_l+0x498>
 80070b2:	2101      	movs	r1, #1
 80070b4:	4620      	mov	r0, r4
 80070b6:	f001 fafd 	bl	80086b4 <__i2b>
 80070ba:	4606      	mov	r6, r0
 80070bc:	2800      	cmp	r0, #0
 80070be:	f43f aef3 	beq.w	8006ea8 <_strtod_l+0x498>
 80070c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80070c4:	9904      	ldr	r1, [sp, #16]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	bfab      	itete	ge
 80070ca:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80070cc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80070ce:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80070d0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80070d4:	bfac      	ite	ge
 80070d6:	eb03 0902 	addge.w	r9, r3, r2
 80070da:	1ad7      	sublt	r7, r2, r3
 80070dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80070de:	eba3 0801 	sub.w	r8, r3, r1
 80070e2:	4490      	add	r8, r2
 80070e4:	4ba3      	ldr	r3, [pc, #652]	; (8007374 <_strtod_l+0x964>)
 80070e6:	f108 38ff 	add.w	r8, r8, #4294967295
 80070ea:	4598      	cmp	r8, r3
 80070ec:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80070f0:	f280 80cc 	bge.w	800728c <_strtod_l+0x87c>
 80070f4:	eba3 0308 	sub.w	r3, r3, r8
 80070f8:	2b1f      	cmp	r3, #31
 80070fa:	eba2 0203 	sub.w	r2, r2, r3
 80070fe:	f04f 0101 	mov.w	r1, #1
 8007102:	f300 80b6 	bgt.w	8007272 <_strtod_l+0x862>
 8007106:	fa01 f303 	lsl.w	r3, r1, r3
 800710a:	9311      	str	r3, [sp, #68]	; 0x44
 800710c:	2300      	movs	r3, #0
 800710e:	930c      	str	r3, [sp, #48]	; 0x30
 8007110:	eb09 0802 	add.w	r8, r9, r2
 8007114:	9b04      	ldr	r3, [sp, #16]
 8007116:	45c1      	cmp	r9, r8
 8007118:	4417      	add	r7, r2
 800711a:	441f      	add	r7, r3
 800711c:	464b      	mov	r3, r9
 800711e:	bfa8      	it	ge
 8007120:	4643      	movge	r3, r8
 8007122:	42bb      	cmp	r3, r7
 8007124:	bfa8      	it	ge
 8007126:	463b      	movge	r3, r7
 8007128:	2b00      	cmp	r3, #0
 800712a:	bfc2      	ittt	gt
 800712c:	eba8 0803 	subgt.w	r8, r8, r3
 8007130:	1aff      	subgt	r7, r7, r3
 8007132:	eba9 0903 	subgt.w	r9, r9, r3
 8007136:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007138:	2b00      	cmp	r3, #0
 800713a:	dd17      	ble.n	800716c <_strtod_l+0x75c>
 800713c:	4631      	mov	r1, r6
 800713e:	461a      	mov	r2, r3
 8007140:	4620      	mov	r0, r4
 8007142:	f001 fb73 	bl	800882c <__pow5mult>
 8007146:	4606      	mov	r6, r0
 8007148:	2800      	cmp	r0, #0
 800714a:	f43f aead 	beq.w	8006ea8 <_strtod_l+0x498>
 800714e:	4601      	mov	r1, r0
 8007150:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007152:	4620      	mov	r0, r4
 8007154:	f001 fac4 	bl	80086e0 <__multiply>
 8007158:	900f      	str	r0, [sp, #60]	; 0x3c
 800715a:	2800      	cmp	r0, #0
 800715c:	f43f aea4 	beq.w	8006ea8 <_strtod_l+0x498>
 8007160:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007162:	4620      	mov	r0, r4
 8007164:	f001 f9a0 	bl	80084a8 <_Bfree>
 8007168:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800716a:	931e      	str	r3, [sp, #120]	; 0x78
 800716c:	f1b8 0f00 	cmp.w	r8, #0
 8007170:	f300 8091 	bgt.w	8007296 <_strtod_l+0x886>
 8007174:	9b08      	ldr	r3, [sp, #32]
 8007176:	2b00      	cmp	r3, #0
 8007178:	dd08      	ble.n	800718c <_strtod_l+0x77c>
 800717a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800717c:	9907      	ldr	r1, [sp, #28]
 800717e:	4620      	mov	r0, r4
 8007180:	f001 fb54 	bl	800882c <__pow5mult>
 8007184:	9007      	str	r0, [sp, #28]
 8007186:	2800      	cmp	r0, #0
 8007188:	f43f ae8e 	beq.w	8006ea8 <_strtod_l+0x498>
 800718c:	2f00      	cmp	r7, #0
 800718e:	dd08      	ble.n	80071a2 <_strtod_l+0x792>
 8007190:	9907      	ldr	r1, [sp, #28]
 8007192:	463a      	mov	r2, r7
 8007194:	4620      	mov	r0, r4
 8007196:	f001 fba3 	bl	80088e0 <__lshift>
 800719a:	9007      	str	r0, [sp, #28]
 800719c:	2800      	cmp	r0, #0
 800719e:	f43f ae83 	beq.w	8006ea8 <_strtod_l+0x498>
 80071a2:	f1b9 0f00 	cmp.w	r9, #0
 80071a6:	dd08      	ble.n	80071ba <_strtod_l+0x7aa>
 80071a8:	4631      	mov	r1, r6
 80071aa:	464a      	mov	r2, r9
 80071ac:	4620      	mov	r0, r4
 80071ae:	f001 fb97 	bl	80088e0 <__lshift>
 80071b2:	4606      	mov	r6, r0
 80071b4:	2800      	cmp	r0, #0
 80071b6:	f43f ae77 	beq.w	8006ea8 <_strtod_l+0x498>
 80071ba:	9a07      	ldr	r2, [sp, #28]
 80071bc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80071be:	4620      	mov	r0, r4
 80071c0:	f001 fc16 	bl	80089f0 <__mdiff>
 80071c4:	4605      	mov	r5, r0
 80071c6:	2800      	cmp	r0, #0
 80071c8:	f43f ae6e 	beq.w	8006ea8 <_strtod_l+0x498>
 80071cc:	68c3      	ldr	r3, [r0, #12]
 80071ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80071d0:	2300      	movs	r3, #0
 80071d2:	60c3      	str	r3, [r0, #12]
 80071d4:	4631      	mov	r1, r6
 80071d6:	f001 fbef 	bl	80089b8 <__mcmp>
 80071da:	2800      	cmp	r0, #0
 80071dc:	da65      	bge.n	80072aa <_strtod_l+0x89a>
 80071de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071e0:	ea53 030a 	orrs.w	r3, r3, sl
 80071e4:	f040 8087 	bne.w	80072f6 <_strtod_l+0x8e6>
 80071e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f040 8082 	bne.w	80072f6 <_strtod_l+0x8e6>
 80071f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80071f6:	0d1b      	lsrs	r3, r3, #20
 80071f8:	051b      	lsls	r3, r3, #20
 80071fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80071fe:	d97a      	bls.n	80072f6 <_strtod_l+0x8e6>
 8007200:	696b      	ldr	r3, [r5, #20]
 8007202:	b913      	cbnz	r3, 800720a <_strtod_l+0x7fa>
 8007204:	692b      	ldr	r3, [r5, #16]
 8007206:	2b01      	cmp	r3, #1
 8007208:	dd75      	ble.n	80072f6 <_strtod_l+0x8e6>
 800720a:	4629      	mov	r1, r5
 800720c:	2201      	movs	r2, #1
 800720e:	4620      	mov	r0, r4
 8007210:	f001 fb66 	bl	80088e0 <__lshift>
 8007214:	4631      	mov	r1, r6
 8007216:	4605      	mov	r5, r0
 8007218:	f001 fbce 	bl	80089b8 <__mcmp>
 800721c:	2800      	cmp	r0, #0
 800721e:	dd6a      	ble.n	80072f6 <_strtod_l+0x8e6>
 8007220:	9904      	ldr	r1, [sp, #16]
 8007222:	4a55      	ldr	r2, [pc, #340]	; (8007378 <_strtod_l+0x968>)
 8007224:	465b      	mov	r3, fp
 8007226:	2900      	cmp	r1, #0
 8007228:	f000 8085 	beq.w	8007336 <_strtod_l+0x926>
 800722c:	ea02 010b 	and.w	r1, r2, fp
 8007230:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007234:	dc7f      	bgt.n	8007336 <_strtod_l+0x926>
 8007236:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800723a:	f77f aeaa 	ble.w	8006f92 <_strtod_l+0x582>
 800723e:	4a4f      	ldr	r2, [pc, #316]	; (800737c <_strtod_l+0x96c>)
 8007240:	2300      	movs	r3, #0
 8007242:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8007246:	4650      	mov	r0, sl
 8007248:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800724c:	4659      	mov	r1, fp
 800724e:	f7f9 f9db 	bl	8000608 <__aeabi_dmul>
 8007252:	460b      	mov	r3, r1
 8007254:	4303      	orrs	r3, r0
 8007256:	bf08      	it	eq
 8007258:	2322      	moveq	r3, #34	; 0x22
 800725a:	4682      	mov	sl, r0
 800725c:	468b      	mov	fp, r1
 800725e:	bf08      	it	eq
 8007260:	6023      	streq	r3, [r4, #0]
 8007262:	e62b      	b.n	8006ebc <_strtod_l+0x4ac>
 8007264:	f04f 32ff 	mov.w	r2, #4294967295
 8007268:	fa02 f303 	lsl.w	r3, r2, r3
 800726c:	ea03 0a0a 	and.w	sl, r3, sl
 8007270:	e6de      	b.n	8007030 <_strtod_l+0x620>
 8007272:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007276:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800727a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800727e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007282:	fa01 f308 	lsl.w	r3, r1, r8
 8007286:	930c      	str	r3, [sp, #48]	; 0x30
 8007288:	9111      	str	r1, [sp, #68]	; 0x44
 800728a:	e741      	b.n	8007110 <_strtod_l+0x700>
 800728c:	2300      	movs	r3, #0
 800728e:	930c      	str	r3, [sp, #48]	; 0x30
 8007290:	2301      	movs	r3, #1
 8007292:	9311      	str	r3, [sp, #68]	; 0x44
 8007294:	e73c      	b.n	8007110 <_strtod_l+0x700>
 8007296:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007298:	4642      	mov	r2, r8
 800729a:	4620      	mov	r0, r4
 800729c:	f001 fb20 	bl	80088e0 <__lshift>
 80072a0:	901e      	str	r0, [sp, #120]	; 0x78
 80072a2:	2800      	cmp	r0, #0
 80072a4:	f47f af66 	bne.w	8007174 <_strtod_l+0x764>
 80072a8:	e5fe      	b.n	8006ea8 <_strtod_l+0x498>
 80072aa:	465f      	mov	r7, fp
 80072ac:	d16e      	bne.n	800738c <_strtod_l+0x97c>
 80072ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80072b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80072b4:	b342      	cbz	r2, 8007308 <_strtod_l+0x8f8>
 80072b6:	4a32      	ldr	r2, [pc, #200]	; (8007380 <_strtod_l+0x970>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d128      	bne.n	800730e <_strtod_l+0x8fe>
 80072bc:	9b04      	ldr	r3, [sp, #16]
 80072be:	4650      	mov	r0, sl
 80072c0:	b1eb      	cbz	r3, 80072fe <_strtod_l+0x8ee>
 80072c2:	4a2d      	ldr	r2, [pc, #180]	; (8007378 <_strtod_l+0x968>)
 80072c4:	403a      	ands	r2, r7
 80072c6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80072ca:	f04f 31ff 	mov.w	r1, #4294967295
 80072ce:	d819      	bhi.n	8007304 <_strtod_l+0x8f4>
 80072d0:	0d12      	lsrs	r2, r2, #20
 80072d2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80072d6:	fa01 f303 	lsl.w	r3, r1, r3
 80072da:	4298      	cmp	r0, r3
 80072dc:	d117      	bne.n	800730e <_strtod_l+0x8fe>
 80072de:	4b29      	ldr	r3, [pc, #164]	; (8007384 <_strtod_l+0x974>)
 80072e0:	429f      	cmp	r7, r3
 80072e2:	d102      	bne.n	80072ea <_strtod_l+0x8da>
 80072e4:	3001      	adds	r0, #1
 80072e6:	f43f addf 	beq.w	8006ea8 <_strtod_l+0x498>
 80072ea:	4b23      	ldr	r3, [pc, #140]	; (8007378 <_strtod_l+0x968>)
 80072ec:	403b      	ands	r3, r7
 80072ee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80072f2:	f04f 0a00 	mov.w	sl, #0
 80072f6:	9b04      	ldr	r3, [sp, #16]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d1a0      	bne.n	800723e <_strtod_l+0x82e>
 80072fc:	e5de      	b.n	8006ebc <_strtod_l+0x4ac>
 80072fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007302:	e7ea      	b.n	80072da <_strtod_l+0x8ca>
 8007304:	460b      	mov	r3, r1
 8007306:	e7e8      	b.n	80072da <_strtod_l+0x8ca>
 8007308:	ea53 030a 	orrs.w	r3, r3, sl
 800730c:	d088      	beq.n	8007220 <_strtod_l+0x810>
 800730e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007310:	b1db      	cbz	r3, 800734a <_strtod_l+0x93a>
 8007312:	423b      	tst	r3, r7
 8007314:	d0ef      	beq.n	80072f6 <_strtod_l+0x8e6>
 8007316:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007318:	9a04      	ldr	r2, [sp, #16]
 800731a:	4650      	mov	r0, sl
 800731c:	4659      	mov	r1, fp
 800731e:	b1c3      	cbz	r3, 8007352 <_strtod_l+0x942>
 8007320:	f7ff fb59 	bl	80069d6 <sulp>
 8007324:	4602      	mov	r2, r0
 8007326:	460b      	mov	r3, r1
 8007328:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800732c:	f7f8 ffb6 	bl	800029c <__adddf3>
 8007330:	4682      	mov	sl, r0
 8007332:	468b      	mov	fp, r1
 8007334:	e7df      	b.n	80072f6 <_strtod_l+0x8e6>
 8007336:	4013      	ands	r3, r2
 8007338:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800733c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007340:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007344:	f04f 3aff 	mov.w	sl, #4294967295
 8007348:	e7d5      	b.n	80072f6 <_strtod_l+0x8e6>
 800734a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800734c:	ea13 0f0a 	tst.w	r3, sl
 8007350:	e7e0      	b.n	8007314 <_strtod_l+0x904>
 8007352:	f7ff fb40 	bl	80069d6 <sulp>
 8007356:	4602      	mov	r2, r0
 8007358:	460b      	mov	r3, r1
 800735a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800735e:	f7f8 ff9b 	bl	8000298 <__aeabi_dsub>
 8007362:	2200      	movs	r2, #0
 8007364:	2300      	movs	r3, #0
 8007366:	4682      	mov	sl, r0
 8007368:	468b      	mov	fp, r1
 800736a:	f7f9 fbb5 	bl	8000ad8 <__aeabi_dcmpeq>
 800736e:	2800      	cmp	r0, #0
 8007370:	d0c1      	beq.n	80072f6 <_strtod_l+0x8e6>
 8007372:	e60e      	b.n	8006f92 <_strtod_l+0x582>
 8007374:	fffffc02 	.word	0xfffffc02
 8007378:	7ff00000 	.word	0x7ff00000
 800737c:	39500000 	.word	0x39500000
 8007380:	000fffff 	.word	0x000fffff
 8007384:	7fefffff 	.word	0x7fefffff
 8007388:	08009cd0 	.word	0x08009cd0
 800738c:	4631      	mov	r1, r6
 800738e:	4628      	mov	r0, r5
 8007390:	f001 fc8e 	bl	8008cb0 <__ratio>
 8007394:	ec59 8b10 	vmov	r8, r9, d0
 8007398:	ee10 0a10 	vmov	r0, s0
 800739c:	2200      	movs	r2, #0
 800739e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80073a2:	4649      	mov	r1, r9
 80073a4:	f7f9 fbac 	bl	8000b00 <__aeabi_dcmple>
 80073a8:	2800      	cmp	r0, #0
 80073aa:	d07c      	beq.n	80074a6 <_strtod_l+0xa96>
 80073ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d04c      	beq.n	800744c <_strtod_l+0xa3c>
 80073b2:	4b95      	ldr	r3, [pc, #596]	; (8007608 <_strtod_l+0xbf8>)
 80073b4:	2200      	movs	r2, #0
 80073b6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80073ba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007608 <_strtod_l+0xbf8>
 80073be:	f04f 0800 	mov.w	r8, #0
 80073c2:	4b92      	ldr	r3, [pc, #584]	; (800760c <_strtod_l+0xbfc>)
 80073c4:	403b      	ands	r3, r7
 80073c6:	9311      	str	r3, [sp, #68]	; 0x44
 80073c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80073ca:	4b91      	ldr	r3, [pc, #580]	; (8007610 <_strtod_l+0xc00>)
 80073cc:	429a      	cmp	r2, r3
 80073ce:	f040 80b2 	bne.w	8007536 <_strtod_l+0xb26>
 80073d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80073d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80073da:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80073de:	ec4b ab10 	vmov	d0, sl, fp
 80073e2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80073e6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80073ea:	f001 fb89 	bl	8008b00 <__ulp>
 80073ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80073f2:	ec53 2b10 	vmov	r2, r3, d0
 80073f6:	f7f9 f907 	bl	8000608 <__aeabi_dmul>
 80073fa:	4652      	mov	r2, sl
 80073fc:	465b      	mov	r3, fp
 80073fe:	f7f8 ff4d 	bl	800029c <__adddf3>
 8007402:	460b      	mov	r3, r1
 8007404:	4981      	ldr	r1, [pc, #516]	; (800760c <_strtod_l+0xbfc>)
 8007406:	4a83      	ldr	r2, [pc, #524]	; (8007614 <_strtod_l+0xc04>)
 8007408:	4019      	ands	r1, r3
 800740a:	4291      	cmp	r1, r2
 800740c:	4682      	mov	sl, r0
 800740e:	d95e      	bls.n	80074ce <_strtod_l+0xabe>
 8007410:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007412:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007416:	4293      	cmp	r3, r2
 8007418:	d103      	bne.n	8007422 <_strtod_l+0xa12>
 800741a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800741c:	3301      	adds	r3, #1
 800741e:	f43f ad43 	beq.w	8006ea8 <_strtod_l+0x498>
 8007422:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8007620 <_strtod_l+0xc10>
 8007426:	f04f 3aff 	mov.w	sl, #4294967295
 800742a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800742c:	4620      	mov	r0, r4
 800742e:	f001 f83b 	bl	80084a8 <_Bfree>
 8007432:	9907      	ldr	r1, [sp, #28]
 8007434:	4620      	mov	r0, r4
 8007436:	f001 f837 	bl	80084a8 <_Bfree>
 800743a:	4631      	mov	r1, r6
 800743c:	4620      	mov	r0, r4
 800743e:	f001 f833 	bl	80084a8 <_Bfree>
 8007442:	4629      	mov	r1, r5
 8007444:	4620      	mov	r0, r4
 8007446:	f001 f82f 	bl	80084a8 <_Bfree>
 800744a:	e613      	b.n	8007074 <_strtod_l+0x664>
 800744c:	f1ba 0f00 	cmp.w	sl, #0
 8007450:	d11b      	bne.n	800748a <_strtod_l+0xa7a>
 8007452:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007456:	b9f3      	cbnz	r3, 8007496 <_strtod_l+0xa86>
 8007458:	4b6b      	ldr	r3, [pc, #428]	; (8007608 <_strtod_l+0xbf8>)
 800745a:	2200      	movs	r2, #0
 800745c:	4640      	mov	r0, r8
 800745e:	4649      	mov	r1, r9
 8007460:	f7f9 fb44 	bl	8000aec <__aeabi_dcmplt>
 8007464:	b9d0      	cbnz	r0, 800749c <_strtod_l+0xa8c>
 8007466:	4640      	mov	r0, r8
 8007468:	4649      	mov	r1, r9
 800746a:	4b6b      	ldr	r3, [pc, #428]	; (8007618 <_strtod_l+0xc08>)
 800746c:	2200      	movs	r2, #0
 800746e:	f7f9 f8cb 	bl	8000608 <__aeabi_dmul>
 8007472:	4680      	mov	r8, r0
 8007474:	4689      	mov	r9, r1
 8007476:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800747a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800747e:	931b      	str	r3, [sp, #108]	; 0x6c
 8007480:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8007484:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007488:	e79b      	b.n	80073c2 <_strtod_l+0x9b2>
 800748a:	f1ba 0f01 	cmp.w	sl, #1
 800748e:	d102      	bne.n	8007496 <_strtod_l+0xa86>
 8007490:	2f00      	cmp	r7, #0
 8007492:	f43f ad7e 	beq.w	8006f92 <_strtod_l+0x582>
 8007496:	4b61      	ldr	r3, [pc, #388]	; (800761c <_strtod_l+0xc0c>)
 8007498:	2200      	movs	r2, #0
 800749a:	e78c      	b.n	80073b6 <_strtod_l+0x9a6>
 800749c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007618 <_strtod_l+0xc08>
 80074a0:	f04f 0800 	mov.w	r8, #0
 80074a4:	e7e7      	b.n	8007476 <_strtod_l+0xa66>
 80074a6:	4b5c      	ldr	r3, [pc, #368]	; (8007618 <_strtod_l+0xc08>)
 80074a8:	4640      	mov	r0, r8
 80074aa:	4649      	mov	r1, r9
 80074ac:	2200      	movs	r2, #0
 80074ae:	f7f9 f8ab 	bl	8000608 <__aeabi_dmul>
 80074b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074b4:	4680      	mov	r8, r0
 80074b6:	4689      	mov	r9, r1
 80074b8:	b933      	cbnz	r3, 80074c8 <_strtod_l+0xab8>
 80074ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80074be:	9012      	str	r0, [sp, #72]	; 0x48
 80074c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80074c2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80074c6:	e7dd      	b.n	8007484 <_strtod_l+0xa74>
 80074c8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80074cc:	e7f9      	b.n	80074c2 <_strtod_l+0xab2>
 80074ce:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80074d2:	9b04      	ldr	r3, [sp, #16]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d1a8      	bne.n	800742a <_strtod_l+0xa1a>
 80074d8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80074dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80074de:	0d1b      	lsrs	r3, r3, #20
 80074e0:	051b      	lsls	r3, r3, #20
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d1a1      	bne.n	800742a <_strtod_l+0xa1a>
 80074e6:	4640      	mov	r0, r8
 80074e8:	4649      	mov	r1, r9
 80074ea:	f7f9 fbc5 	bl	8000c78 <__aeabi_d2lz>
 80074ee:	f7f9 f85d 	bl	80005ac <__aeabi_l2d>
 80074f2:	4602      	mov	r2, r0
 80074f4:	460b      	mov	r3, r1
 80074f6:	4640      	mov	r0, r8
 80074f8:	4649      	mov	r1, r9
 80074fa:	f7f8 fecd 	bl	8000298 <__aeabi_dsub>
 80074fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007500:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007504:	ea43 030a 	orr.w	r3, r3, sl
 8007508:	4313      	orrs	r3, r2
 800750a:	4680      	mov	r8, r0
 800750c:	4689      	mov	r9, r1
 800750e:	d053      	beq.n	80075b8 <_strtod_l+0xba8>
 8007510:	a335      	add	r3, pc, #212	; (adr r3, 80075e8 <_strtod_l+0xbd8>)
 8007512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007516:	f7f9 fae9 	bl	8000aec <__aeabi_dcmplt>
 800751a:	2800      	cmp	r0, #0
 800751c:	f47f acce 	bne.w	8006ebc <_strtod_l+0x4ac>
 8007520:	a333      	add	r3, pc, #204	; (adr r3, 80075f0 <_strtod_l+0xbe0>)
 8007522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007526:	4640      	mov	r0, r8
 8007528:	4649      	mov	r1, r9
 800752a:	f7f9 fafd 	bl	8000b28 <__aeabi_dcmpgt>
 800752e:	2800      	cmp	r0, #0
 8007530:	f43f af7b 	beq.w	800742a <_strtod_l+0xa1a>
 8007534:	e4c2      	b.n	8006ebc <_strtod_l+0x4ac>
 8007536:	9b04      	ldr	r3, [sp, #16]
 8007538:	b333      	cbz	r3, 8007588 <_strtod_l+0xb78>
 800753a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800753c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007540:	d822      	bhi.n	8007588 <_strtod_l+0xb78>
 8007542:	a32d      	add	r3, pc, #180	; (adr r3, 80075f8 <_strtod_l+0xbe8>)
 8007544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007548:	4640      	mov	r0, r8
 800754a:	4649      	mov	r1, r9
 800754c:	f7f9 fad8 	bl	8000b00 <__aeabi_dcmple>
 8007550:	b1a0      	cbz	r0, 800757c <_strtod_l+0xb6c>
 8007552:	4649      	mov	r1, r9
 8007554:	4640      	mov	r0, r8
 8007556:	f7f9 fb07 	bl	8000b68 <__aeabi_d2uiz>
 800755a:	2801      	cmp	r0, #1
 800755c:	bf38      	it	cc
 800755e:	2001      	movcc	r0, #1
 8007560:	f7f8 ffd8 	bl	8000514 <__aeabi_ui2d>
 8007564:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007566:	4680      	mov	r8, r0
 8007568:	4689      	mov	r9, r1
 800756a:	bb13      	cbnz	r3, 80075b2 <_strtod_l+0xba2>
 800756c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007570:	9014      	str	r0, [sp, #80]	; 0x50
 8007572:	9315      	str	r3, [sp, #84]	; 0x54
 8007574:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007578:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800757c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800757e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007580:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007584:	1a9b      	subs	r3, r3, r2
 8007586:	930d      	str	r3, [sp, #52]	; 0x34
 8007588:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800758c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007590:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007594:	f001 fab4 	bl	8008b00 <__ulp>
 8007598:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800759c:	ec53 2b10 	vmov	r2, r3, d0
 80075a0:	f7f9 f832 	bl	8000608 <__aeabi_dmul>
 80075a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80075a8:	f7f8 fe78 	bl	800029c <__adddf3>
 80075ac:	4682      	mov	sl, r0
 80075ae:	468b      	mov	fp, r1
 80075b0:	e78f      	b.n	80074d2 <_strtod_l+0xac2>
 80075b2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80075b6:	e7dd      	b.n	8007574 <_strtod_l+0xb64>
 80075b8:	a311      	add	r3, pc, #68	; (adr r3, 8007600 <_strtod_l+0xbf0>)
 80075ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075be:	f7f9 fa95 	bl	8000aec <__aeabi_dcmplt>
 80075c2:	e7b4      	b.n	800752e <_strtod_l+0xb1e>
 80075c4:	2300      	movs	r3, #0
 80075c6:	930e      	str	r3, [sp, #56]	; 0x38
 80075c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80075ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80075cc:	6013      	str	r3, [r2, #0]
 80075ce:	f7ff ba65 	b.w	8006a9c <_strtod_l+0x8c>
 80075d2:	2b65      	cmp	r3, #101	; 0x65
 80075d4:	f43f ab5d 	beq.w	8006c92 <_strtod_l+0x282>
 80075d8:	2b45      	cmp	r3, #69	; 0x45
 80075da:	f43f ab5a 	beq.w	8006c92 <_strtod_l+0x282>
 80075de:	2201      	movs	r2, #1
 80075e0:	f7ff bb92 	b.w	8006d08 <_strtod_l+0x2f8>
 80075e4:	f3af 8000 	nop.w
 80075e8:	94a03595 	.word	0x94a03595
 80075ec:	3fdfffff 	.word	0x3fdfffff
 80075f0:	35afe535 	.word	0x35afe535
 80075f4:	3fe00000 	.word	0x3fe00000
 80075f8:	ffc00000 	.word	0xffc00000
 80075fc:	41dfffff 	.word	0x41dfffff
 8007600:	94a03595 	.word	0x94a03595
 8007604:	3fcfffff 	.word	0x3fcfffff
 8007608:	3ff00000 	.word	0x3ff00000
 800760c:	7ff00000 	.word	0x7ff00000
 8007610:	7fe00000 	.word	0x7fe00000
 8007614:	7c9fffff 	.word	0x7c9fffff
 8007618:	3fe00000 	.word	0x3fe00000
 800761c:	bff00000 	.word	0xbff00000
 8007620:	7fefffff 	.word	0x7fefffff

08007624 <strtod>:
 8007624:	460a      	mov	r2, r1
 8007626:	4601      	mov	r1, r0
 8007628:	4802      	ldr	r0, [pc, #8]	; (8007634 <strtod+0x10>)
 800762a:	4b03      	ldr	r3, [pc, #12]	; (8007638 <strtod+0x14>)
 800762c:	6800      	ldr	r0, [r0, #0]
 800762e:	f7ff b9ef 	b.w	8006a10 <_strtod_l>
 8007632:	bf00      	nop
 8007634:	20000010 	.word	0x20000010
 8007638:	20000078 	.word	0x20000078

0800763c <_strtol_l.isra.0>:
 800763c:	2b01      	cmp	r3, #1
 800763e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007642:	d001      	beq.n	8007648 <_strtol_l.isra.0+0xc>
 8007644:	2b24      	cmp	r3, #36	; 0x24
 8007646:	d906      	bls.n	8007656 <_strtol_l.isra.0+0x1a>
 8007648:	f7fe ffe8 	bl	800661c <__errno>
 800764c:	2316      	movs	r3, #22
 800764e:	6003      	str	r3, [r0, #0]
 8007650:	2000      	movs	r0, #0
 8007652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007656:	4f3a      	ldr	r7, [pc, #232]	; (8007740 <_strtol_l.isra.0+0x104>)
 8007658:	468e      	mov	lr, r1
 800765a:	4676      	mov	r6, lr
 800765c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007660:	5de5      	ldrb	r5, [r4, r7]
 8007662:	f015 0508 	ands.w	r5, r5, #8
 8007666:	d1f8      	bne.n	800765a <_strtol_l.isra.0+0x1e>
 8007668:	2c2d      	cmp	r4, #45	; 0x2d
 800766a:	d134      	bne.n	80076d6 <_strtol_l.isra.0+0x9a>
 800766c:	f89e 4000 	ldrb.w	r4, [lr]
 8007670:	f04f 0801 	mov.w	r8, #1
 8007674:	f106 0e02 	add.w	lr, r6, #2
 8007678:	2b00      	cmp	r3, #0
 800767a:	d05c      	beq.n	8007736 <_strtol_l.isra.0+0xfa>
 800767c:	2b10      	cmp	r3, #16
 800767e:	d10c      	bne.n	800769a <_strtol_l.isra.0+0x5e>
 8007680:	2c30      	cmp	r4, #48	; 0x30
 8007682:	d10a      	bne.n	800769a <_strtol_l.isra.0+0x5e>
 8007684:	f89e 4000 	ldrb.w	r4, [lr]
 8007688:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800768c:	2c58      	cmp	r4, #88	; 0x58
 800768e:	d14d      	bne.n	800772c <_strtol_l.isra.0+0xf0>
 8007690:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8007694:	2310      	movs	r3, #16
 8007696:	f10e 0e02 	add.w	lr, lr, #2
 800769a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800769e:	f10c 3cff 	add.w	ip, ip, #4294967295
 80076a2:	2600      	movs	r6, #0
 80076a4:	fbbc f9f3 	udiv	r9, ip, r3
 80076a8:	4635      	mov	r5, r6
 80076aa:	fb03 ca19 	mls	sl, r3, r9, ip
 80076ae:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80076b2:	2f09      	cmp	r7, #9
 80076b4:	d818      	bhi.n	80076e8 <_strtol_l.isra.0+0xac>
 80076b6:	463c      	mov	r4, r7
 80076b8:	42a3      	cmp	r3, r4
 80076ba:	dd24      	ble.n	8007706 <_strtol_l.isra.0+0xca>
 80076bc:	2e00      	cmp	r6, #0
 80076be:	db1f      	blt.n	8007700 <_strtol_l.isra.0+0xc4>
 80076c0:	45a9      	cmp	r9, r5
 80076c2:	d31d      	bcc.n	8007700 <_strtol_l.isra.0+0xc4>
 80076c4:	d101      	bne.n	80076ca <_strtol_l.isra.0+0x8e>
 80076c6:	45a2      	cmp	sl, r4
 80076c8:	db1a      	blt.n	8007700 <_strtol_l.isra.0+0xc4>
 80076ca:	fb05 4503 	mla	r5, r5, r3, r4
 80076ce:	2601      	movs	r6, #1
 80076d0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80076d4:	e7eb      	b.n	80076ae <_strtol_l.isra.0+0x72>
 80076d6:	2c2b      	cmp	r4, #43	; 0x2b
 80076d8:	bf08      	it	eq
 80076da:	f89e 4000 	ldrbeq.w	r4, [lr]
 80076de:	46a8      	mov	r8, r5
 80076e0:	bf08      	it	eq
 80076e2:	f106 0e02 	addeq.w	lr, r6, #2
 80076e6:	e7c7      	b.n	8007678 <_strtol_l.isra.0+0x3c>
 80076e8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80076ec:	2f19      	cmp	r7, #25
 80076ee:	d801      	bhi.n	80076f4 <_strtol_l.isra.0+0xb8>
 80076f0:	3c37      	subs	r4, #55	; 0x37
 80076f2:	e7e1      	b.n	80076b8 <_strtol_l.isra.0+0x7c>
 80076f4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80076f8:	2f19      	cmp	r7, #25
 80076fa:	d804      	bhi.n	8007706 <_strtol_l.isra.0+0xca>
 80076fc:	3c57      	subs	r4, #87	; 0x57
 80076fe:	e7db      	b.n	80076b8 <_strtol_l.isra.0+0x7c>
 8007700:	f04f 36ff 	mov.w	r6, #4294967295
 8007704:	e7e4      	b.n	80076d0 <_strtol_l.isra.0+0x94>
 8007706:	2e00      	cmp	r6, #0
 8007708:	da05      	bge.n	8007716 <_strtol_l.isra.0+0xda>
 800770a:	2322      	movs	r3, #34	; 0x22
 800770c:	6003      	str	r3, [r0, #0]
 800770e:	4665      	mov	r5, ip
 8007710:	b942      	cbnz	r2, 8007724 <_strtol_l.isra.0+0xe8>
 8007712:	4628      	mov	r0, r5
 8007714:	e79d      	b.n	8007652 <_strtol_l.isra.0+0x16>
 8007716:	f1b8 0f00 	cmp.w	r8, #0
 800771a:	d000      	beq.n	800771e <_strtol_l.isra.0+0xe2>
 800771c:	426d      	negs	r5, r5
 800771e:	2a00      	cmp	r2, #0
 8007720:	d0f7      	beq.n	8007712 <_strtol_l.isra.0+0xd6>
 8007722:	b10e      	cbz	r6, 8007728 <_strtol_l.isra.0+0xec>
 8007724:	f10e 31ff 	add.w	r1, lr, #4294967295
 8007728:	6011      	str	r1, [r2, #0]
 800772a:	e7f2      	b.n	8007712 <_strtol_l.isra.0+0xd6>
 800772c:	2430      	movs	r4, #48	; 0x30
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1b3      	bne.n	800769a <_strtol_l.isra.0+0x5e>
 8007732:	2308      	movs	r3, #8
 8007734:	e7b1      	b.n	800769a <_strtol_l.isra.0+0x5e>
 8007736:	2c30      	cmp	r4, #48	; 0x30
 8007738:	d0a4      	beq.n	8007684 <_strtol_l.isra.0+0x48>
 800773a:	230a      	movs	r3, #10
 800773c:	e7ad      	b.n	800769a <_strtol_l.isra.0+0x5e>
 800773e:	bf00      	nop
 8007740:	08009b95 	.word	0x08009b95

08007744 <strtol>:
 8007744:	4613      	mov	r3, r2
 8007746:	460a      	mov	r2, r1
 8007748:	4601      	mov	r1, r0
 800774a:	4802      	ldr	r0, [pc, #8]	; (8007754 <strtol+0x10>)
 800774c:	6800      	ldr	r0, [r0, #0]
 800774e:	f7ff bf75 	b.w	800763c <_strtol_l.isra.0>
 8007752:	bf00      	nop
 8007754:	20000010 	.word	0x20000010

08007758 <__swbuf_r>:
 8007758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800775a:	460e      	mov	r6, r1
 800775c:	4614      	mov	r4, r2
 800775e:	4605      	mov	r5, r0
 8007760:	b118      	cbz	r0, 800776a <__swbuf_r+0x12>
 8007762:	6983      	ldr	r3, [r0, #24]
 8007764:	b90b      	cbnz	r3, 800776a <__swbuf_r+0x12>
 8007766:	f000 f9d1 	bl	8007b0c <__sinit>
 800776a:	4b21      	ldr	r3, [pc, #132]	; (80077f0 <__swbuf_r+0x98>)
 800776c:	429c      	cmp	r4, r3
 800776e:	d12b      	bne.n	80077c8 <__swbuf_r+0x70>
 8007770:	686c      	ldr	r4, [r5, #4]
 8007772:	69a3      	ldr	r3, [r4, #24]
 8007774:	60a3      	str	r3, [r4, #8]
 8007776:	89a3      	ldrh	r3, [r4, #12]
 8007778:	071a      	lsls	r2, r3, #28
 800777a:	d52f      	bpl.n	80077dc <__swbuf_r+0x84>
 800777c:	6923      	ldr	r3, [r4, #16]
 800777e:	b36b      	cbz	r3, 80077dc <__swbuf_r+0x84>
 8007780:	6923      	ldr	r3, [r4, #16]
 8007782:	6820      	ldr	r0, [r4, #0]
 8007784:	1ac0      	subs	r0, r0, r3
 8007786:	6963      	ldr	r3, [r4, #20]
 8007788:	b2f6      	uxtb	r6, r6
 800778a:	4283      	cmp	r3, r0
 800778c:	4637      	mov	r7, r6
 800778e:	dc04      	bgt.n	800779a <__swbuf_r+0x42>
 8007790:	4621      	mov	r1, r4
 8007792:	4628      	mov	r0, r5
 8007794:	f000 f926 	bl	80079e4 <_fflush_r>
 8007798:	bb30      	cbnz	r0, 80077e8 <__swbuf_r+0x90>
 800779a:	68a3      	ldr	r3, [r4, #8]
 800779c:	3b01      	subs	r3, #1
 800779e:	60a3      	str	r3, [r4, #8]
 80077a0:	6823      	ldr	r3, [r4, #0]
 80077a2:	1c5a      	adds	r2, r3, #1
 80077a4:	6022      	str	r2, [r4, #0]
 80077a6:	701e      	strb	r6, [r3, #0]
 80077a8:	6963      	ldr	r3, [r4, #20]
 80077aa:	3001      	adds	r0, #1
 80077ac:	4283      	cmp	r3, r0
 80077ae:	d004      	beq.n	80077ba <__swbuf_r+0x62>
 80077b0:	89a3      	ldrh	r3, [r4, #12]
 80077b2:	07db      	lsls	r3, r3, #31
 80077b4:	d506      	bpl.n	80077c4 <__swbuf_r+0x6c>
 80077b6:	2e0a      	cmp	r6, #10
 80077b8:	d104      	bne.n	80077c4 <__swbuf_r+0x6c>
 80077ba:	4621      	mov	r1, r4
 80077bc:	4628      	mov	r0, r5
 80077be:	f000 f911 	bl	80079e4 <_fflush_r>
 80077c2:	b988      	cbnz	r0, 80077e8 <__swbuf_r+0x90>
 80077c4:	4638      	mov	r0, r7
 80077c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077c8:	4b0a      	ldr	r3, [pc, #40]	; (80077f4 <__swbuf_r+0x9c>)
 80077ca:	429c      	cmp	r4, r3
 80077cc:	d101      	bne.n	80077d2 <__swbuf_r+0x7a>
 80077ce:	68ac      	ldr	r4, [r5, #8]
 80077d0:	e7cf      	b.n	8007772 <__swbuf_r+0x1a>
 80077d2:	4b09      	ldr	r3, [pc, #36]	; (80077f8 <__swbuf_r+0xa0>)
 80077d4:	429c      	cmp	r4, r3
 80077d6:	bf08      	it	eq
 80077d8:	68ec      	ldreq	r4, [r5, #12]
 80077da:	e7ca      	b.n	8007772 <__swbuf_r+0x1a>
 80077dc:	4621      	mov	r1, r4
 80077de:	4628      	mov	r0, r5
 80077e0:	f000 f80c 	bl	80077fc <__swsetup_r>
 80077e4:	2800      	cmp	r0, #0
 80077e6:	d0cb      	beq.n	8007780 <__swbuf_r+0x28>
 80077e8:	f04f 37ff 	mov.w	r7, #4294967295
 80077ec:	e7ea      	b.n	80077c4 <__swbuf_r+0x6c>
 80077ee:	bf00      	nop
 80077f0:	08009d18 	.word	0x08009d18
 80077f4:	08009d38 	.word	0x08009d38
 80077f8:	08009cf8 	.word	0x08009cf8

080077fc <__swsetup_r>:
 80077fc:	4b32      	ldr	r3, [pc, #200]	; (80078c8 <__swsetup_r+0xcc>)
 80077fe:	b570      	push	{r4, r5, r6, lr}
 8007800:	681d      	ldr	r5, [r3, #0]
 8007802:	4606      	mov	r6, r0
 8007804:	460c      	mov	r4, r1
 8007806:	b125      	cbz	r5, 8007812 <__swsetup_r+0x16>
 8007808:	69ab      	ldr	r3, [r5, #24]
 800780a:	b913      	cbnz	r3, 8007812 <__swsetup_r+0x16>
 800780c:	4628      	mov	r0, r5
 800780e:	f000 f97d 	bl	8007b0c <__sinit>
 8007812:	4b2e      	ldr	r3, [pc, #184]	; (80078cc <__swsetup_r+0xd0>)
 8007814:	429c      	cmp	r4, r3
 8007816:	d10f      	bne.n	8007838 <__swsetup_r+0x3c>
 8007818:	686c      	ldr	r4, [r5, #4]
 800781a:	89a3      	ldrh	r3, [r4, #12]
 800781c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007820:	0719      	lsls	r1, r3, #28
 8007822:	d42c      	bmi.n	800787e <__swsetup_r+0x82>
 8007824:	06dd      	lsls	r5, r3, #27
 8007826:	d411      	bmi.n	800784c <__swsetup_r+0x50>
 8007828:	2309      	movs	r3, #9
 800782a:	6033      	str	r3, [r6, #0]
 800782c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007830:	81a3      	strh	r3, [r4, #12]
 8007832:	f04f 30ff 	mov.w	r0, #4294967295
 8007836:	e03e      	b.n	80078b6 <__swsetup_r+0xba>
 8007838:	4b25      	ldr	r3, [pc, #148]	; (80078d0 <__swsetup_r+0xd4>)
 800783a:	429c      	cmp	r4, r3
 800783c:	d101      	bne.n	8007842 <__swsetup_r+0x46>
 800783e:	68ac      	ldr	r4, [r5, #8]
 8007840:	e7eb      	b.n	800781a <__swsetup_r+0x1e>
 8007842:	4b24      	ldr	r3, [pc, #144]	; (80078d4 <__swsetup_r+0xd8>)
 8007844:	429c      	cmp	r4, r3
 8007846:	bf08      	it	eq
 8007848:	68ec      	ldreq	r4, [r5, #12]
 800784a:	e7e6      	b.n	800781a <__swsetup_r+0x1e>
 800784c:	0758      	lsls	r0, r3, #29
 800784e:	d512      	bpl.n	8007876 <__swsetup_r+0x7a>
 8007850:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007852:	b141      	cbz	r1, 8007866 <__swsetup_r+0x6a>
 8007854:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007858:	4299      	cmp	r1, r3
 800785a:	d002      	beq.n	8007862 <__swsetup_r+0x66>
 800785c:	4630      	mov	r0, r6
 800785e:	f001 faad 	bl	8008dbc <_free_r>
 8007862:	2300      	movs	r3, #0
 8007864:	6363      	str	r3, [r4, #52]	; 0x34
 8007866:	89a3      	ldrh	r3, [r4, #12]
 8007868:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800786c:	81a3      	strh	r3, [r4, #12]
 800786e:	2300      	movs	r3, #0
 8007870:	6063      	str	r3, [r4, #4]
 8007872:	6923      	ldr	r3, [r4, #16]
 8007874:	6023      	str	r3, [r4, #0]
 8007876:	89a3      	ldrh	r3, [r4, #12]
 8007878:	f043 0308 	orr.w	r3, r3, #8
 800787c:	81a3      	strh	r3, [r4, #12]
 800787e:	6923      	ldr	r3, [r4, #16]
 8007880:	b94b      	cbnz	r3, 8007896 <__swsetup_r+0x9a>
 8007882:	89a3      	ldrh	r3, [r4, #12]
 8007884:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800788c:	d003      	beq.n	8007896 <__swsetup_r+0x9a>
 800788e:	4621      	mov	r1, r4
 8007890:	4630      	mov	r0, r6
 8007892:	f000 fd6f 	bl	8008374 <__smakebuf_r>
 8007896:	89a0      	ldrh	r0, [r4, #12]
 8007898:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800789c:	f010 0301 	ands.w	r3, r0, #1
 80078a0:	d00a      	beq.n	80078b8 <__swsetup_r+0xbc>
 80078a2:	2300      	movs	r3, #0
 80078a4:	60a3      	str	r3, [r4, #8]
 80078a6:	6963      	ldr	r3, [r4, #20]
 80078a8:	425b      	negs	r3, r3
 80078aa:	61a3      	str	r3, [r4, #24]
 80078ac:	6923      	ldr	r3, [r4, #16]
 80078ae:	b943      	cbnz	r3, 80078c2 <__swsetup_r+0xc6>
 80078b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80078b4:	d1ba      	bne.n	800782c <__swsetup_r+0x30>
 80078b6:	bd70      	pop	{r4, r5, r6, pc}
 80078b8:	0781      	lsls	r1, r0, #30
 80078ba:	bf58      	it	pl
 80078bc:	6963      	ldrpl	r3, [r4, #20]
 80078be:	60a3      	str	r3, [r4, #8]
 80078c0:	e7f4      	b.n	80078ac <__swsetup_r+0xb0>
 80078c2:	2000      	movs	r0, #0
 80078c4:	e7f7      	b.n	80078b6 <__swsetup_r+0xba>
 80078c6:	bf00      	nop
 80078c8:	20000010 	.word	0x20000010
 80078cc:	08009d18 	.word	0x08009d18
 80078d0:	08009d38 	.word	0x08009d38
 80078d4:	08009cf8 	.word	0x08009cf8

080078d8 <__sflush_r>:
 80078d8:	898a      	ldrh	r2, [r1, #12]
 80078da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078de:	4605      	mov	r5, r0
 80078e0:	0710      	lsls	r0, r2, #28
 80078e2:	460c      	mov	r4, r1
 80078e4:	d458      	bmi.n	8007998 <__sflush_r+0xc0>
 80078e6:	684b      	ldr	r3, [r1, #4]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	dc05      	bgt.n	80078f8 <__sflush_r+0x20>
 80078ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	dc02      	bgt.n	80078f8 <__sflush_r+0x20>
 80078f2:	2000      	movs	r0, #0
 80078f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80078fa:	2e00      	cmp	r6, #0
 80078fc:	d0f9      	beq.n	80078f2 <__sflush_r+0x1a>
 80078fe:	2300      	movs	r3, #0
 8007900:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007904:	682f      	ldr	r7, [r5, #0]
 8007906:	602b      	str	r3, [r5, #0]
 8007908:	d032      	beq.n	8007970 <__sflush_r+0x98>
 800790a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800790c:	89a3      	ldrh	r3, [r4, #12]
 800790e:	075a      	lsls	r2, r3, #29
 8007910:	d505      	bpl.n	800791e <__sflush_r+0x46>
 8007912:	6863      	ldr	r3, [r4, #4]
 8007914:	1ac0      	subs	r0, r0, r3
 8007916:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007918:	b10b      	cbz	r3, 800791e <__sflush_r+0x46>
 800791a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800791c:	1ac0      	subs	r0, r0, r3
 800791e:	2300      	movs	r3, #0
 8007920:	4602      	mov	r2, r0
 8007922:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007924:	6a21      	ldr	r1, [r4, #32]
 8007926:	4628      	mov	r0, r5
 8007928:	47b0      	blx	r6
 800792a:	1c43      	adds	r3, r0, #1
 800792c:	89a3      	ldrh	r3, [r4, #12]
 800792e:	d106      	bne.n	800793e <__sflush_r+0x66>
 8007930:	6829      	ldr	r1, [r5, #0]
 8007932:	291d      	cmp	r1, #29
 8007934:	d82c      	bhi.n	8007990 <__sflush_r+0xb8>
 8007936:	4a2a      	ldr	r2, [pc, #168]	; (80079e0 <__sflush_r+0x108>)
 8007938:	40ca      	lsrs	r2, r1
 800793a:	07d6      	lsls	r6, r2, #31
 800793c:	d528      	bpl.n	8007990 <__sflush_r+0xb8>
 800793e:	2200      	movs	r2, #0
 8007940:	6062      	str	r2, [r4, #4]
 8007942:	04d9      	lsls	r1, r3, #19
 8007944:	6922      	ldr	r2, [r4, #16]
 8007946:	6022      	str	r2, [r4, #0]
 8007948:	d504      	bpl.n	8007954 <__sflush_r+0x7c>
 800794a:	1c42      	adds	r2, r0, #1
 800794c:	d101      	bne.n	8007952 <__sflush_r+0x7a>
 800794e:	682b      	ldr	r3, [r5, #0]
 8007950:	b903      	cbnz	r3, 8007954 <__sflush_r+0x7c>
 8007952:	6560      	str	r0, [r4, #84]	; 0x54
 8007954:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007956:	602f      	str	r7, [r5, #0]
 8007958:	2900      	cmp	r1, #0
 800795a:	d0ca      	beq.n	80078f2 <__sflush_r+0x1a>
 800795c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007960:	4299      	cmp	r1, r3
 8007962:	d002      	beq.n	800796a <__sflush_r+0x92>
 8007964:	4628      	mov	r0, r5
 8007966:	f001 fa29 	bl	8008dbc <_free_r>
 800796a:	2000      	movs	r0, #0
 800796c:	6360      	str	r0, [r4, #52]	; 0x34
 800796e:	e7c1      	b.n	80078f4 <__sflush_r+0x1c>
 8007970:	6a21      	ldr	r1, [r4, #32]
 8007972:	2301      	movs	r3, #1
 8007974:	4628      	mov	r0, r5
 8007976:	47b0      	blx	r6
 8007978:	1c41      	adds	r1, r0, #1
 800797a:	d1c7      	bne.n	800790c <__sflush_r+0x34>
 800797c:	682b      	ldr	r3, [r5, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d0c4      	beq.n	800790c <__sflush_r+0x34>
 8007982:	2b1d      	cmp	r3, #29
 8007984:	d001      	beq.n	800798a <__sflush_r+0xb2>
 8007986:	2b16      	cmp	r3, #22
 8007988:	d101      	bne.n	800798e <__sflush_r+0xb6>
 800798a:	602f      	str	r7, [r5, #0]
 800798c:	e7b1      	b.n	80078f2 <__sflush_r+0x1a>
 800798e:	89a3      	ldrh	r3, [r4, #12]
 8007990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007994:	81a3      	strh	r3, [r4, #12]
 8007996:	e7ad      	b.n	80078f4 <__sflush_r+0x1c>
 8007998:	690f      	ldr	r7, [r1, #16]
 800799a:	2f00      	cmp	r7, #0
 800799c:	d0a9      	beq.n	80078f2 <__sflush_r+0x1a>
 800799e:	0793      	lsls	r3, r2, #30
 80079a0:	680e      	ldr	r6, [r1, #0]
 80079a2:	bf08      	it	eq
 80079a4:	694b      	ldreq	r3, [r1, #20]
 80079a6:	600f      	str	r7, [r1, #0]
 80079a8:	bf18      	it	ne
 80079aa:	2300      	movne	r3, #0
 80079ac:	eba6 0807 	sub.w	r8, r6, r7
 80079b0:	608b      	str	r3, [r1, #8]
 80079b2:	f1b8 0f00 	cmp.w	r8, #0
 80079b6:	dd9c      	ble.n	80078f2 <__sflush_r+0x1a>
 80079b8:	6a21      	ldr	r1, [r4, #32]
 80079ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80079bc:	4643      	mov	r3, r8
 80079be:	463a      	mov	r2, r7
 80079c0:	4628      	mov	r0, r5
 80079c2:	47b0      	blx	r6
 80079c4:	2800      	cmp	r0, #0
 80079c6:	dc06      	bgt.n	80079d6 <__sflush_r+0xfe>
 80079c8:	89a3      	ldrh	r3, [r4, #12]
 80079ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079ce:	81a3      	strh	r3, [r4, #12]
 80079d0:	f04f 30ff 	mov.w	r0, #4294967295
 80079d4:	e78e      	b.n	80078f4 <__sflush_r+0x1c>
 80079d6:	4407      	add	r7, r0
 80079d8:	eba8 0800 	sub.w	r8, r8, r0
 80079dc:	e7e9      	b.n	80079b2 <__sflush_r+0xda>
 80079de:	bf00      	nop
 80079e0:	20400001 	.word	0x20400001

080079e4 <_fflush_r>:
 80079e4:	b538      	push	{r3, r4, r5, lr}
 80079e6:	690b      	ldr	r3, [r1, #16]
 80079e8:	4605      	mov	r5, r0
 80079ea:	460c      	mov	r4, r1
 80079ec:	b913      	cbnz	r3, 80079f4 <_fflush_r+0x10>
 80079ee:	2500      	movs	r5, #0
 80079f0:	4628      	mov	r0, r5
 80079f2:	bd38      	pop	{r3, r4, r5, pc}
 80079f4:	b118      	cbz	r0, 80079fe <_fflush_r+0x1a>
 80079f6:	6983      	ldr	r3, [r0, #24]
 80079f8:	b90b      	cbnz	r3, 80079fe <_fflush_r+0x1a>
 80079fa:	f000 f887 	bl	8007b0c <__sinit>
 80079fe:	4b14      	ldr	r3, [pc, #80]	; (8007a50 <_fflush_r+0x6c>)
 8007a00:	429c      	cmp	r4, r3
 8007a02:	d11b      	bne.n	8007a3c <_fflush_r+0x58>
 8007a04:	686c      	ldr	r4, [r5, #4]
 8007a06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d0ef      	beq.n	80079ee <_fflush_r+0xa>
 8007a0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007a10:	07d0      	lsls	r0, r2, #31
 8007a12:	d404      	bmi.n	8007a1e <_fflush_r+0x3a>
 8007a14:	0599      	lsls	r1, r3, #22
 8007a16:	d402      	bmi.n	8007a1e <_fflush_r+0x3a>
 8007a18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a1a:	f000 fc84 	bl	8008326 <__retarget_lock_acquire_recursive>
 8007a1e:	4628      	mov	r0, r5
 8007a20:	4621      	mov	r1, r4
 8007a22:	f7ff ff59 	bl	80078d8 <__sflush_r>
 8007a26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a28:	07da      	lsls	r2, r3, #31
 8007a2a:	4605      	mov	r5, r0
 8007a2c:	d4e0      	bmi.n	80079f0 <_fflush_r+0xc>
 8007a2e:	89a3      	ldrh	r3, [r4, #12]
 8007a30:	059b      	lsls	r3, r3, #22
 8007a32:	d4dd      	bmi.n	80079f0 <_fflush_r+0xc>
 8007a34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a36:	f000 fc77 	bl	8008328 <__retarget_lock_release_recursive>
 8007a3a:	e7d9      	b.n	80079f0 <_fflush_r+0xc>
 8007a3c:	4b05      	ldr	r3, [pc, #20]	; (8007a54 <_fflush_r+0x70>)
 8007a3e:	429c      	cmp	r4, r3
 8007a40:	d101      	bne.n	8007a46 <_fflush_r+0x62>
 8007a42:	68ac      	ldr	r4, [r5, #8]
 8007a44:	e7df      	b.n	8007a06 <_fflush_r+0x22>
 8007a46:	4b04      	ldr	r3, [pc, #16]	; (8007a58 <_fflush_r+0x74>)
 8007a48:	429c      	cmp	r4, r3
 8007a4a:	bf08      	it	eq
 8007a4c:	68ec      	ldreq	r4, [r5, #12]
 8007a4e:	e7da      	b.n	8007a06 <_fflush_r+0x22>
 8007a50:	08009d18 	.word	0x08009d18
 8007a54:	08009d38 	.word	0x08009d38
 8007a58:	08009cf8 	.word	0x08009cf8

08007a5c <std>:
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	b510      	push	{r4, lr}
 8007a60:	4604      	mov	r4, r0
 8007a62:	e9c0 3300 	strd	r3, r3, [r0]
 8007a66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a6a:	6083      	str	r3, [r0, #8]
 8007a6c:	8181      	strh	r1, [r0, #12]
 8007a6e:	6643      	str	r3, [r0, #100]	; 0x64
 8007a70:	81c2      	strh	r2, [r0, #14]
 8007a72:	6183      	str	r3, [r0, #24]
 8007a74:	4619      	mov	r1, r3
 8007a76:	2208      	movs	r2, #8
 8007a78:	305c      	adds	r0, #92	; 0x5c
 8007a7a:	f7fe fe07 	bl	800668c <memset>
 8007a7e:	4b05      	ldr	r3, [pc, #20]	; (8007a94 <std+0x38>)
 8007a80:	6263      	str	r3, [r4, #36]	; 0x24
 8007a82:	4b05      	ldr	r3, [pc, #20]	; (8007a98 <std+0x3c>)
 8007a84:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a86:	4b05      	ldr	r3, [pc, #20]	; (8007a9c <std+0x40>)
 8007a88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007a8a:	4b05      	ldr	r3, [pc, #20]	; (8007aa0 <std+0x44>)
 8007a8c:	6224      	str	r4, [r4, #32]
 8007a8e:	6323      	str	r3, [r4, #48]	; 0x30
 8007a90:	bd10      	pop	{r4, pc}
 8007a92:	bf00      	nop
 8007a94:	08009521 	.word	0x08009521
 8007a98:	08009543 	.word	0x08009543
 8007a9c:	0800957b 	.word	0x0800957b
 8007aa0:	0800959f 	.word	0x0800959f

08007aa4 <_cleanup_r>:
 8007aa4:	4901      	ldr	r1, [pc, #4]	; (8007aac <_cleanup_r+0x8>)
 8007aa6:	f000 b8af 	b.w	8007c08 <_fwalk_reent>
 8007aaa:	bf00      	nop
 8007aac:	080079e5 	.word	0x080079e5

08007ab0 <__sfmoreglue>:
 8007ab0:	b570      	push	{r4, r5, r6, lr}
 8007ab2:	1e4a      	subs	r2, r1, #1
 8007ab4:	2568      	movs	r5, #104	; 0x68
 8007ab6:	4355      	muls	r5, r2
 8007ab8:	460e      	mov	r6, r1
 8007aba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007abe:	f001 f9cd 	bl	8008e5c <_malloc_r>
 8007ac2:	4604      	mov	r4, r0
 8007ac4:	b140      	cbz	r0, 8007ad8 <__sfmoreglue+0x28>
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	e9c0 1600 	strd	r1, r6, [r0]
 8007acc:	300c      	adds	r0, #12
 8007ace:	60a0      	str	r0, [r4, #8]
 8007ad0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ad4:	f7fe fdda 	bl	800668c <memset>
 8007ad8:	4620      	mov	r0, r4
 8007ada:	bd70      	pop	{r4, r5, r6, pc}

08007adc <__sfp_lock_acquire>:
 8007adc:	4801      	ldr	r0, [pc, #4]	; (8007ae4 <__sfp_lock_acquire+0x8>)
 8007ade:	f000 bc22 	b.w	8008326 <__retarget_lock_acquire_recursive>
 8007ae2:	bf00      	nop
 8007ae4:	200046d8 	.word	0x200046d8

08007ae8 <__sfp_lock_release>:
 8007ae8:	4801      	ldr	r0, [pc, #4]	; (8007af0 <__sfp_lock_release+0x8>)
 8007aea:	f000 bc1d 	b.w	8008328 <__retarget_lock_release_recursive>
 8007aee:	bf00      	nop
 8007af0:	200046d8 	.word	0x200046d8

08007af4 <__sinit_lock_acquire>:
 8007af4:	4801      	ldr	r0, [pc, #4]	; (8007afc <__sinit_lock_acquire+0x8>)
 8007af6:	f000 bc16 	b.w	8008326 <__retarget_lock_acquire_recursive>
 8007afa:	bf00      	nop
 8007afc:	200046d3 	.word	0x200046d3

08007b00 <__sinit_lock_release>:
 8007b00:	4801      	ldr	r0, [pc, #4]	; (8007b08 <__sinit_lock_release+0x8>)
 8007b02:	f000 bc11 	b.w	8008328 <__retarget_lock_release_recursive>
 8007b06:	bf00      	nop
 8007b08:	200046d3 	.word	0x200046d3

08007b0c <__sinit>:
 8007b0c:	b510      	push	{r4, lr}
 8007b0e:	4604      	mov	r4, r0
 8007b10:	f7ff fff0 	bl	8007af4 <__sinit_lock_acquire>
 8007b14:	69a3      	ldr	r3, [r4, #24]
 8007b16:	b11b      	cbz	r3, 8007b20 <__sinit+0x14>
 8007b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b1c:	f7ff bff0 	b.w	8007b00 <__sinit_lock_release>
 8007b20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007b24:	6523      	str	r3, [r4, #80]	; 0x50
 8007b26:	4b13      	ldr	r3, [pc, #76]	; (8007b74 <__sinit+0x68>)
 8007b28:	4a13      	ldr	r2, [pc, #76]	; (8007b78 <__sinit+0x6c>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007b2e:	42a3      	cmp	r3, r4
 8007b30:	bf04      	itt	eq
 8007b32:	2301      	moveq	r3, #1
 8007b34:	61a3      	streq	r3, [r4, #24]
 8007b36:	4620      	mov	r0, r4
 8007b38:	f000 f820 	bl	8007b7c <__sfp>
 8007b3c:	6060      	str	r0, [r4, #4]
 8007b3e:	4620      	mov	r0, r4
 8007b40:	f000 f81c 	bl	8007b7c <__sfp>
 8007b44:	60a0      	str	r0, [r4, #8]
 8007b46:	4620      	mov	r0, r4
 8007b48:	f000 f818 	bl	8007b7c <__sfp>
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	60e0      	str	r0, [r4, #12]
 8007b50:	2104      	movs	r1, #4
 8007b52:	6860      	ldr	r0, [r4, #4]
 8007b54:	f7ff ff82 	bl	8007a5c <std>
 8007b58:	68a0      	ldr	r0, [r4, #8]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	2109      	movs	r1, #9
 8007b5e:	f7ff ff7d 	bl	8007a5c <std>
 8007b62:	68e0      	ldr	r0, [r4, #12]
 8007b64:	2202      	movs	r2, #2
 8007b66:	2112      	movs	r1, #18
 8007b68:	f7ff ff78 	bl	8007a5c <std>
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	61a3      	str	r3, [r4, #24]
 8007b70:	e7d2      	b.n	8007b18 <__sinit+0xc>
 8007b72:	bf00      	nop
 8007b74:	08009c98 	.word	0x08009c98
 8007b78:	08007aa5 	.word	0x08007aa5

08007b7c <__sfp>:
 8007b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b7e:	4607      	mov	r7, r0
 8007b80:	f7ff ffac 	bl	8007adc <__sfp_lock_acquire>
 8007b84:	4b1e      	ldr	r3, [pc, #120]	; (8007c00 <__sfp+0x84>)
 8007b86:	681e      	ldr	r6, [r3, #0]
 8007b88:	69b3      	ldr	r3, [r6, #24]
 8007b8a:	b913      	cbnz	r3, 8007b92 <__sfp+0x16>
 8007b8c:	4630      	mov	r0, r6
 8007b8e:	f7ff ffbd 	bl	8007b0c <__sinit>
 8007b92:	3648      	adds	r6, #72	; 0x48
 8007b94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	d503      	bpl.n	8007ba4 <__sfp+0x28>
 8007b9c:	6833      	ldr	r3, [r6, #0]
 8007b9e:	b30b      	cbz	r3, 8007be4 <__sfp+0x68>
 8007ba0:	6836      	ldr	r6, [r6, #0]
 8007ba2:	e7f7      	b.n	8007b94 <__sfp+0x18>
 8007ba4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ba8:	b9d5      	cbnz	r5, 8007be0 <__sfp+0x64>
 8007baa:	4b16      	ldr	r3, [pc, #88]	; (8007c04 <__sfp+0x88>)
 8007bac:	60e3      	str	r3, [r4, #12]
 8007bae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007bb2:	6665      	str	r5, [r4, #100]	; 0x64
 8007bb4:	f000 fbb6 	bl	8008324 <__retarget_lock_init_recursive>
 8007bb8:	f7ff ff96 	bl	8007ae8 <__sfp_lock_release>
 8007bbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007bc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007bc4:	6025      	str	r5, [r4, #0]
 8007bc6:	61a5      	str	r5, [r4, #24]
 8007bc8:	2208      	movs	r2, #8
 8007bca:	4629      	mov	r1, r5
 8007bcc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007bd0:	f7fe fd5c 	bl	800668c <memset>
 8007bd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007bd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007bdc:	4620      	mov	r0, r4
 8007bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007be0:	3468      	adds	r4, #104	; 0x68
 8007be2:	e7d9      	b.n	8007b98 <__sfp+0x1c>
 8007be4:	2104      	movs	r1, #4
 8007be6:	4638      	mov	r0, r7
 8007be8:	f7ff ff62 	bl	8007ab0 <__sfmoreglue>
 8007bec:	4604      	mov	r4, r0
 8007bee:	6030      	str	r0, [r6, #0]
 8007bf0:	2800      	cmp	r0, #0
 8007bf2:	d1d5      	bne.n	8007ba0 <__sfp+0x24>
 8007bf4:	f7ff ff78 	bl	8007ae8 <__sfp_lock_release>
 8007bf8:	230c      	movs	r3, #12
 8007bfa:	603b      	str	r3, [r7, #0]
 8007bfc:	e7ee      	b.n	8007bdc <__sfp+0x60>
 8007bfe:	bf00      	nop
 8007c00:	08009c98 	.word	0x08009c98
 8007c04:	ffff0001 	.word	0xffff0001

08007c08 <_fwalk_reent>:
 8007c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c0c:	4606      	mov	r6, r0
 8007c0e:	4688      	mov	r8, r1
 8007c10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007c14:	2700      	movs	r7, #0
 8007c16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c1a:	f1b9 0901 	subs.w	r9, r9, #1
 8007c1e:	d505      	bpl.n	8007c2c <_fwalk_reent+0x24>
 8007c20:	6824      	ldr	r4, [r4, #0]
 8007c22:	2c00      	cmp	r4, #0
 8007c24:	d1f7      	bne.n	8007c16 <_fwalk_reent+0xe>
 8007c26:	4638      	mov	r0, r7
 8007c28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c2c:	89ab      	ldrh	r3, [r5, #12]
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d907      	bls.n	8007c42 <_fwalk_reent+0x3a>
 8007c32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c36:	3301      	adds	r3, #1
 8007c38:	d003      	beq.n	8007c42 <_fwalk_reent+0x3a>
 8007c3a:	4629      	mov	r1, r5
 8007c3c:	4630      	mov	r0, r6
 8007c3e:	47c0      	blx	r8
 8007c40:	4307      	orrs	r7, r0
 8007c42:	3568      	adds	r5, #104	; 0x68
 8007c44:	e7e9      	b.n	8007c1a <_fwalk_reent+0x12>

08007c46 <rshift>:
 8007c46:	6903      	ldr	r3, [r0, #16]
 8007c48:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007c4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c50:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007c54:	f100 0414 	add.w	r4, r0, #20
 8007c58:	dd45      	ble.n	8007ce6 <rshift+0xa0>
 8007c5a:	f011 011f 	ands.w	r1, r1, #31
 8007c5e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007c62:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007c66:	d10c      	bne.n	8007c82 <rshift+0x3c>
 8007c68:	f100 0710 	add.w	r7, r0, #16
 8007c6c:	4629      	mov	r1, r5
 8007c6e:	42b1      	cmp	r1, r6
 8007c70:	d334      	bcc.n	8007cdc <rshift+0x96>
 8007c72:	1a9b      	subs	r3, r3, r2
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	1eea      	subs	r2, r5, #3
 8007c78:	4296      	cmp	r6, r2
 8007c7a:	bf38      	it	cc
 8007c7c:	2300      	movcc	r3, #0
 8007c7e:	4423      	add	r3, r4
 8007c80:	e015      	b.n	8007cae <rshift+0x68>
 8007c82:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007c86:	f1c1 0820 	rsb	r8, r1, #32
 8007c8a:	40cf      	lsrs	r7, r1
 8007c8c:	f105 0e04 	add.w	lr, r5, #4
 8007c90:	46a1      	mov	r9, r4
 8007c92:	4576      	cmp	r6, lr
 8007c94:	46f4      	mov	ip, lr
 8007c96:	d815      	bhi.n	8007cc4 <rshift+0x7e>
 8007c98:	1a9b      	subs	r3, r3, r2
 8007c9a:	009a      	lsls	r2, r3, #2
 8007c9c:	3a04      	subs	r2, #4
 8007c9e:	3501      	adds	r5, #1
 8007ca0:	42ae      	cmp	r6, r5
 8007ca2:	bf38      	it	cc
 8007ca4:	2200      	movcc	r2, #0
 8007ca6:	18a3      	adds	r3, r4, r2
 8007ca8:	50a7      	str	r7, [r4, r2]
 8007caa:	b107      	cbz	r7, 8007cae <rshift+0x68>
 8007cac:	3304      	adds	r3, #4
 8007cae:	1b1a      	subs	r2, r3, r4
 8007cb0:	42a3      	cmp	r3, r4
 8007cb2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007cb6:	bf08      	it	eq
 8007cb8:	2300      	moveq	r3, #0
 8007cba:	6102      	str	r2, [r0, #16]
 8007cbc:	bf08      	it	eq
 8007cbe:	6143      	streq	r3, [r0, #20]
 8007cc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007cc4:	f8dc c000 	ldr.w	ip, [ip]
 8007cc8:	fa0c fc08 	lsl.w	ip, ip, r8
 8007ccc:	ea4c 0707 	orr.w	r7, ip, r7
 8007cd0:	f849 7b04 	str.w	r7, [r9], #4
 8007cd4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007cd8:	40cf      	lsrs	r7, r1
 8007cda:	e7da      	b.n	8007c92 <rshift+0x4c>
 8007cdc:	f851 cb04 	ldr.w	ip, [r1], #4
 8007ce0:	f847 cf04 	str.w	ip, [r7, #4]!
 8007ce4:	e7c3      	b.n	8007c6e <rshift+0x28>
 8007ce6:	4623      	mov	r3, r4
 8007ce8:	e7e1      	b.n	8007cae <rshift+0x68>

08007cea <__hexdig_fun>:
 8007cea:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007cee:	2b09      	cmp	r3, #9
 8007cf0:	d802      	bhi.n	8007cf8 <__hexdig_fun+0xe>
 8007cf2:	3820      	subs	r0, #32
 8007cf4:	b2c0      	uxtb	r0, r0
 8007cf6:	4770      	bx	lr
 8007cf8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007cfc:	2b05      	cmp	r3, #5
 8007cfe:	d801      	bhi.n	8007d04 <__hexdig_fun+0x1a>
 8007d00:	3847      	subs	r0, #71	; 0x47
 8007d02:	e7f7      	b.n	8007cf4 <__hexdig_fun+0xa>
 8007d04:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007d08:	2b05      	cmp	r3, #5
 8007d0a:	d801      	bhi.n	8007d10 <__hexdig_fun+0x26>
 8007d0c:	3827      	subs	r0, #39	; 0x27
 8007d0e:	e7f1      	b.n	8007cf4 <__hexdig_fun+0xa>
 8007d10:	2000      	movs	r0, #0
 8007d12:	4770      	bx	lr

08007d14 <__gethex>:
 8007d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d18:	ed2d 8b02 	vpush	{d8}
 8007d1c:	b089      	sub	sp, #36	; 0x24
 8007d1e:	ee08 0a10 	vmov	s16, r0
 8007d22:	9304      	str	r3, [sp, #16]
 8007d24:	4bbc      	ldr	r3, [pc, #752]	; (8008018 <__gethex+0x304>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	9301      	str	r3, [sp, #4]
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	468b      	mov	fp, r1
 8007d2e:	4690      	mov	r8, r2
 8007d30:	f7f8 fa56 	bl	80001e0 <strlen>
 8007d34:	9b01      	ldr	r3, [sp, #4]
 8007d36:	f8db 2000 	ldr.w	r2, [fp]
 8007d3a:	4403      	add	r3, r0
 8007d3c:	4682      	mov	sl, r0
 8007d3e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007d42:	9305      	str	r3, [sp, #20]
 8007d44:	1c93      	adds	r3, r2, #2
 8007d46:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007d4a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007d4e:	32fe      	adds	r2, #254	; 0xfe
 8007d50:	18d1      	adds	r1, r2, r3
 8007d52:	461f      	mov	r7, r3
 8007d54:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007d58:	9100      	str	r1, [sp, #0]
 8007d5a:	2830      	cmp	r0, #48	; 0x30
 8007d5c:	d0f8      	beq.n	8007d50 <__gethex+0x3c>
 8007d5e:	f7ff ffc4 	bl	8007cea <__hexdig_fun>
 8007d62:	4604      	mov	r4, r0
 8007d64:	2800      	cmp	r0, #0
 8007d66:	d13a      	bne.n	8007dde <__gethex+0xca>
 8007d68:	9901      	ldr	r1, [sp, #4]
 8007d6a:	4652      	mov	r2, sl
 8007d6c:	4638      	mov	r0, r7
 8007d6e:	f7fe fdf6 	bl	800695e <strncmp>
 8007d72:	4605      	mov	r5, r0
 8007d74:	2800      	cmp	r0, #0
 8007d76:	d168      	bne.n	8007e4a <__gethex+0x136>
 8007d78:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007d7c:	eb07 060a 	add.w	r6, r7, sl
 8007d80:	f7ff ffb3 	bl	8007cea <__hexdig_fun>
 8007d84:	2800      	cmp	r0, #0
 8007d86:	d062      	beq.n	8007e4e <__gethex+0x13a>
 8007d88:	4633      	mov	r3, r6
 8007d8a:	7818      	ldrb	r0, [r3, #0]
 8007d8c:	2830      	cmp	r0, #48	; 0x30
 8007d8e:	461f      	mov	r7, r3
 8007d90:	f103 0301 	add.w	r3, r3, #1
 8007d94:	d0f9      	beq.n	8007d8a <__gethex+0x76>
 8007d96:	f7ff ffa8 	bl	8007cea <__hexdig_fun>
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	fab0 f480 	clz	r4, r0
 8007da0:	0964      	lsrs	r4, r4, #5
 8007da2:	4635      	mov	r5, r6
 8007da4:	9300      	str	r3, [sp, #0]
 8007da6:	463a      	mov	r2, r7
 8007da8:	4616      	mov	r6, r2
 8007daa:	3201      	adds	r2, #1
 8007dac:	7830      	ldrb	r0, [r6, #0]
 8007dae:	f7ff ff9c 	bl	8007cea <__hexdig_fun>
 8007db2:	2800      	cmp	r0, #0
 8007db4:	d1f8      	bne.n	8007da8 <__gethex+0x94>
 8007db6:	9901      	ldr	r1, [sp, #4]
 8007db8:	4652      	mov	r2, sl
 8007dba:	4630      	mov	r0, r6
 8007dbc:	f7fe fdcf 	bl	800695e <strncmp>
 8007dc0:	b980      	cbnz	r0, 8007de4 <__gethex+0xd0>
 8007dc2:	b94d      	cbnz	r5, 8007dd8 <__gethex+0xc4>
 8007dc4:	eb06 050a 	add.w	r5, r6, sl
 8007dc8:	462a      	mov	r2, r5
 8007dca:	4616      	mov	r6, r2
 8007dcc:	3201      	adds	r2, #1
 8007dce:	7830      	ldrb	r0, [r6, #0]
 8007dd0:	f7ff ff8b 	bl	8007cea <__hexdig_fun>
 8007dd4:	2800      	cmp	r0, #0
 8007dd6:	d1f8      	bne.n	8007dca <__gethex+0xb6>
 8007dd8:	1bad      	subs	r5, r5, r6
 8007dda:	00ad      	lsls	r5, r5, #2
 8007ddc:	e004      	b.n	8007de8 <__gethex+0xd4>
 8007dde:	2400      	movs	r4, #0
 8007de0:	4625      	mov	r5, r4
 8007de2:	e7e0      	b.n	8007da6 <__gethex+0x92>
 8007de4:	2d00      	cmp	r5, #0
 8007de6:	d1f7      	bne.n	8007dd8 <__gethex+0xc4>
 8007de8:	7833      	ldrb	r3, [r6, #0]
 8007dea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007dee:	2b50      	cmp	r3, #80	; 0x50
 8007df0:	d13b      	bne.n	8007e6a <__gethex+0x156>
 8007df2:	7873      	ldrb	r3, [r6, #1]
 8007df4:	2b2b      	cmp	r3, #43	; 0x2b
 8007df6:	d02c      	beq.n	8007e52 <__gethex+0x13e>
 8007df8:	2b2d      	cmp	r3, #45	; 0x2d
 8007dfa:	d02e      	beq.n	8007e5a <__gethex+0x146>
 8007dfc:	1c71      	adds	r1, r6, #1
 8007dfe:	f04f 0900 	mov.w	r9, #0
 8007e02:	7808      	ldrb	r0, [r1, #0]
 8007e04:	f7ff ff71 	bl	8007cea <__hexdig_fun>
 8007e08:	1e43      	subs	r3, r0, #1
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	2b18      	cmp	r3, #24
 8007e0e:	d82c      	bhi.n	8007e6a <__gethex+0x156>
 8007e10:	f1a0 0210 	sub.w	r2, r0, #16
 8007e14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007e18:	f7ff ff67 	bl	8007cea <__hexdig_fun>
 8007e1c:	1e43      	subs	r3, r0, #1
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	2b18      	cmp	r3, #24
 8007e22:	d91d      	bls.n	8007e60 <__gethex+0x14c>
 8007e24:	f1b9 0f00 	cmp.w	r9, #0
 8007e28:	d000      	beq.n	8007e2c <__gethex+0x118>
 8007e2a:	4252      	negs	r2, r2
 8007e2c:	4415      	add	r5, r2
 8007e2e:	f8cb 1000 	str.w	r1, [fp]
 8007e32:	b1e4      	cbz	r4, 8007e6e <__gethex+0x15a>
 8007e34:	9b00      	ldr	r3, [sp, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	bf14      	ite	ne
 8007e3a:	2700      	movne	r7, #0
 8007e3c:	2706      	moveq	r7, #6
 8007e3e:	4638      	mov	r0, r7
 8007e40:	b009      	add	sp, #36	; 0x24
 8007e42:	ecbd 8b02 	vpop	{d8}
 8007e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e4a:	463e      	mov	r6, r7
 8007e4c:	4625      	mov	r5, r4
 8007e4e:	2401      	movs	r4, #1
 8007e50:	e7ca      	b.n	8007de8 <__gethex+0xd4>
 8007e52:	f04f 0900 	mov.w	r9, #0
 8007e56:	1cb1      	adds	r1, r6, #2
 8007e58:	e7d3      	b.n	8007e02 <__gethex+0xee>
 8007e5a:	f04f 0901 	mov.w	r9, #1
 8007e5e:	e7fa      	b.n	8007e56 <__gethex+0x142>
 8007e60:	230a      	movs	r3, #10
 8007e62:	fb03 0202 	mla	r2, r3, r2, r0
 8007e66:	3a10      	subs	r2, #16
 8007e68:	e7d4      	b.n	8007e14 <__gethex+0x100>
 8007e6a:	4631      	mov	r1, r6
 8007e6c:	e7df      	b.n	8007e2e <__gethex+0x11a>
 8007e6e:	1bf3      	subs	r3, r6, r7
 8007e70:	3b01      	subs	r3, #1
 8007e72:	4621      	mov	r1, r4
 8007e74:	2b07      	cmp	r3, #7
 8007e76:	dc0b      	bgt.n	8007e90 <__gethex+0x17c>
 8007e78:	ee18 0a10 	vmov	r0, s16
 8007e7c:	f000 fad4 	bl	8008428 <_Balloc>
 8007e80:	4604      	mov	r4, r0
 8007e82:	b940      	cbnz	r0, 8007e96 <__gethex+0x182>
 8007e84:	4b65      	ldr	r3, [pc, #404]	; (800801c <__gethex+0x308>)
 8007e86:	4602      	mov	r2, r0
 8007e88:	21de      	movs	r1, #222	; 0xde
 8007e8a:	4865      	ldr	r0, [pc, #404]	; (8008020 <__gethex+0x30c>)
 8007e8c:	f001 fbaa 	bl	80095e4 <__assert_func>
 8007e90:	3101      	adds	r1, #1
 8007e92:	105b      	asrs	r3, r3, #1
 8007e94:	e7ee      	b.n	8007e74 <__gethex+0x160>
 8007e96:	f100 0914 	add.w	r9, r0, #20
 8007e9a:	f04f 0b00 	mov.w	fp, #0
 8007e9e:	f1ca 0301 	rsb	r3, sl, #1
 8007ea2:	f8cd 9008 	str.w	r9, [sp, #8]
 8007ea6:	f8cd b000 	str.w	fp, [sp]
 8007eaa:	9306      	str	r3, [sp, #24]
 8007eac:	42b7      	cmp	r7, r6
 8007eae:	d340      	bcc.n	8007f32 <__gethex+0x21e>
 8007eb0:	9802      	ldr	r0, [sp, #8]
 8007eb2:	9b00      	ldr	r3, [sp, #0]
 8007eb4:	f840 3b04 	str.w	r3, [r0], #4
 8007eb8:	eba0 0009 	sub.w	r0, r0, r9
 8007ebc:	1080      	asrs	r0, r0, #2
 8007ebe:	0146      	lsls	r6, r0, #5
 8007ec0:	6120      	str	r0, [r4, #16]
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f000 fba6 	bl	8008614 <__hi0bits>
 8007ec8:	1a30      	subs	r0, r6, r0
 8007eca:	f8d8 6000 	ldr.w	r6, [r8]
 8007ece:	42b0      	cmp	r0, r6
 8007ed0:	dd63      	ble.n	8007f9a <__gethex+0x286>
 8007ed2:	1b87      	subs	r7, r0, r6
 8007ed4:	4639      	mov	r1, r7
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	f000 ff40 	bl	8008d5c <__any_on>
 8007edc:	4682      	mov	sl, r0
 8007ede:	b1a8      	cbz	r0, 8007f0c <__gethex+0x1f8>
 8007ee0:	1e7b      	subs	r3, r7, #1
 8007ee2:	1159      	asrs	r1, r3, #5
 8007ee4:	f003 021f 	and.w	r2, r3, #31
 8007ee8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007eec:	f04f 0a01 	mov.w	sl, #1
 8007ef0:	fa0a f202 	lsl.w	r2, sl, r2
 8007ef4:	420a      	tst	r2, r1
 8007ef6:	d009      	beq.n	8007f0c <__gethex+0x1f8>
 8007ef8:	4553      	cmp	r3, sl
 8007efa:	dd05      	ble.n	8007f08 <__gethex+0x1f4>
 8007efc:	1eb9      	subs	r1, r7, #2
 8007efe:	4620      	mov	r0, r4
 8007f00:	f000 ff2c 	bl	8008d5c <__any_on>
 8007f04:	2800      	cmp	r0, #0
 8007f06:	d145      	bne.n	8007f94 <__gethex+0x280>
 8007f08:	f04f 0a02 	mov.w	sl, #2
 8007f0c:	4639      	mov	r1, r7
 8007f0e:	4620      	mov	r0, r4
 8007f10:	f7ff fe99 	bl	8007c46 <rshift>
 8007f14:	443d      	add	r5, r7
 8007f16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007f1a:	42ab      	cmp	r3, r5
 8007f1c:	da4c      	bge.n	8007fb8 <__gethex+0x2a4>
 8007f1e:	ee18 0a10 	vmov	r0, s16
 8007f22:	4621      	mov	r1, r4
 8007f24:	f000 fac0 	bl	80084a8 <_Bfree>
 8007f28:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	6013      	str	r3, [r2, #0]
 8007f2e:	27a3      	movs	r7, #163	; 0xa3
 8007f30:	e785      	b.n	8007e3e <__gethex+0x12a>
 8007f32:	1e73      	subs	r3, r6, #1
 8007f34:	9a05      	ldr	r2, [sp, #20]
 8007f36:	9303      	str	r3, [sp, #12]
 8007f38:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d019      	beq.n	8007f74 <__gethex+0x260>
 8007f40:	f1bb 0f20 	cmp.w	fp, #32
 8007f44:	d107      	bne.n	8007f56 <__gethex+0x242>
 8007f46:	9b02      	ldr	r3, [sp, #8]
 8007f48:	9a00      	ldr	r2, [sp, #0]
 8007f4a:	f843 2b04 	str.w	r2, [r3], #4
 8007f4e:	9302      	str	r3, [sp, #8]
 8007f50:	2300      	movs	r3, #0
 8007f52:	9300      	str	r3, [sp, #0]
 8007f54:	469b      	mov	fp, r3
 8007f56:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007f5a:	f7ff fec6 	bl	8007cea <__hexdig_fun>
 8007f5e:	9b00      	ldr	r3, [sp, #0]
 8007f60:	f000 000f 	and.w	r0, r0, #15
 8007f64:	fa00 f00b 	lsl.w	r0, r0, fp
 8007f68:	4303      	orrs	r3, r0
 8007f6a:	9300      	str	r3, [sp, #0]
 8007f6c:	f10b 0b04 	add.w	fp, fp, #4
 8007f70:	9b03      	ldr	r3, [sp, #12]
 8007f72:	e00d      	b.n	8007f90 <__gethex+0x27c>
 8007f74:	9b03      	ldr	r3, [sp, #12]
 8007f76:	9a06      	ldr	r2, [sp, #24]
 8007f78:	4413      	add	r3, r2
 8007f7a:	42bb      	cmp	r3, r7
 8007f7c:	d3e0      	bcc.n	8007f40 <__gethex+0x22c>
 8007f7e:	4618      	mov	r0, r3
 8007f80:	9901      	ldr	r1, [sp, #4]
 8007f82:	9307      	str	r3, [sp, #28]
 8007f84:	4652      	mov	r2, sl
 8007f86:	f7fe fcea 	bl	800695e <strncmp>
 8007f8a:	9b07      	ldr	r3, [sp, #28]
 8007f8c:	2800      	cmp	r0, #0
 8007f8e:	d1d7      	bne.n	8007f40 <__gethex+0x22c>
 8007f90:	461e      	mov	r6, r3
 8007f92:	e78b      	b.n	8007eac <__gethex+0x198>
 8007f94:	f04f 0a03 	mov.w	sl, #3
 8007f98:	e7b8      	b.n	8007f0c <__gethex+0x1f8>
 8007f9a:	da0a      	bge.n	8007fb2 <__gethex+0x29e>
 8007f9c:	1a37      	subs	r7, r6, r0
 8007f9e:	4621      	mov	r1, r4
 8007fa0:	ee18 0a10 	vmov	r0, s16
 8007fa4:	463a      	mov	r2, r7
 8007fa6:	f000 fc9b 	bl	80088e0 <__lshift>
 8007faa:	1bed      	subs	r5, r5, r7
 8007fac:	4604      	mov	r4, r0
 8007fae:	f100 0914 	add.w	r9, r0, #20
 8007fb2:	f04f 0a00 	mov.w	sl, #0
 8007fb6:	e7ae      	b.n	8007f16 <__gethex+0x202>
 8007fb8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007fbc:	42a8      	cmp	r0, r5
 8007fbe:	dd72      	ble.n	80080a6 <__gethex+0x392>
 8007fc0:	1b45      	subs	r5, r0, r5
 8007fc2:	42ae      	cmp	r6, r5
 8007fc4:	dc36      	bgt.n	8008034 <__gethex+0x320>
 8007fc6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007fca:	2b02      	cmp	r3, #2
 8007fcc:	d02a      	beq.n	8008024 <__gethex+0x310>
 8007fce:	2b03      	cmp	r3, #3
 8007fd0:	d02c      	beq.n	800802c <__gethex+0x318>
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d115      	bne.n	8008002 <__gethex+0x2ee>
 8007fd6:	42ae      	cmp	r6, r5
 8007fd8:	d113      	bne.n	8008002 <__gethex+0x2ee>
 8007fda:	2e01      	cmp	r6, #1
 8007fdc:	d10b      	bne.n	8007ff6 <__gethex+0x2e2>
 8007fde:	9a04      	ldr	r2, [sp, #16]
 8007fe0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007fe4:	6013      	str	r3, [r2, #0]
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	6123      	str	r3, [r4, #16]
 8007fea:	f8c9 3000 	str.w	r3, [r9]
 8007fee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007ff0:	2762      	movs	r7, #98	; 0x62
 8007ff2:	601c      	str	r4, [r3, #0]
 8007ff4:	e723      	b.n	8007e3e <__gethex+0x12a>
 8007ff6:	1e71      	subs	r1, r6, #1
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	f000 feaf 	bl	8008d5c <__any_on>
 8007ffe:	2800      	cmp	r0, #0
 8008000:	d1ed      	bne.n	8007fde <__gethex+0x2ca>
 8008002:	ee18 0a10 	vmov	r0, s16
 8008006:	4621      	mov	r1, r4
 8008008:	f000 fa4e 	bl	80084a8 <_Bfree>
 800800c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800800e:	2300      	movs	r3, #0
 8008010:	6013      	str	r3, [r2, #0]
 8008012:	2750      	movs	r7, #80	; 0x50
 8008014:	e713      	b.n	8007e3e <__gethex+0x12a>
 8008016:	bf00      	nop
 8008018:	08009dd4 	.word	0x08009dd4
 800801c:	08009d58 	.word	0x08009d58
 8008020:	08009d69 	.word	0x08009d69
 8008024:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008026:	2b00      	cmp	r3, #0
 8008028:	d1eb      	bne.n	8008002 <__gethex+0x2ee>
 800802a:	e7d8      	b.n	8007fde <__gethex+0x2ca>
 800802c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800802e:	2b00      	cmp	r3, #0
 8008030:	d1d5      	bne.n	8007fde <__gethex+0x2ca>
 8008032:	e7e6      	b.n	8008002 <__gethex+0x2ee>
 8008034:	1e6f      	subs	r7, r5, #1
 8008036:	f1ba 0f00 	cmp.w	sl, #0
 800803a:	d131      	bne.n	80080a0 <__gethex+0x38c>
 800803c:	b127      	cbz	r7, 8008048 <__gethex+0x334>
 800803e:	4639      	mov	r1, r7
 8008040:	4620      	mov	r0, r4
 8008042:	f000 fe8b 	bl	8008d5c <__any_on>
 8008046:	4682      	mov	sl, r0
 8008048:	117b      	asrs	r3, r7, #5
 800804a:	2101      	movs	r1, #1
 800804c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008050:	f007 071f 	and.w	r7, r7, #31
 8008054:	fa01 f707 	lsl.w	r7, r1, r7
 8008058:	421f      	tst	r7, r3
 800805a:	4629      	mov	r1, r5
 800805c:	4620      	mov	r0, r4
 800805e:	bf18      	it	ne
 8008060:	f04a 0a02 	orrne.w	sl, sl, #2
 8008064:	1b76      	subs	r6, r6, r5
 8008066:	f7ff fdee 	bl	8007c46 <rshift>
 800806a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800806e:	2702      	movs	r7, #2
 8008070:	f1ba 0f00 	cmp.w	sl, #0
 8008074:	d048      	beq.n	8008108 <__gethex+0x3f4>
 8008076:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800807a:	2b02      	cmp	r3, #2
 800807c:	d015      	beq.n	80080aa <__gethex+0x396>
 800807e:	2b03      	cmp	r3, #3
 8008080:	d017      	beq.n	80080b2 <__gethex+0x39e>
 8008082:	2b01      	cmp	r3, #1
 8008084:	d109      	bne.n	800809a <__gethex+0x386>
 8008086:	f01a 0f02 	tst.w	sl, #2
 800808a:	d006      	beq.n	800809a <__gethex+0x386>
 800808c:	f8d9 0000 	ldr.w	r0, [r9]
 8008090:	ea4a 0a00 	orr.w	sl, sl, r0
 8008094:	f01a 0f01 	tst.w	sl, #1
 8008098:	d10e      	bne.n	80080b8 <__gethex+0x3a4>
 800809a:	f047 0710 	orr.w	r7, r7, #16
 800809e:	e033      	b.n	8008108 <__gethex+0x3f4>
 80080a0:	f04f 0a01 	mov.w	sl, #1
 80080a4:	e7d0      	b.n	8008048 <__gethex+0x334>
 80080a6:	2701      	movs	r7, #1
 80080a8:	e7e2      	b.n	8008070 <__gethex+0x35c>
 80080aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80080ac:	f1c3 0301 	rsb	r3, r3, #1
 80080b0:	9315      	str	r3, [sp, #84]	; 0x54
 80080b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d0f0      	beq.n	800809a <__gethex+0x386>
 80080b8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80080bc:	f104 0314 	add.w	r3, r4, #20
 80080c0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80080c4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80080c8:	f04f 0c00 	mov.w	ip, #0
 80080cc:	4618      	mov	r0, r3
 80080ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80080d2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80080d6:	d01c      	beq.n	8008112 <__gethex+0x3fe>
 80080d8:	3201      	adds	r2, #1
 80080da:	6002      	str	r2, [r0, #0]
 80080dc:	2f02      	cmp	r7, #2
 80080de:	f104 0314 	add.w	r3, r4, #20
 80080e2:	d13f      	bne.n	8008164 <__gethex+0x450>
 80080e4:	f8d8 2000 	ldr.w	r2, [r8]
 80080e8:	3a01      	subs	r2, #1
 80080ea:	42b2      	cmp	r2, r6
 80080ec:	d10a      	bne.n	8008104 <__gethex+0x3f0>
 80080ee:	1171      	asrs	r1, r6, #5
 80080f0:	2201      	movs	r2, #1
 80080f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80080f6:	f006 061f 	and.w	r6, r6, #31
 80080fa:	fa02 f606 	lsl.w	r6, r2, r6
 80080fe:	421e      	tst	r6, r3
 8008100:	bf18      	it	ne
 8008102:	4617      	movne	r7, r2
 8008104:	f047 0720 	orr.w	r7, r7, #32
 8008108:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800810a:	601c      	str	r4, [r3, #0]
 800810c:	9b04      	ldr	r3, [sp, #16]
 800810e:	601d      	str	r5, [r3, #0]
 8008110:	e695      	b.n	8007e3e <__gethex+0x12a>
 8008112:	4299      	cmp	r1, r3
 8008114:	f843 cc04 	str.w	ip, [r3, #-4]
 8008118:	d8d8      	bhi.n	80080cc <__gethex+0x3b8>
 800811a:	68a3      	ldr	r3, [r4, #8]
 800811c:	459b      	cmp	fp, r3
 800811e:	db19      	blt.n	8008154 <__gethex+0x440>
 8008120:	6861      	ldr	r1, [r4, #4]
 8008122:	ee18 0a10 	vmov	r0, s16
 8008126:	3101      	adds	r1, #1
 8008128:	f000 f97e 	bl	8008428 <_Balloc>
 800812c:	4681      	mov	r9, r0
 800812e:	b918      	cbnz	r0, 8008138 <__gethex+0x424>
 8008130:	4b1a      	ldr	r3, [pc, #104]	; (800819c <__gethex+0x488>)
 8008132:	4602      	mov	r2, r0
 8008134:	2184      	movs	r1, #132	; 0x84
 8008136:	e6a8      	b.n	8007e8a <__gethex+0x176>
 8008138:	6922      	ldr	r2, [r4, #16]
 800813a:	3202      	adds	r2, #2
 800813c:	f104 010c 	add.w	r1, r4, #12
 8008140:	0092      	lsls	r2, r2, #2
 8008142:	300c      	adds	r0, #12
 8008144:	f7fe fa94 	bl	8006670 <memcpy>
 8008148:	4621      	mov	r1, r4
 800814a:	ee18 0a10 	vmov	r0, s16
 800814e:	f000 f9ab 	bl	80084a8 <_Bfree>
 8008152:	464c      	mov	r4, r9
 8008154:	6923      	ldr	r3, [r4, #16]
 8008156:	1c5a      	adds	r2, r3, #1
 8008158:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800815c:	6122      	str	r2, [r4, #16]
 800815e:	2201      	movs	r2, #1
 8008160:	615a      	str	r2, [r3, #20]
 8008162:	e7bb      	b.n	80080dc <__gethex+0x3c8>
 8008164:	6922      	ldr	r2, [r4, #16]
 8008166:	455a      	cmp	r2, fp
 8008168:	dd0b      	ble.n	8008182 <__gethex+0x46e>
 800816a:	2101      	movs	r1, #1
 800816c:	4620      	mov	r0, r4
 800816e:	f7ff fd6a 	bl	8007c46 <rshift>
 8008172:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008176:	3501      	adds	r5, #1
 8008178:	42ab      	cmp	r3, r5
 800817a:	f6ff aed0 	blt.w	8007f1e <__gethex+0x20a>
 800817e:	2701      	movs	r7, #1
 8008180:	e7c0      	b.n	8008104 <__gethex+0x3f0>
 8008182:	f016 061f 	ands.w	r6, r6, #31
 8008186:	d0fa      	beq.n	800817e <__gethex+0x46a>
 8008188:	449a      	add	sl, r3
 800818a:	f1c6 0620 	rsb	r6, r6, #32
 800818e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008192:	f000 fa3f 	bl	8008614 <__hi0bits>
 8008196:	42b0      	cmp	r0, r6
 8008198:	dbe7      	blt.n	800816a <__gethex+0x456>
 800819a:	e7f0      	b.n	800817e <__gethex+0x46a>
 800819c:	08009d58 	.word	0x08009d58

080081a0 <L_shift>:
 80081a0:	f1c2 0208 	rsb	r2, r2, #8
 80081a4:	0092      	lsls	r2, r2, #2
 80081a6:	b570      	push	{r4, r5, r6, lr}
 80081a8:	f1c2 0620 	rsb	r6, r2, #32
 80081ac:	6843      	ldr	r3, [r0, #4]
 80081ae:	6804      	ldr	r4, [r0, #0]
 80081b0:	fa03 f506 	lsl.w	r5, r3, r6
 80081b4:	432c      	orrs	r4, r5
 80081b6:	40d3      	lsrs	r3, r2
 80081b8:	6004      	str	r4, [r0, #0]
 80081ba:	f840 3f04 	str.w	r3, [r0, #4]!
 80081be:	4288      	cmp	r0, r1
 80081c0:	d3f4      	bcc.n	80081ac <L_shift+0xc>
 80081c2:	bd70      	pop	{r4, r5, r6, pc}

080081c4 <__match>:
 80081c4:	b530      	push	{r4, r5, lr}
 80081c6:	6803      	ldr	r3, [r0, #0]
 80081c8:	3301      	adds	r3, #1
 80081ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081ce:	b914      	cbnz	r4, 80081d6 <__match+0x12>
 80081d0:	6003      	str	r3, [r0, #0]
 80081d2:	2001      	movs	r0, #1
 80081d4:	bd30      	pop	{r4, r5, pc}
 80081d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081da:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80081de:	2d19      	cmp	r5, #25
 80081e0:	bf98      	it	ls
 80081e2:	3220      	addls	r2, #32
 80081e4:	42a2      	cmp	r2, r4
 80081e6:	d0f0      	beq.n	80081ca <__match+0x6>
 80081e8:	2000      	movs	r0, #0
 80081ea:	e7f3      	b.n	80081d4 <__match+0x10>

080081ec <__hexnan>:
 80081ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f0:	680b      	ldr	r3, [r1, #0]
 80081f2:	6801      	ldr	r1, [r0, #0]
 80081f4:	115e      	asrs	r6, r3, #5
 80081f6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80081fa:	f013 031f 	ands.w	r3, r3, #31
 80081fe:	b087      	sub	sp, #28
 8008200:	bf18      	it	ne
 8008202:	3604      	addne	r6, #4
 8008204:	2500      	movs	r5, #0
 8008206:	1f37      	subs	r7, r6, #4
 8008208:	4682      	mov	sl, r0
 800820a:	4690      	mov	r8, r2
 800820c:	9301      	str	r3, [sp, #4]
 800820e:	f846 5c04 	str.w	r5, [r6, #-4]
 8008212:	46b9      	mov	r9, r7
 8008214:	463c      	mov	r4, r7
 8008216:	9502      	str	r5, [sp, #8]
 8008218:	46ab      	mov	fp, r5
 800821a:	784a      	ldrb	r2, [r1, #1]
 800821c:	1c4b      	adds	r3, r1, #1
 800821e:	9303      	str	r3, [sp, #12]
 8008220:	b342      	cbz	r2, 8008274 <__hexnan+0x88>
 8008222:	4610      	mov	r0, r2
 8008224:	9105      	str	r1, [sp, #20]
 8008226:	9204      	str	r2, [sp, #16]
 8008228:	f7ff fd5f 	bl	8007cea <__hexdig_fun>
 800822c:	2800      	cmp	r0, #0
 800822e:	d14f      	bne.n	80082d0 <__hexnan+0xe4>
 8008230:	9a04      	ldr	r2, [sp, #16]
 8008232:	9905      	ldr	r1, [sp, #20]
 8008234:	2a20      	cmp	r2, #32
 8008236:	d818      	bhi.n	800826a <__hexnan+0x7e>
 8008238:	9b02      	ldr	r3, [sp, #8]
 800823a:	459b      	cmp	fp, r3
 800823c:	dd13      	ble.n	8008266 <__hexnan+0x7a>
 800823e:	454c      	cmp	r4, r9
 8008240:	d206      	bcs.n	8008250 <__hexnan+0x64>
 8008242:	2d07      	cmp	r5, #7
 8008244:	dc04      	bgt.n	8008250 <__hexnan+0x64>
 8008246:	462a      	mov	r2, r5
 8008248:	4649      	mov	r1, r9
 800824a:	4620      	mov	r0, r4
 800824c:	f7ff ffa8 	bl	80081a0 <L_shift>
 8008250:	4544      	cmp	r4, r8
 8008252:	d950      	bls.n	80082f6 <__hexnan+0x10a>
 8008254:	2300      	movs	r3, #0
 8008256:	f1a4 0904 	sub.w	r9, r4, #4
 800825a:	f844 3c04 	str.w	r3, [r4, #-4]
 800825e:	f8cd b008 	str.w	fp, [sp, #8]
 8008262:	464c      	mov	r4, r9
 8008264:	461d      	mov	r5, r3
 8008266:	9903      	ldr	r1, [sp, #12]
 8008268:	e7d7      	b.n	800821a <__hexnan+0x2e>
 800826a:	2a29      	cmp	r2, #41	; 0x29
 800826c:	d156      	bne.n	800831c <__hexnan+0x130>
 800826e:	3102      	adds	r1, #2
 8008270:	f8ca 1000 	str.w	r1, [sl]
 8008274:	f1bb 0f00 	cmp.w	fp, #0
 8008278:	d050      	beq.n	800831c <__hexnan+0x130>
 800827a:	454c      	cmp	r4, r9
 800827c:	d206      	bcs.n	800828c <__hexnan+0xa0>
 800827e:	2d07      	cmp	r5, #7
 8008280:	dc04      	bgt.n	800828c <__hexnan+0xa0>
 8008282:	462a      	mov	r2, r5
 8008284:	4649      	mov	r1, r9
 8008286:	4620      	mov	r0, r4
 8008288:	f7ff ff8a 	bl	80081a0 <L_shift>
 800828c:	4544      	cmp	r4, r8
 800828e:	d934      	bls.n	80082fa <__hexnan+0x10e>
 8008290:	f1a8 0204 	sub.w	r2, r8, #4
 8008294:	4623      	mov	r3, r4
 8008296:	f853 1b04 	ldr.w	r1, [r3], #4
 800829a:	f842 1f04 	str.w	r1, [r2, #4]!
 800829e:	429f      	cmp	r7, r3
 80082a0:	d2f9      	bcs.n	8008296 <__hexnan+0xaa>
 80082a2:	1b3b      	subs	r3, r7, r4
 80082a4:	f023 0303 	bic.w	r3, r3, #3
 80082a8:	3304      	adds	r3, #4
 80082aa:	3401      	adds	r4, #1
 80082ac:	3e03      	subs	r6, #3
 80082ae:	42b4      	cmp	r4, r6
 80082b0:	bf88      	it	hi
 80082b2:	2304      	movhi	r3, #4
 80082b4:	4443      	add	r3, r8
 80082b6:	2200      	movs	r2, #0
 80082b8:	f843 2b04 	str.w	r2, [r3], #4
 80082bc:	429f      	cmp	r7, r3
 80082be:	d2fb      	bcs.n	80082b8 <__hexnan+0xcc>
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	b91b      	cbnz	r3, 80082cc <__hexnan+0xe0>
 80082c4:	4547      	cmp	r7, r8
 80082c6:	d127      	bne.n	8008318 <__hexnan+0x12c>
 80082c8:	2301      	movs	r3, #1
 80082ca:	603b      	str	r3, [r7, #0]
 80082cc:	2005      	movs	r0, #5
 80082ce:	e026      	b.n	800831e <__hexnan+0x132>
 80082d0:	3501      	adds	r5, #1
 80082d2:	2d08      	cmp	r5, #8
 80082d4:	f10b 0b01 	add.w	fp, fp, #1
 80082d8:	dd06      	ble.n	80082e8 <__hexnan+0xfc>
 80082da:	4544      	cmp	r4, r8
 80082dc:	d9c3      	bls.n	8008266 <__hexnan+0x7a>
 80082de:	2300      	movs	r3, #0
 80082e0:	f844 3c04 	str.w	r3, [r4, #-4]
 80082e4:	2501      	movs	r5, #1
 80082e6:	3c04      	subs	r4, #4
 80082e8:	6822      	ldr	r2, [r4, #0]
 80082ea:	f000 000f 	and.w	r0, r0, #15
 80082ee:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80082f2:	6022      	str	r2, [r4, #0]
 80082f4:	e7b7      	b.n	8008266 <__hexnan+0x7a>
 80082f6:	2508      	movs	r5, #8
 80082f8:	e7b5      	b.n	8008266 <__hexnan+0x7a>
 80082fa:	9b01      	ldr	r3, [sp, #4]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d0df      	beq.n	80082c0 <__hexnan+0xd4>
 8008300:	f04f 32ff 	mov.w	r2, #4294967295
 8008304:	f1c3 0320 	rsb	r3, r3, #32
 8008308:	fa22 f303 	lsr.w	r3, r2, r3
 800830c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008310:	401a      	ands	r2, r3
 8008312:	f846 2c04 	str.w	r2, [r6, #-4]
 8008316:	e7d3      	b.n	80082c0 <__hexnan+0xd4>
 8008318:	3f04      	subs	r7, #4
 800831a:	e7d1      	b.n	80082c0 <__hexnan+0xd4>
 800831c:	2004      	movs	r0, #4
 800831e:	b007      	add	sp, #28
 8008320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008324 <__retarget_lock_init_recursive>:
 8008324:	4770      	bx	lr

08008326 <__retarget_lock_acquire_recursive>:
 8008326:	4770      	bx	lr

08008328 <__retarget_lock_release_recursive>:
 8008328:	4770      	bx	lr

0800832a <__swhatbuf_r>:
 800832a:	b570      	push	{r4, r5, r6, lr}
 800832c:	460e      	mov	r6, r1
 800832e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008332:	2900      	cmp	r1, #0
 8008334:	b096      	sub	sp, #88	; 0x58
 8008336:	4614      	mov	r4, r2
 8008338:	461d      	mov	r5, r3
 800833a:	da07      	bge.n	800834c <__swhatbuf_r+0x22>
 800833c:	2300      	movs	r3, #0
 800833e:	602b      	str	r3, [r5, #0]
 8008340:	89b3      	ldrh	r3, [r6, #12]
 8008342:	061a      	lsls	r2, r3, #24
 8008344:	d410      	bmi.n	8008368 <__swhatbuf_r+0x3e>
 8008346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800834a:	e00e      	b.n	800836a <__swhatbuf_r+0x40>
 800834c:	466a      	mov	r2, sp
 800834e:	f001 f989 	bl	8009664 <_fstat_r>
 8008352:	2800      	cmp	r0, #0
 8008354:	dbf2      	blt.n	800833c <__swhatbuf_r+0x12>
 8008356:	9a01      	ldr	r2, [sp, #4]
 8008358:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800835c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008360:	425a      	negs	r2, r3
 8008362:	415a      	adcs	r2, r3
 8008364:	602a      	str	r2, [r5, #0]
 8008366:	e7ee      	b.n	8008346 <__swhatbuf_r+0x1c>
 8008368:	2340      	movs	r3, #64	; 0x40
 800836a:	2000      	movs	r0, #0
 800836c:	6023      	str	r3, [r4, #0]
 800836e:	b016      	add	sp, #88	; 0x58
 8008370:	bd70      	pop	{r4, r5, r6, pc}
	...

08008374 <__smakebuf_r>:
 8008374:	898b      	ldrh	r3, [r1, #12]
 8008376:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008378:	079d      	lsls	r5, r3, #30
 800837a:	4606      	mov	r6, r0
 800837c:	460c      	mov	r4, r1
 800837e:	d507      	bpl.n	8008390 <__smakebuf_r+0x1c>
 8008380:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008384:	6023      	str	r3, [r4, #0]
 8008386:	6123      	str	r3, [r4, #16]
 8008388:	2301      	movs	r3, #1
 800838a:	6163      	str	r3, [r4, #20]
 800838c:	b002      	add	sp, #8
 800838e:	bd70      	pop	{r4, r5, r6, pc}
 8008390:	ab01      	add	r3, sp, #4
 8008392:	466a      	mov	r2, sp
 8008394:	f7ff ffc9 	bl	800832a <__swhatbuf_r>
 8008398:	9900      	ldr	r1, [sp, #0]
 800839a:	4605      	mov	r5, r0
 800839c:	4630      	mov	r0, r6
 800839e:	f000 fd5d 	bl	8008e5c <_malloc_r>
 80083a2:	b948      	cbnz	r0, 80083b8 <__smakebuf_r+0x44>
 80083a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083a8:	059a      	lsls	r2, r3, #22
 80083aa:	d4ef      	bmi.n	800838c <__smakebuf_r+0x18>
 80083ac:	f023 0303 	bic.w	r3, r3, #3
 80083b0:	f043 0302 	orr.w	r3, r3, #2
 80083b4:	81a3      	strh	r3, [r4, #12]
 80083b6:	e7e3      	b.n	8008380 <__smakebuf_r+0xc>
 80083b8:	4b0d      	ldr	r3, [pc, #52]	; (80083f0 <__smakebuf_r+0x7c>)
 80083ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80083bc:	89a3      	ldrh	r3, [r4, #12]
 80083be:	6020      	str	r0, [r4, #0]
 80083c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083c4:	81a3      	strh	r3, [r4, #12]
 80083c6:	9b00      	ldr	r3, [sp, #0]
 80083c8:	6163      	str	r3, [r4, #20]
 80083ca:	9b01      	ldr	r3, [sp, #4]
 80083cc:	6120      	str	r0, [r4, #16]
 80083ce:	b15b      	cbz	r3, 80083e8 <__smakebuf_r+0x74>
 80083d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083d4:	4630      	mov	r0, r6
 80083d6:	f001 f957 	bl	8009688 <_isatty_r>
 80083da:	b128      	cbz	r0, 80083e8 <__smakebuf_r+0x74>
 80083dc:	89a3      	ldrh	r3, [r4, #12]
 80083de:	f023 0303 	bic.w	r3, r3, #3
 80083e2:	f043 0301 	orr.w	r3, r3, #1
 80083e6:	81a3      	strh	r3, [r4, #12]
 80083e8:	89a0      	ldrh	r0, [r4, #12]
 80083ea:	4305      	orrs	r5, r0
 80083ec:	81a5      	strh	r5, [r4, #12]
 80083ee:	e7cd      	b.n	800838c <__smakebuf_r+0x18>
 80083f0:	08007aa5 	.word	0x08007aa5

080083f4 <malloc>:
 80083f4:	4b02      	ldr	r3, [pc, #8]	; (8008400 <malloc+0xc>)
 80083f6:	4601      	mov	r1, r0
 80083f8:	6818      	ldr	r0, [r3, #0]
 80083fa:	f000 bd2f 	b.w	8008e5c <_malloc_r>
 80083fe:	bf00      	nop
 8008400:	20000010 	.word	0x20000010

08008404 <__ascii_mbtowc>:
 8008404:	b082      	sub	sp, #8
 8008406:	b901      	cbnz	r1, 800840a <__ascii_mbtowc+0x6>
 8008408:	a901      	add	r1, sp, #4
 800840a:	b142      	cbz	r2, 800841e <__ascii_mbtowc+0x1a>
 800840c:	b14b      	cbz	r3, 8008422 <__ascii_mbtowc+0x1e>
 800840e:	7813      	ldrb	r3, [r2, #0]
 8008410:	600b      	str	r3, [r1, #0]
 8008412:	7812      	ldrb	r2, [r2, #0]
 8008414:	1e10      	subs	r0, r2, #0
 8008416:	bf18      	it	ne
 8008418:	2001      	movne	r0, #1
 800841a:	b002      	add	sp, #8
 800841c:	4770      	bx	lr
 800841e:	4610      	mov	r0, r2
 8008420:	e7fb      	b.n	800841a <__ascii_mbtowc+0x16>
 8008422:	f06f 0001 	mvn.w	r0, #1
 8008426:	e7f8      	b.n	800841a <__ascii_mbtowc+0x16>

08008428 <_Balloc>:
 8008428:	b570      	push	{r4, r5, r6, lr}
 800842a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800842c:	4604      	mov	r4, r0
 800842e:	460d      	mov	r5, r1
 8008430:	b976      	cbnz	r6, 8008450 <_Balloc+0x28>
 8008432:	2010      	movs	r0, #16
 8008434:	f7ff ffde 	bl	80083f4 <malloc>
 8008438:	4602      	mov	r2, r0
 800843a:	6260      	str	r0, [r4, #36]	; 0x24
 800843c:	b920      	cbnz	r0, 8008448 <_Balloc+0x20>
 800843e:	4b18      	ldr	r3, [pc, #96]	; (80084a0 <_Balloc+0x78>)
 8008440:	4818      	ldr	r0, [pc, #96]	; (80084a4 <_Balloc+0x7c>)
 8008442:	2166      	movs	r1, #102	; 0x66
 8008444:	f001 f8ce 	bl	80095e4 <__assert_func>
 8008448:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800844c:	6006      	str	r6, [r0, #0]
 800844e:	60c6      	str	r6, [r0, #12]
 8008450:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008452:	68f3      	ldr	r3, [r6, #12]
 8008454:	b183      	cbz	r3, 8008478 <_Balloc+0x50>
 8008456:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800845e:	b9b8      	cbnz	r0, 8008490 <_Balloc+0x68>
 8008460:	2101      	movs	r1, #1
 8008462:	fa01 f605 	lsl.w	r6, r1, r5
 8008466:	1d72      	adds	r2, r6, #5
 8008468:	0092      	lsls	r2, r2, #2
 800846a:	4620      	mov	r0, r4
 800846c:	f000 fc97 	bl	8008d9e <_calloc_r>
 8008470:	b160      	cbz	r0, 800848c <_Balloc+0x64>
 8008472:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008476:	e00e      	b.n	8008496 <_Balloc+0x6e>
 8008478:	2221      	movs	r2, #33	; 0x21
 800847a:	2104      	movs	r1, #4
 800847c:	4620      	mov	r0, r4
 800847e:	f000 fc8e 	bl	8008d9e <_calloc_r>
 8008482:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008484:	60f0      	str	r0, [r6, #12]
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d1e4      	bne.n	8008456 <_Balloc+0x2e>
 800848c:	2000      	movs	r0, #0
 800848e:	bd70      	pop	{r4, r5, r6, pc}
 8008490:	6802      	ldr	r2, [r0, #0]
 8008492:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008496:	2300      	movs	r3, #0
 8008498:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800849c:	e7f7      	b.n	800848e <_Balloc+0x66>
 800849e:	bf00      	nop
 80084a0:	08009de8 	.word	0x08009de8
 80084a4:	08009dff 	.word	0x08009dff

080084a8 <_Bfree>:
 80084a8:	b570      	push	{r4, r5, r6, lr}
 80084aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80084ac:	4605      	mov	r5, r0
 80084ae:	460c      	mov	r4, r1
 80084b0:	b976      	cbnz	r6, 80084d0 <_Bfree+0x28>
 80084b2:	2010      	movs	r0, #16
 80084b4:	f7ff ff9e 	bl	80083f4 <malloc>
 80084b8:	4602      	mov	r2, r0
 80084ba:	6268      	str	r0, [r5, #36]	; 0x24
 80084bc:	b920      	cbnz	r0, 80084c8 <_Bfree+0x20>
 80084be:	4b09      	ldr	r3, [pc, #36]	; (80084e4 <_Bfree+0x3c>)
 80084c0:	4809      	ldr	r0, [pc, #36]	; (80084e8 <_Bfree+0x40>)
 80084c2:	218a      	movs	r1, #138	; 0x8a
 80084c4:	f001 f88e 	bl	80095e4 <__assert_func>
 80084c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084cc:	6006      	str	r6, [r0, #0]
 80084ce:	60c6      	str	r6, [r0, #12]
 80084d0:	b13c      	cbz	r4, 80084e2 <_Bfree+0x3a>
 80084d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80084d4:	6862      	ldr	r2, [r4, #4]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80084dc:	6021      	str	r1, [r4, #0]
 80084de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80084e2:	bd70      	pop	{r4, r5, r6, pc}
 80084e4:	08009de8 	.word	0x08009de8
 80084e8:	08009dff 	.word	0x08009dff

080084ec <__multadd>:
 80084ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084f0:	690e      	ldr	r6, [r1, #16]
 80084f2:	4607      	mov	r7, r0
 80084f4:	4698      	mov	r8, r3
 80084f6:	460c      	mov	r4, r1
 80084f8:	f101 0014 	add.w	r0, r1, #20
 80084fc:	2300      	movs	r3, #0
 80084fe:	6805      	ldr	r5, [r0, #0]
 8008500:	b2a9      	uxth	r1, r5
 8008502:	fb02 8101 	mla	r1, r2, r1, r8
 8008506:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800850a:	0c2d      	lsrs	r5, r5, #16
 800850c:	fb02 c505 	mla	r5, r2, r5, ip
 8008510:	b289      	uxth	r1, r1
 8008512:	3301      	adds	r3, #1
 8008514:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008518:	429e      	cmp	r6, r3
 800851a:	f840 1b04 	str.w	r1, [r0], #4
 800851e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008522:	dcec      	bgt.n	80084fe <__multadd+0x12>
 8008524:	f1b8 0f00 	cmp.w	r8, #0
 8008528:	d022      	beq.n	8008570 <__multadd+0x84>
 800852a:	68a3      	ldr	r3, [r4, #8]
 800852c:	42b3      	cmp	r3, r6
 800852e:	dc19      	bgt.n	8008564 <__multadd+0x78>
 8008530:	6861      	ldr	r1, [r4, #4]
 8008532:	4638      	mov	r0, r7
 8008534:	3101      	adds	r1, #1
 8008536:	f7ff ff77 	bl	8008428 <_Balloc>
 800853a:	4605      	mov	r5, r0
 800853c:	b928      	cbnz	r0, 800854a <__multadd+0x5e>
 800853e:	4602      	mov	r2, r0
 8008540:	4b0d      	ldr	r3, [pc, #52]	; (8008578 <__multadd+0x8c>)
 8008542:	480e      	ldr	r0, [pc, #56]	; (800857c <__multadd+0x90>)
 8008544:	21b5      	movs	r1, #181	; 0xb5
 8008546:	f001 f84d 	bl	80095e4 <__assert_func>
 800854a:	6922      	ldr	r2, [r4, #16]
 800854c:	3202      	adds	r2, #2
 800854e:	f104 010c 	add.w	r1, r4, #12
 8008552:	0092      	lsls	r2, r2, #2
 8008554:	300c      	adds	r0, #12
 8008556:	f7fe f88b 	bl	8006670 <memcpy>
 800855a:	4621      	mov	r1, r4
 800855c:	4638      	mov	r0, r7
 800855e:	f7ff ffa3 	bl	80084a8 <_Bfree>
 8008562:	462c      	mov	r4, r5
 8008564:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008568:	3601      	adds	r6, #1
 800856a:	f8c3 8014 	str.w	r8, [r3, #20]
 800856e:	6126      	str	r6, [r4, #16]
 8008570:	4620      	mov	r0, r4
 8008572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008576:	bf00      	nop
 8008578:	08009d58 	.word	0x08009d58
 800857c:	08009dff 	.word	0x08009dff

08008580 <__s2b>:
 8008580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008584:	460c      	mov	r4, r1
 8008586:	4615      	mov	r5, r2
 8008588:	461f      	mov	r7, r3
 800858a:	2209      	movs	r2, #9
 800858c:	3308      	adds	r3, #8
 800858e:	4606      	mov	r6, r0
 8008590:	fb93 f3f2 	sdiv	r3, r3, r2
 8008594:	2100      	movs	r1, #0
 8008596:	2201      	movs	r2, #1
 8008598:	429a      	cmp	r2, r3
 800859a:	db09      	blt.n	80085b0 <__s2b+0x30>
 800859c:	4630      	mov	r0, r6
 800859e:	f7ff ff43 	bl	8008428 <_Balloc>
 80085a2:	b940      	cbnz	r0, 80085b6 <__s2b+0x36>
 80085a4:	4602      	mov	r2, r0
 80085a6:	4b19      	ldr	r3, [pc, #100]	; (800860c <__s2b+0x8c>)
 80085a8:	4819      	ldr	r0, [pc, #100]	; (8008610 <__s2b+0x90>)
 80085aa:	21ce      	movs	r1, #206	; 0xce
 80085ac:	f001 f81a 	bl	80095e4 <__assert_func>
 80085b0:	0052      	lsls	r2, r2, #1
 80085b2:	3101      	adds	r1, #1
 80085b4:	e7f0      	b.n	8008598 <__s2b+0x18>
 80085b6:	9b08      	ldr	r3, [sp, #32]
 80085b8:	6143      	str	r3, [r0, #20]
 80085ba:	2d09      	cmp	r5, #9
 80085bc:	f04f 0301 	mov.w	r3, #1
 80085c0:	6103      	str	r3, [r0, #16]
 80085c2:	dd16      	ble.n	80085f2 <__s2b+0x72>
 80085c4:	f104 0909 	add.w	r9, r4, #9
 80085c8:	46c8      	mov	r8, r9
 80085ca:	442c      	add	r4, r5
 80085cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80085d0:	4601      	mov	r1, r0
 80085d2:	3b30      	subs	r3, #48	; 0x30
 80085d4:	220a      	movs	r2, #10
 80085d6:	4630      	mov	r0, r6
 80085d8:	f7ff ff88 	bl	80084ec <__multadd>
 80085dc:	45a0      	cmp	r8, r4
 80085de:	d1f5      	bne.n	80085cc <__s2b+0x4c>
 80085e0:	f1a5 0408 	sub.w	r4, r5, #8
 80085e4:	444c      	add	r4, r9
 80085e6:	1b2d      	subs	r5, r5, r4
 80085e8:	1963      	adds	r3, r4, r5
 80085ea:	42bb      	cmp	r3, r7
 80085ec:	db04      	blt.n	80085f8 <__s2b+0x78>
 80085ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085f2:	340a      	adds	r4, #10
 80085f4:	2509      	movs	r5, #9
 80085f6:	e7f6      	b.n	80085e6 <__s2b+0x66>
 80085f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80085fc:	4601      	mov	r1, r0
 80085fe:	3b30      	subs	r3, #48	; 0x30
 8008600:	220a      	movs	r2, #10
 8008602:	4630      	mov	r0, r6
 8008604:	f7ff ff72 	bl	80084ec <__multadd>
 8008608:	e7ee      	b.n	80085e8 <__s2b+0x68>
 800860a:	bf00      	nop
 800860c:	08009d58 	.word	0x08009d58
 8008610:	08009dff 	.word	0x08009dff

08008614 <__hi0bits>:
 8008614:	0c03      	lsrs	r3, r0, #16
 8008616:	041b      	lsls	r3, r3, #16
 8008618:	b9d3      	cbnz	r3, 8008650 <__hi0bits+0x3c>
 800861a:	0400      	lsls	r0, r0, #16
 800861c:	2310      	movs	r3, #16
 800861e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008622:	bf04      	itt	eq
 8008624:	0200      	lsleq	r0, r0, #8
 8008626:	3308      	addeq	r3, #8
 8008628:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800862c:	bf04      	itt	eq
 800862e:	0100      	lsleq	r0, r0, #4
 8008630:	3304      	addeq	r3, #4
 8008632:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008636:	bf04      	itt	eq
 8008638:	0080      	lsleq	r0, r0, #2
 800863a:	3302      	addeq	r3, #2
 800863c:	2800      	cmp	r0, #0
 800863e:	db05      	blt.n	800864c <__hi0bits+0x38>
 8008640:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008644:	f103 0301 	add.w	r3, r3, #1
 8008648:	bf08      	it	eq
 800864a:	2320      	moveq	r3, #32
 800864c:	4618      	mov	r0, r3
 800864e:	4770      	bx	lr
 8008650:	2300      	movs	r3, #0
 8008652:	e7e4      	b.n	800861e <__hi0bits+0xa>

08008654 <__lo0bits>:
 8008654:	6803      	ldr	r3, [r0, #0]
 8008656:	f013 0207 	ands.w	r2, r3, #7
 800865a:	4601      	mov	r1, r0
 800865c:	d00b      	beq.n	8008676 <__lo0bits+0x22>
 800865e:	07da      	lsls	r2, r3, #31
 8008660:	d424      	bmi.n	80086ac <__lo0bits+0x58>
 8008662:	0798      	lsls	r0, r3, #30
 8008664:	bf49      	itett	mi
 8008666:	085b      	lsrmi	r3, r3, #1
 8008668:	089b      	lsrpl	r3, r3, #2
 800866a:	2001      	movmi	r0, #1
 800866c:	600b      	strmi	r3, [r1, #0]
 800866e:	bf5c      	itt	pl
 8008670:	600b      	strpl	r3, [r1, #0]
 8008672:	2002      	movpl	r0, #2
 8008674:	4770      	bx	lr
 8008676:	b298      	uxth	r0, r3
 8008678:	b9b0      	cbnz	r0, 80086a8 <__lo0bits+0x54>
 800867a:	0c1b      	lsrs	r3, r3, #16
 800867c:	2010      	movs	r0, #16
 800867e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008682:	bf04      	itt	eq
 8008684:	0a1b      	lsreq	r3, r3, #8
 8008686:	3008      	addeq	r0, #8
 8008688:	071a      	lsls	r2, r3, #28
 800868a:	bf04      	itt	eq
 800868c:	091b      	lsreq	r3, r3, #4
 800868e:	3004      	addeq	r0, #4
 8008690:	079a      	lsls	r2, r3, #30
 8008692:	bf04      	itt	eq
 8008694:	089b      	lsreq	r3, r3, #2
 8008696:	3002      	addeq	r0, #2
 8008698:	07da      	lsls	r2, r3, #31
 800869a:	d403      	bmi.n	80086a4 <__lo0bits+0x50>
 800869c:	085b      	lsrs	r3, r3, #1
 800869e:	f100 0001 	add.w	r0, r0, #1
 80086a2:	d005      	beq.n	80086b0 <__lo0bits+0x5c>
 80086a4:	600b      	str	r3, [r1, #0]
 80086a6:	4770      	bx	lr
 80086a8:	4610      	mov	r0, r2
 80086aa:	e7e8      	b.n	800867e <__lo0bits+0x2a>
 80086ac:	2000      	movs	r0, #0
 80086ae:	4770      	bx	lr
 80086b0:	2020      	movs	r0, #32
 80086b2:	4770      	bx	lr

080086b4 <__i2b>:
 80086b4:	b510      	push	{r4, lr}
 80086b6:	460c      	mov	r4, r1
 80086b8:	2101      	movs	r1, #1
 80086ba:	f7ff feb5 	bl	8008428 <_Balloc>
 80086be:	4602      	mov	r2, r0
 80086c0:	b928      	cbnz	r0, 80086ce <__i2b+0x1a>
 80086c2:	4b05      	ldr	r3, [pc, #20]	; (80086d8 <__i2b+0x24>)
 80086c4:	4805      	ldr	r0, [pc, #20]	; (80086dc <__i2b+0x28>)
 80086c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80086ca:	f000 ff8b 	bl	80095e4 <__assert_func>
 80086ce:	2301      	movs	r3, #1
 80086d0:	6144      	str	r4, [r0, #20]
 80086d2:	6103      	str	r3, [r0, #16]
 80086d4:	bd10      	pop	{r4, pc}
 80086d6:	bf00      	nop
 80086d8:	08009d58 	.word	0x08009d58
 80086dc:	08009dff 	.word	0x08009dff

080086e0 <__multiply>:
 80086e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086e4:	4614      	mov	r4, r2
 80086e6:	690a      	ldr	r2, [r1, #16]
 80086e8:	6923      	ldr	r3, [r4, #16]
 80086ea:	429a      	cmp	r2, r3
 80086ec:	bfb8      	it	lt
 80086ee:	460b      	movlt	r3, r1
 80086f0:	460d      	mov	r5, r1
 80086f2:	bfbc      	itt	lt
 80086f4:	4625      	movlt	r5, r4
 80086f6:	461c      	movlt	r4, r3
 80086f8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80086fc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008700:	68ab      	ldr	r3, [r5, #8]
 8008702:	6869      	ldr	r1, [r5, #4]
 8008704:	eb0a 0709 	add.w	r7, sl, r9
 8008708:	42bb      	cmp	r3, r7
 800870a:	b085      	sub	sp, #20
 800870c:	bfb8      	it	lt
 800870e:	3101      	addlt	r1, #1
 8008710:	f7ff fe8a 	bl	8008428 <_Balloc>
 8008714:	b930      	cbnz	r0, 8008724 <__multiply+0x44>
 8008716:	4602      	mov	r2, r0
 8008718:	4b42      	ldr	r3, [pc, #264]	; (8008824 <__multiply+0x144>)
 800871a:	4843      	ldr	r0, [pc, #268]	; (8008828 <__multiply+0x148>)
 800871c:	f240 115d 	movw	r1, #349	; 0x15d
 8008720:	f000 ff60 	bl	80095e4 <__assert_func>
 8008724:	f100 0614 	add.w	r6, r0, #20
 8008728:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800872c:	4633      	mov	r3, r6
 800872e:	2200      	movs	r2, #0
 8008730:	4543      	cmp	r3, r8
 8008732:	d31e      	bcc.n	8008772 <__multiply+0x92>
 8008734:	f105 0c14 	add.w	ip, r5, #20
 8008738:	f104 0314 	add.w	r3, r4, #20
 800873c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008740:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008744:	9202      	str	r2, [sp, #8]
 8008746:	ebac 0205 	sub.w	r2, ip, r5
 800874a:	3a15      	subs	r2, #21
 800874c:	f022 0203 	bic.w	r2, r2, #3
 8008750:	3204      	adds	r2, #4
 8008752:	f105 0115 	add.w	r1, r5, #21
 8008756:	458c      	cmp	ip, r1
 8008758:	bf38      	it	cc
 800875a:	2204      	movcc	r2, #4
 800875c:	9201      	str	r2, [sp, #4]
 800875e:	9a02      	ldr	r2, [sp, #8]
 8008760:	9303      	str	r3, [sp, #12]
 8008762:	429a      	cmp	r2, r3
 8008764:	d808      	bhi.n	8008778 <__multiply+0x98>
 8008766:	2f00      	cmp	r7, #0
 8008768:	dc55      	bgt.n	8008816 <__multiply+0x136>
 800876a:	6107      	str	r7, [r0, #16]
 800876c:	b005      	add	sp, #20
 800876e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008772:	f843 2b04 	str.w	r2, [r3], #4
 8008776:	e7db      	b.n	8008730 <__multiply+0x50>
 8008778:	f8b3 a000 	ldrh.w	sl, [r3]
 800877c:	f1ba 0f00 	cmp.w	sl, #0
 8008780:	d020      	beq.n	80087c4 <__multiply+0xe4>
 8008782:	f105 0e14 	add.w	lr, r5, #20
 8008786:	46b1      	mov	r9, r6
 8008788:	2200      	movs	r2, #0
 800878a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800878e:	f8d9 b000 	ldr.w	fp, [r9]
 8008792:	b2a1      	uxth	r1, r4
 8008794:	fa1f fb8b 	uxth.w	fp, fp
 8008798:	fb0a b101 	mla	r1, sl, r1, fp
 800879c:	4411      	add	r1, r2
 800879e:	f8d9 2000 	ldr.w	r2, [r9]
 80087a2:	0c24      	lsrs	r4, r4, #16
 80087a4:	0c12      	lsrs	r2, r2, #16
 80087a6:	fb0a 2404 	mla	r4, sl, r4, r2
 80087aa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80087ae:	b289      	uxth	r1, r1
 80087b0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80087b4:	45f4      	cmp	ip, lr
 80087b6:	f849 1b04 	str.w	r1, [r9], #4
 80087ba:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80087be:	d8e4      	bhi.n	800878a <__multiply+0xaa>
 80087c0:	9901      	ldr	r1, [sp, #4]
 80087c2:	5072      	str	r2, [r6, r1]
 80087c4:	9a03      	ldr	r2, [sp, #12]
 80087c6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80087ca:	3304      	adds	r3, #4
 80087cc:	f1b9 0f00 	cmp.w	r9, #0
 80087d0:	d01f      	beq.n	8008812 <__multiply+0x132>
 80087d2:	6834      	ldr	r4, [r6, #0]
 80087d4:	f105 0114 	add.w	r1, r5, #20
 80087d8:	46b6      	mov	lr, r6
 80087da:	f04f 0a00 	mov.w	sl, #0
 80087de:	880a      	ldrh	r2, [r1, #0]
 80087e0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80087e4:	fb09 b202 	mla	r2, r9, r2, fp
 80087e8:	4492      	add	sl, r2
 80087ea:	b2a4      	uxth	r4, r4
 80087ec:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80087f0:	f84e 4b04 	str.w	r4, [lr], #4
 80087f4:	f851 4b04 	ldr.w	r4, [r1], #4
 80087f8:	f8be 2000 	ldrh.w	r2, [lr]
 80087fc:	0c24      	lsrs	r4, r4, #16
 80087fe:	fb09 2404 	mla	r4, r9, r4, r2
 8008802:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008806:	458c      	cmp	ip, r1
 8008808:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800880c:	d8e7      	bhi.n	80087de <__multiply+0xfe>
 800880e:	9a01      	ldr	r2, [sp, #4]
 8008810:	50b4      	str	r4, [r6, r2]
 8008812:	3604      	adds	r6, #4
 8008814:	e7a3      	b.n	800875e <__multiply+0x7e>
 8008816:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800881a:	2b00      	cmp	r3, #0
 800881c:	d1a5      	bne.n	800876a <__multiply+0x8a>
 800881e:	3f01      	subs	r7, #1
 8008820:	e7a1      	b.n	8008766 <__multiply+0x86>
 8008822:	bf00      	nop
 8008824:	08009d58 	.word	0x08009d58
 8008828:	08009dff 	.word	0x08009dff

0800882c <__pow5mult>:
 800882c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008830:	4615      	mov	r5, r2
 8008832:	f012 0203 	ands.w	r2, r2, #3
 8008836:	4606      	mov	r6, r0
 8008838:	460f      	mov	r7, r1
 800883a:	d007      	beq.n	800884c <__pow5mult+0x20>
 800883c:	4c25      	ldr	r4, [pc, #148]	; (80088d4 <__pow5mult+0xa8>)
 800883e:	3a01      	subs	r2, #1
 8008840:	2300      	movs	r3, #0
 8008842:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008846:	f7ff fe51 	bl	80084ec <__multadd>
 800884a:	4607      	mov	r7, r0
 800884c:	10ad      	asrs	r5, r5, #2
 800884e:	d03d      	beq.n	80088cc <__pow5mult+0xa0>
 8008850:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008852:	b97c      	cbnz	r4, 8008874 <__pow5mult+0x48>
 8008854:	2010      	movs	r0, #16
 8008856:	f7ff fdcd 	bl	80083f4 <malloc>
 800885a:	4602      	mov	r2, r0
 800885c:	6270      	str	r0, [r6, #36]	; 0x24
 800885e:	b928      	cbnz	r0, 800886c <__pow5mult+0x40>
 8008860:	4b1d      	ldr	r3, [pc, #116]	; (80088d8 <__pow5mult+0xac>)
 8008862:	481e      	ldr	r0, [pc, #120]	; (80088dc <__pow5mult+0xb0>)
 8008864:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008868:	f000 febc 	bl	80095e4 <__assert_func>
 800886c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008870:	6004      	str	r4, [r0, #0]
 8008872:	60c4      	str	r4, [r0, #12]
 8008874:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008878:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800887c:	b94c      	cbnz	r4, 8008892 <__pow5mult+0x66>
 800887e:	f240 2171 	movw	r1, #625	; 0x271
 8008882:	4630      	mov	r0, r6
 8008884:	f7ff ff16 	bl	80086b4 <__i2b>
 8008888:	2300      	movs	r3, #0
 800888a:	f8c8 0008 	str.w	r0, [r8, #8]
 800888e:	4604      	mov	r4, r0
 8008890:	6003      	str	r3, [r0, #0]
 8008892:	f04f 0900 	mov.w	r9, #0
 8008896:	07eb      	lsls	r3, r5, #31
 8008898:	d50a      	bpl.n	80088b0 <__pow5mult+0x84>
 800889a:	4639      	mov	r1, r7
 800889c:	4622      	mov	r2, r4
 800889e:	4630      	mov	r0, r6
 80088a0:	f7ff ff1e 	bl	80086e0 <__multiply>
 80088a4:	4639      	mov	r1, r7
 80088a6:	4680      	mov	r8, r0
 80088a8:	4630      	mov	r0, r6
 80088aa:	f7ff fdfd 	bl	80084a8 <_Bfree>
 80088ae:	4647      	mov	r7, r8
 80088b0:	106d      	asrs	r5, r5, #1
 80088b2:	d00b      	beq.n	80088cc <__pow5mult+0xa0>
 80088b4:	6820      	ldr	r0, [r4, #0]
 80088b6:	b938      	cbnz	r0, 80088c8 <__pow5mult+0x9c>
 80088b8:	4622      	mov	r2, r4
 80088ba:	4621      	mov	r1, r4
 80088bc:	4630      	mov	r0, r6
 80088be:	f7ff ff0f 	bl	80086e0 <__multiply>
 80088c2:	6020      	str	r0, [r4, #0]
 80088c4:	f8c0 9000 	str.w	r9, [r0]
 80088c8:	4604      	mov	r4, r0
 80088ca:	e7e4      	b.n	8008896 <__pow5mult+0x6a>
 80088cc:	4638      	mov	r0, r7
 80088ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088d2:	bf00      	nop
 80088d4:	08009f50 	.word	0x08009f50
 80088d8:	08009de8 	.word	0x08009de8
 80088dc:	08009dff 	.word	0x08009dff

080088e0 <__lshift>:
 80088e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088e4:	460c      	mov	r4, r1
 80088e6:	6849      	ldr	r1, [r1, #4]
 80088e8:	6923      	ldr	r3, [r4, #16]
 80088ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80088ee:	68a3      	ldr	r3, [r4, #8]
 80088f0:	4607      	mov	r7, r0
 80088f2:	4691      	mov	r9, r2
 80088f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80088f8:	f108 0601 	add.w	r6, r8, #1
 80088fc:	42b3      	cmp	r3, r6
 80088fe:	db0b      	blt.n	8008918 <__lshift+0x38>
 8008900:	4638      	mov	r0, r7
 8008902:	f7ff fd91 	bl	8008428 <_Balloc>
 8008906:	4605      	mov	r5, r0
 8008908:	b948      	cbnz	r0, 800891e <__lshift+0x3e>
 800890a:	4602      	mov	r2, r0
 800890c:	4b28      	ldr	r3, [pc, #160]	; (80089b0 <__lshift+0xd0>)
 800890e:	4829      	ldr	r0, [pc, #164]	; (80089b4 <__lshift+0xd4>)
 8008910:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008914:	f000 fe66 	bl	80095e4 <__assert_func>
 8008918:	3101      	adds	r1, #1
 800891a:	005b      	lsls	r3, r3, #1
 800891c:	e7ee      	b.n	80088fc <__lshift+0x1c>
 800891e:	2300      	movs	r3, #0
 8008920:	f100 0114 	add.w	r1, r0, #20
 8008924:	f100 0210 	add.w	r2, r0, #16
 8008928:	4618      	mov	r0, r3
 800892a:	4553      	cmp	r3, sl
 800892c:	db33      	blt.n	8008996 <__lshift+0xb6>
 800892e:	6920      	ldr	r0, [r4, #16]
 8008930:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008934:	f104 0314 	add.w	r3, r4, #20
 8008938:	f019 091f 	ands.w	r9, r9, #31
 800893c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008940:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008944:	d02b      	beq.n	800899e <__lshift+0xbe>
 8008946:	f1c9 0e20 	rsb	lr, r9, #32
 800894a:	468a      	mov	sl, r1
 800894c:	2200      	movs	r2, #0
 800894e:	6818      	ldr	r0, [r3, #0]
 8008950:	fa00 f009 	lsl.w	r0, r0, r9
 8008954:	4302      	orrs	r2, r0
 8008956:	f84a 2b04 	str.w	r2, [sl], #4
 800895a:	f853 2b04 	ldr.w	r2, [r3], #4
 800895e:	459c      	cmp	ip, r3
 8008960:	fa22 f20e 	lsr.w	r2, r2, lr
 8008964:	d8f3      	bhi.n	800894e <__lshift+0x6e>
 8008966:	ebac 0304 	sub.w	r3, ip, r4
 800896a:	3b15      	subs	r3, #21
 800896c:	f023 0303 	bic.w	r3, r3, #3
 8008970:	3304      	adds	r3, #4
 8008972:	f104 0015 	add.w	r0, r4, #21
 8008976:	4584      	cmp	ip, r0
 8008978:	bf38      	it	cc
 800897a:	2304      	movcc	r3, #4
 800897c:	50ca      	str	r2, [r1, r3]
 800897e:	b10a      	cbz	r2, 8008984 <__lshift+0xa4>
 8008980:	f108 0602 	add.w	r6, r8, #2
 8008984:	3e01      	subs	r6, #1
 8008986:	4638      	mov	r0, r7
 8008988:	612e      	str	r6, [r5, #16]
 800898a:	4621      	mov	r1, r4
 800898c:	f7ff fd8c 	bl	80084a8 <_Bfree>
 8008990:	4628      	mov	r0, r5
 8008992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008996:	f842 0f04 	str.w	r0, [r2, #4]!
 800899a:	3301      	adds	r3, #1
 800899c:	e7c5      	b.n	800892a <__lshift+0x4a>
 800899e:	3904      	subs	r1, #4
 80089a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80089a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80089a8:	459c      	cmp	ip, r3
 80089aa:	d8f9      	bhi.n	80089a0 <__lshift+0xc0>
 80089ac:	e7ea      	b.n	8008984 <__lshift+0xa4>
 80089ae:	bf00      	nop
 80089b0:	08009d58 	.word	0x08009d58
 80089b4:	08009dff 	.word	0x08009dff

080089b8 <__mcmp>:
 80089b8:	b530      	push	{r4, r5, lr}
 80089ba:	6902      	ldr	r2, [r0, #16]
 80089bc:	690c      	ldr	r4, [r1, #16]
 80089be:	1b12      	subs	r2, r2, r4
 80089c0:	d10e      	bne.n	80089e0 <__mcmp+0x28>
 80089c2:	f100 0314 	add.w	r3, r0, #20
 80089c6:	3114      	adds	r1, #20
 80089c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80089cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80089d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80089d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80089d8:	42a5      	cmp	r5, r4
 80089da:	d003      	beq.n	80089e4 <__mcmp+0x2c>
 80089dc:	d305      	bcc.n	80089ea <__mcmp+0x32>
 80089de:	2201      	movs	r2, #1
 80089e0:	4610      	mov	r0, r2
 80089e2:	bd30      	pop	{r4, r5, pc}
 80089e4:	4283      	cmp	r3, r0
 80089e6:	d3f3      	bcc.n	80089d0 <__mcmp+0x18>
 80089e8:	e7fa      	b.n	80089e0 <__mcmp+0x28>
 80089ea:	f04f 32ff 	mov.w	r2, #4294967295
 80089ee:	e7f7      	b.n	80089e0 <__mcmp+0x28>

080089f0 <__mdiff>:
 80089f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089f4:	460c      	mov	r4, r1
 80089f6:	4606      	mov	r6, r0
 80089f8:	4611      	mov	r1, r2
 80089fa:	4620      	mov	r0, r4
 80089fc:	4617      	mov	r7, r2
 80089fe:	f7ff ffdb 	bl	80089b8 <__mcmp>
 8008a02:	1e05      	subs	r5, r0, #0
 8008a04:	d110      	bne.n	8008a28 <__mdiff+0x38>
 8008a06:	4629      	mov	r1, r5
 8008a08:	4630      	mov	r0, r6
 8008a0a:	f7ff fd0d 	bl	8008428 <_Balloc>
 8008a0e:	b930      	cbnz	r0, 8008a1e <__mdiff+0x2e>
 8008a10:	4b39      	ldr	r3, [pc, #228]	; (8008af8 <__mdiff+0x108>)
 8008a12:	4602      	mov	r2, r0
 8008a14:	f240 2132 	movw	r1, #562	; 0x232
 8008a18:	4838      	ldr	r0, [pc, #224]	; (8008afc <__mdiff+0x10c>)
 8008a1a:	f000 fde3 	bl	80095e4 <__assert_func>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a28:	bfa4      	itt	ge
 8008a2a:	463b      	movge	r3, r7
 8008a2c:	4627      	movge	r7, r4
 8008a2e:	4630      	mov	r0, r6
 8008a30:	6879      	ldr	r1, [r7, #4]
 8008a32:	bfa6      	itte	ge
 8008a34:	461c      	movge	r4, r3
 8008a36:	2500      	movge	r5, #0
 8008a38:	2501      	movlt	r5, #1
 8008a3a:	f7ff fcf5 	bl	8008428 <_Balloc>
 8008a3e:	b920      	cbnz	r0, 8008a4a <__mdiff+0x5a>
 8008a40:	4b2d      	ldr	r3, [pc, #180]	; (8008af8 <__mdiff+0x108>)
 8008a42:	4602      	mov	r2, r0
 8008a44:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008a48:	e7e6      	b.n	8008a18 <__mdiff+0x28>
 8008a4a:	693e      	ldr	r6, [r7, #16]
 8008a4c:	60c5      	str	r5, [r0, #12]
 8008a4e:	6925      	ldr	r5, [r4, #16]
 8008a50:	f107 0114 	add.w	r1, r7, #20
 8008a54:	f104 0914 	add.w	r9, r4, #20
 8008a58:	f100 0e14 	add.w	lr, r0, #20
 8008a5c:	f107 0210 	add.w	r2, r7, #16
 8008a60:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008a64:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008a68:	46f2      	mov	sl, lr
 8008a6a:	2700      	movs	r7, #0
 8008a6c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008a70:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008a74:	fa1f f883 	uxth.w	r8, r3
 8008a78:	fa17 f78b 	uxtah	r7, r7, fp
 8008a7c:	0c1b      	lsrs	r3, r3, #16
 8008a7e:	eba7 0808 	sub.w	r8, r7, r8
 8008a82:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008a86:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008a8a:	fa1f f888 	uxth.w	r8, r8
 8008a8e:	141f      	asrs	r7, r3, #16
 8008a90:	454d      	cmp	r5, r9
 8008a92:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008a96:	f84a 3b04 	str.w	r3, [sl], #4
 8008a9a:	d8e7      	bhi.n	8008a6c <__mdiff+0x7c>
 8008a9c:	1b2b      	subs	r3, r5, r4
 8008a9e:	3b15      	subs	r3, #21
 8008aa0:	f023 0303 	bic.w	r3, r3, #3
 8008aa4:	3304      	adds	r3, #4
 8008aa6:	3415      	adds	r4, #21
 8008aa8:	42a5      	cmp	r5, r4
 8008aaa:	bf38      	it	cc
 8008aac:	2304      	movcc	r3, #4
 8008aae:	4419      	add	r1, r3
 8008ab0:	4473      	add	r3, lr
 8008ab2:	469e      	mov	lr, r3
 8008ab4:	460d      	mov	r5, r1
 8008ab6:	4565      	cmp	r5, ip
 8008ab8:	d30e      	bcc.n	8008ad8 <__mdiff+0xe8>
 8008aba:	f10c 0203 	add.w	r2, ip, #3
 8008abe:	1a52      	subs	r2, r2, r1
 8008ac0:	f022 0203 	bic.w	r2, r2, #3
 8008ac4:	3903      	subs	r1, #3
 8008ac6:	458c      	cmp	ip, r1
 8008ac8:	bf38      	it	cc
 8008aca:	2200      	movcc	r2, #0
 8008acc:	441a      	add	r2, r3
 8008ace:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008ad2:	b17b      	cbz	r3, 8008af4 <__mdiff+0x104>
 8008ad4:	6106      	str	r6, [r0, #16]
 8008ad6:	e7a5      	b.n	8008a24 <__mdiff+0x34>
 8008ad8:	f855 8b04 	ldr.w	r8, [r5], #4
 8008adc:	fa17 f488 	uxtah	r4, r7, r8
 8008ae0:	1422      	asrs	r2, r4, #16
 8008ae2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008ae6:	b2a4      	uxth	r4, r4
 8008ae8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008aec:	f84e 4b04 	str.w	r4, [lr], #4
 8008af0:	1417      	asrs	r7, r2, #16
 8008af2:	e7e0      	b.n	8008ab6 <__mdiff+0xc6>
 8008af4:	3e01      	subs	r6, #1
 8008af6:	e7ea      	b.n	8008ace <__mdiff+0xde>
 8008af8:	08009d58 	.word	0x08009d58
 8008afc:	08009dff 	.word	0x08009dff

08008b00 <__ulp>:
 8008b00:	b082      	sub	sp, #8
 8008b02:	ed8d 0b00 	vstr	d0, [sp]
 8008b06:	9b01      	ldr	r3, [sp, #4]
 8008b08:	4912      	ldr	r1, [pc, #72]	; (8008b54 <__ulp+0x54>)
 8008b0a:	4019      	ands	r1, r3
 8008b0c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008b10:	2900      	cmp	r1, #0
 8008b12:	dd05      	ble.n	8008b20 <__ulp+0x20>
 8008b14:	2200      	movs	r2, #0
 8008b16:	460b      	mov	r3, r1
 8008b18:	ec43 2b10 	vmov	d0, r2, r3
 8008b1c:	b002      	add	sp, #8
 8008b1e:	4770      	bx	lr
 8008b20:	4249      	negs	r1, r1
 8008b22:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008b26:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008b2a:	f04f 0200 	mov.w	r2, #0
 8008b2e:	f04f 0300 	mov.w	r3, #0
 8008b32:	da04      	bge.n	8008b3e <__ulp+0x3e>
 8008b34:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008b38:	fa41 f300 	asr.w	r3, r1, r0
 8008b3c:	e7ec      	b.n	8008b18 <__ulp+0x18>
 8008b3e:	f1a0 0114 	sub.w	r1, r0, #20
 8008b42:	291e      	cmp	r1, #30
 8008b44:	bfda      	itte	le
 8008b46:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008b4a:	fa20 f101 	lsrle.w	r1, r0, r1
 8008b4e:	2101      	movgt	r1, #1
 8008b50:	460a      	mov	r2, r1
 8008b52:	e7e1      	b.n	8008b18 <__ulp+0x18>
 8008b54:	7ff00000 	.word	0x7ff00000

08008b58 <__b2d>:
 8008b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b5a:	6905      	ldr	r5, [r0, #16]
 8008b5c:	f100 0714 	add.w	r7, r0, #20
 8008b60:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008b64:	1f2e      	subs	r6, r5, #4
 8008b66:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	f7ff fd52 	bl	8008614 <__hi0bits>
 8008b70:	f1c0 0320 	rsb	r3, r0, #32
 8008b74:	280a      	cmp	r0, #10
 8008b76:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008bf4 <__b2d+0x9c>
 8008b7a:	600b      	str	r3, [r1, #0]
 8008b7c:	dc14      	bgt.n	8008ba8 <__b2d+0x50>
 8008b7e:	f1c0 0e0b 	rsb	lr, r0, #11
 8008b82:	fa24 f10e 	lsr.w	r1, r4, lr
 8008b86:	42b7      	cmp	r7, r6
 8008b88:	ea41 030c 	orr.w	r3, r1, ip
 8008b8c:	bf34      	ite	cc
 8008b8e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008b92:	2100      	movcs	r1, #0
 8008b94:	3015      	adds	r0, #21
 8008b96:	fa04 f000 	lsl.w	r0, r4, r0
 8008b9a:	fa21 f10e 	lsr.w	r1, r1, lr
 8008b9e:	ea40 0201 	orr.w	r2, r0, r1
 8008ba2:	ec43 2b10 	vmov	d0, r2, r3
 8008ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ba8:	42b7      	cmp	r7, r6
 8008baa:	bf3a      	itte	cc
 8008bac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008bb0:	f1a5 0608 	subcc.w	r6, r5, #8
 8008bb4:	2100      	movcs	r1, #0
 8008bb6:	380b      	subs	r0, #11
 8008bb8:	d017      	beq.n	8008bea <__b2d+0x92>
 8008bba:	f1c0 0c20 	rsb	ip, r0, #32
 8008bbe:	fa04 f500 	lsl.w	r5, r4, r0
 8008bc2:	42be      	cmp	r6, r7
 8008bc4:	fa21 f40c 	lsr.w	r4, r1, ip
 8008bc8:	ea45 0504 	orr.w	r5, r5, r4
 8008bcc:	bf8c      	ite	hi
 8008bce:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008bd2:	2400      	movls	r4, #0
 8008bd4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008bd8:	fa01 f000 	lsl.w	r0, r1, r0
 8008bdc:	fa24 f40c 	lsr.w	r4, r4, ip
 8008be0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008be4:	ea40 0204 	orr.w	r2, r0, r4
 8008be8:	e7db      	b.n	8008ba2 <__b2d+0x4a>
 8008bea:	ea44 030c 	orr.w	r3, r4, ip
 8008bee:	460a      	mov	r2, r1
 8008bf0:	e7d7      	b.n	8008ba2 <__b2d+0x4a>
 8008bf2:	bf00      	nop
 8008bf4:	3ff00000 	.word	0x3ff00000

08008bf8 <__d2b>:
 8008bf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008bfc:	4689      	mov	r9, r1
 8008bfe:	2101      	movs	r1, #1
 8008c00:	ec57 6b10 	vmov	r6, r7, d0
 8008c04:	4690      	mov	r8, r2
 8008c06:	f7ff fc0f 	bl	8008428 <_Balloc>
 8008c0a:	4604      	mov	r4, r0
 8008c0c:	b930      	cbnz	r0, 8008c1c <__d2b+0x24>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	4b25      	ldr	r3, [pc, #148]	; (8008ca8 <__d2b+0xb0>)
 8008c12:	4826      	ldr	r0, [pc, #152]	; (8008cac <__d2b+0xb4>)
 8008c14:	f240 310a 	movw	r1, #778	; 0x30a
 8008c18:	f000 fce4 	bl	80095e4 <__assert_func>
 8008c1c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008c20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008c24:	bb35      	cbnz	r5, 8008c74 <__d2b+0x7c>
 8008c26:	2e00      	cmp	r6, #0
 8008c28:	9301      	str	r3, [sp, #4]
 8008c2a:	d028      	beq.n	8008c7e <__d2b+0x86>
 8008c2c:	4668      	mov	r0, sp
 8008c2e:	9600      	str	r6, [sp, #0]
 8008c30:	f7ff fd10 	bl	8008654 <__lo0bits>
 8008c34:	9900      	ldr	r1, [sp, #0]
 8008c36:	b300      	cbz	r0, 8008c7a <__d2b+0x82>
 8008c38:	9a01      	ldr	r2, [sp, #4]
 8008c3a:	f1c0 0320 	rsb	r3, r0, #32
 8008c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c42:	430b      	orrs	r3, r1
 8008c44:	40c2      	lsrs	r2, r0
 8008c46:	6163      	str	r3, [r4, #20]
 8008c48:	9201      	str	r2, [sp, #4]
 8008c4a:	9b01      	ldr	r3, [sp, #4]
 8008c4c:	61a3      	str	r3, [r4, #24]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	bf14      	ite	ne
 8008c52:	2202      	movne	r2, #2
 8008c54:	2201      	moveq	r2, #1
 8008c56:	6122      	str	r2, [r4, #16]
 8008c58:	b1d5      	cbz	r5, 8008c90 <__d2b+0x98>
 8008c5a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008c5e:	4405      	add	r5, r0
 8008c60:	f8c9 5000 	str.w	r5, [r9]
 8008c64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008c68:	f8c8 0000 	str.w	r0, [r8]
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	b003      	add	sp, #12
 8008c70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c78:	e7d5      	b.n	8008c26 <__d2b+0x2e>
 8008c7a:	6161      	str	r1, [r4, #20]
 8008c7c:	e7e5      	b.n	8008c4a <__d2b+0x52>
 8008c7e:	a801      	add	r0, sp, #4
 8008c80:	f7ff fce8 	bl	8008654 <__lo0bits>
 8008c84:	9b01      	ldr	r3, [sp, #4]
 8008c86:	6163      	str	r3, [r4, #20]
 8008c88:	2201      	movs	r2, #1
 8008c8a:	6122      	str	r2, [r4, #16]
 8008c8c:	3020      	adds	r0, #32
 8008c8e:	e7e3      	b.n	8008c58 <__d2b+0x60>
 8008c90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008c98:	f8c9 0000 	str.w	r0, [r9]
 8008c9c:	6918      	ldr	r0, [r3, #16]
 8008c9e:	f7ff fcb9 	bl	8008614 <__hi0bits>
 8008ca2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008ca6:	e7df      	b.n	8008c68 <__d2b+0x70>
 8008ca8:	08009d58 	.word	0x08009d58
 8008cac:	08009dff 	.word	0x08009dff

08008cb0 <__ratio>:
 8008cb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb4:	4688      	mov	r8, r1
 8008cb6:	4669      	mov	r1, sp
 8008cb8:	4681      	mov	r9, r0
 8008cba:	f7ff ff4d 	bl	8008b58 <__b2d>
 8008cbe:	a901      	add	r1, sp, #4
 8008cc0:	4640      	mov	r0, r8
 8008cc2:	ec55 4b10 	vmov	r4, r5, d0
 8008cc6:	f7ff ff47 	bl	8008b58 <__b2d>
 8008cca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008cce:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008cd2:	eba3 0c02 	sub.w	ip, r3, r2
 8008cd6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008cda:	1a9b      	subs	r3, r3, r2
 8008cdc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008ce0:	ec51 0b10 	vmov	r0, r1, d0
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	bfd6      	itet	le
 8008ce8:	460a      	movle	r2, r1
 8008cea:	462a      	movgt	r2, r5
 8008cec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008cf0:	468b      	mov	fp, r1
 8008cf2:	462f      	mov	r7, r5
 8008cf4:	bfd4      	ite	le
 8008cf6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008cfa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008cfe:	4620      	mov	r0, r4
 8008d00:	ee10 2a10 	vmov	r2, s0
 8008d04:	465b      	mov	r3, fp
 8008d06:	4639      	mov	r1, r7
 8008d08:	f7f7 fda8 	bl	800085c <__aeabi_ddiv>
 8008d0c:	ec41 0b10 	vmov	d0, r0, r1
 8008d10:	b003      	add	sp, #12
 8008d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008d16 <__copybits>:
 8008d16:	3901      	subs	r1, #1
 8008d18:	b570      	push	{r4, r5, r6, lr}
 8008d1a:	1149      	asrs	r1, r1, #5
 8008d1c:	6914      	ldr	r4, [r2, #16]
 8008d1e:	3101      	adds	r1, #1
 8008d20:	f102 0314 	add.w	r3, r2, #20
 8008d24:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008d28:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008d2c:	1f05      	subs	r5, r0, #4
 8008d2e:	42a3      	cmp	r3, r4
 8008d30:	d30c      	bcc.n	8008d4c <__copybits+0x36>
 8008d32:	1aa3      	subs	r3, r4, r2
 8008d34:	3b11      	subs	r3, #17
 8008d36:	f023 0303 	bic.w	r3, r3, #3
 8008d3a:	3211      	adds	r2, #17
 8008d3c:	42a2      	cmp	r2, r4
 8008d3e:	bf88      	it	hi
 8008d40:	2300      	movhi	r3, #0
 8008d42:	4418      	add	r0, r3
 8008d44:	2300      	movs	r3, #0
 8008d46:	4288      	cmp	r0, r1
 8008d48:	d305      	bcc.n	8008d56 <__copybits+0x40>
 8008d4a:	bd70      	pop	{r4, r5, r6, pc}
 8008d4c:	f853 6b04 	ldr.w	r6, [r3], #4
 8008d50:	f845 6f04 	str.w	r6, [r5, #4]!
 8008d54:	e7eb      	b.n	8008d2e <__copybits+0x18>
 8008d56:	f840 3b04 	str.w	r3, [r0], #4
 8008d5a:	e7f4      	b.n	8008d46 <__copybits+0x30>

08008d5c <__any_on>:
 8008d5c:	f100 0214 	add.w	r2, r0, #20
 8008d60:	6900      	ldr	r0, [r0, #16]
 8008d62:	114b      	asrs	r3, r1, #5
 8008d64:	4298      	cmp	r0, r3
 8008d66:	b510      	push	{r4, lr}
 8008d68:	db11      	blt.n	8008d8e <__any_on+0x32>
 8008d6a:	dd0a      	ble.n	8008d82 <__any_on+0x26>
 8008d6c:	f011 011f 	ands.w	r1, r1, #31
 8008d70:	d007      	beq.n	8008d82 <__any_on+0x26>
 8008d72:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008d76:	fa24 f001 	lsr.w	r0, r4, r1
 8008d7a:	fa00 f101 	lsl.w	r1, r0, r1
 8008d7e:	428c      	cmp	r4, r1
 8008d80:	d10b      	bne.n	8008d9a <__any_on+0x3e>
 8008d82:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d803      	bhi.n	8008d92 <__any_on+0x36>
 8008d8a:	2000      	movs	r0, #0
 8008d8c:	bd10      	pop	{r4, pc}
 8008d8e:	4603      	mov	r3, r0
 8008d90:	e7f7      	b.n	8008d82 <__any_on+0x26>
 8008d92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008d96:	2900      	cmp	r1, #0
 8008d98:	d0f5      	beq.n	8008d86 <__any_on+0x2a>
 8008d9a:	2001      	movs	r0, #1
 8008d9c:	e7f6      	b.n	8008d8c <__any_on+0x30>

08008d9e <_calloc_r>:
 8008d9e:	b513      	push	{r0, r1, r4, lr}
 8008da0:	434a      	muls	r2, r1
 8008da2:	4611      	mov	r1, r2
 8008da4:	9201      	str	r2, [sp, #4]
 8008da6:	f000 f859 	bl	8008e5c <_malloc_r>
 8008daa:	4604      	mov	r4, r0
 8008dac:	b118      	cbz	r0, 8008db6 <_calloc_r+0x18>
 8008dae:	9a01      	ldr	r2, [sp, #4]
 8008db0:	2100      	movs	r1, #0
 8008db2:	f7fd fc6b 	bl	800668c <memset>
 8008db6:	4620      	mov	r0, r4
 8008db8:	b002      	add	sp, #8
 8008dba:	bd10      	pop	{r4, pc}

08008dbc <_free_r>:
 8008dbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dbe:	2900      	cmp	r1, #0
 8008dc0:	d048      	beq.n	8008e54 <_free_r+0x98>
 8008dc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dc6:	9001      	str	r0, [sp, #4]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	f1a1 0404 	sub.w	r4, r1, #4
 8008dce:	bfb8      	it	lt
 8008dd0:	18e4      	addlt	r4, r4, r3
 8008dd2:	f000 fc7b 	bl	80096cc <__malloc_lock>
 8008dd6:	4a20      	ldr	r2, [pc, #128]	; (8008e58 <_free_r+0x9c>)
 8008dd8:	9801      	ldr	r0, [sp, #4]
 8008dda:	6813      	ldr	r3, [r2, #0]
 8008ddc:	4615      	mov	r5, r2
 8008dde:	b933      	cbnz	r3, 8008dee <_free_r+0x32>
 8008de0:	6063      	str	r3, [r4, #4]
 8008de2:	6014      	str	r4, [r2, #0]
 8008de4:	b003      	add	sp, #12
 8008de6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008dea:	f000 bc75 	b.w	80096d8 <__malloc_unlock>
 8008dee:	42a3      	cmp	r3, r4
 8008df0:	d90b      	bls.n	8008e0a <_free_r+0x4e>
 8008df2:	6821      	ldr	r1, [r4, #0]
 8008df4:	1862      	adds	r2, r4, r1
 8008df6:	4293      	cmp	r3, r2
 8008df8:	bf04      	itt	eq
 8008dfa:	681a      	ldreq	r2, [r3, #0]
 8008dfc:	685b      	ldreq	r3, [r3, #4]
 8008dfe:	6063      	str	r3, [r4, #4]
 8008e00:	bf04      	itt	eq
 8008e02:	1852      	addeq	r2, r2, r1
 8008e04:	6022      	streq	r2, [r4, #0]
 8008e06:	602c      	str	r4, [r5, #0]
 8008e08:	e7ec      	b.n	8008de4 <_free_r+0x28>
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	b10b      	cbz	r3, 8008e14 <_free_r+0x58>
 8008e10:	42a3      	cmp	r3, r4
 8008e12:	d9fa      	bls.n	8008e0a <_free_r+0x4e>
 8008e14:	6811      	ldr	r1, [r2, #0]
 8008e16:	1855      	adds	r5, r2, r1
 8008e18:	42a5      	cmp	r5, r4
 8008e1a:	d10b      	bne.n	8008e34 <_free_r+0x78>
 8008e1c:	6824      	ldr	r4, [r4, #0]
 8008e1e:	4421      	add	r1, r4
 8008e20:	1854      	adds	r4, r2, r1
 8008e22:	42a3      	cmp	r3, r4
 8008e24:	6011      	str	r1, [r2, #0]
 8008e26:	d1dd      	bne.n	8008de4 <_free_r+0x28>
 8008e28:	681c      	ldr	r4, [r3, #0]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	6053      	str	r3, [r2, #4]
 8008e2e:	4421      	add	r1, r4
 8008e30:	6011      	str	r1, [r2, #0]
 8008e32:	e7d7      	b.n	8008de4 <_free_r+0x28>
 8008e34:	d902      	bls.n	8008e3c <_free_r+0x80>
 8008e36:	230c      	movs	r3, #12
 8008e38:	6003      	str	r3, [r0, #0]
 8008e3a:	e7d3      	b.n	8008de4 <_free_r+0x28>
 8008e3c:	6825      	ldr	r5, [r4, #0]
 8008e3e:	1961      	adds	r1, r4, r5
 8008e40:	428b      	cmp	r3, r1
 8008e42:	bf04      	itt	eq
 8008e44:	6819      	ldreq	r1, [r3, #0]
 8008e46:	685b      	ldreq	r3, [r3, #4]
 8008e48:	6063      	str	r3, [r4, #4]
 8008e4a:	bf04      	itt	eq
 8008e4c:	1949      	addeq	r1, r1, r5
 8008e4e:	6021      	streq	r1, [r4, #0]
 8008e50:	6054      	str	r4, [r2, #4]
 8008e52:	e7c7      	b.n	8008de4 <_free_r+0x28>
 8008e54:	b003      	add	sp, #12
 8008e56:	bd30      	pop	{r4, r5, pc}
 8008e58:	200002cc 	.word	0x200002cc

08008e5c <_malloc_r>:
 8008e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e5e:	1ccd      	adds	r5, r1, #3
 8008e60:	f025 0503 	bic.w	r5, r5, #3
 8008e64:	3508      	adds	r5, #8
 8008e66:	2d0c      	cmp	r5, #12
 8008e68:	bf38      	it	cc
 8008e6a:	250c      	movcc	r5, #12
 8008e6c:	2d00      	cmp	r5, #0
 8008e6e:	4606      	mov	r6, r0
 8008e70:	db01      	blt.n	8008e76 <_malloc_r+0x1a>
 8008e72:	42a9      	cmp	r1, r5
 8008e74:	d903      	bls.n	8008e7e <_malloc_r+0x22>
 8008e76:	230c      	movs	r3, #12
 8008e78:	6033      	str	r3, [r6, #0]
 8008e7a:	2000      	movs	r0, #0
 8008e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e7e:	f000 fc25 	bl	80096cc <__malloc_lock>
 8008e82:	4921      	ldr	r1, [pc, #132]	; (8008f08 <_malloc_r+0xac>)
 8008e84:	680a      	ldr	r2, [r1, #0]
 8008e86:	4614      	mov	r4, r2
 8008e88:	b99c      	cbnz	r4, 8008eb2 <_malloc_r+0x56>
 8008e8a:	4f20      	ldr	r7, [pc, #128]	; (8008f0c <_malloc_r+0xb0>)
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	b923      	cbnz	r3, 8008e9a <_malloc_r+0x3e>
 8008e90:	4621      	mov	r1, r4
 8008e92:	4630      	mov	r0, r6
 8008e94:	f000 fb34 	bl	8009500 <_sbrk_r>
 8008e98:	6038      	str	r0, [r7, #0]
 8008e9a:	4629      	mov	r1, r5
 8008e9c:	4630      	mov	r0, r6
 8008e9e:	f000 fb2f 	bl	8009500 <_sbrk_r>
 8008ea2:	1c43      	adds	r3, r0, #1
 8008ea4:	d123      	bne.n	8008eee <_malloc_r+0x92>
 8008ea6:	230c      	movs	r3, #12
 8008ea8:	6033      	str	r3, [r6, #0]
 8008eaa:	4630      	mov	r0, r6
 8008eac:	f000 fc14 	bl	80096d8 <__malloc_unlock>
 8008eb0:	e7e3      	b.n	8008e7a <_malloc_r+0x1e>
 8008eb2:	6823      	ldr	r3, [r4, #0]
 8008eb4:	1b5b      	subs	r3, r3, r5
 8008eb6:	d417      	bmi.n	8008ee8 <_malloc_r+0x8c>
 8008eb8:	2b0b      	cmp	r3, #11
 8008eba:	d903      	bls.n	8008ec4 <_malloc_r+0x68>
 8008ebc:	6023      	str	r3, [r4, #0]
 8008ebe:	441c      	add	r4, r3
 8008ec0:	6025      	str	r5, [r4, #0]
 8008ec2:	e004      	b.n	8008ece <_malloc_r+0x72>
 8008ec4:	6863      	ldr	r3, [r4, #4]
 8008ec6:	42a2      	cmp	r2, r4
 8008ec8:	bf0c      	ite	eq
 8008eca:	600b      	streq	r3, [r1, #0]
 8008ecc:	6053      	strne	r3, [r2, #4]
 8008ece:	4630      	mov	r0, r6
 8008ed0:	f000 fc02 	bl	80096d8 <__malloc_unlock>
 8008ed4:	f104 000b 	add.w	r0, r4, #11
 8008ed8:	1d23      	adds	r3, r4, #4
 8008eda:	f020 0007 	bic.w	r0, r0, #7
 8008ede:	1ac2      	subs	r2, r0, r3
 8008ee0:	d0cc      	beq.n	8008e7c <_malloc_r+0x20>
 8008ee2:	1a1b      	subs	r3, r3, r0
 8008ee4:	50a3      	str	r3, [r4, r2]
 8008ee6:	e7c9      	b.n	8008e7c <_malloc_r+0x20>
 8008ee8:	4622      	mov	r2, r4
 8008eea:	6864      	ldr	r4, [r4, #4]
 8008eec:	e7cc      	b.n	8008e88 <_malloc_r+0x2c>
 8008eee:	1cc4      	adds	r4, r0, #3
 8008ef0:	f024 0403 	bic.w	r4, r4, #3
 8008ef4:	42a0      	cmp	r0, r4
 8008ef6:	d0e3      	beq.n	8008ec0 <_malloc_r+0x64>
 8008ef8:	1a21      	subs	r1, r4, r0
 8008efa:	4630      	mov	r0, r6
 8008efc:	f000 fb00 	bl	8009500 <_sbrk_r>
 8008f00:	3001      	adds	r0, #1
 8008f02:	d1dd      	bne.n	8008ec0 <_malloc_r+0x64>
 8008f04:	e7cf      	b.n	8008ea6 <_malloc_r+0x4a>
 8008f06:	bf00      	nop
 8008f08:	200002cc 	.word	0x200002cc
 8008f0c:	200002d0 	.word	0x200002d0

08008f10 <__sfputc_r>:
 8008f10:	6893      	ldr	r3, [r2, #8]
 8008f12:	3b01      	subs	r3, #1
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	b410      	push	{r4}
 8008f18:	6093      	str	r3, [r2, #8]
 8008f1a:	da08      	bge.n	8008f2e <__sfputc_r+0x1e>
 8008f1c:	6994      	ldr	r4, [r2, #24]
 8008f1e:	42a3      	cmp	r3, r4
 8008f20:	db01      	blt.n	8008f26 <__sfputc_r+0x16>
 8008f22:	290a      	cmp	r1, #10
 8008f24:	d103      	bne.n	8008f2e <__sfputc_r+0x1e>
 8008f26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f2a:	f7fe bc15 	b.w	8007758 <__swbuf_r>
 8008f2e:	6813      	ldr	r3, [r2, #0]
 8008f30:	1c58      	adds	r0, r3, #1
 8008f32:	6010      	str	r0, [r2, #0]
 8008f34:	7019      	strb	r1, [r3, #0]
 8008f36:	4608      	mov	r0, r1
 8008f38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f3c:	4770      	bx	lr

08008f3e <__sfputs_r>:
 8008f3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f40:	4606      	mov	r6, r0
 8008f42:	460f      	mov	r7, r1
 8008f44:	4614      	mov	r4, r2
 8008f46:	18d5      	adds	r5, r2, r3
 8008f48:	42ac      	cmp	r4, r5
 8008f4a:	d101      	bne.n	8008f50 <__sfputs_r+0x12>
 8008f4c:	2000      	movs	r0, #0
 8008f4e:	e007      	b.n	8008f60 <__sfputs_r+0x22>
 8008f50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f54:	463a      	mov	r2, r7
 8008f56:	4630      	mov	r0, r6
 8008f58:	f7ff ffda 	bl	8008f10 <__sfputc_r>
 8008f5c:	1c43      	adds	r3, r0, #1
 8008f5e:	d1f3      	bne.n	8008f48 <__sfputs_r+0xa>
 8008f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f64 <_vfiprintf_r>:
 8008f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f68:	460d      	mov	r5, r1
 8008f6a:	b09d      	sub	sp, #116	; 0x74
 8008f6c:	4614      	mov	r4, r2
 8008f6e:	4698      	mov	r8, r3
 8008f70:	4606      	mov	r6, r0
 8008f72:	b118      	cbz	r0, 8008f7c <_vfiprintf_r+0x18>
 8008f74:	6983      	ldr	r3, [r0, #24]
 8008f76:	b90b      	cbnz	r3, 8008f7c <_vfiprintf_r+0x18>
 8008f78:	f7fe fdc8 	bl	8007b0c <__sinit>
 8008f7c:	4b89      	ldr	r3, [pc, #548]	; (80091a4 <_vfiprintf_r+0x240>)
 8008f7e:	429d      	cmp	r5, r3
 8008f80:	d11b      	bne.n	8008fba <_vfiprintf_r+0x56>
 8008f82:	6875      	ldr	r5, [r6, #4]
 8008f84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f86:	07d9      	lsls	r1, r3, #31
 8008f88:	d405      	bmi.n	8008f96 <_vfiprintf_r+0x32>
 8008f8a:	89ab      	ldrh	r3, [r5, #12]
 8008f8c:	059a      	lsls	r2, r3, #22
 8008f8e:	d402      	bmi.n	8008f96 <_vfiprintf_r+0x32>
 8008f90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f92:	f7ff f9c8 	bl	8008326 <__retarget_lock_acquire_recursive>
 8008f96:	89ab      	ldrh	r3, [r5, #12]
 8008f98:	071b      	lsls	r3, r3, #28
 8008f9a:	d501      	bpl.n	8008fa0 <_vfiprintf_r+0x3c>
 8008f9c:	692b      	ldr	r3, [r5, #16]
 8008f9e:	b9eb      	cbnz	r3, 8008fdc <_vfiprintf_r+0x78>
 8008fa0:	4629      	mov	r1, r5
 8008fa2:	4630      	mov	r0, r6
 8008fa4:	f7fe fc2a 	bl	80077fc <__swsetup_r>
 8008fa8:	b1c0      	cbz	r0, 8008fdc <_vfiprintf_r+0x78>
 8008faa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fac:	07dc      	lsls	r4, r3, #31
 8008fae:	d50e      	bpl.n	8008fce <_vfiprintf_r+0x6a>
 8008fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8008fb4:	b01d      	add	sp, #116	; 0x74
 8008fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fba:	4b7b      	ldr	r3, [pc, #492]	; (80091a8 <_vfiprintf_r+0x244>)
 8008fbc:	429d      	cmp	r5, r3
 8008fbe:	d101      	bne.n	8008fc4 <_vfiprintf_r+0x60>
 8008fc0:	68b5      	ldr	r5, [r6, #8]
 8008fc2:	e7df      	b.n	8008f84 <_vfiprintf_r+0x20>
 8008fc4:	4b79      	ldr	r3, [pc, #484]	; (80091ac <_vfiprintf_r+0x248>)
 8008fc6:	429d      	cmp	r5, r3
 8008fc8:	bf08      	it	eq
 8008fca:	68f5      	ldreq	r5, [r6, #12]
 8008fcc:	e7da      	b.n	8008f84 <_vfiprintf_r+0x20>
 8008fce:	89ab      	ldrh	r3, [r5, #12]
 8008fd0:	0598      	lsls	r0, r3, #22
 8008fd2:	d4ed      	bmi.n	8008fb0 <_vfiprintf_r+0x4c>
 8008fd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fd6:	f7ff f9a7 	bl	8008328 <__retarget_lock_release_recursive>
 8008fda:	e7e9      	b.n	8008fb0 <_vfiprintf_r+0x4c>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	9309      	str	r3, [sp, #36]	; 0x24
 8008fe0:	2320      	movs	r3, #32
 8008fe2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fe6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fea:	2330      	movs	r3, #48	; 0x30
 8008fec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80091b0 <_vfiprintf_r+0x24c>
 8008ff0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ff4:	f04f 0901 	mov.w	r9, #1
 8008ff8:	4623      	mov	r3, r4
 8008ffa:	469a      	mov	sl, r3
 8008ffc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009000:	b10a      	cbz	r2, 8009006 <_vfiprintf_r+0xa2>
 8009002:	2a25      	cmp	r2, #37	; 0x25
 8009004:	d1f9      	bne.n	8008ffa <_vfiprintf_r+0x96>
 8009006:	ebba 0b04 	subs.w	fp, sl, r4
 800900a:	d00b      	beq.n	8009024 <_vfiprintf_r+0xc0>
 800900c:	465b      	mov	r3, fp
 800900e:	4622      	mov	r2, r4
 8009010:	4629      	mov	r1, r5
 8009012:	4630      	mov	r0, r6
 8009014:	f7ff ff93 	bl	8008f3e <__sfputs_r>
 8009018:	3001      	adds	r0, #1
 800901a:	f000 80aa 	beq.w	8009172 <_vfiprintf_r+0x20e>
 800901e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009020:	445a      	add	r2, fp
 8009022:	9209      	str	r2, [sp, #36]	; 0x24
 8009024:	f89a 3000 	ldrb.w	r3, [sl]
 8009028:	2b00      	cmp	r3, #0
 800902a:	f000 80a2 	beq.w	8009172 <_vfiprintf_r+0x20e>
 800902e:	2300      	movs	r3, #0
 8009030:	f04f 32ff 	mov.w	r2, #4294967295
 8009034:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009038:	f10a 0a01 	add.w	sl, sl, #1
 800903c:	9304      	str	r3, [sp, #16]
 800903e:	9307      	str	r3, [sp, #28]
 8009040:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009044:	931a      	str	r3, [sp, #104]	; 0x68
 8009046:	4654      	mov	r4, sl
 8009048:	2205      	movs	r2, #5
 800904a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800904e:	4858      	ldr	r0, [pc, #352]	; (80091b0 <_vfiprintf_r+0x24c>)
 8009050:	f7f7 f8ce 	bl	80001f0 <memchr>
 8009054:	9a04      	ldr	r2, [sp, #16]
 8009056:	b9d8      	cbnz	r0, 8009090 <_vfiprintf_r+0x12c>
 8009058:	06d1      	lsls	r1, r2, #27
 800905a:	bf44      	itt	mi
 800905c:	2320      	movmi	r3, #32
 800905e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009062:	0713      	lsls	r3, r2, #28
 8009064:	bf44      	itt	mi
 8009066:	232b      	movmi	r3, #43	; 0x2b
 8009068:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800906c:	f89a 3000 	ldrb.w	r3, [sl]
 8009070:	2b2a      	cmp	r3, #42	; 0x2a
 8009072:	d015      	beq.n	80090a0 <_vfiprintf_r+0x13c>
 8009074:	9a07      	ldr	r2, [sp, #28]
 8009076:	4654      	mov	r4, sl
 8009078:	2000      	movs	r0, #0
 800907a:	f04f 0c0a 	mov.w	ip, #10
 800907e:	4621      	mov	r1, r4
 8009080:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009084:	3b30      	subs	r3, #48	; 0x30
 8009086:	2b09      	cmp	r3, #9
 8009088:	d94e      	bls.n	8009128 <_vfiprintf_r+0x1c4>
 800908a:	b1b0      	cbz	r0, 80090ba <_vfiprintf_r+0x156>
 800908c:	9207      	str	r2, [sp, #28]
 800908e:	e014      	b.n	80090ba <_vfiprintf_r+0x156>
 8009090:	eba0 0308 	sub.w	r3, r0, r8
 8009094:	fa09 f303 	lsl.w	r3, r9, r3
 8009098:	4313      	orrs	r3, r2
 800909a:	9304      	str	r3, [sp, #16]
 800909c:	46a2      	mov	sl, r4
 800909e:	e7d2      	b.n	8009046 <_vfiprintf_r+0xe2>
 80090a0:	9b03      	ldr	r3, [sp, #12]
 80090a2:	1d19      	adds	r1, r3, #4
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	9103      	str	r1, [sp, #12]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	bfbb      	ittet	lt
 80090ac:	425b      	neglt	r3, r3
 80090ae:	f042 0202 	orrlt.w	r2, r2, #2
 80090b2:	9307      	strge	r3, [sp, #28]
 80090b4:	9307      	strlt	r3, [sp, #28]
 80090b6:	bfb8      	it	lt
 80090b8:	9204      	strlt	r2, [sp, #16]
 80090ba:	7823      	ldrb	r3, [r4, #0]
 80090bc:	2b2e      	cmp	r3, #46	; 0x2e
 80090be:	d10c      	bne.n	80090da <_vfiprintf_r+0x176>
 80090c0:	7863      	ldrb	r3, [r4, #1]
 80090c2:	2b2a      	cmp	r3, #42	; 0x2a
 80090c4:	d135      	bne.n	8009132 <_vfiprintf_r+0x1ce>
 80090c6:	9b03      	ldr	r3, [sp, #12]
 80090c8:	1d1a      	adds	r2, r3, #4
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	9203      	str	r2, [sp, #12]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	bfb8      	it	lt
 80090d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80090d6:	3402      	adds	r4, #2
 80090d8:	9305      	str	r3, [sp, #20]
 80090da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80091c0 <_vfiprintf_r+0x25c>
 80090de:	7821      	ldrb	r1, [r4, #0]
 80090e0:	2203      	movs	r2, #3
 80090e2:	4650      	mov	r0, sl
 80090e4:	f7f7 f884 	bl	80001f0 <memchr>
 80090e8:	b140      	cbz	r0, 80090fc <_vfiprintf_r+0x198>
 80090ea:	2340      	movs	r3, #64	; 0x40
 80090ec:	eba0 000a 	sub.w	r0, r0, sl
 80090f0:	fa03 f000 	lsl.w	r0, r3, r0
 80090f4:	9b04      	ldr	r3, [sp, #16]
 80090f6:	4303      	orrs	r3, r0
 80090f8:	3401      	adds	r4, #1
 80090fa:	9304      	str	r3, [sp, #16]
 80090fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009100:	482c      	ldr	r0, [pc, #176]	; (80091b4 <_vfiprintf_r+0x250>)
 8009102:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009106:	2206      	movs	r2, #6
 8009108:	f7f7 f872 	bl	80001f0 <memchr>
 800910c:	2800      	cmp	r0, #0
 800910e:	d03f      	beq.n	8009190 <_vfiprintf_r+0x22c>
 8009110:	4b29      	ldr	r3, [pc, #164]	; (80091b8 <_vfiprintf_r+0x254>)
 8009112:	bb1b      	cbnz	r3, 800915c <_vfiprintf_r+0x1f8>
 8009114:	9b03      	ldr	r3, [sp, #12]
 8009116:	3307      	adds	r3, #7
 8009118:	f023 0307 	bic.w	r3, r3, #7
 800911c:	3308      	adds	r3, #8
 800911e:	9303      	str	r3, [sp, #12]
 8009120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009122:	443b      	add	r3, r7
 8009124:	9309      	str	r3, [sp, #36]	; 0x24
 8009126:	e767      	b.n	8008ff8 <_vfiprintf_r+0x94>
 8009128:	fb0c 3202 	mla	r2, ip, r2, r3
 800912c:	460c      	mov	r4, r1
 800912e:	2001      	movs	r0, #1
 8009130:	e7a5      	b.n	800907e <_vfiprintf_r+0x11a>
 8009132:	2300      	movs	r3, #0
 8009134:	3401      	adds	r4, #1
 8009136:	9305      	str	r3, [sp, #20]
 8009138:	4619      	mov	r1, r3
 800913a:	f04f 0c0a 	mov.w	ip, #10
 800913e:	4620      	mov	r0, r4
 8009140:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009144:	3a30      	subs	r2, #48	; 0x30
 8009146:	2a09      	cmp	r2, #9
 8009148:	d903      	bls.n	8009152 <_vfiprintf_r+0x1ee>
 800914a:	2b00      	cmp	r3, #0
 800914c:	d0c5      	beq.n	80090da <_vfiprintf_r+0x176>
 800914e:	9105      	str	r1, [sp, #20]
 8009150:	e7c3      	b.n	80090da <_vfiprintf_r+0x176>
 8009152:	fb0c 2101 	mla	r1, ip, r1, r2
 8009156:	4604      	mov	r4, r0
 8009158:	2301      	movs	r3, #1
 800915a:	e7f0      	b.n	800913e <_vfiprintf_r+0x1da>
 800915c:	ab03      	add	r3, sp, #12
 800915e:	9300      	str	r3, [sp, #0]
 8009160:	462a      	mov	r2, r5
 8009162:	4b16      	ldr	r3, [pc, #88]	; (80091bc <_vfiprintf_r+0x258>)
 8009164:	a904      	add	r1, sp, #16
 8009166:	4630      	mov	r0, r6
 8009168:	f3af 8000 	nop.w
 800916c:	4607      	mov	r7, r0
 800916e:	1c78      	adds	r0, r7, #1
 8009170:	d1d6      	bne.n	8009120 <_vfiprintf_r+0x1bc>
 8009172:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009174:	07d9      	lsls	r1, r3, #31
 8009176:	d405      	bmi.n	8009184 <_vfiprintf_r+0x220>
 8009178:	89ab      	ldrh	r3, [r5, #12]
 800917a:	059a      	lsls	r2, r3, #22
 800917c:	d402      	bmi.n	8009184 <_vfiprintf_r+0x220>
 800917e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009180:	f7ff f8d2 	bl	8008328 <__retarget_lock_release_recursive>
 8009184:	89ab      	ldrh	r3, [r5, #12]
 8009186:	065b      	lsls	r3, r3, #25
 8009188:	f53f af12 	bmi.w	8008fb0 <_vfiprintf_r+0x4c>
 800918c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800918e:	e711      	b.n	8008fb4 <_vfiprintf_r+0x50>
 8009190:	ab03      	add	r3, sp, #12
 8009192:	9300      	str	r3, [sp, #0]
 8009194:	462a      	mov	r2, r5
 8009196:	4b09      	ldr	r3, [pc, #36]	; (80091bc <_vfiprintf_r+0x258>)
 8009198:	a904      	add	r1, sp, #16
 800919a:	4630      	mov	r0, r6
 800919c:	f000 f880 	bl	80092a0 <_printf_i>
 80091a0:	e7e4      	b.n	800916c <_vfiprintf_r+0x208>
 80091a2:	bf00      	nop
 80091a4:	08009d18 	.word	0x08009d18
 80091a8:	08009d38 	.word	0x08009d38
 80091ac:	08009cf8 	.word	0x08009cf8
 80091b0:	08009f5c 	.word	0x08009f5c
 80091b4:	08009f66 	.word	0x08009f66
 80091b8:	00000000 	.word	0x00000000
 80091bc:	08008f3f 	.word	0x08008f3f
 80091c0:	08009f62 	.word	0x08009f62

080091c4 <_printf_common>:
 80091c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091c8:	4616      	mov	r6, r2
 80091ca:	4699      	mov	r9, r3
 80091cc:	688a      	ldr	r2, [r1, #8]
 80091ce:	690b      	ldr	r3, [r1, #16]
 80091d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80091d4:	4293      	cmp	r3, r2
 80091d6:	bfb8      	it	lt
 80091d8:	4613      	movlt	r3, r2
 80091da:	6033      	str	r3, [r6, #0]
 80091dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80091e0:	4607      	mov	r7, r0
 80091e2:	460c      	mov	r4, r1
 80091e4:	b10a      	cbz	r2, 80091ea <_printf_common+0x26>
 80091e6:	3301      	adds	r3, #1
 80091e8:	6033      	str	r3, [r6, #0]
 80091ea:	6823      	ldr	r3, [r4, #0]
 80091ec:	0699      	lsls	r1, r3, #26
 80091ee:	bf42      	ittt	mi
 80091f0:	6833      	ldrmi	r3, [r6, #0]
 80091f2:	3302      	addmi	r3, #2
 80091f4:	6033      	strmi	r3, [r6, #0]
 80091f6:	6825      	ldr	r5, [r4, #0]
 80091f8:	f015 0506 	ands.w	r5, r5, #6
 80091fc:	d106      	bne.n	800920c <_printf_common+0x48>
 80091fe:	f104 0a19 	add.w	sl, r4, #25
 8009202:	68e3      	ldr	r3, [r4, #12]
 8009204:	6832      	ldr	r2, [r6, #0]
 8009206:	1a9b      	subs	r3, r3, r2
 8009208:	42ab      	cmp	r3, r5
 800920a:	dc26      	bgt.n	800925a <_printf_common+0x96>
 800920c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009210:	1e13      	subs	r3, r2, #0
 8009212:	6822      	ldr	r2, [r4, #0]
 8009214:	bf18      	it	ne
 8009216:	2301      	movne	r3, #1
 8009218:	0692      	lsls	r2, r2, #26
 800921a:	d42b      	bmi.n	8009274 <_printf_common+0xb0>
 800921c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009220:	4649      	mov	r1, r9
 8009222:	4638      	mov	r0, r7
 8009224:	47c0      	blx	r8
 8009226:	3001      	adds	r0, #1
 8009228:	d01e      	beq.n	8009268 <_printf_common+0xa4>
 800922a:	6823      	ldr	r3, [r4, #0]
 800922c:	68e5      	ldr	r5, [r4, #12]
 800922e:	6832      	ldr	r2, [r6, #0]
 8009230:	f003 0306 	and.w	r3, r3, #6
 8009234:	2b04      	cmp	r3, #4
 8009236:	bf08      	it	eq
 8009238:	1aad      	subeq	r5, r5, r2
 800923a:	68a3      	ldr	r3, [r4, #8]
 800923c:	6922      	ldr	r2, [r4, #16]
 800923e:	bf0c      	ite	eq
 8009240:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009244:	2500      	movne	r5, #0
 8009246:	4293      	cmp	r3, r2
 8009248:	bfc4      	itt	gt
 800924a:	1a9b      	subgt	r3, r3, r2
 800924c:	18ed      	addgt	r5, r5, r3
 800924e:	2600      	movs	r6, #0
 8009250:	341a      	adds	r4, #26
 8009252:	42b5      	cmp	r5, r6
 8009254:	d11a      	bne.n	800928c <_printf_common+0xc8>
 8009256:	2000      	movs	r0, #0
 8009258:	e008      	b.n	800926c <_printf_common+0xa8>
 800925a:	2301      	movs	r3, #1
 800925c:	4652      	mov	r2, sl
 800925e:	4649      	mov	r1, r9
 8009260:	4638      	mov	r0, r7
 8009262:	47c0      	blx	r8
 8009264:	3001      	adds	r0, #1
 8009266:	d103      	bne.n	8009270 <_printf_common+0xac>
 8009268:	f04f 30ff 	mov.w	r0, #4294967295
 800926c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009270:	3501      	adds	r5, #1
 8009272:	e7c6      	b.n	8009202 <_printf_common+0x3e>
 8009274:	18e1      	adds	r1, r4, r3
 8009276:	1c5a      	adds	r2, r3, #1
 8009278:	2030      	movs	r0, #48	; 0x30
 800927a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800927e:	4422      	add	r2, r4
 8009280:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009284:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009288:	3302      	adds	r3, #2
 800928a:	e7c7      	b.n	800921c <_printf_common+0x58>
 800928c:	2301      	movs	r3, #1
 800928e:	4622      	mov	r2, r4
 8009290:	4649      	mov	r1, r9
 8009292:	4638      	mov	r0, r7
 8009294:	47c0      	blx	r8
 8009296:	3001      	adds	r0, #1
 8009298:	d0e6      	beq.n	8009268 <_printf_common+0xa4>
 800929a:	3601      	adds	r6, #1
 800929c:	e7d9      	b.n	8009252 <_printf_common+0x8e>
	...

080092a0 <_printf_i>:
 80092a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092a4:	460c      	mov	r4, r1
 80092a6:	4691      	mov	r9, r2
 80092a8:	7e27      	ldrb	r7, [r4, #24]
 80092aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80092ac:	2f78      	cmp	r7, #120	; 0x78
 80092ae:	4680      	mov	r8, r0
 80092b0:	469a      	mov	sl, r3
 80092b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80092b6:	d807      	bhi.n	80092c8 <_printf_i+0x28>
 80092b8:	2f62      	cmp	r7, #98	; 0x62
 80092ba:	d80a      	bhi.n	80092d2 <_printf_i+0x32>
 80092bc:	2f00      	cmp	r7, #0
 80092be:	f000 80d8 	beq.w	8009472 <_printf_i+0x1d2>
 80092c2:	2f58      	cmp	r7, #88	; 0x58
 80092c4:	f000 80a3 	beq.w	800940e <_printf_i+0x16e>
 80092c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80092cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80092d0:	e03a      	b.n	8009348 <_printf_i+0xa8>
 80092d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80092d6:	2b15      	cmp	r3, #21
 80092d8:	d8f6      	bhi.n	80092c8 <_printf_i+0x28>
 80092da:	a001      	add	r0, pc, #4	; (adr r0, 80092e0 <_printf_i+0x40>)
 80092dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80092e0:	08009339 	.word	0x08009339
 80092e4:	0800934d 	.word	0x0800934d
 80092e8:	080092c9 	.word	0x080092c9
 80092ec:	080092c9 	.word	0x080092c9
 80092f0:	080092c9 	.word	0x080092c9
 80092f4:	080092c9 	.word	0x080092c9
 80092f8:	0800934d 	.word	0x0800934d
 80092fc:	080092c9 	.word	0x080092c9
 8009300:	080092c9 	.word	0x080092c9
 8009304:	080092c9 	.word	0x080092c9
 8009308:	080092c9 	.word	0x080092c9
 800930c:	08009459 	.word	0x08009459
 8009310:	0800937d 	.word	0x0800937d
 8009314:	0800943b 	.word	0x0800943b
 8009318:	080092c9 	.word	0x080092c9
 800931c:	080092c9 	.word	0x080092c9
 8009320:	0800947b 	.word	0x0800947b
 8009324:	080092c9 	.word	0x080092c9
 8009328:	0800937d 	.word	0x0800937d
 800932c:	080092c9 	.word	0x080092c9
 8009330:	080092c9 	.word	0x080092c9
 8009334:	08009443 	.word	0x08009443
 8009338:	680b      	ldr	r3, [r1, #0]
 800933a:	1d1a      	adds	r2, r3, #4
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	600a      	str	r2, [r1, #0]
 8009340:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009344:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009348:	2301      	movs	r3, #1
 800934a:	e0a3      	b.n	8009494 <_printf_i+0x1f4>
 800934c:	6825      	ldr	r5, [r4, #0]
 800934e:	6808      	ldr	r0, [r1, #0]
 8009350:	062e      	lsls	r6, r5, #24
 8009352:	f100 0304 	add.w	r3, r0, #4
 8009356:	d50a      	bpl.n	800936e <_printf_i+0xce>
 8009358:	6805      	ldr	r5, [r0, #0]
 800935a:	600b      	str	r3, [r1, #0]
 800935c:	2d00      	cmp	r5, #0
 800935e:	da03      	bge.n	8009368 <_printf_i+0xc8>
 8009360:	232d      	movs	r3, #45	; 0x2d
 8009362:	426d      	negs	r5, r5
 8009364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009368:	485e      	ldr	r0, [pc, #376]	; (80094e4 <_printf_i+0x244>)
 800936a:	230a      	movs	r3, #10
 800936c:	e019      	b.n	80093a2 <_printf_i+0x102>
 800936e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009372:	6805      	ldr	r5, [r0, #0]
 8009374:	600b      	str	r3, [r1, #0]
 8009376:	bf18      	it	ne
 8009378:	b22d      	sxthne	r5, r5
 800937a:	e7ef      	b.n	800935c <_printf_i+0xbc>
 800937c:	680b      	ldr	r3, [r1, #0]
 800937e:	6825      	ldr	r5, [r4, #0]
 8009380:	1d18      	adds	r0, r3, #4
 8009382:	6008      	str	r0, [r1, #0]
 8009384:	0628      	lsls	r0, r5, #24
 8009386:	d501      	bpl.n	800938c <_printf_i+0xec>
 8009388:	681d      	ldr	r5, [r3, #0]
 800938a:	e002      	b.n	8009392 <_printf_i+0xf2>
 800938c:	0669      	lsls	r1, r5, #25
 800938e:	d5fb      	bpl.n	8009388 <_printf_i+0xe8>
 8009390:	881d      	ldrh	r5, [r3, #0]
 8009392:	4854      	ldr	r0, [pc, #336]	; (80094e4 <_printf_i+0x244>)
 8009394:	2f6f      	cmp	r7, #111	; 0x6f
 8009396:	bf0c      	ite	eq
 8009398:	2308      	moveq	r3, #8
 800939a:	230a      	movne	r3, #10
 800939c:	2100      	movs	r1, #0
 800939e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80093a2:	6866      	ldr	r6, [r4, #4]
 80093a4:	60a6      	str	r6, [r4, #8]
 80093a6:	2e00      	cmp	r6, #0
 80093a8:	bfa2      	ittt	ge
 80093aa:	6821      	ldrge	r1, [r4, #0]
 80093ac:	f021 0104 	bicge.w	r1, r1, #4
 80093b0:	6021      	strge	r1, [r4, #0]
 80093b2:	b90d      	cbnz	r5, 80093b8 <_printf_i+0x118>
 80093b4:	2e00      	cmp	r6, #0
 80093b6:	d04d      	beq.n	8009454 <_printf_i+0x1b4>
 80093b8:	4616      	mov	r6, r2
 80093ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80093be:	fb03 5711 	mls	r7, r3, r1, r5
 80093c2:	5dc7      	ldrb	r7, [r0, r7]
 80093c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80093c8:	462f      	mov	r7, r5
 80093ca:	42bb      	cmp	r3, r7
 80093cc:	460d      	mov	r5, r1
 80093ce:	d9f4      	bls.n	80093ba <_printf_i+0x11a>
 80093d0:	2b08      	cmp	r3, #8
 80093d2:	d10b      	bne.n	80093ec <_printf_i+0x14c>
 80093d4:	6823      	ldr	r3, [r4, #0]
 80093d6:	07df      	lsls	r7, r3, #31
 80093d8:	d508      	bpl.n	80093ec <_printf_i+0x14c>
 80093da:	6923      	ldr	r3, [r4, #16]
 80093dc:	6861      	ldr	r1, [r4, #4]
 80093de:	4299      	cmp	r1, r3
 80093e0:	bfde      	ittt	le
 80093e2:	2330      	movle	r3, #48	; 0x30
 80093e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80093e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80093ec:	1b92      	subs	r2, r2, r6
 80093ee:	6122      	str	r2, [r4, #16]
 80093f0:	f8cd a000 	str.w	sl, [sp]
 80093f4:	464b      	mov	r3, r9
 80093f6:	aa03      	add	r2, sp, #12
 80093f8:	4621      	mov	r1, r4
 80093fa:	4640      	mov	r0, r8
 80093fc:	f7ff fee2 	bl	80091c4 <_printf_common>
 8009400:	3001      	adds	r0, #1
 8009402:	d14c      	bne.n	800949e <_printf_i+0x1fe>
 8009404:	f04f 30ff 	mov.w	r0, #4294967295
 8009408:	b004      	add	sp, #16
 800940a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800940e:	4835      	ldr	r0, [pc, #212]	; (80094e4 <_printf_i+0x244>)
 8009410:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009414:	6823      	ldr	r3, [r4, #0]
 8009416:	680e      	ldr	r6, [r1, #0]
 8009418:	061f      	lsls	r7, r3, #24
 800941a:	f856 5b04 	ldr.w	r5, [r6], #4
 800941e:	600e      	str	r6, [r1, #0]
 8009420:	d514      	bpl.n	800944c <_printf_i+0x1ac>
 8009422:	07d9      	lsls	r1, r3, #31
 8009424:	bf44      	itt	mi
 8009426:	f043 0320 	orrmi.w	r3, r3, #32
 800942a:	6023      	strmi	r3, [r4, #0]
 800942c:	b91d      	cbnz	r5, 8009436 <_printf_i+0x196>
 800942e:	6823      	ldr	r3, [r4, #0]
 8009430:	f023 0320 	bic.w	r3, r3, #32
 8009434:	6023      	str	r3, [r4, #0]
 8009436:	2310      	movs	r3, #16
 8009438:	e7b0      	b.n	800939c <_printf_i+0xfc>
 800943a:	6823      	ldr	r3, [r4, #0]
 800943c:	f043 0320 	orr.w	r3, r3, #32
 8009440:	6023      	str	r3, [r4, #0]
 8009442:	2378      	movs	r3, #120	; 0x78
 8009444:	4828      	ldr	r0, [pc, #160]	; (80094e8 <_printf_i+0x248>)
 8009446:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800944a:	e7e3      	b.n	8009414 <_printf_i+0x174>
 800944c:	065e      	lsls	r6, r3, #25
 800944e:	bf48      	it	mi
 8009450:	b2ad      	uxthmi	r5, r5
 8009452:	e7e6      	b.n	8009422 <_printf_i+0x182>
 8009454:	4616      	mov	r6, r2
 8009456:	e7bb      	b.n	80093d0 <_printf_i+0x130>
 8009458:	680b      	ldr	r3, [r1, #0]
 800945a:	6826      	ldr	r6, [r4, #0]
 800945c:	6960      	ldr	r0, [r4, #20]
 800945e:	1d1d      	adds	r5, r3, #4
 8009460:	600d      	str	r5, [r1, #0]
 8009462:	0635      	lsls	r5, r6, #24
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	d501      	bpl.n	800946c <_printf_i+0x1cc>
 8009468:	6018      	str	r0, [r3, #0]
 800946a:	e002      	b.n	8009472 <_printf_i+0x1d2>
 800946c:	0671      	lsls	r1, r6, #25
 800946e:	d5fb      	bpl.n	8009468 <_printf_i+0x1c8>
 8009470:	8018      	strh	r0, [r3, #0]
 8009472:	2300      	movs	r3, #0
 8009474:	6123      	str	r3, [r4, #16]
 8009476:	4616      	mov	r6, r2
 8009478:	e7ba      	b.n	80093f0 <_printf_i+0x150>
 800947a:	680b      	ldr	r3, [r1, #0]
 800947c:	1d1a      	adds	r2, r3, #4
 800947e:	600a      	str	r2, [r1, #0]
 8009480:	681e      	ldr	r6, [r3, #0]
 8009482:	6862      	ldr	r2, [r4, #4]
 8009484:	2100      	movs	r1, #0
 8009486:	4630      	mov	r0, r6
 8009488:	f7f6 feb2 	bl	80001f0 <memchr>
 800948c:	b108      	cbz	r0, 8009492 <_printf_i+0x1f2>
 800948e:	1b80      	subs	r0, r0, r6
 8009490:	6060      	str	r0, [r4, #4]
 8009492:	6863      	ldr	r3, [r4, #4]
 8009494:	6123      	str	r3, [r4, #16]
 8009496:	2300      	movs	r3, #0
 8009498:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800949c:	e7a8      	b.n	80093f0 <_printf_i+0x150>
 800949e:	6923      	ldr	r3, [r4, #16]
 80094a0:	4632      	mov	r2, r6
 80094a2:	4649      	mov	r1, r9
 80094a4:	4640      	mov	r0, r8
 80094a6:	47d0      	blx	sl
 80094a8:	3001      	adds	r0, #1
 80094aa:	d0ab      	beq.n	8009404 <_printf_i+0x164>
 80094ac:	6823      	ldr	r3, [r4, #0]
 80094ae:	079b      	lsls	r3, r3, #30
 80094b0:	d413      	bmi.n	80094da <_printf_i+0x23a>
 80094b2:	68e0      	ldr	r0, [r4, #12]
 80094b4:	9b03      	ldr	r3, [sp, #12]
 80094b6:	4298      	cmp	r0, r3
 80094b8:	bfb8      	it	lt
 80094ba:	4618      	movlt	r0, r3
 80094bc:	e7a4      	b.n	8009408 <_printf_i+0x168>
 80094be:	2301      	movs	r3, #1
 80094c0:	4632      	mov	r2, r6
 80094c2:	4649      	mov	r1, r9
 80094c4:	4640      	mov	r0, r8
 80094c6:	47d0      	blx	sl
 80094c8:	3001      	adds	r0, #1
 80094ca:	d09b      	beq.n	8009404 <_printf_i+0x164>
 80094cc:	3501      	adds	r5, #1
 80094ce:	68e3      	ldr	r3, [r4, #12]
 80094d0:	9903      	ldr	r1, [sp, #12]
 80094d2:	1a5b      	subs	r3, r3, r1
 80094d4:	42ab      	cmp	r3, r5
 80094d6:	dcf2      	bgt.n	80094be <_printf_i+0x21e>
 80094d8:	e7eb      	b.n	80094b2 <_printf_i+0x212>
 80094da:	2500      	movs	r5, #0
 80094dc:	f104 0619 	add.w	r6, r4, #25
 80094e0:	e7f5      	b.n	80094ce <_printf_i+0x22e>
 80094e2:	bf00      	nop
 80094e4:	08009f6d 	.word	0x08009f6d
 80094e8:	08009f7e 	.word	0x08009f7e
 80094ec:	00000000 	.word	0x00000000

080094f0 <nan>:
 80094f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80094f8 <nan+0x8>
 80094f4:	4770      	bx	lr
 80094f6:	bf00      	nop
 80094f8:	00000000 	.word	0x00000000
 80094fc:	7ff80000 	.word	0x7ff80000

08009500 <_sbrk_r>:
 8009500:	b538      	push	{r3, r4, r5, lr}
 8009502:	4d06      	ldr	r5, [pc, #24]	; (800951c <_sbrk_r+0x1c>)
 8009504:	2300      	movs	r3, #0
 8009506:	4604      	mov	r4, r0
 8009508:	4608      	mov	r0, r1
 800950a:	602b      	str	r3, [r5, #0]
 800950c:	f7f8 f8cc 	bl	80016a8 <_sbrk>
 8009510:	1c43      	adds	r3, r0, #1
 8009512:	d102      	bne.n	800951a <_sbrk_r+0x1a>
 8009514:	682b      	ldr	r3, [r5, #0]
 8009516:	b103      	cbz	r3, 800951a <_sbrk_r+0x1a>
 8009518:	6023      	str	r3, [r4, #0]
 800951a:	bd38      	pop	{r3, r4, r5, pc}
 800951c:	200046dc 	.word	0x200046dc

08009520 <__sread>:
 8009520:	b510      	push	{r4, lr}
 8009522:	460c      	mov	r4, r1
 8009524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009528:	f000 f8dc 	bl	80096e4 <_read_r>
 800952c:	2800      	cmp	r0, #0
 800952e:	bfab      	itete	ge
 8009530:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009532:	89a3      	ldrhlt	r3, [r4, #12]
 8009534:	181b      	addge	r3, r3, r0
 8009536:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800953a:	bfac      	ite	ge
 800953c:	6563      	strge	r3, [r4, #84]	; 0x54
 800953e:	81a3      	strhlt	r3, [r4, #12]
 8009540:	bd10      	pop	{r4, pc}

08009542 <__swrite>:
 8009542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009546:	461f      	mov	r7, r3
 8009548:	898b      	ldrh	r3, [r1, #12]
 800954a:	05db      	lsls	r3, r3, #23
 800954c:	4605      	mov	r5, r0
 800954e:	460c      	mov	r4, r1
 8009550:	4616      	mov	r6, r2
 8009552:	d505      	bpl.n	8009560 <__swrite+0x1e>
 8009554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009558:	2302      	movs	r3, #2
 800955a:	2200      	movs	r2, #0
 800955c:	f000 f8a4 	bl	80096a8 <_lseek_r>
 8009560:	89a3      	ldrh	r3, [r4, #12]
 8009562:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009566:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800956a:	81a3      	strh	r3, [r4, #12]
 800956c:	4632      	mov	r2, r6
 800956e:	463b      	mov	r3, r7
 8009570:	4628      	mov	r0, r5
 8009572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009576:	f000 b823 	b.w	80095c0 <_write_r>

0800957a <__sseek>:
 800957a:	b510      	push	{r4, lr}
 800957c:	460c      	mov	r4, r1
 800957e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009582:	f000 f891 	bl	80096a8 <_lseek_r>
 8009586:	1c43      	adds	r3, r0, #1
 8009588:	89a3      	ldrh	r3, [r4, #12]
 800958a:	bf15      	itete	ne
 800958c:	6560      	strne	r0, [r4, #84]	; 0x54
 800958e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009592:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009596:	81a3      	strheq	r3, [r4, #12]
 8009598:	bf18      	it	ne
 800959a:	81a3      	strhne	r3, [r4, #12]
 800959c:	bd10      	pop	{r4, pc}

0800959e <__sclose>:
 800959e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095a2:	f000 b83d 	b.w	8009620 <_close_r>

080095a6 <__ascii_wctomb>:
 80095a6:	b149      	cbz	r1, 80095bc <__ascii_wctomb+0x16>
 80095a8:	2aff      	cmp	r2, #255	; 0xff
 80095aa:	bf85      	ittet	hi
 80095ac:	238a      	movhi	r3, #138	; 0x8a
 80095ae:	6003      	strhi	r3, [r0, #0]
 80095b0:	700a      	strbls	r2, [r1, #0]
 80095b2:	f04f 30ff 	movhi.w	r0, #4294967295
 80095b6:	bf98      	it	ls
 80095b8:	2001      	movls	r0, #1
 80095ba:	4770      	bx	lr
 80095bc:	4608      	mov	r0, r1
 80095be:	4770      	bx	lr

080095c0 <_write_r>:
 80095c0:	b538      	push	{r3, r4, r5, lr}
 80095c2:	4d07      	ldr	r5, [pc, #28]	; (80095e0 <_write_r+0x20>)
 80095c4:	4604      	mov	r4, r0
 80095c6:	4608      	mov	r0, r1
 80095c8:	4611      	mov	r1, r2
 80095ca:	2200      	movs	r2, #0
 80095cc:	602a      	str	r2, [r5, #0]
 80095ce:	461a      	mov	r2, r3
 80095d0:	f7fc fd4e 	bl	8006070 <_write>
 80095d4:	1c43      	adds	r3, r0, #1
 80095d6:	d102      	bne.n	80095de <_write_r+0x1e>
 80095d8:	682b      	ldr	r3, [r5, #0]
 80095da:	b103      	cbz	r3, 80095de <_write_r+0x1e>
 80095dc:	6023      	str	r3, [r4, #0]
 80095de:	bd38      	pop	{r3, r4, r5, pc}
 80095e0:	200046dc 	.word	0x200046dc

080095e4 <__assert_func>:
 80095e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095e6:	4614      	mov	r4, r2
 80095e8:	461a      	mov	r2, r3
 80095ea:	4b09      	ldr	r3, [pc, #36]	; (8009610 <__assert_func+0x2c>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4605      	mov	r5, r0
 80095f0:	68d8      	ldr	r0, [r3, #12]
 80095f2:	b14c      	cbz	r4, 8009608 <__assert_func+0x24>
 80095f4:	4b07      	ldr	r3, [pc, #28]	; (8009614 <__assert_func+0x30>)
 80095f6:	9100      	str	r1, [sp, #0]
 80095f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80095fc:	4906      	ldr	r1, [pc, #24]	; (8009618 <__assert_func+0x34>)
 80095fe:	462b      	mov	r3, r5
 8009600:	f000 f81e 	bl	8009640 <fiprintf>
 8009604:	f000 f880 	bl	8009708 <abort>
 8009608:	4b04      	ldr	r3, [pc, #16]	; (800961c <__assert_func+0x38>)
 800960a:	461c      	mov	r4, r3
 800960c:	e7f3      	b.n	80095f6 <__assert_func+0x12>
 800960e:	bf00      	nop
 8009610:	20000010 	.word	0x20000010
 8009614:	08009f8f 	.word	0x08009f8f
 8009618:	08009f9c 	.word	0x08009f9c
 800961c:	08009fca 	.word	0x08009fca

08009620 <_close_r>:
 8009620:	b538      	push	{r3, r4, r5, lr}
 8009622:	4d06      	ldr	r5, [pc, #24]	; (800963c <_close_r+0x1c>)
 8009624:	2300      	movs	r3, #0
 8009626:	4604      	mov	r4, r0
 8009628:	4608      	mov	r0, r1
 800962a:	602b      	str	r3, [r5, #0]
 800962c:	f7fc fd4c 	bl	80060c8 <_close>
 8009630:	1c43      	adds	r3, r0, #1
 8009632:	d102      	bne.n	800963a <_close_r+0x1a>
 8009634:	682b      	ldr	r3, [r5, #0]
 8009636:	b103      	cbz	r3, 800963a <_close_r+0x1a>
 8009638:	6023      	str	r3, [r4, #0]
 800963a:	bd38      	pop	{r3, r4, r5, pc}
 800963c:	200046dc 	.word	0x200046dc

08009640 <fiprintf>:
 8009640:	b40e      	push	{r1, r2, r3}
 8009642:	b503      	push	{r0, r1, lr}
 8009644:	4601      	mov	r1, r0
 8009646:	ab03      	add	r3, sp, #12
 8009648:	4805      	ldr	r0, [pc, #20]	; (8009660 <fiprintf+0x20>)
 800964a:	f853 2b04 	ldr.w	r2, [r3], #4
 800964e:	6800      	ldr	r0, [r0, #0]
 8009650:	9301      	str	r3, [sp, #4]
 8009652:	f7ff fc87 	bl	8008f64 <_vfiprintf_r>
 8009656:	b002      	add	sp, #8
 8009658:	f85d eb04 	ldr.w	lr, [sp], #4
 800965c:	b003      	add	sp, #12
 800965e:	4770      	bx	lr
 8009660:	20000010 	.word	0x20000010

08009664 <_fstat_r>:
 8009664:	b538      	push	{r3, r4, r5, lr}
 8009666:	4d07      	ldr	r5, [pc, #28]	; (8009684 <_fstat_r+0x20>)
 8009668:	2300      	movs	r3, #0
 800966a:	4604      	mov	r4, r0
 800966c:	4608      	mov	r0, r1
 800966e:	4611      	mov	r1, r2
 8009670:	602b      	str	r3, [r5, #0]
 8009672:	f7fc fd79 	bl	8006168 <_fstat>
 8009676:	1c43      	adds	r3, r0, #1
 8009678:	d102      	bne.n	8009680 <_fstat_r+0x1c>
 800967a:	682b      	ldr	r3, [r5, #0]
 800967c:	b103      	cbz	r3, 8009680 <_fstat_r+0x1c>
 800967e:	6023      	str	r3, [r4, #0]
 8009680:	bd38      	pop	{r3, r4, r5, pc}
 8009682:	bf00      	nop
 8009684:	200046dc 	.word	0x200046dc

08009688 <_isatty_r>:
 8009688:	b538      	push	{r3, r4, r5, lr}
 800968a:	4d06      	ldr	r5, [pc, #24]	; (80096a4 <_isatty_r+0x1c>)
 800968c:	2300      	movs	r3, #0
 800968e:	4604      	mov	r4, r0
 8009690:	4608      	mov	r0, r1
 8009692:	602b      	str	r3, [r5, #0]
 8009694:	f7fc fcd6 	bl	8006044 <_isatty>
 8009698:	1c43      	adds	r3, r0, #1
 800969a:	d102      	bne.n	80096a2 <_isatty_r+0x1a>
 800969c:	682b      	ldr	r3, [r5, #0]
 800969e:	b103      	cbz	r3, 80096a2 <_isatty_r+0x1a>
 80096a0:	6023      	str	r3, [r4, #0]
 80096a2:	bd38      	pop	{r3, r4, r5, pc}
 80096a4:	200046dc 	.word	0x200046dc

080096a8 <_lseek_r>:
 80096a8:	b538      	push	{r3, r4, r5, lr}
 80096aa:	4d07      	ldr	r5, [pc, #28]	; (80096c8 <_lseek_r+0x20>)
 80096ac:	4604      	mov	r4, r0
 80096ae:	4608      	mov	r0, r1
 80096b0:	4611      	mov	r1, r2
 80096b2:	2200      	movs	r2, #0
 80096b4:	602a      	str	r2, [r5, #0]
 80096b6:	461a      	mov	r2, r3
 80096b8:	f7fc fd1d 	bl	80060f6 <_lseek>
 80096bc:	1c43      	adds	r3, r0, #1
 80096be:	d102      	bne.n	80096c6 <_lseek_r+0x1e>
 80096c0:	682b      	ldr	r3, [r5, #0]
 80096c2:	b103      	cbz	r3, 80096c6 <_lseek_r+0x1e>
 80096c4:	6023      	str	r3, [r4, #0]
 80096c6:	bd38      	pop	{r3, r4, r5, pc}
 80096c8:	200046dc 	.word	0x200046dc

080096cc <__malloc_lock>:
 80096cc:	4801      	ldr	r0, [pc, #4]	; (80096d4 <__malloc_lock+0x8>)
 80096ce:	f7fe be2a 	b.w	8008326 <__retarget_lock_acquire_recursive>
 80096d2:	bf00      	nop
 80096d4:	200046d4 	.word	0x200046d4

080096d8 <__malloc_unlock>:
 80096d8:	4801      	ldr	r0, [pc, #4]	; (80096e0 <__malloc_unlock+0x8>)
 80096da:	f7fe be25 	b.w	8008328 <__retarget_lock_release_recursive>
 80096de:	bf00      	nop
 80096e0:	200046d4 	.word	0x200046d4

080096e4 <_read_r>:
 80096e4:	b538      	push	{r3, r4, r5, lr}
 80096e6:	4d07      	ldr	r5, [pc, #28]	; (8009704 <_read_r+0x20>)
 80096e8:	4604      	mov	r4, r0
 80096ea:	4608      	mov	r0, r1
 80096ec:	4611      	mov	r1, r2
 80096ee:	2200      	movs	r2, #0
 80096f0:	602a      	str	r2, [r5, #0]
 80096f2:	461a      	mov	r2, r3
 80096f4:	f7fc fd10 	bl	8006118 <_read>
 80096f8:	1c43      	adds	r3, r0, #1
 80096fa:	d102      	bne.n	8009702 <_read_r+0x1e>
 80096fc:	682b      	ldr	r3, [r5, #0]
 80096fe:	b103      	cbz	r3, 8009702 <_read_r+0x1e>
 8009700:	6023      	str	r3, [r4, #0]
 8009702:	bd38      	pop	{r3, r4, r5, pc}
 8009704:	200046dc 	.word	0x200046dc

08009708 <abort>:
 8009708:	b508      	push	{r3, lr}
 800970a:	2006      	movs	r0, #6
 800970c:	f000 f82c 	bl	8009768 <raise>
 8009710:	2001      	movs	r0, #1
 8009712:	f000 f9a3 	bl	8009a5c <_exit>

08009716 <_raise_r>:
 8009716:	291f      	cmp	r1, #31
 8009718:	b538      	push	{r3, r4, r5, lr}
 800971a:	4604      	mov	r4, r0
 800971c:	460d      	mov	r5, r1
 800971e:	d904      	bls.n	800972a <_raise_r+0x14>
 8009720:	2316      	movs	r3, #22
 8009722:	6003      	str	r3, [r0, #0]
 8009724:	f04f 30ff 	mov.w	r0, #4294967295
 8009728:	bd38      	pop	{r3, r4, r5, pc}
 800972a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800972c:	b112      	cbz	r2, 8009734 <_raise_r+0x1e>
 800972e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009732:	b94b      	cbnz	r3, 8009748 <_raise_r+0x32>
 8009734:	4620      	mov	r0, r4
 8009736:	f000 f831 	bl	800979c <_getpid_r>
 800973a:	462a      	mov	r2, r5
 800973c:	4601      	mov	r1, r0
 800973e:	4620      	mov	r0, r4
 8009740:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009744:	f000 b818 	b.w	8009778 <_kill_r>
 8009748:	2b01      	cmp	r3, #1
 800974a:	d00a      	beq.n	8009762 <_raise_r+0x4c>
 800974c:	1c59      	adds	r1, r3, #1
 800974e:	d103      	bne.n	8009758 <_raise_r+0x42>
 8009750:	2316      	movs	r3, #22
 8009752:	6003      	str	r3, [r0, #0]
 8009754:	2001      	movs	r0, #1
 8009756:	e7e7      	b.n	8009728 <_raise_r+0x12>
 8009758:	2400      	movs	r4, #0
 800975a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800975e:	4628      	mov	r0, r5
 8009760:	4798      	blx	r3
 8009762:	2000      	movs	r0, #0
 8009764:	e7e0      	b.n	8009728 <_raise_r+0x12>
	...

08009768 <raise>:
 8009768:	4b02      	ldr	r3, [pc, #8]	; (8009774 <raise+0xc>)
 800976a:	4601      	mov	r1, r0
 800976c:	6818      	ldr	r0, [r3, #0]
 800976e:	f7ff bfd2 	b.w	8009716 <_raise_r>
 8009772:	bf00      	nop
 8009774:	20000010 	.word	0x20000010

08009778 <_kill_r>:
 8009778:	b538      	push	{r3, r4, r5, lr}
 800977a:	4d07      	ldr	r5, [pc, #28]	; (8009798 <_kill_r+0x20>)
 800977c:	2300      	movs	r3, #0
 800977e:	4604      	mov	r4, r0
 8009780:	4608      	mov	r0, r1
 8009782:	4611      	mov	r1, r2
 8009784:	602b      	str	r3, [r5, #0]
 8009786:	f000 f961 	bl	8009a4c <_kill>
 800978a:	1c43      	adds	r3, r0, #1
 800978c:	d102      	bne.n	8009794 <_kill_r+0x1c>
 800978e:	682b      	ldr	r3, [r5, #0]
 8009790:	b103      	cbz	r3, 8009794 <_kill_r+0x1c>
 8009792:	6023      	str	r3, [r4, #0]
 8009794:	bd38      	pop	{r3, r4, r5, pc}
 8009796:	bf00      	nop
 8009798:	200046dc 	.word	0x200046dc

0800979c <_getpid_r>:
 800979c:	f000 b94e 	b.w	8009a3c <_getpid>

080097a0 <fmod>:
 80097a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097a2:	ed2d 8b02 	vpush	{d8}
 80097a6:	ec57 6b10 	vmov	r6, r7, d0
 80097aa:	ec55 4b11 	vmov	r4, r5, d1
 80097ae:	f000 f833 	bl	8009818 <__ieee754_fmod>
 80097b2:	4b18      	ldr	r3, [pc, #96]	; (8009814 <fmod+0x74>)
 80097b4:	eeb0 8a40 	vmov.f32	s16, s0
 80097b8:	eef0 8a60 	vmov.f32	s17, s1
 80097bc:	f993 3000 	ldrsb.w	r3, [r3]
 80097c0:	3301      	adds	r3, #1
 80097c2:	d020      	beq.n	8009806 <fmod+0x66>
 80097c4:	4622      	mov	r2, r4
 80097c6:	462b      	mov	r3, r5
 80097c8:	4620      	mov	r0, r4
 80097ca:	4629      	mov	r1, r5
 80097cc:	f7f7 f9b6 	bl	8000b3c <__aeabi_dcmpun>
 80097d0:	b9c8      	cbnz	r0, 8009806 <fmod+0x66>
 80097d2:	4632      	mov	r2, r6
 80097d4:	463b      	mov	r3, r7
 80097d6:	4630      	mov	r0, r6
 80097d8:	4639      	mov	r1, r7
 80097da:	f7f7 f9af 	bl	8000b3c <__aeabi_dcmpun>
 80097de:	b990      	cbnz	r0, 8009806 <fmod+0x66>
 80097e0:	2200      	movs	r2, #0
 80097e2:	2300      	movs	r3, #0
 80097e4:	4620      	mov	r0, r4
 80097e6:	4629      	mov	r1, r5
 80097e8:	f7f7 f976 	bl	8000ad8 <__aeabi_dcmpeq>
 80097ec:	b158      	cbz	r0, 8009806 <fmod+0x66>
 80097ee:	f7fc ff15 	bl	800661c <__errno>
 80097f2:	2321      	movs	r3, #33	; 0x21
 80097f4:	6003      	str	r3, [r0, #0]
 80097f6:	2200      	movs	r2, #0
 80097f8:	2300      	movs	r3, #0
 80097fa:	4610      	mov	r0, r2
 80097fc:	4619      	mov	r1, r3
 80097fe:	f7f7 f82d 	bl	800085c <__aeabi_ddiv>
 8009802:	ec41 0b18 	vmov	d8, r0, r1
 8009806:	eeb0 0a48 	vmov.f32	s0, s16
 800980a:	eef0 0a68 	vmov.f32	s1, s17
 800980e:	ecbd 8b02 	vpop	{d8}
 8009812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009814:	200001e4 	.word	0x200001e4

08009818 <__ieee754_fmod>:
 8009818:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800981c:	ec53 2b11 	vmov	r2, r3, d1
 8009820:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8009824:	ea5e 0402 	orrs.w	r4, lr, r2
 8009828:	ec51 0b10 	vmov	r0, r1, d0
 800982c:	ee11 7a10 	vmov	r7, s2
 8009830:	ee11 ca10 	vmov	ip, s2
 8009834:	461e      	mov	r6, r3
 8009836:	d00d      	beq.n	8009854 <__ieee754_fmod+0x3c>
 8009838:	4c7a      	ldr	r4, [pc, #488]	; (8009a24 <__ieee754_fmod+0x20c>)
 800983a:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800983e:	45a0      	cmp	r8, r4
 8009840:	4689      	mov	r9, r1
 8009842:	dc07      	bgt.n	8009854 <__ieee754_fmod+0x3c>
 8009844:	4254      	negs	r4, r2
 8009846:	4d78      	ldr	r5, [pc, #480]	; (8009a28 <__ieee754_fmod+0x210>)
 8009848:	4314      	orrs	r4, r2
 800984a:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 800984e:	42ac      	cmp	r4, r5
 8009850:	46ab      	mov	fp, r5
 8009852:	d909      	bls.n	8009868 <__ieee754_fmod+0x50>
 8009854:	f7f6 fed8 	bl	8000608 <__aeabi_dmul>
 8009858:	4602      	mov	r2, r0
 800985a:	460b      	mov	r3, r1
 800985c:	f7f6 fffe 	bl	800085c <__aeabi_ddiv>
 8009860:	ec41 0b10 	vmov	d0, r0, r1
 8009864:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009868:	45f0      	cmp	r8, lr
 800986a:	ee10 aa10 	vmov	sl, s0
 800986e:	ee10 4a10 	vmov	r4, s0
 8009872:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8009876:	dc0a      	bgt.n	800988e <__ieee754_fmod+0x76>
 8009878:	dbf2      	blt.n	8009860 <__ieee754_fmod+0x48>
 800987a:	4290      	cmp	r0, r2
 800987c:	d3f0      	bcc.n	8009860 <__ieee754_fmod+0x48>
 800987e:	d106      	bne.n	800988e <__ieee754_fmod+0x76>
 8009880:	4a6a      	ldr	r2, [pc, #424]	; (8009a2c <__ieee754_fmod+0x214>)
 8009882:	0fed      	lsrs	r5, r5, #31
 8009884:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8009888:	e9d5 0100 	ldrd	r0, r1, [r5]
 800988c:	e7e8      	b.n	8009860 <__ieee754_fmod+0x48>
 800988e:	ea19 0f0b 	tst.w	r9, fp
 8009892:	d14a      	bne.n	800992a <__ieee754_fmod+0x112>
 8009894:	f1b8 0f00 	cmp.w	r8, #0
 8009898:	d13f      	bne.n	800991a <__ieee754_fmod+0x102>
 800989a:	4965      	ldr	r1, [pc, #404]	; (8009a30 <__ieee754_fmod+0x218>)
 800989c:	4653      	mov	r3, sl
 800989e:	2b00      	cmp	r3, #0
 80098a0:	dc38      	bgt.n	8009914 <__ieee754_fmod+0xfc>
 80098a2:	4b61      	ldr	r3, [pc, #388]	; (8009a28 <__ieee754_fmod+0x210>)
 80098a4:	4033      	ands	r3, r6
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d14f      	bne.n	800994a <__ieee754_fmod+0x132>
 80098aa:	f1be 0f00 	cmp.w	lr, #0
 80098ae:	d144      	bne.n	800993a <__ieee754_fmod+0x122>
 80098b0:	4a5f      	ldr	r2, [pc, #380]	; (8009a30 <__ieee754_fmod+0x218>)
 80098b2:	463b      	mov	r3, r7
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	dc3d      	bgt.n	8009934 <__ieee754_fmod+0x11c>
 80098b8:	4b5e      	ldr	r3, [pc, #376]	; (8009a34 <__ieee754_fmod+0x21c>)
 80098ba:	4299      	cmp	r1, r3
 80098bc:	db4a      	blt.n	8009954 <__ieee754_fmod+0x13c>
 80098be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80098c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80098c6:	485b      	ldr	r0, [pc, #364]	; (8009a34 <__ieee754_fmod+0x21c>)
 80098c8:	4282      	cmp	r2, r0
 80098ca:	db57      	blt.n	800997c <__ieee754_fmod+0x164>
 80098cc:	f3c6 0613 	ubfx	r6, r6, #0, #20
 80098d0:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 80098d4:	1a89      	subs	r1, r1, r2
 80098d6:	1b98      	subs	r0, r3, r6
 80098d8:	eba4 070c 	sub.w	r7, r4, ip
 80098dc:	2900      	cmp	r1, #0
 80098de:	d164      	bne.n	80099aa <__ieee754_fmod+0x192>
 80098e0:	4564      	cmp	r4, ip
 80098e2:	bf38      	it	cc
 80098e4:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80098e8:	2800      	cmp	r0, #0
 80098ea:	bfa4      	itt	ge
 80098ec:	463c      	movge	r4, r7
 80098ee:	4603      	movge	r3, r0
 80098f0:	ea53 0104 	orrs.w	r1, r3, r4
 80098f4:	d0c4      	beq.n	8009880 <__ieee754_fmod+0x68>
 80098f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098fa:	db6b      	blt.n	80099d4 <__ieee754_fmod+0x1bc>
 80098fc:	494d      	ldr	r1, [pc, #308]	; (8009a34 <__ieee754_fmod+0x21c>)
 80098fe:	428a      	cmp	r2, r1
 8009900:	db6e      	blt.n	80099e0 <__ieee754_fmod+0x1c8>
 8009902:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009906:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800990a:	431d      	orrs	r5, r3
 800990c:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 8009910:	4620      	mov	r0, r4
 8009912:	e7a5      	b.n	8009860 <__ieee754_fmod+0x48>
 8009914:	3901      	subs	r1, #1
 8009916:	005b      	lsls	r3, r3, #1
 8009918:	e7c1      	b.n	800989e <__ieee754_fmod+0x86>
 800991a:	4946      	ldr	r1, [pc, #280]	; (8009a34 <__ieee754_fmod+0x21c>)
 800991c:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8009920:	2b00      	cmp	r3, #0
 8009922:	ddbe      	ble.n	80098a2 <__ieee754_fmod+0x8a>
 8009924:	3901      	subs	r1, #1
 8009926:	005b      	lsls	r3, r3, #1
 8009928:	e7fa      	b.n	8009920 <__ieee754_fmod+0x108>
 800992a:	ea4f 5128 	mov.w	r1, r8, asr #20
 800992e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009932:	e7b6      	b.n	80098a2 <__ieee754_fmod+0x8a>
 8009934:	3a01      	subs	r2, #1
 8009936:	005b      	lsls	r3, r3, #1
 8009938:	e7bc      	b.n	80098b4 <__ieee754_fmod+0x9c>
 800993a:	4a3e      	ldr	r2, [pc, #248]	; (8009a34 <__ieee754_fmod+0x21c>)
 800993c:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 8009940:	2b00      	cmp	r3, #0
 8009942:	ddb9      	ble.n	80098b8 <__ieee754_fmod+0xa0>
 8009944:	3a01      	subs	r2, #1
 8009946:	005b      	lsls	r3, r3, #1
 8009948:	e7fa      	b.n	8009940 <__ieee754_fmod+0x128>
 800994a:	ea4f 522e 	mov.w	r2, lr, asr #20
 800994e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009952:	e7b1      	b.n	80098b8 <__ieee754_fmod+0xa0>
 8009954:	1a5c      	subs	r4, r3, r1
 8009956:	2c1f      	cmp	r4, #31
 8009958:	dc0a      	bgt.n	8009970 <__ieee754_fmod+0x158>
 800995a:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800995e:	fa08 f804 	lsl.w	r8, r8, r4
 8009962:	fa2a f303 	lsr.w	r3, sl, r3
 8009966:	ea43 0308 	orr.w	r3, r3, r8
 800996a:	fa0a f404 	lsl.w	r4, sl, r4
 800996e:	e7aa      	b.n	80098c6 <__ieee754_fmod+0xae>
 8009970:	4b31      	ldr	r3, [pc, #196]	; (8009a38 <__ieee754_fmod+0x220>)
 8009972:	1a5b      	subs	r3, r3, r1
 8009974:	fa0a f303 	lsl.w	r3, sl, r3
 8009978:	2400      	movs	r4, #0
 800997a:	e7a4      	b.n	80098c6 <__ieee754_fmod+0xae>
 800997c:	eba0 0c02 	sub.w	ip, r0, r2
 8009980:	f1bc 0f1f 	cmp.w	ip, #31
 8009984:	dc0a      	bgt.n	800999c <__ieee754_fmod+0x184>
 8009986:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800998a:	fa0e fe0c 	lsl.w	lr, lr, ip
 800998e:	fa27 f606 	lsr.w	r6, r7, r6
 8009992:	ea46 060e 	orr.w	r6, r6, lr
 8009996:	fa07 fc0c 	lsl.w	ip, r7, ip
 800999a:	e79b      	b.n	80098d4 <__ieee754_fmod+0xbc>
 800999c:	4e26      	ldr	r6, [pc, #152]	; (8009a38 <__ieee754_fmod+0x220>)
 800999e:	1ab6      	subs	r6, r6, r2
 80099a0:	fa07 f606 	lsl.w	r6, r7, r6
 80099a4:	f04f 0c00 	mov.w	ip, #0
 80099a8:	e794      	b.n	80098d4 <__ieee754_fmod+0xbc>
 80099aa:	4564      	cmp	r4, ip
 80099ac:	bf38      	it	cc
 80099ae:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80099b2:	2800      	cmp	r0, #0
 80099b4:	da05      	bge.n	80099c2 <__ieee754_fmod+0x1aa>
 80099b6:	0fe0      	lsrs	r0, r4, #31
 80099b8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80099bc:	0064      	lsls	r4, r4, #1
 80099be:	3901      	subs	r1, #1
 80099c0:	e789      	b.n	80098d6 <__ieee754_fmod+0xbe>
 80099c2:	ea50 0307 	orrs.w	r3, r0, r7
 80099c6:	f43f af5b 	beq.w	8009880 <__ieee754_fmod+0x68>
 80099ca:	0ffb      	lsrs	r3, r7, #31
 80099cc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80099d0:	007c      	lsls	r4, r7, #1
 80099d2:	e7f4      	b.n	80099be <__ieee754_fmod+0x1a6>
 80099d4:	0fe1      	lsrs	r1, r4, #31
 80099d6:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80099da:	0064      	lsls	r4, r4, #1
 80099dc:	3a01      	subs	r2, #1
 80099de:	e78a      	b.n	80098f6 <__ieee754_fmod+0xde>
 80099e0:	1a89      	subs	r1, r1, r2
 80099e2:	2914      	cmp	r1, #20
 80099e4:	dc0a      	bgt.n	80099fc <__ieee754_fmod+0x1e4>
 80099e6:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 80099ea:	fa03 f202 	lsl.w	r2, r3, r2
 80099ee:	40cc      	lsrs	r4, r1
 80099f0:	4322      	orrs	r2, r4
 80099f2:	410b      	asrs	r3, r1
 80099f4:	ea43 0105 	orr.w	r1, r3, r5
 80099f8:	4610      	mov	r0, r2
 80099fa:	e731      	b.n	8009860 <__ieee754_fmod+0x48>
 80099fc:	291f      	cmp	r1, #31
 80099fe:	dc07      	bgt.n	8009a10 <__ieee754_fmod+0x1f8>
 8009a00:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8009a04:	40cc      	lsrs	r4, r1
 8009a06:	fa03 f202 	lsl.w	r2, r3, r2
 8009a0a:	4322      	orrs	r2, r4
 8009a0c:	462b      	mov	r3, r5
 8009a0e:	e7f1      	b.n	80099f4 <__ieee754_fmod+0x1dc>
 8009a10:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8009a14:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009a18:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8009a1c:	32e2      	adds	r2, #226	; 0xe2
 8009a1e:	fa43 f202 	asr.w	r2, r3, r2
 8009a22:	e7f3      	b.n	8009a0c <__ieee754_fmod+0x1f4>
 8009a24:	7fefffff 	.word	0x7fefffff
 8009a28:	7ff00000 	.word	0x7ff00000
 8009a2c:	08009fd0 	.word	0x08009fd0
 8009a30:	fffffbed 	.word	0xfffffbed
 8009a34:	fffffc02 	.word	0xfffffc02
 8009a38:	fffffbe2 	.word	0xfffffbe2

08009a3c <_getpid>:
 8009a3c:	4b02      	ldr	r3, [pc, #8]	; (8009a48 <_getpid+0xc>)
 8009a3e:	2258      	movs	r2, #88	; 0x58
 8009a40:	601a      	str	r2, [r3, #0]
 8009a42:	f04f 30ff 	mov.w	r0, #4294967295
 8009a46:	4770      	bx	lr
 8009a48:	200046dc 	.word	0x200046dc

08009a4c <_kill>:
 8009a4c:	4b02      	ldr	r3, [pc, #8]	; (8009a58 <_kill+0xc>)
 8009a4e:	2258      	movs	r2, #88	; 0x58
 8009a50:	601a      	str	r2, [r3, #0]
 8009a52:	f04f 30ff 	mov.w	r0, #4294967295
 8009a56:	4770      	bx	lr
 8009a58:	200046dc 	.word	0x200046dc

08009a5c <_exit>:
 8009a5c:	e7fe      	b.n	8009a5c <_exit>
	...

08009a60 <_init>:
 8009a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a62:	bf00      	nop
 8009a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a66:	bc08      	pop	{r3}
 8009a68:	469e      	mov	lr, r3
 8009a6a:	4770      	bx	lr

08009a6c <_fini>:
 8009a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a6e:	bf00      	nop
 8009a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a72:	bc08      	pop	{r3}
 8009a74:	469e      	mov	lr, r3
 8009a76:	4770      	bx	lr
