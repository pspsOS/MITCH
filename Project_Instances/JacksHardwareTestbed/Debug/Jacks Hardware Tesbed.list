
Jacks Hardware Tesbed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004580  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004720  08004720  00014720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047cc  080047cc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080047cc  080047cc  000147cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047d4  080047d4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047d4  080047d4  000147d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047d8  080047d8  000147d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080047dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004304  20000074  08004850  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004378  08004850  00024378  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b56  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002858  00000000  00000000  00030bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d80  00000000  00000000  00033458  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c48  00000000  00000000  000341d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018aef  00000000  00000000  00034e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000beae  00000000  00000000  0004d90f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009231e  00000000  00000000  000597bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ebadb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b4c  00000000  00000000  000ebb58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004708 	.word	0x08004708

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08004708 	.word	0x08004708

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <vApplicationGetIdleTaskMemory+0x2c>)
 80004f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	4a06      	ldr	r2, [pc, #24]	; (8000510 <vApplicationGetIdleTaskMemory+0x30>)
 80004f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	20000090 	.word	0x20000090
 8000510:	200000e4 	.word	0x200000e4

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b088      	sub	sp, #32
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fad1 	bl	8000ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f825 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f90b 	bl	800073c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000526:	f000 f8b5 	bl	8000694 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800052a:	f000 f8dd 	bl	80006e8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800052e:	f000 f87b 	bl	8000628 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 8000532:	480b      	ldr	r0, [pc, #44]	; (8000560 <main+0x4c>)
 8000534:	f002 fa1e 	bl	8002974 <RetargetInit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128, defaultTaskBuffer, &defaultTaskControlBlock);
 8000538:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <main+0x50>)
 800053a:	1d3c      	adds	r4, r7, #4
 800053c:	461d      	mov	r5, r3
 800053e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000540:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000542:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000546:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f002 fade 	bl	8002b10 <osThreadCreate>
 8000554:	4602      	mov	r2, r0
 8000556:	4b04      	ldr	r3, [pc, #16]	; (8000568 <main+0x54>)
 8000558:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800055a:	f002 fad2 	bl	8002b02 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800055e:	e7fe      	b.n	800055e <main+0x4a>
 8000560:	2000432c 	.word	0x2000432c
 8000564:	0800472c 	.word	0x0800472c
 8000568:	2000403c 	.word	0x2000403c

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b094      	sub	sp, #80	; 0x50
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0320 	add.w	r3, r7, #32
 8000576:	2230      	movs	r2, #48	; 0x30
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f003 fd12 	bl	8003fa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	4b22      	ldr	r3, [pc, #136]	; (8000620 <SystemClock_Config+0xb4>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	4a21      	ldr	r2, [pc, #132]	; (8000620 <SystemClock_Config+0xb4>)
 800059a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059e:	6413      	str	r3, [r2, #64]	; 0x40
 80005a0:	4b1f      	ldr	r3, [pc, #124]	; (8000620 <SystemClock_Config+0xb4>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ac:	2300      	movs	r3, #0
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <SystemClock_Config+0xb8>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a1b      	ldr	r2, [pc, #108]	; (8000624 <SystemClock_Config+0xb8>)
 80005b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4b19      	ldr	r3, [pc, #100]	; (8000624 <SystemClock_Config+0xb8>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c8:	2302      	movs	r3, #2
 80005ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005cc:	2301      	movs	r3, #1
 80005ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d0:	2310      	movs	r3, #16
 80005d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005d4:	2300      	movs	r3, #0
 80005d6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d8:	f107 0320 	add.w	r3, r7, #32
 80005dc:	4618      	mov	r0, r3
 80005de:	f000 fd97 	bl	8001110 <HAL_RCC_OscConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005e8:	f000 f8ca 	bl	8000780 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ec:	230f      	movs	r3, #15
 80005ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005f0:	2300      	movs	r3, #0
 80005f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f000 fff2 	bl	80015f0 <HAL_RCC_ClockConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000612:	f000 f8b5 	bl	8000780 <Error_Handler>
  }
}
 8000616:	bf00      	nop
 8000618:	3750      	adds	r7, #80	; 0x50
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40023800 	.word	0x40023800
 8000624:	40007000 	.word	0x40007000

08000628 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800062c:	4b17      	ldr	r3, [pc, #92]	; (800068c <MX_SPI1_Init+0x64>)
 800062e:	4a18      	ldr	r2, [pc, #96]	; (8000690 <MX_SPI1_Init+0x68>)
 8000630:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000632:	4b16      	ldr	r3, [pc, #88]	; (800068c <MX_SPI1_Init+0x64>)
 8000634:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000638:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800063a:	4b14      	ldr	r3, [pc, #80]	; (800068c <MX_SPI1_Init+0x64>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <MX_SPI1_Init+0x64>)
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <MX_SPI1_Init+0x64>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800064c:	4b0f      	ldr	r3, [pc, #60]	; (800068c <MX_SPI1_Init+0x64>)
 800064e:	2200      	movs	r2, #0
 8000650:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <MX_SPI1_Init+0x64>)
 8000654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000658:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800065a:	4b0c      	ldr	r3, [pc, #48]	; (800068c <MX_SPI1_Init+0x64>)
 800065c:	2200      	movs	r2, #0
 800065e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <MX_SPI1_Init+0x64>)
 8000662:	2200      	movs	r2, #0
 8000664:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <MX_SPI1_Init+0x64>)
 8000668:	2200      	movs	r2, #0
 800066a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <MX_SPI1_Init+0x64>)
 800066e:	2200      	movs	r2, #0
 8000670:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <MX_SPI1_Init+0x64>)
 8000674:	220a      	movs	r2, #10
 8000676:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000678:	4804      	ldr	r0, [pc, #16]	; (800068c <MX_SPI1_Init+0x64>)
 800067a:	f001 f985 	bl	8001988 <HAL_SPI_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000684:	f000 f87c 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20004280 	.word	0x20004280
 8000690:	40013000 	.word	0x40013000

08000694 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000698:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_USART1_UART_Init+0x4c>)
 800069a:	4a12      	ldr	r2, [pc, #72]	; (80006e4 <MX_USART1_UART_Init+0x50>)
 800069c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800069e:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <MX_USART1_UART_Init+0x4c>)
 80006a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_USART1_UART_Init+0x4c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <MX_USART1_UART_Init+0x4c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006b2:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <MX_USART1_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_USART1_UART_Init+0x4c>)
 80006ba:	220c      	movs	r2, #12
 80006bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006be:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <MX_USART1_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_USART1_UART_Init+0x4c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <MX_USART1_UART_Init+0x4c>)
 80006cc:	f001 f9c0 	bl	8001a50 <HAL_UART_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006d6:	f000 f853 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20004040 	.word	0x20004040
 80006e4:	40011000 	.word	0x40011000

080006e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 80006ee:	4a12      	ldr	r2, [pc, #72]	; (8000738 <MX_USART2_UART_Init+0x50>)
 80006f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006f2:	4b10      	ldr	r3, [pc, #64]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 80006f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 800070e:	220c      	movs	r2, #12
 8000710:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 8000720:	f001 f996 	bl	8001a50 <HAL_UART_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800072a:	f000 f829 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	2000432c 	.word	0x2000432c
 8000738:	40004400 	.word	0x40004400

0800073c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_GPIO_Init+0x30>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a08      	ldr	r2, [pc, #32]	; (800076c <MX_GPIO_Init+0x30>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_GPIO_Init+0x30>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]

}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800

08000770 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000778:	2001      	movs	r0, #1
 800077a:	f002 fa15 	bl	8002ba8 <osDelay>
 800077e:	e7fb      	b.n	8000778 <StartDefaultTask+0x8>

08000780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000784:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000786:	e7fe      	b.n	8000786 <Error_Handler+0x6>

08000788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b12      	ldr	r3, [pc, #72]	; (80007dc <HAL_MspInit+0x54>)
 8000794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000796:	4a11      	ldr	r2, [pc, #68]	; (80007dc <HAL_MspInit+0x54>)
 8000798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800079c:	6453      	str	r3, [r2, #68]	; 0x44
 800079e:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <HAL_MspInit+0x54>)
 80007a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	603b      	str	r3, [r7, #0]
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <HAL_MspInit+0x54>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b2:	4a0a      	ldr	r2, [pc, #40]	; (80007dc <HAL_MspInit+0x54>)
 80007b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <HAL_MspInit+0x54>)
 80007bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	210f      	movs	r1, #15
 80007ca:	f06f 0001 	mvn.w	r0, #1
 80007ce:	f000 fac4 	bl	8000d5a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800

080007e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	; 0x28
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a19      	ldr	r2, [pc, #100]	; (8000864 <HAL_SPI_MspInit+0x84>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d12b      	bne.n	800085a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	4b18      	ldr	r3, [pc, #96]	; (8000868 <HAL_SPI_MspInit+0x88>)
 8000808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080a:	4a17      	ldr	r2, [pc, #92]	; (8000868 <HAL_SPI_MspInit+0x88>)
 800080c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000810:	6453      	str	r3, [r2, #68]	; 0x44
 8000812:	4b15      	ldr	r3, [pc, #84]	; (8000868 <HAL_SPI_MspInit+0x88>)
 8000814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000816:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <HAL_SPI_MspInit+0x88>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a10      	ldr	r2, [pc, #64]	; (8000868 <HAL_SPI_MspInit+0x88>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <HAL_SPI_MspInit+0x88>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800083a:	23e0      	movs	r3, #224	; 0xe0
 800083c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000846:	2303      	movs	r3, #3
 8000848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800084a:	2305      	movs	r3, #5
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	4805      	ldr	r0, [pc, #20]	; (800086c <HAL_SPI_MspInit+0x8c>)
 8000856:	f000 fad9 	bl	8000e0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800085a:	bf00      	nop
 800085c:	3728      	adds	r7, #40	; 0x28
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40013000 	.word	0x40013000
 8000868:	40023800 	.word	0x40023800
 800086c:	40020000 	.word	0x40020000

08000870 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08c      	sub	sp, #48	; 0x30
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a36      	ldr	r2, [pc, #216]	; (8000968 <HAL_UART_MspInit+0xf8>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d135      	bne.n	80008fe <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	61bb      	str	r3, [r7, #24]
 8000896:	4b35      	ldr	r3, [pc, #212]	; (800096c <HAL_UART_MspInit+0xfc>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089a:	4a34      	ldr	r2, [pc, #208]	; (800096c <HAL_UART_MspInit+0xfc>)
 800089c:	f043 0310 	orr.w	r3, r3, #16
 80008a0:	6453      	str	r3, [r2, #68]	; 0x44
 80008a2:	4b32      	ldr	r3, [pc, #200]	; (800096c <HAL_UART_MspInit+0xfc>)
 80008a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a6:	f003 0310 	and.w	r3, r3, #16
 80008aa:	61bb      	str	r3, [r7, #24]
 80008ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
 80008b2:	4b2e      	ldr	r3, [pc, #184]	; (800096c <HAL_UART_MspInit+0xfc>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a2d      	ldr	r2, [pc, #180]	; (800096c <HAL_UART_MspInit+0xfc>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b2b      	ldr	r3, [pc, #172]	; (800096c <HAL_UART_MspInit+0xfc>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d0:	2302      	movs	r3, #2
 80008d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d8:	2303      	movs	r3, #3
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008dc:	2307      	movs	r3, #7
 80008de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	4822      	ldr	r0, [pc, #136]	; (8000970 <HAL_UART_MspInit+0x100>)
 80008e8:	f000 fa90 	bl	8000e0c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2105      	movs	r1, #5
 80008f0:	2025      	movs	r0, #37	; 0x25
 80008f2:	f000 fa32 	bl	8000d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008f6:	2025      	movs	r0, #37	; 0x25
 80008f8:	f000 fa4b 	bl	8000d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008fc:	e030      	b.n	8000960 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a1c      	ldr	r2, [pc, #112]	; (8000974 <HAL_UART_MspInit+0x104>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d12b      	bne.n	8000960 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000908:	2300      	movs	r3, #0
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	4b17      	ldr	r3, [pc, #92]	; (800096c <HAL_UART_MspInit+0xfc>)
 800090e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000910:	4a16      	ldr	r2, [pc, #88]	; (800096c <HAL_UART_MspInit+0xfc>)
 8000912:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000916:	6413      	str	r3, [r2, #64]	; 0x40
 8000918:	4b14      	ldr	r3, [pc, #80]	; (800096c <HAL_UART_MspInit+0xfc>)
 800091a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000920:	613b      	str	r3, [r7, #16]
 8000922:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	4b10      	ldr	r3, [pc, #64]	; (800096c <HAL_UART_MspInit+0xfc>)
 800092a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092c:	4a0f      	ldr	r2, [pc, #60]	; (800096c <HAL_UART_MspInit+0xfc>)
 800092e:	f043 0301 	orr.w	r3, r3, #1
 8000932:	6313      	str	r3, [r2, #48]	; 0x30
 8000934:	4b0d      	ldr	r3, [pc, #52]	; (800096c <HAL_UART_MspInit+0xfc>)
 8000936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000938:	f003 0301 	and.w	r3, r3, #1
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000940:	230c      	movs	r3, #12
 8000942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
 8000946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094c:	2303      	movs	r3, #3
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000950:	2307      	movs	r3, #7
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <HAL_UART_MspInit+0x100>)
 800095c:	f000 fa56 	bl	8000e0c <HAL_GPIO_Init>
}
 8000960:	bf00      	nop
 8000962:	3730      	adds	r7, #48	; 0x30
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40011000 	.word	0x40011000
 800096c:	40023800 	.word	0x40023800
 8000970:	40020000 	.word	0x40020000
 8000974:	40004400 	.word	0x40004400

08000978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800097c:	e7fe      	b.n	800097c <NMI_Handler+0x4>

0800097e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <HardFault_Handler+0x4>

08000984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <MemManage_Handler+0x4>

0800098a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <BusFault_Handler+0x4>

08000990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <UsageFault_Handler+0x4>

08000996 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a8:	f000 f8dc 	bl	8000b64 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80009ac:	f002 fe74 	bl	8003698 <xTaskGetSchedulerState>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d001      	beq.n	80009ba <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80009b6:	f003 f8a7 	bl	8003b08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009c4:	4802      	ldr	r0, [pc, #8]	; (80009d0 <USART1_IRQHandler+0x10>)
 80009c6:	f001 f9cf 	bl	8001d68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20004040 	.word	0x20004040

080009d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009dc:	4a14      	ldr	r2, [pc, #80]	; (8000a30 <_sbrk+0x5c>)
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <_sbrk+0x60>)
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009e8:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <_sbrk+0x64>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d102      	bne.n	80009f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009f0:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <_sbrk+0x64>)
 80009f2:	4a12      	ldr	r2, [pc, #72]	; (8000a3c <_sbrk+0x68>)
 80009f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009f6:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <_sbrk+0x64>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4413      	add	r3, r2
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d207      	bcs.n	8000a14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a04:	f003 faa4 	bl	8003f50 <__errno>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	230c      	movs	r3, #12
 8000a0c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000a0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a12:	e009      	b.n	8000a28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a14:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <_sbrk+0x64>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a1a:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <_sbrk+0x64>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <_sbrk+0x64>)
 8000a24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a26:	68fb      	ldr	r3, [r7, #12]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3718      	adds	r7, #24
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20020000 	.word	0x20020000
 8000a34:	00000400 	.word	0x00000400
 8000a38:	200002e4 	.word	0x200002e4
 8000a3c:	20004378 	.word	0x20004378

08000a40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a44:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <SystemInit+0x28>)
 8000a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a4a:	4a07      	ldr	r2, [pc, #28]	; (8000a68 <SystemInit+0x28>)
 8000a4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a54:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <SystemInit+0x28>)
 8000a56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a5a:	609a      	str	r2, [r3, #8]
#endif
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aa4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a72:	e003      	b.n	8000a7c <LoopCopyDataInit>

08000a74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a7a:	3104      	adds	r1, #4

08000a7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a7c:	480b      	ldr	r0, [pc, #44]	; (8000aac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a84:	d3f6      	bcc.n	8000a74 <CopyDataInit>
  ldr  r2, =_sbss
 8000a86:	4a0b      	ldr	r2, [pc, #44]	; (8000ab4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a88:	e002      	b.n	8000a90 <LoopFillZerobss>

08000a8a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a8c:	f842 3b04 	str.w	r3, [r2], #4

08000a90 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a94:	d3f9      	bcc.n	8000a8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a96:	f7ff ffd3 	bl	8000a40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a9a:	f003 fa5f 	bl	8003f5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a9e:	f7ff fd39 	bl	8000514 <main>
  bx  lr    
 8000aa2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000aa4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000aa8:	080047dc 	.word	0x080047dc
  ldr  r0, =_sdata
 8000aac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ab0:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000ab4:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000ab8:	20004378 	.word	0x20004378

08000abc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000abc:	e7fe      	b.n	8000abc <ADC_IRQHandler>
	...

08000ac0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ac4:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <HAL_Init+0x40>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a0d      	ldr	r2, [pc, #52]	; (8000b00 <HAL_Init+0x40>)
 8000aca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ace:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ad0:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <HAL_Init+0x40>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a0a      	ldr	r2, [pc, #40]	; (8000b00 <HAL_Init+0x40>)
 8000ad6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ada:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000adc:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <HAL_Init+0x40>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a07      	ldr	r2, [pc, #28]	; (8000b00 <HAL_Init+0x40>)
 8000ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ae6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae8:	2003      	movs	r0, #3
 8000aea:	f000 f92b 	bl	8000d44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aee:	200f      	movs	r0, #15
 8000af0:	f000 f808 	bl	8000b04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000af4:	f7ff fe48 	bl	8000788 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40023c00 	.word	0x40023c00

08000b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b0c:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <HAL_InitTick+0x54>)
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <HAL_InitTick+0x58>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	4619      	mov	r1, r3
 8000b16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 f943 	bl	8000dae <HAL_SYSTICK_Config>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e00e      	b.n	8000b50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2b0f      	cmp	r3, #15
 8000b36:	d80a      	bhi.n	8000b4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	6879      	ldr	r1, [r7, #4]
 8000b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b40:	f000 f90b 	bl	8000d5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b44:	4a06      	ldr	r2, [pc, #24]	; (8000b60 <HAL_InitTick+0x5c>)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e000      	b.n	8000b50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000000 	.word	0x20000000
 8000b5c:	20000008 	.word	0x20000008
 8000b60:	20000004 	.word	0x20000004

08000b64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_IncTick+0x20>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_IncTick+0x24>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4413      	add	r3, r2
 8000b74:	4a04      	ldr	r2, [pc, #16]	; (8000b88 <HAL_IncTick+0x24>)
 8000b76:	6013      	str	r3, [r2, #0]
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	20000008 	.word	0x20000008
 8000b88:	2000436c 	.word	0x2000436c

08000b8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b90:	4b03      	ldr	r3, [pc, #12]	; (8000ba0 <HAL_GetTick+0x14>)
 8000b92:	681b      	ldr	r3, [r3, #0]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	2000436c 	.word	0x2000436c

08000ba4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd6:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	60d3      	str	r3, [r2, #12]
}
 8000bdc:	bf00      	nop
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf0:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <__NVIC_GetPriorityGrouping+0x18>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	0a1b      	lsrs	r3, r3, #8
 8000bf6:	f003 0307 	and.w	r3, r3, #7
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db0b      	blt.n	8000c32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	f003 021f 	and.w	r2, r3, #31
 8000c20:	4907      	ldr	r1, [pc, #28]	; (8000c40 <__NVIC_EnableIRQ+0x38>)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	095b      	lsrs	r3, r3, #5
 8000c28:	2001      	movs	r0, #1
 8000c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000e100 	.word	0xe000e100

08000c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	6039      	str	r1, [r7, #0]
 8000c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	db0a      	blt.n	8000c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	490c      	ldr	r1, [pc, #48]	; (8000c90 <__NVIC_SetPriority+0x4c>)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	0112      	lsls	r2, r2, #4
 8000c64:	b2d2      	uxtb	r2, r2
 8000c66:	440b      	add	r3, r1
 8000c68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c6c:	e00a      	b.n	8000c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4908      	ldr	r1, [pc, #32]	; (8000c94 <__NVIC_SetPriority+0x50>)
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	f003 030f 	and.w	r3, r3, #15
 8000c7a:	3b04      	subs	r3, #4
 8000c7c:	0112      	lsls	r2, r2, #4
 8000c7e:	b2d2      	uxtb	r2, r2
 8000c80:	440b      	add	r3, r1
 8000c82:	761a      	strb	r2, [r3, #24]
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000e100 	.word	0xe000e100
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b089      	sub	sp, #36	; 0x24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	f1c3 0307 	rsb	r3, r3, #7
 8000cb2:	2b04      	cmp	r3, #4
 8000cb4:	bf28      	it	cs
 8000cb6:	2304      	movcs	r3, #4
 8000cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	2b06      	cmp	r3, #6
 8000cc0:	d902      	bls.n	8000cc8 <NVIC_EncodePriority+0x30>
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3b03      	subs	r3, #3
 8000cc6:	e000      	b.n	8000cca <NVIC_EncodePriority+0x32>
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ccc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43da      	mvns	r2, r3
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	401a      	ands	r2, r3
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cea:	43d9      	mvns	r1, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf0:	4313      	orrs	r3, r2
         );
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3724      	adds	r7, #36	; 0x24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
	...

08000d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d10:	d301      	bcc.n	8000d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d12:	2301      	movs	r3, #1
 8000d14:	e00f      	b.n	8000d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d16:	4a0a      	ldr	r2, [pc, #40]	; (8000d40 <SysTick_Config+0x40>)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d1e:	210f      	movs	r1, #15
 8000d20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d24:	f7ff ff8e 	bl	8000c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d28:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <SysTick_Config+0x40>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d2e:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <SysTick_Config+0x40>)
 8000d30:	2207      	movs	r2, #7
 8000d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	e000e010 	.word	0xe000e010

08000d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f7ff ff29 	bl	8000ba4 <__NVIC_SetPriorityGrouping>
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b086      	sub	sp, #24
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	4603      	mov	r3, r0
 8000d62:	60b9      	str	r1, [r7, #8]
 8000d64:	607a      	str	r2, [r7, #4]
 8000d66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d6c:	f7ff ff3e 	bl	8000bec <__NVIC_GetPriorityGrouping>
 8000d70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	68b9      	ldr	r1, [r7, #8]
 8000d76:	6978      	ldr	r0, [r7, #20]
 8000d78:	f7ff ff8e 	bl	8000c98 <NVIC_EncodePriority>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d82:	4611      	mov	r1, r2
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ff5d 	bl	8000c44 <__NVIC_SetPriority>
}
 8000d8a:	bf00      	nop
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	4603      	mov	r3, r0
 8000d9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ff31 	bl	8000c08 <__NVIC_EnableIRQ>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f7ff ffa2 	bl	8000d00 <SysTick_Config>
 8000dbc:	4603      	mov	r3, r0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	b083      	sub	sp, #12
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d004      	beq.n	8000de4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2280      	movs	r2, #128	; 0x80
 8000dde:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	e00c      	b.n	8000dfe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2205      	movs	r2, #5
 8000de8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f022 0201 	bic.w	r2, r2, #1
 8000dfa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
	...

08000e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b089      	sub	sp, #36	; 0x24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
 8000e26:	e159      	b.n	80010dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e28:	2201      	movs	r2, #1
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	697a      	ldr	r2, [r7, #20]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	f040 8148 	bne.w	80010d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d00b      	beq.n	8000e66 <HAL_GPIO_Init+0x5a>
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d007      	beq.n	8000e66 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e5a:	2b11      	cmp	r3, #17
 8000e5c:	d003      	beq.n	8000e66 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	2b12      	cmp	r3, #18
 8000e64:	d130      	bne.n	8000ec8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	2203      	movs	r2, #3
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	68da      	ldr	r2, [r3, #12]
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	091b      	lsrs	r3, r3, #4
 8000eb2:	f003 0201 	and.w	r2, r3, #1
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4013      	ands	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	689a      	ldr	r2, [r3, #8]
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d003      	beq.n	8000f08 <HAL_GPIO_Init+0xfc>
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	2b12      	cmp	r3, #18
 8000f06:	d123      	bne.n	8000f50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	08da      	lsrs	r2, r3, #3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3208      	adds	r2, #8
 8000f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	f003 0307 	and.w	r3, r3, #7
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	220f      	movs	r2, #15
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	691a      	ldr	r2, [r3, #16]
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	08da      	lsrs	r2, r3, #3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3208      	adds	r2, #8
 8000f4a:	69b9      	ldr	r1, [r7, #24]
 8000f4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 0203 	and.w	r2, r3, #3
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	f000 80a2 	beq.w	80010d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	4b56      	ldr	r3, [pc, #344]	; (80010f0 <HAL_GPIO_Init+0x2e4>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9a:	4a55      	ldr	r2, [pc, #340]	; (80010f0 <HAL_GPIO_Init+0x2e4>)
 8000f9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa2:	4b53      	ldr	r3, [pc, #332]	; (80010f0 <HAL_GPIO_Init+0x2e4>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fae:	4a51      	ldr	r2, [pc, #324]	; (80010f4 <HAL_GPIO_Init+0x2e8>)
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	089b      	lsrs	r3, r3, #2
 8000fb4:	3302      	adds	r3, #2
 8000fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f003 0303 	and.w	r3, r3, #3
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	220f      	movs	r2, #15
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a48      	ldr	r2, [pc, #288]	; (80010f8 <HAL_GPIO_Init+0x2ec>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d019      	beq.n	800100e <HAL_GPIO_Init+0x202>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a47      	ldr	r2, [pc, #284]	; (80010fc <HAL_GPIO_Init+0x2f0>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d013      	beq.n	800100a <HAL_GPIO_Init+0x1fe>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a46      	ldr	r2, [pc, #280]	; (8001100 <HAL_GPIO_Init+0x2f4>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d00d      	beq.n	8001006 <HAL_GPIO_Init+0x1fa>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a45      	ldr	r2, [pc, #276]	; (8001104 <HAL_GPIO_Init+0x2f8>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d007      	beq.n	8001002 <HAL_GPIO_Init+0x1f6>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a44      	ldr	r2, [pc, #272]	; (8001108 <HAL_GPIO_Init+0x2fc>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d101      	bne.n	8000ffe <HAL_GPIO_Init+0x1f2>
 8000ffa:	2304      	movs	r3, #4
 8000ffc:	e008      	b.n	8001010 <HAL_GPIO_Init+0x204>
 8000ffe:	2307      	movs	r3, #7
 8001000:	e006      	b.n	8001010 <HAL_GPIO_Init+0x204>
 8001002:	2303      	movs	r3, #3
 8001004:	e004      	b.n	8001010 <HAL_GPIO_Init+0x204>
 8001006:	2302      	movs	r3, #2
 8001008:	e002      	b.n	8001010 <HAL_GPIO_Init+0x204>
 800100a:	2301      	movs	r3, #1
 800100c:	e000      	b.n	8001010 <HAL_GPIO_Init+0x204>
 800100e:	2300      	movs	r3, #0
 8001010:	69fa      	ldr	r2, [r7, #28]
 8001012:	f002 0203 	and.w	r2, r2, #3
 8001016:	0092      	lsls	r2, r2, #2
 8001018:	4093      	lsls	r3, r2
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4313      	orrs	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001020:	4934      	ldr	r1, [pc, #208]	; (80010f4 <HAL_GPIO_Init+0x2e8>)
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	089b      	lsrs	r3, r3, #2
 8001026:	3302      	adds	r3, #2
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800102e:	4b37      	ldr	r3, [pc, #220]	; (800110c <HAL_GPIO_Init+0x300>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001052:	4a2e      	ldr	r2, [pc, #184]	; (800110c <HAL_GPIO_Init+0x300>)
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001058:	4b2c      	ldr	r3, [pc, #176]	; (800110c <HAL_GPIO_Init+0x300>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800107c:	4a23      	ldr	r2, [pc, #140]	; (800110c <HAL_GPIO_Init+0x300>)
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001082:	4b22      	ldr	r3, [pc, #136]	; (800110c <HAL_GPIO_Init+0x300>)
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010a6:	4a19      	ldr	r2, [pc, #100]	; (800110c <HAL_GPIO_Init+0x300>)
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010ac:	4b17      	ldr	r3, [pc, #92]	; (800110c <HAL_GPIO_Init+0x300>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d003      	beq.n	80010d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010d0:	4a0e      	ldr	r2, [pc, #56]	; (800110c <HAL_GPIO_Init+0x300>)
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3301      	adds	r3, #1
 80010da:	61fb      	str	r3, [r7, #28]
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	2b0f      	cmp	r3, #15
 80010e0:	f67f aea2 	bls.w	8000e28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010e4:	bf00      	nop
 80010e6:	3724      	adds	r7, #36	; 0x24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40013800 	.word	0x40013800
 80010f8:	40020000 	.word	0x40020000
 80010fc:	40020400 	.word	0x40020400
 8001100:	40020800 	.word	0x40020800
 8001104:	40020c00 	.word	0x40020c00
 8001108:	40021000 	.word	0x40021000
 800110c:	40013c00 	.word	0x40013c00

08001110 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d101      	bne.n	8001122 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e25b      	b.n	80015da <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	2b00      	cmp	r3, #0
 800112c:	d075      	beq.n	800121a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800112e:	4ba3      	ldr	r3, [pc, #652]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f003 030c 	and.w	r3, r3, #12
 8001136:	2b04      	cmp	r3, #4
 8001138:	d00c      	beq.n	8001154 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800113a:	4ba0      	ldr	r3, [pc, #640]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001142:	2b08      	cmp	r3, #8
 8001144:	d112      	bne.n	800116c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001146:	4b9d      	ldr	r3, [pc, #628]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800114e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001152:	d10b      	bne.n	800116c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001154:	4b99      	ldr	r3, [pc, #612]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d05b      	beq.n	8001218 <HAL_RCC_OscConfig+0x108>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d157      	bne.n	8001218 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e236      	b.n	80015da <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001174:	d106      	bne.n	8001184 <HAL_RCC_OscConfig+0x74>
 8001176:	4b91      	ldr	r3, [pc, #580]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a90      	ldr	r2, [pc, #576]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 800117c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	e01d      	b.n	80011c0 <HAL_RCC_OscConfig+0xb0>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800118c:	d10c      	bne.n	80011a8 <HAL_RCC_OscConfig+0x98>
 800118e:	4b8b      	ldr	r3, [pc, #556]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a8a      	ldr	r2, [pc, #552]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001198:	6013      	str	r3, [r2, #0]
 800119a:	4b88      	ldr	r3, [pc, #544]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a87      	ldr	r2, [pc, #540]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 80011a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011a4:	6013      	str	r3, [r2, #0]
 80011a6:	e00b      	b.n	80011c0 <HAL_RCC_OscConfig+0xb0>
 80011a8:	4b84      	ldr	r3, [pc, #528]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a83      	ldr	r2, [pc, #524]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 80011ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011b2:	6013      	str	r3, [r2, #0]
 80011b4:	4b81      	ldr	r3, [pc, #516]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a80      	ldr	r2, [pc, #512]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 80011ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d013      	beq.n	80011f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c8:	f7ff fce0 	bl	8000b8c <HAL_GetTick>
 80011cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011d0:	f7ff fcdc 	bl	8000b8c <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b64      	cmp	r3, #100	; 0x64
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e1fb      	b.n	80015da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e2:	4b76      	ldr	r3, [pc, #472]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d0f0      	beq.n	80011d0 <HAL_RCC_OscConfig+0xc0>
 80011ee:	e014      	b.n	800121a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f0:	f7ff fccc 	bl	8000b8c <HAL_GetTick>
 80011f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f6:	e008      	b.n	800120a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011f8:	f7ff fcc8 	bl	8000b8c <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b64      	cmp	r3, #100	; 0x64
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e1e7      	b.n	80015da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800120a:	4b6c      	ldr	r3, [pc, #432]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1f0      	bne.n	80011f8 <HAL_RCC_OscConfig+0xe8>
 8001216:	e000      	b.n	800121a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d063      	beq.n	80012ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001226:	4b65      	ldr	r3, [pc, #404]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f003 030c 	and.w	r3, r3, #12
 800122e:	2b00      	cmp	r3, #0
 8001230:	d00b      	beq.n	800124a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001232:	4b62      	ldr	r3, [pc, #392]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800123a:	2b08      	cmp	r3, #8
 800123c:	d11c      	bne.n	8001278 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800123e:	4b5f      	ldr	r3, [pc, #380]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d116      	bne.n	8001278 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800124a:	4b5c      	ldr	r3, [pc, #368]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d005      	beq.n	8001262 <HAL_RCC_OscConfig+0x152>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d001      	beq.n	8001262 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e1bb      	b.n	80015da <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001262:	4b56      	ldr	r3, [pc, #344]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	691b      	ldr	r3, [r3, #16]
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	4952      	ldr	r1, [pc, #328]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001272:	4313      	orrs	r3, r2
 8001274:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001276:	e03a      	b.n	80012ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d020      	beq.n	80012c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001280:	4b4f      	ldr	r3, [pc, #316]	; (80013c0 <HAL_RCC_OscConfig+0x2b0>)
 8001282:	2201      	movs	r2, #1
 8001284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001286:	f7ff fc81 	bl	8000b8c <HAL_GetTick>
 800128a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128c:	e008      	b.n	80012a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800128e:	f7ff fc7d 	bl	8000b8c <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d901      	bls.n	80012a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e19c      	b.n	80015da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a0:	4b46      	ldr	r3, [pc, #280]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d0f0      	beq.n	800128e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ac:	4b43      	ldr	r3, [pc, #268]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	00db      	lsls	r3, r3, #3
 80012ba:	4940      	ldr	r1, [pc, #256]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 80012bc:	4313      	orrs	r3, r2
 80012be:	600b      	str	r3, [r1, #0]
 80012c0:	e015      	b.n	80012ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012c2:	4b3f      	ldr	r3, [pc, #252]	; (80013c0 <HAL_RCC_OscConfig+0x2b0>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c8:	f7ff fc60 	bl	8000b8c <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012d0:	f7ff fc5c 	bl	8000b8c <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e17b      	b.n	80015da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e2:	4b36      	ldr	r3, [pc, #216]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1f0      	bne.n	80012d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0308 	and.w	r3, r3, #8
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d030      	beq.n	800135c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d016      	beq.n	8001330 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001302:	4b30      	ldr	r3, [pc, #192]	; (80013c4 <HAL_RCC_OscConfig+0x2b4>)
 8001304:	2201      	movs	r2, #1
 8001306:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001308:	f7ff fc40 	bl	8000b8c <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001310:	f7ff fc3c 	bl	8000b8c <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e15b      	b.n	80015da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001322:	4b26      	ldr	r3, [pc, #152]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d0f0      	beq.n	8001310 <HAL_RCC_OscConfig+0x200>
 800132e:	e015      	b.n	800135c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001330:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <HAL_RCC_OscConfig+0x2b4>)
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001336:	f7ff fc29 	bl	8000b8c <HAL_GetTick>
 800133a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800133c:	e008      	b.n	8001350 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800133e:	f7ff fc25 	bl	8000b8c <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e144      	b.n	80015da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001350:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1f0      	bne.n	800133e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0304 	and.w	r3, r3, #4
 8001364:	2b00      	cmp	r3, #0
 8001366:	f000 80a0 	beq.w	80014aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800136a:	2300      	movs	r3, #0
 800136c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800136e:	4b13      	ldr	r3, [pc, #76]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10f      	bne.n	800139a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	4a0e      	ldr	r2, [pc, #56]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 8001384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001388:	6413      	str	r3, [r2, #64]	; 0x40
 800138a:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <HAL_RCC_OscConfig+0x2ac>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001396:	2301      	movs	r3, #1
 8001398:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800139a:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <HAL_RCC_OscConfig+0x2b8>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d121      	bne.n	80013ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013a6:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <HAL_RCC_OscConfig+0x2b8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a07      	ldr	r2, [pc, #28]	; (80013c8 <HAL_RCC_OscConfig+0x2b8>)
 80013ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013b2:	f7ff fbeb 	bl	8000b8c <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b8:	e011      	b.n	80013de <HAL_RCC_OscConfig+0x2ce>
 80013ba:	bf00      	nop
 80013bc:	40023800 	.word	0x40023800
 80013c0:	42470000 	.word	0x42470000
 80013c4:	42470e80 	.word	0x42470e80
 80013c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013cc:	f7ff fbde 	bl	8000b8c <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e0fd      	b.n	80015da <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013de:	4b81      	ldr	r3, [pc, #516]	; (80015e4 <HAL_RCC_OscConfig+0x4d4>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d0f0      	beq.n	80013cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d106      	bne.n	8001400 <HAL_RCC_OscConfig+0x2f0>
 80013f2:	4b7d      	ldr	r3, [pc, #500]	; (80015e8 <HAL_RCC_OscConfig+0x4d8>)
 80013f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f6:	4a7c      	ldr	r2, [pc, #496]	; (80015e8 <HAL_RCC_OscConfig+0x4d8>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	6713      	str	r3, [r2, #112]	; 0x70
 80013fe:	e01c      	b.n	800143a <HAL_RCC_OscConfig+0x32a>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	2b05      	cmp	r3, #5
 8001406:	d10c      	bne.n	8001422 <HAL_RCC_OscConfig+0x312>
 8001408:	4b77      	ldr	r3, [pc, #476]	; (80015e8 <HAL_RCC_OscConfig+0x4d8>)
 800140a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800140c:	4a76      	ldr	r2, [pc, #472]	; (80015e8 <HAL_RCC_OscConfig+0x4d8>)
 800140e:	f043 0304 	orr.w	r3, r3, #4
 8001412:	6713      	str	r3, [r2, #112]	; 0x70
 8001414:	4b74      	ldr	r3, [pc, #464]	; (80015e8 <HAL_RCC_OscConfig+0x4d8>)
 8001416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001418:	4a73      	ldr	r2, [pc, #460]	; (80015e8 <HAL_RCC_OscConfig+0x4d8>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	6713      	str	r3, [r2, #112]	; 0x70
 8001420:	e00b      	b.n	800143a <HAL_RCC_OscConfig+0x32a>
 8001422:	4b71      	ldr	r3, [pc, #452]	; (80015e8 <HAL_RCC_OscConfig+0x4d8>)
 8001424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001426:	4a70      	ldr	r2, [pc, #448]	; (80015e8 <HAL_RCC_OscConfig+0x4d8>)
 8001428:	f023 0301 	bic.w	r3, r3, #1
 800142c:	6713      	str	r3, [r2, #112]	; 0x70
 800142e:	4b6e      	ldr	r3, [pc, #440]	; (80015e8 <HAL_RCC_OscConfig+0x4d8>)
 8001430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001432:	4a6d      	ldr	r2, [pc, #436]	; (80015e8 <HAL_RCC_OscConfig+0x4d8>)
 8001434:	f023 0304 	bic.w	r3, r3, #4
 8001438:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d015      	beq.n	800146e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001442:	f7ff fba3 	bl	8000b8c <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001448:	e00a      	b.n	8001460 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800144a:	f7ff fb9f 	bl	8000b8c <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	f241 3288 	movw	r2, #5000	; 0x1388
 8001458:	4293      	cmp	r3, r2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e0bc      	b.n	80015da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001460:	4b61      	ldr	r3, [pc, #388]	; (80015e8 <HAL_RCC_OscConfig+0x4d8>)
 8001462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0ee      	beq.n	800144a <HAL_RCC_OscConfig+0x33a>
 800146c:	e014      	b.n	8001498 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146e:	f7ff fb8d 	bl	8000b8c <HAL_GetTick>
 8001472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001474:	e00a      	b.n	800148c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001476:	f7ff fb89 	bl	8000b8c <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	f241 3288 	movw	r2, #5000	; 0x1388
 8001484:	4293      	cmp	r3, r2
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e0a6      	b.n	80015da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800148c:	4b56      	ldr	r3, [pc, #344]	; (80015e8 <HAL_RCC_OscConfig+0x4d8>)
 800148e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1ee      	bne.n	8001476 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001498:	7dfb      	ldrb	r3, [r7, #23]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d105      	bne.n	80014aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800149e:	4b52      	ldr	r3, [pc, #328]	; (80015e8 <HAL_RCC_OscConfig+0x4d8>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	4a51      	ldr	r2, [pc, #324]	; (80015e8 <HAL_RCC_OscConfig+0x4d8>)
 80014a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 8092 	beq.w	80015d8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014b4:	4b4c      	ldr	r3, [pc, #304]	; (80015e8 <HAL_RCC_OscConfig+0x4d8>)
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f003 030c 	and.w	r3, r3, #12
 80014bc:	2b08      	cmp	r3, #8
 80014be:	d05c      	beq.n	800157a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d141      	bne.n	800154c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c8:	4b48      	ldr	r3, [pc, #288]	; (80015ec <HAL_RCC_OscConfig+0x4dc>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ce:	f7ff fb5d 	bl	8000b8c <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014d6:	f7ff fb59 	bl	8000b8c <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e078      	b.n	80015da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014e8:	4b3f      	ldr	r3, [pc, #252]	; (80015e8 <HAL_RCC_OscConfig+0x4d8>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1f0      	bne.n	80014d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	69da      	ldr	r2, [r3, #28]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	431a      	orrs	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001502:	019b      	lsls	r3, r3, #6
 8001504:	431a      	orrs	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150a:	085b      	lsrs	r3, r3, #1
 800150c:	3b01      	subs	r3, #1
 800150e:	041b      	lsls	r3, r3, #16
 8001510:	431a      	orrs	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001516:	061b      	lsls	r3, r3, #24
 8001518:	4933      	ldr	r1, [pc, #204]	; (80015e8 <HAL_RCC_OscConfig+0x4d8>)
 800151a:	4313      	orrs	r3, r2
 800151c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800151e:	4b33      	ldr	r3, [pc, #204]	; (80015ec <HAL_RCC_OscConfig+0x4dc>)
 8001520:	2201      	movs	r2, #1
 8001522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001524:	f7ff fb32 	bl	8000b8c <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800152c:	f7ff fb2e 	bl	8000b8c <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e04d      	b.n	80015da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800153e:	4b2a      	ldr	r3, [pc, #168]	; (80015e8 <HAL_RCC_OscConfig+0x4d8>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0f0      	beq.n	800152c <HAL_RCC_OscConfig+0x41c>
 800154a:	e045      	b.n	80015d8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800154c:	4b27      	ldr	r3, [pc, #156]	; (80015ec <HAL_RCC_OscConfig+0x4dc>)
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001552:	f7ff fb1b 	bl	8000b8c <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800155a:	f7ff fb17 	bl	8000b8c <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e036      	b.n	80015da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800156c:	4b1e      	ldr	r3, [pc, #120]	; (80015e8 <HAL_RCC_OscConfig+0x4d8>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1f0      	bne.n	800155a <HAL_RCC_OscConfig+0x44a>
 8001578:	e02e      	b.n	80015d8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d101      	bne.n	8001586 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e029      	b.n	80015da <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001586:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <HAL_RCC_OscConfig+0x4d8>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	429a      	cmp	r2, r3
 8001598:	d11c      	bne.n	80015d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d115      	bne.n	80015d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80015a8:	68fa      	ldr	r2, [r7, #12]
 80015aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015ae:	4013      	ands	r3, r2
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d10d      	bne.n	80015d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d106      	bne.n	80015d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d001      	beq.n	80015d8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e000      	b.n	80015da <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40007000 	.word	0x40007000
 80015e8:	40023800 	.word	0x40023800
 80015ec:	42470060 	.word	0x42470060

080015f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d101      	bne.n	8001604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e0cc      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001604:	4b68      	ldr	r3, [pc, #416]	; (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 030f 	and.w	r3, r3, #15
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	429a      	cmp	r2, r3
 8001610:	d90c      	bls.n	800162c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001612:	4b65      	ldr	r3, [pc, #404]	; (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800161a:	4b63      	ldr	r3, [pc, #396]	; (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 030f 	and.w	r3, r3, #15
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	429a      	cmp	r2, r3
 8001626:	d001      	beq.n	800162c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e0b8      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d020      	beq.n	800167a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	2b00      	cmp	r3, #0
 8001642:	d005      	beq.n	8001650 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001644:	4b59      	ldr	r3, [pc, #356]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	4a58      	ldr	r2, [pc, #352]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 800164a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800164e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0308 	and.w	r3, r3, #8
 8001658:	2b00      	cmp	r3, #0
 800165a:	d005      	beq.n	8001668 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800165c:	4b53      	ldr	r3, [pc, #332]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	4a52      	ldr	r2, [pc, #328]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001662:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001666:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001668:	4b50      	ldr	r3, [pc, #320]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	494d      	ldr	r1, [pc, #308]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001676:	4313      	orrs	r3, r2
 8001678:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	2b00      	cmp	r3, #0
 8001684:	d044      	beq.n	8001710 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d107      	bne.n	800169e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168e:	4b47      	ldr	r3, [pc, #284]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d119      	bne.n	80016ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e07f      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d003      	beq.n	80016ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016aa:	2b03      	cmp	r3, #3
 80016ac:	d107      	bne.n	80016be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ae:	4b3f      	ldr	r3, [pc, #252]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d109      	bne.n	80016ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e06f      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016be:	4b3b      	ldr	r3, [pc, #236]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e067      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ce:	4b37      	ldr	r3, [pc, #220]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f023 0203 	bic.w	r2, r3, #3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	4934      	ldr	r1, [pc, #208]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016e0:	f7ff fa54 	bl	8000b8c <HAL_GetTick>
 80016e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e6:	e00a      	b.n	80016fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e8:	f7ff fa50 	bl	8000b8c <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e04f      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016fe:	4b2b      	ldr	r3, [pc, #172]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 020c 	and.w	r2, r3, #12
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	429a      	cmp	r2, r3
 800170e:	d1eb      	bne.n	80016e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001710:	4b25      	ldr	r3, [pc, #148]	; (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 030f 	and.w	r3, r3, #15
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	429a      	cmp	r2, r3
 800171c:	d20c      	bcs.n	8001738 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171e:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001726:	4b20      	ldr	r3, [pc, #128]	; (80017a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 030f 	and.w	r3, r3, #15
 800172e:	683a      	ldr	r2, [r7, #0]
 8001730:	429a      	cmp	r2, r3
 8001732:	d001      	beq.n	8001738 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e032      	b.n	800179e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	d008      	beq.n	8001756 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001744:	4b19      	ldr	r3, [pc, #100]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	4916      	ldr	r1, [pc, #88]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	4313      	orrs	r3, r2
 8001754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	2b00      	cmp	r3, #0
 8001760:	d009      	beq.n	8001776 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001762:	4b12      	ldr	r3, [pc, #72]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	490e      	ldr	r1, [pc, #56]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 8001772:	4313      	orrs	r3, r2
 8001774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001776:	f000 f821 	bl	80017bc <HAL_RCC_GetSysClockFreq>
 800177a:	4601      	mov	r1, r0
 800177c:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	091b      	lsrs	r3, r3, #4
 8001782:	f003 030f 	and.w	r3, r3, #15
 8001786:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001788:	5cd3      	ldrb	r3, [r2, r3]
 800178a:	fa21 f303 	lsr.w	r3, r1, r3
 800178e:	4a09      	ldr	r2, [pc, #36]	; (80017b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff f9b4 	bl	8000b04 <HAL_InitTick>

  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40023c00 	.word	0x40023c00
 80017ac:	40023800 	.word	0x40023800
 80017b0:	08004750 	.word	0x08004750
 80017b4:	20000000 	.word	0x20000000
 80017b8:	20000004 	.word	0x20000004

080017bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	607b      	str	r3, [r7, #4]
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	2300      	movs	r3, #0
 80017cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80017ce:	2300      	movs	r3, #0
 80017d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017d2:	4b50      	ldr	r3, [pc, #320]	; (8001914 <HAL_RCC_GetSysClockFreq+0x158>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 030c 	and.w	r3, r3, #12
 80017da:	2b04      	cmp	r3, #4
 80017dc:	d007      	beq.n	80017ee <HAL_RCC_GetSysClockFreq+0x32>
 80017de:	2b08      	cmp	r3, #8
 80017e0:	d008      	beq.n	80017f4 <HAL_RCC_GetSysClockFreq+0x38>
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f040 808d 	bne.w	8001902 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017e8:	4b4b      	ldr	r3, [pc, #300]	; (8001918 <HAL_RCC_GetSysClockFreq+0x15c>)
 80017ea:	60bb      	str	r3, [r7, #8]
       break;
 80017ec:	e08c      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017ee:	4b4b      	ldr	r3, [pc, #300]	; (800191c <HAL_RCC_GetSysClockFreq+0x160>)
 80017f0:	60bb      	str	r3, [r7, #8]
      break;
 80017f2:	e089      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017f4:	4b47      	ldr	r3, [pc, #284]	; (8001914 <HAL_RCC_GetSysClockFreq+0x158>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017fe:	4b45      	ldr	r3, [pc, #276]	; (8001914 <HAL_RCC_GetSysClockFreq+0x158>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d023      	beq.n	8001852 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800180a:	4b42      	ldr	r3, [pc, #264]	; (8001914 <HAL_RCC_GetSysClockFreq+0x158>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	099b      	lsrs	r3, r3, #6
 8001810:	f04f 0400 	mov.w	r4, #0
 8001814:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	ea03 0501 	and.w	r5, r3, r1
 8001820:	ea04 0602 	and.w	r6, r4, r2
 8001824:	4a3d      	ldr	r2, [pc, #244]	; (800191c <HAL_RCC_GetSysClockFreq+0x160>)
 8001826:	fb02 f106 	mul.w	r1, r2, r6
 800182a:	2200      	movs	r2, #0
 800182c:	fb02 f205 	mul.w	r2, r2, r5
 8001830:	440a      	add	r2, r1
 8001832:	493a      	ldr	r1, [pc, #232]	; (800191c <HAL_RCC_GetSysClockFreq+0x160>)
 8001834:	fba5 0101 	umull	r0, r1, r5, r1
 8001838:	1853      	adds	r3, r2, r1
 800183a:	4619      	mov	r1, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f04f 0400 	mov.w	r4, #0
 8001842:	461a      	mov	r2, r3
 8001844:	4623      	mov	r3, r4
 8001846:	f7fe fccb 	bl	80001e0 <__aeabi_uldivmod>
 800184a:	4603      	mov	r3, r0
 800184c:	460c      	mov	r4, r1
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	e049      	b.n	80018e6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001852:	4b30      	ldr	r3, [pc, #192]	; (8001914 <HAL_RCC_GetSysClockFreq+0x158>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	099b      	lsrs	r3, r3, #6
 8001858:	f04f 0400 	mov.w	r4, #0
 800185c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001860:	f04f 0200 	mov.w	r2, #0
 8001864:	ea03 0501 	and.w	r5, r3, r1
 8001868:	ea04 0602 	and.w	r6, r4, r2
 800186c:	4629      	mov	r1, r5
 800186e:	4632      	mov	r2, r6
 8001870:	f04f 0300 	mov.w	r3, #0
 8001874:	f04f 0400 	mov.w	r4, #0
 8001878:	0154      	lsls	r4, r2, #5
 800187a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800187e:	014b      	lsls	r3, r1, #5
 8001880:	4619      	mov	r1, r3
 8001882:	4622      	mov	r2, r4
 8001884:	1b49      	subs	r1, r1, r5
 8001886:	eb62 0206 	sbc.w	r2, r2, r6
 800188a:	f04f 0300 	mov.w	r3, #0
 800188e:	f04f 0400 	mov.w	r4, #0
 8001892:	0194      	lsls	r4, r2, #6
 8001894:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001898:	018b      	lsls	r3, r1, #6
 800189a:	1a5b      	subs	r3, r3, r1
 800189c:	eb64 0402 	sbc.w	r4, r4, r2
 80018a0:	f04f 0100 	mov.w	r1, #0
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	00e2      	lsls	r2, r4, #3
 80018aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018ae:	00d9      	lsls	r1, r3, #3
 80018b0:	460b      	mov	r3, r1
 80018b2:	4614      	mov	r4, r2
 80018b4:	195b      	adds	r3, r3, r5
 80018b6:	eb44 0406 	adc.w	r4, r4, r6
 80018ba:	f04f 0100 	mov.w	r1, #0
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	02a2      	lsls	r2, r4, #10
 80018c4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80018c8:	0299      	lsls	r1, r3, #10
 80018ca:	460b      	mov	r3, r1
 80018cc:	4614      	mov	r4, r2
 80018ce:	4618      	mov	r0, r3
 80018d0:	4621      	mov	r1, r4
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f04f 0400 	mov.w	r4, #0
 80018d8:	461a      	mov	r2, r3
 80018da:	4623      	mov	r3, r4
 80018dc:	f7fe fc80 	bl	80001e0 <__aeabi_uldivmod>
 80018e0:	4603      	mov	r3, r0
 80018e2:	460c      	mov	r4, r1
 80018e4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018e6:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <HAL_RCC_GetSysClockFreq+0x158>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	0c1b      	lsrs	r3, r3, #16
 80018ec:	f003 0303 	and.w	r3, r3, #3
 80018f0:	3301      	adds	r3, #1
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fe:	60bb      	str	r3, [r7, #8]
      break;
 8001900:	e002      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001902:	4b05      	ldr	r3, [pc, #20]	; (8001918 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001904:	60bb      	str	r3, [r7, #8]
      break;
 8001906:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001908:	68bb      	ldr	r3, [r7, #8]
}
 800190a:	4618      	mov	r0, r3
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001912:	bf00      	nop
 8001914:	40023800 	.word	0x40023800
 8001918:	00f42400 	.word	0x00f42400
 800191c:	017d7840 	.word	0x017d7840

08001920 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001924:	4b03      	ldr	r3, [pc, #12]	; (8001934 <HAL_RCC_GetHCLKFreq+0x14>)
 8001926:	681b      	ldr	r3, [r3, #0]
}
 8001928:	4618      	mov	r0, r3
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	20000000 	.word	0x20000000

08001938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800193c:	f7ff fff0 	bl	8001920 <HAL_RCC_GetHCLKFreq>
 8001940:	4601      	mov	r1, r0
 8001942:	4b05      	ldr	r3, [pc, #20]	; (8001958 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	0a9b      	lsrs	r3, r3, #10
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	4a03      	ldr	r2, [pc, #12]	; (800195c <HAL_RCC_GetPCLK1Freq+0x24>)
 800194e:	5cd3      	ldrb	r3, [r2, r3]
 8001950:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001954:	4618      	mov	r0, r3
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40023800 	.word	0x40023800
 800195c:	08004760 	.word	0x08004760

08001960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001964:	f7ff ffdc 	bl	8001920 <HAL_RCC_GetHCLKFreq>
 8001968:	4601      	mov	r1, r0
 800196a:	4b05      	ldr	r3, [pc, #20]	; (8001980 <HAL_RCC_GetPCLK2Freq+0x20>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	0b5b      	lsrs	r3, r3, #13
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	4a03      	ldr	r2, [pc, #12]	; (8001984 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001976:	5cd3      	ldrb	r3, [r2, r3]
 8001978:	fa21 f303 	lsr.w	r3, r1, r3
}
 800197c:	4618      	mov	r0, r3
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40023800 	.word	0x40023800
 8001984:	08004760 	.word	0x08004760

08001988 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e056      	b.n	8001a48 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d106      	bne.n	80019ba <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7fe ff13 	bl	80007e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2202      	movs	r2, #2
 80019be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019d0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	431a      	orrs	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	431a      	orrs	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	695b      	ldr	r3, [r3, #20]
 80019ec:	431a      	orrs	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019f6:	431a      	orrs	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	69db      	ldr	r3, [r3, #28]
 80019fc:	431a      	orrs	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	ea42 0103 	orr.w	r1, r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	0c1b      	lsrs	r3, r3, #16
 8001a18:	f003 0104 	and.w	r1, r3, #4
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	430a      	orrs	r2, r1
 8001a26:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	69da      	ldr	r2, [r3, #28]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a36:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e03f      	b.n	8001ae2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d106      	bne.n	8001a7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7fe fefa 	bl	8000870 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2224      	movs	r2, #36	; 0x24
 8001a80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68da      	ldr	r2, [r3, #12]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 fbf1 	bl	800227c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	691a      	ldr	r2, [r3, #16]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001aa8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	695a      	ldr	r2, [r3, #20]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ab8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68da      	ldr	r2, [r3, #12]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ac8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2220      	movs	r2, #32
 8001ad4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2220      	movs	r2, #32
 8001adc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b088      	sub	sp, #32
 8001aee:	af02      	add	r7, sp, #8
 8001af0:	60f8      	str	r0, [r7, #12]
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	603b      	str	r3, [r7, #0]
 8001af6:	4613      	mov	r3, r2
 8001af8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b20      	cmp	r3, #32
 8001b08:	f040 8083 	bne.w	8001c12 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d002      	beq.n	8001b18 <HAL_UART_Transmit+0x2e>
 8001b12:	88fb      	ldrh	r3, [r7, #6]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d101      	bne.n	8001b1c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e07b      	b.n	8001c14 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d101      	bne.n	8001b2a <HAL_UART_Transmit+0x40>
 8001b26:	2302      	movs	r3, #2
 8001b28:	e074      	b.n	8001c14 <HAL_UART_Transmit+0x12a>
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2221      	movs	r2, #33	; 0x21
 8001b3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001b40:	f7ff f824 	bl	8000b8c <HAL_GetTick>
 8001b44:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	88fa      	ldrh	r2, [r7, #6]
 8001b4a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	88fa      	ldrh	r2, [r7, #6]
 8001b50:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001b5a:	e042      	b.n	8001be2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	3b01      	subs	r3, #1
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b72:	d122      	bne.n	8001bba <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2180      	movs	r1, #128	; 0x80
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f000 fa10 	bl	8001fa4 <UART_WaitOnFlagUntilTimeout>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e042      	b.n	8001c14 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	881b      	ldrh	r3, [r3, #0]
 8001b96:	461a      	mov	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ba0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d103      	bne.n	8001bb2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	3302      	adds	r3, #2
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	e017      	b.n	8001be2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	60bb      	str	r3, [r7, #8]
 8001bb8:	e013      	b.n	8001be2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2180      	movs	r1, #128	; 0x80
 8001bc4:	68f8      	ldr	r0, [r7, #12]
 8001bc6:	f000 f9ed 	bl	8001fa4 <UART_WaitOnFlagUntilTimeout>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e01f      	b.n	8001c14 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	1c5a      	adds	r2, r3, #1
 8001bd8:	60ba      	str	r2, [r7, #8]
 8001bda:	781a      	ldrb	r2, [r3, #0]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1b7      	bne.n	8001b5c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2140      	movs	r1, #64	; 0x40
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f000 f9d4 	bl	8001fa4 <UART_WaitOnFlagUntilTimeout>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e006      	b.n	8001c14 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2220      	movs	r2, #32
 8001c0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	e000      	b.n	8001c14 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001c12:	2302      	movs	r3, #2
  }
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b088      	sub	sp, #32
 8001c20:	af02      	add	r7, sp, #8
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	603b      	str	r3, [r7, #0]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b20      	cmp	r3, #32
 8001c3a:	f040 8090 	bne.w	8001d5e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d002      	beq.n	8001c4a <HAL_UART_Receive+0x2e>
 8001c44:	88fb      	ldrh	r3, [r7, #6]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e088      	b.n	8001d60 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d101      	bne.n	8001c5c <HAL_UART_Receive+0x40>
 8001c58:	2302      	movs	r3, #2
 8001c5a:	e081      	b.n	8001d60 <HAL_UART_Receive+0x144>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2200      	movs	r2, #0
 8001c68:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2222      	movs	r2, #34	; 0x22
 8001c6e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001c72:	f7fe ff8b 	bl	8000b8c <HAL_GetTick>
 8001c76:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	88fa      	ldrh	r2, [r7, #6]
 8001c7c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	88fa      	ldrh	r2, [r7, #6]
 8001c82:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001c8c:	e05c      	b.n	8001d48 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	3b01      	subs	r3, #1
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ca4:	d12b      	bne.n	8001cfe <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	2200      	movs	r2, #0
 8001cae:	2120      	movs	r1, #32
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f000 f977 	bl	8001fa4 <UART_WaitOnFlagUntilTimeout>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e04f      	b.n	8001d60 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d10c      	bne.n	8001ce6 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	3302      	adds	r3, #2
 8001ce2:	60bb      	str	r3, [r7, #8]
 8001ce4:	e030      	b.n	8001d48 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	e024      	b.n	8001d48 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	2200      	movs	r2, #0
 8001d06:	2120      	movs	r1, #32
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	f000 f94b 	bl	8001fa4 <UART_WaitOnFlagUntilTimeout>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e023      	b.n	8001d60 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d108      	bne.n	8001d32 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6859      	ldr	r1, [r3, #4]
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	1c5a      	adds	r2, r3, #1
 8001d2a:	60ba      	str	r2, [r7, #8]
 8001d2c:	b2ca      	uxtb	r2, r1
 8001d2e:	701a      	strb	r2, [r3, #0]
 8001d30:	e00a      	b.n	8001d48 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	1c59      	adds	r1, r3, #1
 8001d3e:	60b9      	str	r1, [r7, #8]
 8001d40:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d19d      	bne.n	8001c8e <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2220      	movs	r2, #32
 8001d56:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	e000      	b.n	8001d60 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8001d5e:	2302      	movs	r3, #2
  }
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b088      	sub	sp, #32
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10d      	bne.n	8001dba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	f003 0320 	and.w	r3, r3, #32
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d008      	beq.n	8001dba <HAL_UART_IRQHandler+0x52>
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	f003 0320 	and.w	r3, r3, #32
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f9e0 	bl	8002178 <UART_Receive_IT>
      return;
 8001db8:	e0d1      	b.n	8001f5e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f000 80b0 	beq.w	8001f22 <HAL_UART_IRQHandler+0x1ba>
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d105      	bne.n	8001dd8 <HAL_UART_IRQHandler+0x70>
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f000 80a5 	beq.w	8001f22 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00a      	beq.n	8001df8 <HAL_UART_IRQHandler+0x90>
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d005      	beq.n	8001df8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df0:	f043 0201 	orr.w	r2, r3, #1
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f003 0304 	and.w	r3, r3, #4
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00a      	beq.n	8001e18 <HAL_UART_IRQHandler+0xb0>
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d005      	beq.n	8001e18 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e10:	f043 0202 	orr.w	r2, r3, #2
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00a      	beq.n	8001e38 <HAL_UART_IRQHandler+0xd0>
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d005      	beq.n	8001e38 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e30:	f043 0204 	orr.w	r2, r3, #4
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00f      	beq.n	8001e62 <HAL_UART_IRQHandler+0xfa>
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	f003 0320 	and.w	r3, r3, #32
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d104      	bne.n	8001e56 <HAL_UART_IRQHandler+0xee>
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d005      	beq.n	8001e62 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e5a:	f043 0208 	orr.w	r2, r3, #8
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d078      	beq.n	8001f5c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	f003 0320 	and.w	r3, r3, #32
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d007      	beq.n	8001e84 <HAL_UART_IRQHandler+0x11c>
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	f003 0320 	and.w	r3, r3, #32
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d002      	beq.n	8001e84 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f97a 	bl	8002178 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e8e:	2b40      	cmp	r3, #64	; 0x40
 8001e90:	bf0c      	ite	eq
 8001e92:	2301      	moveq	r3, #1
 8001e94:	2300      	movne	r3, #0
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d102      	bne.n	8001eac <HAL_UART_IRQHandler+0x144>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d031      	beq.n	8001f10 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f8c3 	bl	8002038 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ebc:	2b40      	cmp	r3, #64	; 0x40
 8001ebe:	d123      	bne.n	8001f08 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	695a      	ldr	r2, [r3, #20]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ece:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d013      	beq.n	8001f00 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001edc:	4a21      	ldr	r2, [pc, #132]	; (8001f64 <HAL_UART_IRQHandler+0x1fc>)
 8001ede:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7fe ff6e 	bl	8000dc6 <HAL_DMA_Abort_IT>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d016      	beq.n	8001f1e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001efa:	4610      	mov	r0, r2
 8001efc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001efe:	e00e      	b.n	8001f1e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f845 	bl	8001f90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f06:	e00a      	b.n	8001f1e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 f841 	bl	8001f90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f0e:	e006      	b.n	8001f1e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 f83d 	bl	8001f90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001f1c:	e01e      	b.n	8001f5c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f1e:	bf00      	nop
    return;
 8001f20:	e01c      	b.n	8001f5c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d008      	beq.n	8001f3e <HAL_UART_IRQHandler+0x1d6>
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f8b0 	bl	800209c <UART_Transmit_IT>
    return;
 8001f3c:	e00f      	b.n	8001f5e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d00a      	beq.n	8001f5e <HAL_UART_IRQHandler+0x1f6>
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d005      	beq.n	8001f5e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f8f8 	bl	8002148 <UART_EndTransmit_IT>
    return;
 8001f58:	bf00      	nop
 8001f5a:	e000      	b.n	8001f5e <HAL_UART_IRQHandler+0x1f6>
    return;
 8001f5c:	bf00      	nop
  }
}
 8001f5e:	3720      	adds	r7, #32
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	08002075 	.word	0x08002075

08001f68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	603b      	str	r3, [r7, #0]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fb4:	e02c      	b.n	8002010 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fbc:	d028      	beq.n	8002010 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d007      	beq.n	8001fd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8001fc4:	f7fe fde2 	bl	8000b8c <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d21d      	bcs.n	8002010 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001fe2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	695a      	ldr	r2, [r3, #20]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0201 	bic.w	r2, r2, #1
 8001ff2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2220      	movs	r2, #32
 8002000:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e00f      	b.n	8002030 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	4013      	ands	r3, r2
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	429a      	cmp	r2, r3
 800201e:	bf0c      	ite	eq
 8002020:	2301      	moveq	r3, #1
 8002022:	2300      	movne	r3, #0
 8002024:	b2db      	uxtb	r3, r3
 8002026:	461a      	mov	r2, r3
 8002028:	79fb      	ldrb	r3, [r7, #7]
 800202a:	429a      	cmp	r2, r3
 800202c:	d0c3      	beq.n	8001fb6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800204e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	695a      	ldr	r2, [r3, #20]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 0201 	bic.w	r2, r2, #1
 800205e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2220      	movs	r2, #32
 8002064:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002080:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f7ff ff7e 	bl	8001f90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002094:	bf00      	nop
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b21      	cmp	r3, #33	; 0x21
 80020ae:	d144      	bne.n	800213a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020b8:	d11a      	bne.n	80020f0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	881b      	ldrh	r3, [r3, #0]
 80020c4:	461a      	mov	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020ce:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d105      	bne.n	80020e4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	1c9a      	adds	r2, r3, #2
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	621a      	str	r2, [r3, #32]
 80020e2:	e00e      	b.n	8002102 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	1c5a      	adds	r2, r3, #1
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	621a      	str	r2, [r3, #32]
 80020ee:	e008      	b.n	8002102 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	1c59      	adds	r1, r3, #1
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6211      	str	r1, [r2, #32]
 80020fa:	781a      	ldrb	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002106:	b29b      	uxth	r3, r3
 8002108:	3b01      	subs	r3, #1
 800210a:	b29b      	uxth	r3, r3
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	4619      	mov	r1, r3
 8002110:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10f      	bne.n	8002136 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68da      	ldr	r2, [r3, #12]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002124:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68da      	ldr	r2, [r3, #12]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002134:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002136:	2300      	movs	r3, #0
 8002138:	e000      	b.n	800213c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800213a:	2302      	movs	r3, #2
  }
}
 800213c:	4618      	mov	r0, r3
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68da      	ldr	r2, [r3, #12]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800215e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2220      	movs	r2, #32
 8002164:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7ff fefd 	bl	8001f68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b22      	cmp	r3, #34	; 0x22
 800218a:	d171      	bne.n	8002270 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002194:	d123      	bne.n	80021de <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d10e      	bne.n	80021c2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ba:	1c9a      	adds	r2, r3, #2
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	629a      	str	r2, [r3, #40]	; 0x28
 80021c0:	e029      	b.n	8002216 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d6:	1c5a      	adds	r2, r3, #1
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	629a      	str	r2, [r3, #40]	; 0x28
 80021dc:	e01b      	b.n	8002216 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10a      	bne.n	80021fc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6858      	ldr	r0, [r3, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f0:	1c59      	adds	r1, r3, #1
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	6291      	str	r1, [r2, #40]	; 0x28
 80021f6:	b2c2      	uxtb	r2, r0
 80021f8:	701a      	strb	r2, [r3, #0]
 80021fa:	e00c      	b.n	8002216 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	b2da      	uxtb	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002208:	1c58      	adds	r0, r3, #1
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	6288      	str	r0, [r1, #40]	; 0x28
 800220e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800221a:	b29b      	uxth	r3, r3
 800221c:	3b01      	subs	r3, #1
 800221e:	b29b      	uxth	r3, r3
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	4619      	mov	r1, r3
 8002224:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002226:	2b00      	cmp	r3, #0
 8002228:	d120      	bne.n	800226c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0220 	bic.w	r2, r2, #32
 8002238:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68da      	ldr	r2, [r3, #12]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002248:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	695a      	ldr	r2, [r3, #20]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 0201 	bic.w	r2, r2, #1
 8002258:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2220      	movs	r2, #32
 800225e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7ff fe8a 	bl	8001f7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002268:	2300      	movs	r3, #0
 800226a:	e002      	b.n	8002272 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800226c:	2300      	movs	r3, #0
 800226e:	e000      	b.n	8002272 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002270:	2302      	movs	r3, #2
  }
}
 8002272:	4618      	mov	r0, r3
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
	...

0800227c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800227c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002280:	b085      	sub	sp, #20
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68da      	ldr	r2, [r3, #12]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	430a      	orrs	r2, r1
 800229a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	431a      	orrs	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69db      	ldr	r3, [r3, #28]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80022be:	f023 030c 	bic.w	r3, r3, #12
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	6812      	ldr	r2, [r2, #0]
 80022c6:	68f9      	ldr	r1, [r7, #12]
 80022c8:	430b      	orrs	r3, r1
 80022ca:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699a      	ldr	r2, [r3, #24]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022ea:	f040 818b 	bne.w	8002604 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4ac1      	ldr	r2, [pc, #772]	; (80025f8 <UART_SetConfig+0x37c>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d005      	beq.n	8002304 <UART_SetConfig+0x88>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4abf      	ldr	r2, [pc, #764]	; (80025fc <UART_SetConfig+0x380>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	f040 80bd 	bne.w	800247e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002304:	f7ff fb2c 	bl	8001960 <HAL_RCC_GetPCLK2Freq>
 8002308:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	461d      	mov	r5, r3
 800230e:	f04f 0600 	mov.w	r6, #0
 8002312:	46a8      	mov	r8, r5
 8002314:	46b1      	mov	r9, r6
 8002316:	eb18 0308 	adds.w	r3, r8, r8
 800231a:	eb49 0409 	adc.w	r4, r9, r9
 800231e:	4698      	mov	r8, r3
 8002320:	46a1      	mov	r9, r4
 8002322:	eb18 0805 	adds.w	r8, r8, r5
 8002326:	eb49 0906 	adc.w	r9, r9, r6
 800232a:	f04f 0100 	mov.w	r1, #0
 800232e:	f04f 0200 	mov.w	r2, #0
 8002332:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002336:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800233a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800233e:	4688      	mov	r8, r1
 8002340:	4691      	mov	r9, r2
 8002342:	eb18 0005 	adds.w	r0, r8, r5
 8002346:	eb49 0106 	adc.w	r1, r9, r6
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	461d      	mov	r5, r3
 8002350:	f04f 0600 	mov.w	r6, #0
 8002354:	196b      	adds	r3, r5, r5
 8002356:	eb46 0406 	adc.w	r4, r6, r6
 800235a:	461a      	mov	r2, r3
 800235c:	4623      	mov	r3, r4
 800235e:	f7fd ff3f 	bl	80001e0 <__aeabi_uldivmod>
 8002362:	4603      	mov	r3, r0
 8002364:	460c      	mov	r4, r1
 8002366:	461a      	mov	r2, r3
 8002368:	4ba5      	ldr	r3, [pc, #660]	; (8002600 <UART_SetConfig+0x384>)
 800236a:	fba3 2302 	umull	r2, r3, r3, r2
 800236e:	095b      	lsrs	r3, r3, #5
 8002370:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	461d      	mov	r5, r3
 8002378:	f04f 0600 	mov.w	r6, #0
 800237c:	46a9      	mov	r9, r5
 800237e:	46b2      	mov	sl, r6
 8002380:	eb19 0309 	adds.w	r3, r9, r9
 8002384:	eb4a 040a 	adc.w	r4, sl, sl
 8002388:	4699      	mov	r9, r3
 800238a:	46a2      	mov	sl, r4
 800238c:	eb19 0905 	adds.w	r9, r9, r5
 8002390:	eb4a 0a06 	adc.w	sl, sl, r6
 8002394:	f04f 0100 	mov.w	r1, #0
 8002398:	f04f 0200 	mov.w	r2, #0
 800239c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80023a8:	4689      	mov	r9, r1
 80023aa:	4692      	mov	sl, r2
 80023ac:	eb19 0005 	adds.w	r0, r9, r5
 80023b0:	eb4a 0106 	adc.w	r1, sl, r6
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	461d      	mov	r5, r3
 80023ba:	f04f 0600 	mov.w	r6, #0
 80023be:	196b      	adds	r3, r5, r5
 80023c0:	eb46 0406 	adc.w	r4, r6, r6
 80023c4:	461a      	mov	r2, r3
 80023c6:	4623      	mov	r3, r4
 80023c8:	f7fd ff0a 	bl	80001e0 <__aeabi_uldivmod>
 80023cc:	4603      	mov	r3, r0
 80023ce:	460c      	mov	r4, r1
 80023d0:	461a      	mov	r2, r3
 80023d2:	4b8b      	ldr	r3, [pc, #556]	; (8002600 <UART_SetConfig+0x384>)
 80023d4:	fba3 1302 	umull	r1, r3, r3, r2
 80023d8:	095b      	lsrs	r3, r3, #5
 80023da:	2164      	movs	r1, #100	; 0x64
 80023dc:	fb01 f303 	mul.w	r3, r1, r3
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	3332      	adds	r3, #50	; 0x32
 80023e6:	4a86      	ldr	r2, [pc, #536]	; (8002600 <UART_SetConfig+0x384>)
 80023e8:	fba2 2303 	umull	r2, r3, r2, r3
 80023ec:	095b      	lsrs	r3, r3, #5
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80023f4:	4498      	add	r8, r3
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	461d      	mov	r5, r3
 80023fa:	f04f 0600 	mov.w	r6, #0
 80023fe:	46a9      	mov	r9, r5
 8002400:	46b2      	mov	sl, r6
 8002402:	eb19 0309 	adds.w	r3, r9, r9
 8002406:	eb4a 040a 	adc.w	r4, sl, sl
 800240a:	4699      	mov	r9, r3
 800240c:	46a2      	mov	sl, r4
 800240e:	eb19 0905 	adds.w	r9, r9, r5
 8002412:	eb4a 0a06 	adc.w	sl, sl, r6
 8002416:	f04f 0100 	mov.w	r1, #0
 800241a:	f04f 0200 	mov.w	r2, #0
 800241e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002422:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002426:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800242a:	4689      	mov	r9, r1
 800242c:	4692      	mov	sl, r2
 800242e:	eb19 0005 	adds.w	r0, r9, r5
 8002432:	eb4a 0106 	adc.w	r1, sl, r6
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	461d      	mov	r5, r3
 800243c:	f04f 0600 	mov.w	r6, #0
 8002440:	196b      	adds	r3, r5, r5
 8002442:	eb46 0406 	adc.w	r4, r6, r6
 8002446:	461a      	mov	r2, r3
 8002448:	4623      	mov	r3, r4
 800244a:	f7fd fec9 	bl	80001e0 <__aeabi_uldivmod>
 800244e:	4603      	mov	r3, r0
 8002450:	460c      	mov	r4, r1
 8002452:	461a      	mov	r2, r3
 8002454:	4b6a      	ldr	r3, [pc, #424]	; (8002600 <UART_SetConfig+0x384>)
 8002456:	fba3 1302 	umull	r1, r3, r3, r2
 800245a:	095b      	lsrs	r3, r3, #5
 800245c:	2164      	movs	r1, #100	; 0x64
 800245e:	fb01 f303 	mul.w	r3, r1, r3
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	3332      	adds	r3, #50	; 0x32
 8002468:	4a65      	ldr	r2, [pc, #404]	; (8002600 <UART_SetConfig+0x384>)
 800246a:	fba2 2303 	umull	r2, r3, r2, r3
 800246e:	095b      	lsrs	r3, r3, #5
 8002470:	f003 0207 	and.w	r2, r3, #7
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4442      	add	r2, r8
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	e26f      	b.n	800295e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800247e:	f7ff fa5b 	bl	8001938 <HAL_RCC_GetPCLK1Freq>
 8002482:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	461d      	mov	r5, r3
 8002488:	f04f 0600 	mov.w	r6, #0
 800248c:	46a8      	mov	r8, r5
 800248e:	46b1      	mov	r9, r6
 8002490:	eb18 0308 	adds.w	r3, r8, r8
 8002494:	eb49 0409 	adc.w	r4, r9, r9
 8002498:	4698      	mov	r8, r3
 800249a:	46a1      	mov	r9, r4
 800249c:	eb18 0805 	adds.w	r8, r8, r5
 80024a0:	eb49 0906 	adc.w	r9, r9, r6
 80024a4:	f04f 0100 	mov.w	r1, #0
 80024a8:	f04f 0200 	mov.w	r2, #0
 80024ac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80024b0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80024b4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80024b8:	4688      	mov	r8, r1
 80024ba:	4691      	mov	r9, r2
 80024bc:	eb18 0005 	adds.w	r0, r8, r5
 80024c0:	eb49 0106 	adc.w	r1, r9, r6
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	461d      	mov	r5, r3
 80024ca:	f04f 0600 	mov.w	r6, #0
 80024ce:	196b      	adds	r3, r5, r5
 80024d0:	eb46 0406 	adc.w	r4, r6, r6
 80024d4:	461a      	mov	r2, r3
 80024d6:	4623      	mov	r3, r4
 80024d8:	f7fd fe82 	bl	80001e0 <__aeabi_uldivmod>
 80024dc:	4603      	mov	r3, r0
 80024de:	460c      	mov	r4, r1
 80024e0:	461a      	mov	r2, r3
 80024e2:	4b47      	ldr	r3, [pc, #284]	; (8002600 <UART_SetConfig+0x384>)
 80024e4:	fba3 2302 	umull	r2, r3, r3, r2
 80024e8:	095b      	lsrs	r3, r3, #5
 80024ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	461d      	mov	r5, r3
 80024f2:	f04f 0600 	mov.w	r6, #0
 80024f6:	46a9      	mov	r9, r5
 80024f8:	46b2      	mov	sl, r6
 80024fa:	eb19 0309 	adds.w	r3, r9, r9
 80024fe:	eb4a 040a 	adc.w	r4, sl, sl
 8002502:	4699      	mov	r9, r3
 8002504:	46a2      	mov	sl, r4
 8002506:	eb19 0905 	adds.w	r9, r9, r5
 800250a:	eb4a 0a06 	adc.w	sl, sl, r6
 800250e:	f04f 0100 	mov.w	r1, #0
 8002512:	f04f 0200 	mov.w	r2, #0
 8002516:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800251a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800251e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002522:	4689      	mov	r9, r1
 8002524:	4692      	mov	sl, r2
 8002526:	eb19 0005 	adds.w	r0, r9, r5
 800252a:	eb4a 0106 	adc.w	r1, sl, r6
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	461d      	mov	r5, r3
 8002534:	f04f 0600 	mov.w	r6, #0
 8002538:	196b      	adds	r3, r5, r5
 800253a:	eb46 0406 	adc.w	r4, r6, r6
 800253e:	461a      	mov	r2, r3
 8002540:	4623      	mov	r3, r4
 8002542:	f7fd fe4d 	bl	80001e0 <__aeabi_uldivmod>
 8002546:	4603      	mov	r3, r0
 8002548:	460c      	mov	r4, r1
 800254a:	461a      	mov	r2, r3
 800254c:	4b2c      	ldr	r3, [pc, #176]	; (8002600 <UART_SetConfig+0x384>)
 800254e:	fba3 1302 	umull	r1, r3, r3, r2
 8002552:	095b      	lsrs	r3, r3, #5
 8002554:	2164      	movs	r1, #100	; 0x64
 8002556:	fb01 f303 	mul.w	r3, r1, r3
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	3332      	adds	r3, #50	; 0x32
 8002560:	4a27      	ldr	r2, [pc, #156]	; (8002600 <UART_SetConfig+0x384>)
 8002562:	fba2 2303 	umull	r2, r3, r2, r3
 8002566:	095b      	lsrs	r3, r3, #5
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800256e:	4498      	add	r8, r3
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	461d      	mov	r5, r3
 8002574:	f04f 0600 	mov.w	r6, #0
 8002578:	46a9      	mov	r9, r5
 800257a:	46b2      	mov	sl, r6
 800257c:	eb19 0309 	adds.w	r3, r9, r9
 8002580:	eb4a 040a 	adc.w	r4, sl, sl
 8002584:	4699      	mov	r9, r3
 8002586:	46a2      	mov	sl, r4
 8002588:	eb19 0905 	adds.w	r9, r9, r5
 800258c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002590:	f04f 0100 	mov.w	r1, #0
 8002594:	f04f 0200 	mov.w	r2, #0
 8002598:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800259c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80025a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80025a4:	4689      	mov	r9, r1
 80025a6:	4692      	mov	sl, r2
 80025a8:	eb19 0005 	adds.w	r0, r9, r5
 80025ac:	eb4a 0106 	adc.w	r1, sl, r6
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	461d      	mov	r5, r3
 80025b6:	f04f 0600 	mov.w	r6, #0
 80025ba:	196b      	adds	r3, r5, r5
 80025bc:	eb46 0406 	adc.w	r4, r6, r6
 80025c0:	461a      	mov	r2, r3
 80025c2:	4623      	mov	r3, r4
 80025c4:	f7fd fe0c 	bl	80001e0 <__aeabi_uldivmod>
 80025c8:	4603      	mov	r3, r0
 80025ca:	460c      	mov	r4, r1
 80025cc:	461a      	mov	r2, r3
 80025ce:	4b0c      	ldr	r3, [pc, #48]	; (8002600 <UART_SetConfig+0x384>)
 80025d0:	fba3 1302 	umull	r1, r3, r3, r2
 80025d4:	095b      	lsrs	r3, r3, #5
 80025d6:	2164      	movs	r1, #100	; 0x64
 80025d8:	fb01 f303 	mul.w	r3, r1, r3
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	3332      	adds	r3, #50	; 0x32
 80025e2:	4a07      	ldr	r2, [pc, #28]	; (8002600 <UART_SetConfig+0x384>)
 80025e4:	fba2 2303 	umull	r2, r3, r2, r3
 80025e8:	095b      	lsrs	r3, r3, #5
 80025ea:	f003 0207 	and.w	r2, r3, #7
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4442      	add	r2, r8
 80025f4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80025f6:	e1b2      	b.n	800295e <UART_SetConfig+0x6e2>
 80025f8:	40011000 	.word	0x40011000
 80025fc:	40011400 	.word	0x40011400
 8002600:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4ad7      	ldr	r2, [pc, #860]	; (8002968 <UART_SetConfig+0x6ec>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d005      	beq.n	800261a <UART_SetConfig+0x39e>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4ad6      	ldr	r2, [pc, #856]	; (800296c <UART_SetConfig+0x6f0>)
 8002614:	4293      	cmp	r3, r2
 8002616:	f040 80d1 	bne.w	80027bc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800261a:	f7ff f9a1 	bl	8001960 <HAL_RCC_GetPCLK2Freq>
 800261e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	469a      	mov	sl, r3
 8002624:	f04f 0b00 	mov.w	fp, #0
 8002628:	46d0      	mov	r8, sl
 800262a:	46d9      	mov	r9, fp
 800262c:	eb18 0308 	adds.w	r3, r8, r8
 8002630:	eb49 0409 	adc.w	r4, r9, r9
 8002634:	4698      	mov	r8, r3
 8002636:	46a1      	mov	r9, r4
 8002638:	eb18 080a 	adds.w	r8, r8, sl
 800263c:	eb49 090b 	adc.w	r9, r9, fp
 8002640:	f04f 0100 	mov.w	r1, #0
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800264c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002650:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002654:	4688      	mov	r8, r1
 8002656:	4691      	mov	r9, r2
 8002658:	eb1a 0508 	adds.w	r5, sl, r8
 800265c:	eb4b 0609 	adc.w	r6, fp, r9
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	4619      	mov	r1, r3
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	f04f 0300 	mov.w	r3, #0
 800266e:	f04f 0400 	mov.w	r4, #0
 8002672:	0094      	lsls	r4, r2, #2
 8002674:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002678:	008b      	lsls	r3, r1, #2
 800267a:	461a      	mov	r2, r3
 800267c:	4623      	mov	r3, r4
 800267e:	4628      	mov	r0, r5
 8002680:	4631      	mov	r1, r6
 8002682:	f7fd fdad 	bl	80001e0 <__aeabi_uldivmod>
 8002686:	4603      	mov	r3, r0
 8002688:	460c      	mov	r4, r1
 800268a:	461a      	mov	r2, r3
 800268c:	4bb8      	ldr	r3, [pc, #736]	; (8002970 <UART_SetConfig+0x6f4>)
 800268e:	fba3 2302 	umull	r2, r3, r3, r2
 8002692:	095b      	lsrs	r3, r3, #5
 8002694:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	469b      	mov	fp, r3
 800269c:	f04f 0c00 	mov.w	ip, #0
 80026a0:	46d9      	mov	r9, fp
 80026a2:	46e2      	mov	sl, ip
 80026a4:	eb19 0309 	adds.w	r3, r9, r9
 80026a8:	eb4a 040a 	adc.w	r4, sl, sl
 80026ac:	4699      	mov	r9, r3
 80026ae:	46a2      	mov	sl, r4
 80026b0:	eb19 090b 	adds.w	r9, r9, fp
 80026b4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80026b8:	f04f 0100 	mov.w	r1, #0
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80026c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80026cc:	4689      	mov	r9, r1
 80026ce:	4692      	mov	sl, r2
 80026d0:	eb1b 0509 	adds.w	r5, fp, r9
 80026d4:	eb4c 060a 	adc.w	r6, ip, sl
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	4619      	mov	r1, r3
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	f04f 0400 	mov.w	r4, #0
 80026ea:	0094      	lsls	r4, r2, #2
 80026ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80026f0:	008b      	lsls	r3, r1, #2
 80026f2:	461a      	mov	r2, r3
 80026f4:	4623      	mov	r3, r4
 80026f6:	4628      	mov	r0, r5
 80026f8:	4631      	mov	r1, r6
 80026fa:	f7fd fd71 	bl	80001e0 <__aeabi_uldivmod>
 80026fe:	4603      	mov	r3, r0
 8002700:	460c      	mov	r4, r1
 8002702:	461a      	mov	r2, r3
 8002704:	4b9a      	ldr	r3, [pc, #616]	; (8002970 <UART_SetConfig+0x6f4>)
 8002706:	fba3 1302 	umull	r1, r3, r3, r2
 800270a:	095b      	lsrs	r3, r3, #5
 800270c:	2164      	movs	r1, #100	; 0x64
 800270e:	fb01 f303 	mul.w	r3, r1, r3
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	011b      	lsls	r3, r3, #4
 8002716:	3332      	adds	r3, #50	; 0x32
 8002718:	4a95      	ldr	r2, [pc, #596]	; (8002970 <UART_SetConfig+0x6f4>)
 800271a:	fba2 2303 	umull	r2, r3, r2, r3
 800271e:	095b      	lsrs	r3, r3, #5
 8002720:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002724:	4498      	add	r8, r3
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	469b      	mov	fp, r3
 800272a:	f04f 0c00 	mov.w	ip, #0
 800272e:	46d9      	mov	r9, fp
 8002730:	46e2      	mov	sl, ip
 8002732:	eb19 0309 	adds.w	r3, r9, r9
 8002736:	eb4a 040a 	adc.w	r4, sl, sl
 800273a:	4699      	mov	r9, r3
 800273c:	46a2      	mov	sl, r4
 800273e:	eb19 090b 	adds.w	r9, r9, fp
 8002742:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002746:	f04f 0100 	mov.w	r1, #0
 800274a:	f04f 0200 	mov.w	r2, #0
 800274e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002752:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002756:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800275a:	4689      	mov	r9, r1
 800275c:	4692      	mov	sl, r2
 800275e:	eb1b 0509 	adds.w	r5, fp, r9
 8002762:	eb4c 060a 	adc.w	r6, ip, sl
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	4619      	mov	r1, r3
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	f04f 0300 	mov.w	r3, #0
 8002774:	f04f 0400 	mov.w	r4, #0
 8002778:	0094      	lsls	r4, r2, #2
 800277a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800277e:	008b      	lsls	r3, r1, #2
 8002780:	461a      	mov	r2, r3
 8002782:	4623      	mov	r3, r4
 8002784:	4628      	mov	r0, r5
 8002786:	4631      	mov	r1, r6
 8002788:	f7fd fd2a 	bl	80001e0 <__aeabi_uldivmod>
 800278c:	4603      	mov	r3, r0
 800278e:	460c      	mov	r4, r1
 8002790:	461a      	mov	r2, r3
 8002792:	4b77      	ldr	r3, [pc, #476]	; (8002970 <UART_SetConfig+0x6f4>)
 8002794:	fba3 1302 	umull	r1, r3, r3, r2
 8002798:	095b      	lsrs	r3, r3, #5
 800279a:	2164      	movs	r1, #100	; 0x64
 800279c:	fb01 f303 	mul.w	r3, r1, r3
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	3332      	adds	r3, #50	; 0x32
 80027a6:	4a72      	ldr	r2, [pc, #456]	; (8002970 <UART_SetConfig+0x6f4>)
 80027a8:	fba2 2303 	umull	r2, r3, r2, r3
 80027ac:	095b      	lsrs	r3, r3, #5
 80027ae:	f003 020f 	and.w	r2, r3, #15
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4442      	add	r2, r8
 80027b8:	609a      	str	r2, [r3, #8]
 80027ba:	e0d0      	b.n	800295e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80027bc:	f7ff f8bc 	bl	8001938 <HAL_RCC_GetPCLK1Freq>
 80027c0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	469a      	mov	sl, r3
 80027c6:	f04f 0b00 	mov.w	fp, #0
 80027ca:	46d0      	mov	r8, sl
 80027cc:	46d9      	mov	r9, fp
 80027ce:	eb18 0308 	adds.w	r3, r8, r8
 80027d2:	eb49 0409 	adc.w	r4, r9, r9
 80027d6:	4698      	mov	r8, r3
 80027d8:	46a1      	mov	r9, r4
 80027da:	eb18 080a 	adds.w	r8, r8, sl
 80027de:	eb49 090b 	adc.w	r9, r9, fp
 80027e2:	f04f 0100 	mov.w	r1, #0
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80027ee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80027f2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80027f6:	4688      	mov	r8, r1
 80027f8:	4691      	mov	r9, r2
 80027fa:	eb1a 0508 	adds.w	r5, sl, r8
 80027fe:	eb4b 0609 	adc.w	r6, fp, r9
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	4619      	mov	r1, r3
 8002808:	f04f 0200 	mov.w	r2, #0
 800280c:	f04f 0300 	mov.w	r3, #0
 8002810:	f04f 0400 	mov.w	r4, #0
 8002814:	0094      	lsls	r4, r2, #2
 8002816:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800281a:	008b      	lsls	r3, r1, #2
 800281c:	461a      	mov	r2, r3
 800281e:	4623      	mov	r3, r4
 8002820:	4628      	mov	r0, r5
 8002822:	4631      	mov	r1, r6
 8002824:	f7fd fcdc 	bl	80001e0 <__aeabi_uldivmod>
 8002828:	4603      	mov	r3, r0
 800282a:	460c      	mov	r4, r1
 800282c:	461a      	mov	r2, r3
 800282e:	4b50      	ldr	r3, [pc, #320]	; (8002970 <UART_SetConfig+0x6f4>)
 8002830:	fba3 2302 	umull	r2, r3, r3, r2
 8002834:	095b      	lsrs	r3, r3, #5
 8002836:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	469b      	mov	fp, r3
 800283e:	f04f 0c00 	mov.w	ip, #0
 8002842:	46d9      	mov	r9, fp
 8002844:	46e2      	mov	sl, ip
 8002846:	eb19 0309 	adds.w	r3, r9, r9
 800284a:	eb4a 040a 	adc.w	r4, sl, sl
 800284e:	4699      	mov	r9, r3
 8002850:	46a2      	mov	sl, r4
 8002852:	eb19 090b 	adds.w	r9, r9, fp
 8002856:	eb4a 0a0c 	adc.w	sl, sl, ip
 800285a:	f04f 0100 	mov.w	r1, #0
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002866:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800286a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800286e:	4689      	mov	r9, r1
 8002870:	4692      	mov	sl, r2
 8002872:	eb1b 0509 	adds.w	r5, fp, r9
 8002876:	eb4c 060a 	adc.w	r6, ip, sl
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	4619      	mov	r1, r3
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	f04f 0300 	mov.w	r3, #0
 8002888:	f04f 0400 	mov.w	r4, #0
 800288c:	0094      	lsls	r4, r2, #2
 800288e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002892:	008b      	lsls	r3, r1, #2
 8002894:	461a      	mov	r2, r3
 8002896:	4623      	mov	r3, r4
 8002898:	4628      	mov	r0, r5
 800289a:	4631      	mov	r1, r6
 800289c:	f7fd fca0 	bl	80001e0 <__aeabi_uldivmod>
 80028a0:	4603      	mov	r3, r0
 80028a2:	460c      	mov	r4, r1
 80028a4:	461a      	mov	r2, r3
 80028a6:	4b32      	ldr	r3, [pc, #200]	; (8002970 <UART_SetConfig+0x6f4>)
 80028a8:	fba3 1302 	umull	r1, r3, r3, r2
 80028ac:	095b      	lsrs	r3, r3, #5
 80028ae:	2164      	movs	r1, #100	; 0x64
 80028b0:	fb01 f303 	mul.w	r3, r1, r3
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	3332      	adds	r3, #50	; 0x32
 80028ba:	4a2d      	ldr	r2, [pc, #180]	; (8002970 <UART_SetConfig+0x6f4>)
 80028bc:	fba2 2303 	umull	r2, r3, r2, r3
 80028c0:	095b      	lsrs	r3, r3, #5
 80028c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028c6:	4498      	add	r8, r3
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	469b      	mov	fp, r3
 80028cc:	f04f 0c00 	mov.w	ip, #0
 80028d0:	46d9      	mov	r9, fp
 80028d2:	46e2      	mov	sl, ip
 80028d4:	eb19 0309 	adds.w	r3, r9, r9
 80028d8:	eb4a 040a 	adc.w	r4, sl, sl
 80028dc:	4699      	mov	r9, r3
 80028de:	46a2      	mov	sl, r4
 80028e0:	eb19 090b 	adds.w	r9, r9, fp
 80028e4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80028e8:	f04f 0100 	mov.w	r1, #0
 80028ec:	f04f 0200 	mov.w	r2, #0
 80028f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80028f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80028fc:	4689      	mov	r9, r1
 80028fe:	4692      	mov	sl, r2
 8002900:	eb1b 0509 	adds.w	r5, fp, r9
 8002904:	eb4c 060a 	adc.w	r6, ip, sl
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	4619      	mov	r1, r3
 800290e:	f04f 0200 	mov.w	r2, #0
 8002912:	f04f 0300 	mov.w	r3, #0
 8002916:	f04f 0400 	mov.w	r4, #0
 800291a:	0094      	lsls	r4, r2, #2
 800291c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002920:	008b      	lsls	r3, r1, #2
 8002922:	461a      	mov	r2, r3
 8002924:	4623      	mov	r3, r4
 8002926:	4628      	mov	r0, r5
 8002928:	4631      	mov	r1, r6
 800292a:	f7fd fc59 	bl	80001e0 <__aeabi_uldivmod>
 800292e:	4603      	mov	r3, r0
 8002930:	460c      	mov	r4, r1
 8002932:	461a      	mov	r2, r3
 8002934:	4b0e      	ldr	r3, [pc, #56]	; (8002970 <UART_SetConfig+0x6f4>)
 8002936:	fba3 1302 	umull	r1, r3, r3, r2
 800293a:	095b      	lsrs	r3, r3, #5
 800293c:	2164      	movs	r1, #100	; 0x64
 800293e:	fb01 f303 	mul.w	r3, r1, r3
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	011b      	lsls	r3, r3, #4
 8002946:	3332      	adds	r3, #50	; 0x32
 8002948:	4a09      	ldr	r2, [pc, #36]	; (8002970 <UART_SetConfig+0x6f4>)
 800294a:	fba2 2303 	umull	r2, r3, r2, r3
 800294e:	095b      	lsrs	r3, r3, #5
 8002950:	f003 020f 	and.w	r2, r3, #15
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4442      	add	r2, r8
 800295a:	609a      	str	r2, [r3, #8]
}
 800295c:	e7ff      	b.n	800295e <UART_SetConfig+0x6e2>
 800295e:	bf00      	nop
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002968:	40011000 	.word	0x40011000
 800296c:	40011400 	.word	0x40011400
 8002970:	51eb851f 	.word	0x51eb851f

08002974 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 800297c:	4a07      	ldr	r2, [pc, #28]	; (800299c <RetargetInit+0x28>)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8002982:	4b07      	ldr	r3, [pc, #28]	; (80029a0 <RetargetInit+0x2c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6898      	ldr	r0, [r3, #8]
 8002988:	2300      	movs	r3, #0
 800298a:	2202      	movs	r2, #2
 800298c:	2100      	movs	r1, #0
 800298e:	f001 fb11 	bl	8003fb4 <setvbuf>
}
 8002992:	bf00      	nop
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	20004370 	.word	0x20004370
 80029a0:	20000010 	.word	0x20000010

080029a4 <_write>:

  errno = EBADF;
  return 0;
}

int _write(int fd, char* ptr, int len) {
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d002      	beq.n	80029bc <_write+0x18>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d111      	bne.n	80029e0 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80029bc:	4b0e      	ldr	r3, [pc, #56]	; (80029f8 <_write+0x54>)
 80029be:	6818      	ldr	r0, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029c8:	68b9      	ldr	r1, [r7, #8]
 80029ca:	f7ff f88e 	bl	8001aea <HAL_UART_Transmit>
 80029ce:	4603      	mov	r3, r0
 80029d0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80029d2:	7dfb      	ldrb	r3, [r7, #23]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <_write+0x38>
      return len;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	e008      	b.n	80029ee <_write+0x4a>
    else
      return EIO;
 80029dc:	2305      	movs	r3, #5
 80029de:	e006      	b.n	80029ee <_write+0x4a>
  }
  errno = EBADF;
 80029e0:	f001 fab6 	bl	8003f50 <__errno>
 80029e4:	4602      	mov	r2, r0
 80029e6:	2309      	movs	r3, #9
 80029e8:	6013      	str	r3, [r2, #0]
  return -1;
 80029ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3718      	adds	r7, #24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	20004370 	.word	0x20004370

080029fc <_close>:

int _close(int fd) {
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	db04      	blt.n	8002a14 <_close+0x18>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	dc01      	bgt.n	8002a14 <_close+0x18>
    return 0;
 8002a10:	2300      	movs	r3, #0
 8002a12:	e006      	b.n	8002a22 <_close+0x26>

  errno = EBADF;
 8002a14:	f001 fa9c 	bl	8003f50 <__errno>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	2309      	movs	r3, #9
 8002a1c:	6013      	str	r3, [r2, #0]
  return -1;
 8002a1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b084      	sub	sp, #16
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	60f8      	str	r0, [r7, #12]
 8002a32:	60b9      	str	r1, [r7, #8]
 8002a34:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8002a36:	f001 fa8b 	bl	8003f50 <__errno>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	2309      	movs	r3, #9
 8002a3e:	6013      	str	r3, [r2, #0]
  return -1;
 8002a40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <_read>:

int _read(int fd, char* ptr, int len) {
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d110      	bne.n	8002a80 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8002a5e:	4b0e      	ldr	r3, [pc, #56]	; (8002a98 <_read+0x4c>)
 8002a60:	6818      	ldr	r0, [r3, #0]
 8002a62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a66:	2201      	movs	r2, #1
 8002a68:	68b9      	ldr	r1, [r7, #8]
 8002a6a:	f7ff f8d7 	bl	8001c1c <HAL_UART_Receive>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002a72:	7dfb      	ldrb	r3, [r7, #23]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <_read+0x30>
      return 1;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e008      	b.n	8002a8e <_read+0x42>
    else
      return EIO;
 8002a7c:	2305      	movs	r3, #5
 8002a7e:	e006      	b.n	8002a8e <_read+0x42>
  }
  errno = EBADF;
 8002a80:	f001 fa66 	bl	8003f50 <__errno>
 8002a84:	4602      	mov	r2, r0
 8002a86:	2309      	movs	r3, #9
 8002a88:	6013      	str	r3, [r2, #0]
  return -1;
 8002a8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20004370 	.word	0x20004370

08002a9c <_fstat>:

int _fstat(int fd, struct stat* st) {
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	db08      	blt.n	8002abe <_fstat+0x22>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	dc05      	bgt.n	8002abe <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ab8:	605a      	str	r2, [r3, #4]
    return 0;
 8002aba:	2300      	movs	r3, #0
 8002abc:	e005      	b.n	8002aca <_fstat+0x2e>
  }

  errno = EBADF;
 8002abe:	f001 fa47 	bl	8003f50 <__errno>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	2309      	movs	r3, #9
 8002ac6:	6013      	str	r3, [r2, #0]
  return 0;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b085      	sub	sp, #20
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	4603      	mov	r3, r0
 8002ada:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002adc:	2300      	movs	r3, #0
 8002ade:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002ae0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ae4:	2b84      	cmp	r3, #132	; 0x84
 8002ae6:	d005      	beq.n	8002af4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002ae8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4413      	add	r3, r2
 8002af0:	3303      	adds	r3, #3
 8002af2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002af4:	68fb      	ldr	r3, [r7, #12]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002b06:	f000 fadb 	bl	80030c0 <vTaskStartScheduler>
  
  return osOK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b12:	b089      	sub	sp, #36	; 0x24
 8002b14:	af04      	add	r7, sp, #16
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d020      	beq.n	8002b64 <osThreadCreate+0x54>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d01c      	beq.n	8002b64 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685c      	ldr	r4, [r3, #4]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681d      	ldr	r5, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691e      	ldr	r6, [r3, #16]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff ffc8 	bl	8002ad2 <makeFreeRtosPriority>
 8002b42:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b4c:	9202      	str	r2, [sp, #8]
 8002b4e:	9301      	str	r3, [sp, #4]
 8002b50:	9100      	str	r1, [sp, #0]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	4632      	mov	r2, r6
 8002b56:	4629      	mov	r1, r5
 8002b58:	4620      	mov	r0, r4
 8002b5a:	f000 f8ed 	bl	8002d38 <xTaskCreateStatic>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	e01c      	b.n	8002b9e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685c      	ldr	r4, [r3, #4]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b70:	b29e      	uxth	r6, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff ffaa 	bl	8002ad2 <makeFreeRtosPriority>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	f107 030c 	add.w	r3, r7, #12
 8002b84:	9301      	str	r3, [sp, #4]
 8002b86:	9200      	str	r2, [sp, #0]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	4632      	mov	r2, r6
 8002b8c:	4629      	mov	r1, r5
 8002b8e:	4620      	mov	r0, r4
 8002b90:	f000 f92c 	bl	8002dec <xTaskCreate>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d001      	beq.n	8002b9e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	e000      	b.n	8002ba0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3714      	adds	r7, #20
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ba8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <osDelay+0x16>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	e000      	b.n	8002bc0 <osDelay+0x18>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f000 fa49 	bl	8003058 <vTaskDelay>
  
  return osOK;
 8002bc6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f103 0208 	add.w	r2, r3, #8
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002be8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f103 0208 	add.w	r2, r3, #8
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f103 0208 	add.w	r2, r3, #8
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b085      	sub	sp, #20
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
 8002c32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	1c5a      	adds	r2, r3, #1
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	601a      	str	r2, [r3, #0]
}
 8002c66:	bf00      	nop
 8002c68:	3714      	adds	r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c72:	b480      	push	{r7}
 8002c74:	b085      	sub	sp, #20
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
 8002c7a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c88:	d103      	bne.n	8002c92 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	e00c      	b.n	8002cac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	3308      	adds	r3, #8
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	e002      	b.n	8002ca0 <vListInsert+0x2e>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d2f6      	bcs.n	8002c9a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	1c5a      	adds	r2, r3, #1
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	601a      	str	r2, [r3, #0]
}
 8002cd8:	bf00      	nop
 8002cda:	3714      	adds	r7, #20
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6892      	ldr	r2, [r2, #8]
 8002cfa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6852      	ldr	r2, [r2, #4]
 8002d04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d103      	bne.n	8002d18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	1e5a      	subs	r2, r3, #1
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3714      	adds	r7, #20
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08e      	sub	sp, #56	; 0x38
 8002d3c:	af04      	add	r7, sp, #16
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
 8002d44:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d109      	bne.n	8002d60 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d50:	f383 8811 	msr	BASEPRI, r3
 8002d54:	f3bf 8f6f 	isb	sy
 8002d58:	f3bf 8f4f 	dsb	sy
 8002d5c:	623b      	str	r3, [r7, #32]
 8002d5e:	e7fe      	b.n	8002d5e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d109      	bne.n	8002d7a <xTaskCreateStatic+0x42>
 8002d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6a:	f383 8811 	msr	BASEPRI, r3
 8002d6e:	f3bf 8f6f 	isb	sy
 8002d72:	f3bf 8f4f 	dsb	sy
 8002d76:	61fb      	str	r3, [r7, #28]
 8002d78:	e7fe      	b.n	8002d78 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002d7a:	2354      	movs	r3, #84	; 0x54
 8002d7c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	2b54      	cmp	r3, #84	; 0x54
 8002d82:	d009      	beq.n	8002d98 <xTaskCreateStatic+0x60>
 8002d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d88:	f383 8811 	msr	BASEPRI, r3
 8002d8c:	f3bf 8f6f 	isb	sy
 8002d90:	f3bf 8f4f 	dsb	sy
 8002d94:	61bb      	str	r3, [r7, #24]
 8002d96:	e7fe      	b.n	8002d96 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002d98:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d01e      	beq.n	8002dde <xTaskCreateStatic+0xa6>
 8002da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d01b      	beq.n	8002dde <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dae:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	2202      	movs	r2, #2
 8002db4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002db8:	2300      	movs	r3, #0
 8002dba:	9303      	str	r3, [sp, #12]
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbe:	9302      	str	r3, [sp, #8]
 8002dc0:	f107 0314 	add.w	r3, r7, #20
 8002dc4:	9301      	str	r3, [sp, #4]
 8002dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc8:	9300      	str	r3, [sp, #0]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	68b9      	ldr	r1, [r7, #8]
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f000 f850 	bl	8002e76 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002dd6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002dd8:	f000 f8d4 	bl	8002f84 <prvAddNewTaskToReadyList>
 8002ddc:	e001      	b.n	8002de2 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8002dde:	2300      	movs	r3, #0
 8002de0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002de2:	697b      	ldr	r3, [r7, #20]
	}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3728      	adds	r7, #40	; 0x28
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b08c      	sub	sp, #48	; 0x30
 8002df0:	af04      	add	r7, sp, #16
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	603b      	str	r3, [r7, #0]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002dfc:	88fb      	ldrh	r3, [r7, #6]
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 fecf 	bl	8003ba4 <pvPortMalloc>
 8002e06:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00e      	beq.n	8002e2c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002e0e:	2054      	movs	r0, #84	; 0x54
 8002e10:	f000 fec8 	bl	8003ba4 <pvPortMalloc>
 8002e14:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d003      	beq.n	8002e24 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	631a      	str	r2, [r3, #48]	; 0x30
 8002e22:	e005      	b.n	8002e30 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002e24:	6978      	ldr	r0, [r7, #20]
 8002e26:	f000 ff7f 	bl	8003d28 <vPortFree>
 8002e2a:	e001      	b.n	8002e30 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d017      	beq.n	8002e66 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e3e:	88fa      	ldrh	r2, [r7, #6]
 8002e40:	2300      	movs	r3, #0
 8002e42:	9303      	str	r3, [sp, #12]
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	9302      	str	r3, [sp, #8]
 8002e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e4a:	9301      	str	r3, [sp, #4]
 8002e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	68b9      	ldr	r1, [r7, #8]
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f000 f80e 	bl	8002e76 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e5a:	69f8      	ldr	r0, [r7, #28]
 8002e5c:	f000 f892 	bl	8002f84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002e60:	2301      	movs	r3, #1
 8002e62:	61bb      	str	r3, [r7, #24]
 8002e64:	e002      	b.n	8002e6c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e6a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002e6c:	69bb      	ldr	r3, [r7, #24]
	}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3720      	adds	r7, #32
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b088      	sub	sp, #32
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	60f8      	str	r0, [r7, #12]
 8002e7e:	60b9      	str	r1, [r7, #8]
 8002e80:	607a      	str	r2, [r7, #4]
 8002e82:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	f023 0307 	bic.w	r3, r3, #7
 8002e9c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d009      	beq.n	8002ebc <prvInitialiseNewTask+0x46>
 8002ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eac:	f383 8811 	msr	BASEPRI, r3
 8002eb0:	f3bf 8f6f 	isb	sy
 8002eb4:	f3bf 8f4f 	dsb	sy
 8002eb8:	617b      	str	r3, [r7, #20]
 8002eba:	e7fe      	b.n	8002eba <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d01f      	beq.n	8002f02 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	61fb      	str	r3, [r7, #28]
 8002ec6:	e012      	b.n	8002eee <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	4413      	add	r3, r2
 8002ece:	7819      	ldrb	r1, [r3, #0]
 8002ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	3334      	adds	r3, #52	; 0x34
 8002ed8:	460a      	mov	r2, r1
 8002eda:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d006      	beq.n	8002ef6 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	3301      	adds	r3, #1
 8002eec:	61fb      	str	r3, [r7, #28]
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	2b0f      	cmp	r3, #15
 8002ef2:	d9e9      	bls.n	8002ec8 <prvInitialiseNewTask+0x52>
 8002ef4:	e000      	b.n	8002ef8 <prvInitialiseNewTask+0x82>
			{
				break;
 8002ef6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f00:	e003      	b.n	8002f0a <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0c:	2b06      	cmp	r3, #6
 8002f0e:	d901      	bls.n	8002f14 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f10:	2306      	movs	r3, #6
 8002f12:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f18:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f1e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f22:	2200      	movs	r2, #0
 8002f24:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f28:	3304      	adds	r3, #4
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff fe70 	bl	8002c10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f32:	3318      	adds	r3, #24
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff fe6b 	bl	8002c10 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f3e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f42:	f1c3 0207 	rsb	r2, r3, #7
 8002f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f48:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f4e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f52:	2200      	movs	r2, #0
 8002f54:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	68f9      	ldr	r1, [r7, #12]
 8002f62:	69b8      	ldr	r0, [r7, #24]
 8002f64:	f000 fc1c 	bl	80037a0 <pxPortInitialiseStack>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d002      	beq.n	8002f7a <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f7a:	bf00      	nop
 8002f7c:	3720      	adds	r7, #32
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
	...

08002f84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002f8c:	f000 fd2e 	bl	80039ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002f90:	4b2a      	ldr	r3, [pc, #168]	; (800303c <prvAddNewTaskToReadyList+0xb8>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	3301      	adds	r3, #1
 8002f96:	4a29      	ldr	r2, [pc, #164]	; (800303c <prvAddNewTaskToReadyList+0xb8>)
 8002f98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002f9a:	4b29      	ldr	r3, [pc, #164]	; (8003040 <prvAddNewTaskToReadyList+0xbc>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d109      	bne.n	8002fb6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002fa2:	4a27      	ldr	r2, [pc, #156]	; (8003040 <prvAddNewTaskToReadyList+0xbc>)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002fa8:	4b24      	ldr	r3, [pc, #144]	; (800303c <prvAddNewTaskToReadyList+0xb8>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d110      	bne.n	8002fd2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002fb0:	f000 fab8 	bl	8003524 <prvInitialiseTaskLists>
 8002fb4:	e00d      	b.n	8002fd2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002fb6:	4b23      	ldr	r3, [pc, #140]	; (8003044 <prvAddNewTaskToReadyList+0xc0>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d109      	bne.n	8002fd2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002fbe:	4b20      	ldr	r3, [pc, #128]	; (8003040 <prvAddNewTaskToReadyList+0xbc>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d802      	bhi.n	8002fd2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002fcc:	4a1c      	ldr	r2, [pc, #112]	; (8003040 <prvAddNewTaskToReadyList+0xbc>)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002fd2:	4b1d      	ldr	r3, [pc, #116]	; (8003048 <prvAddNewTaskToReadyList+0xc4>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	4a1b      	ldr	r2, [pc, #108]	; (8003048 <prvAddNewTaskToReadyList+0xc4>)
 8002fda:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	409a      	lsls	r2, r3
 8002fe4:	4b19      	ldr	r3, [pc, #100]	; (800304c <prvAddNewTaskToReadyList+0xc8>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	4a18      	ldr	r2, [pc, #96]	; (800304c <prvAddNewTaskToReadyList+0xc8>)
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4413      	add	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4a15      	ldr	r2, [pc, #84]	; (8003050 <prvAddNewTaskToReadyList+0xcc>)
 8002ffc:	441a      	add	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	3304      	adds	r3, #4
 8003002:	4619      	mov	r1, r3
 8003004:	4610      	mov	r0, r2
 8003006:	f7ff fe10 	bl	8002c2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800300a:	f000 fd1d 	bl	8003a48 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800300e:	4b0d      	ldr	r3, [pc, #52]	; (8003044 <prvAddNewTaskToReadyList+0xc0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00e      	beq.n	8003034 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003016:	4b0a      	ldr	r3, [pc, #40]	; (8003040 <prvAddNewTaskToReadyList+0xbc>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003020:	429a      	cmp	r2, r3
 8003022:	d207      	bcs.n	8003034 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003024:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <prvAddNewTaskToReadyList+0xd0>)
 8003026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	f3bf 8f4f 	dsb	sy
 8003030:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003034:	bf00      	nop
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	200003e8 	.word	0x200003e8
 8003040:	200002e8 	.word	0x200002e8
 8003044:	200003f4 	.word	0x200003f4
 8003048:	20000404 	.word	0x20000404
 800304c:	200003f0 	.word	0x200003f0
 8003050:	200002ec 	.word	0x200002ec
 8003054:	e000ed04 	.word	0xe000ed04

08003058 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003060:	2300      	movs	r3, #0
 8003062:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d016      	beq.n	8003098 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800306a:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <vTaskDelay+0x60>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d009      	beq.n	8003086 <vTaskDelay+0x2e>
 8003072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003076:	f383 8811 	msr	BASEPRI, r3
 800307a:	f3bf 8f6f 	isb	sy
 800307e:	f3bf 8f4f 	dsb	sy
 8003082:	60bb      	str	r3, [r7, #8]
 8003084:	e7fe      	b.n	8003084 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003086:	f000 f879 	bl	800317c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800308a:	2100      	movs	r1, #0
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 fb21 	bl	80036d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003092:	f000 f881 	bl	8003198 <xTaskResumeAll>
 8003096:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d107      	bne.n	80030ae <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800309e:	4b07      	ldr	r3, [pc, #28]	; (80030bc <vTaskDelay+0x64>)
 80030a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	f3bf 8f4f 	dsb	sy
 80030aa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80030ae:	bf00      	nop
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	20000410 	.word	0x20000410
 80030bc:	e000ed04 	.word	0xe000ed04

080030c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b08a      	sub	sp, #40	; 0x28
 80030c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80030c6:	2300      	movs	r3, #0
 80030c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80030ca:	2300      	movs	r3, #0
 80030cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80030ce:	463a      	mov	r2, r7
 80030d0:	1d39      	adds	r1, r7, #4
 80030d2:	f107 0308 	add.w	r3, r7, #8
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fd fa02 	bl	80004e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80030dc:	6839      	ldr	r1, [r7, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	9202      	str	r2, [sp, #8]
 80030e4:	9301      	str	r3, [sp, #4]
 80030e6:	2300      	movs	r3, #0
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	2300      	movs	r3, #0
 80030ec:	460a      	mov	r2, r1
 80030ee:	491d      	ldr	r1, [pc, #116]	; (8003164 <vTaskStartScheduler+0xa4>)
 80030f0:	481d      	ldr	r0, [pc, #116]	; (8003168 <vTaskStartScheduler+0xa8>)
 80030f2:	f7ff fe21 	bl	8002d38 <xTaskCreateStatic>
 80030f6:	4602      	mov	r2, r0
 80030f8:	4b1c      	ldr	r3, [pc, #112]	; (800316c <vTaskStartScheduler+0xac>)
 80030fa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80030fc:	4b1b      	ldr	r3, [pc, #108]	; (800316c <vTaskStartScheduler+0xac>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d002      	beq.n	800310a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003104:	2301      	movs	r3, #1
 8003106:	617b      	str	r3, [r7, #20]
 8003108:	e001      	b.n	800310e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800310a:	2300      	movs	r3, #0
 800310c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d115      	bne.n	8003140 <vTaskStartScheduler+0x80>
 8003114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003118:	f383 8811 	msr	BASEPRI, r3
 800311c:	f3bf 8f6f 	isb	sy
 8003120:	f3bf 8f4f 	dsb	sy
 8003124:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003126:	4b12      	ldr	r3, [pc, #72]	; (8003170 <vTaskStartScheduler+0xb0>)
 8003128:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800312c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800312e:	4b11      	ldr	r3, [pc, #68]	; (8003174 <vTaskStartScheduler+0xb4>)
 8003130:	2201      	movs	r2, #1
 8003132:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003134:	4b10      	ldr	r3, [pc, #64]	; (8003178 <vTaskStartScheduler+0xb8>)
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800313a:	f000 fbb9 	bl	80038b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800313e:	e00d      	b.n	800315c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003146:	d109      	bne.n	800315c <vTaskStartScheduler+0x9c>
 8003148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800314c:	f383 8811 	msr	BASEPRI, r3
 8003150:	f3bf 8f6f 	isb	sy
 8003154:	f3bf 8f4f 	dsb	sy
 8003158:	60fb      	str	r3, [r7, #12]
 800315a:	e7fe      	b.n	800315a <vTaskStartScheduler+0x9a>
}
 800315c:	bf00      	nop
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	08004748 	.word	0x08004748
 8003168:	080034f5 	.word	0x080034f5
 800316c:	2000040c 	.word	0x2000040c
 8003170:	20000408 	.word	0x20000408
 8003174:	200003f4 	.word	0x200003f4
 8003178:	200003ec 	.word	0x200003ec

0800317c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003180:	4b04      	ldr	r3, [pc, #16]	; (8003194 <vTaskSuspendAll+0x18>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	3301      	adds	r3, #1
 8003186:	4a03      	ldr	r2, [pc, #12]	; (8003194 <vTaskSuspendAll+0x18>)
 8003188:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800318a:	bf00      	nop
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	20000410 	.word	0x20000410

08003198 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800319e:	2300      	movs	r3, #0
 80031a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80031a2:	2300      	movs	r3, #0
 80031a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80031a6:	4b41      	ldr	r3, [pc, #260]	; (80032ac <xTaskResumeAll+0x114>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d109      	bne.n	80031c2 <xTaskResumeAll+0x2a>
 80031ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b2:	f383 8811 	msr	BASEPRI, r3
 80031b6:	f3bf 8f6f 	isb	sy
 80031ba:	f3bf 8f4f 	dsb	sy
 80031be:	603b      	str	r3, [r7, #0]
 80031c0:	e7fe      	b.n	80031c0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80031c2:	f000 fc13 	bl	80039ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80031c6:	4b39      	ldr	r3, [pc, #228]	; (80032ac <xTaskResumeAll+0x114>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	3b01      	subs	r3, #1
 80031cc:	4a37      	ldr	r2, [pc, #220]	; (80032ac <xTaskResumeAll+0x114>)
 80031ce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031d0:	4b36      	ldr	r3, [pc, #216]	; (80032ac <xTaskResumeAll+0x114>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d161      	bne.n	800329c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80031d8:	4b35      	ldr	r3, [pc, #212]	; (80032b0 <xTaskResumeAll+0x118>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d05d      	beq.n	800329c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031e0:	e02e      	b.n	8003240 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031e2:	4b34      	ldr	r3, [pc, #208]	; (80032b4 <xTaskResumeAll+0x11c>)
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	3318      	adds	r3, #24
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff fd78 	bl	8002ce4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	3304      	adds	r3, #4
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff fd73 	bl	8002ce4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003202:	2201      	movs	r2, #1
 8003204:	409a      	lsls	r2, r3
 8003206:	4b2c      	ldr	r3, [pc, #176]	; (80032b8 <xTaskResumeAll+0x120>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4313      	orrs	r3, r2
 800320c:	4a2a      	ldr	r2, [pc, #168]	; (80032b8 <xTaskResumeAll+0x120>)
 800320e:	6013      	str	r3, [r2, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4a27      	ldr	r2, [pc, #156]	; (80032bc <xTaskResumeAll+0x124>)
 800321e:	441a      	add	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	3304      	adds	r3, #4
 8003224:	4619      	mov	r1, r3
 8003226:	4610      	mov	r0, r2
 8003228:	f7ff fcff 	bl	8002c2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003230:	4b23      	ldr	r3, [pc, #140]	; (80032c0 <xTaskResumeAll+0x128>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003236:	429a      	cmp	r2, r3
 8003238:	d302      	bcc.n	8003240 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800323a:	4b22      	ldr	r3, [pc, #136]	; (80032c4 <xTaskResumeAll+0x12c>)
 800323c:	2201      	movs	r2, #1
 800323e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003240:	4b1c      	ldr	r3, [pc, #112]	; (80032b4 <xTaskResumeAll+0x11c>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1cc      	bne.n	80031e2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800324e:	f000 fa03 	bl	8003658 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003252:	4b1d      	ldr	r3, [pc, #116]	; (80032c8 <xTaskResumeAll+0x130>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d010      	beq.n	8003280 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800325e:	f000 f837 	bl	80032d0 <xTaskIncrementTick>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d002      	beq.n	800326e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003268:	4b16      	ldr	r3, [pc, #88]	; (80032c4 <xTaskResumeAll+0x12c>)
 800326a:	2201      	movs	r2, #1
 800326c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	3b01      	subs	r3, #1
 8003272:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f1      	bne.n	800325e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800327a:	4b13      	ldr	r3, [pc, #76]	; (80032c8 <xTaskResumeAll+0x130>)
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003280:	4b10      	ldr	r3, [pc, #64]	; (80032c4 <xTaskResumeAll+0x12c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d009      	beq.n	800329c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003288:	2301      	movs	r3, #1
 800328a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800328c:	4b0f      	ldr	r3, [pc, #60]	; (80032cc <xTaskResumeAll+0x134>)
 800328e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	f3bf 8f4f 	dsb	sy
 8003298:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800329c:	f000 fbd4 	bl	8003a48 <vPortExitCritical>

	return xAlreadyYielded;
 80032a0:	68bb      	ldr	r3, [r7, #8]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	20000410 	.word	0x20000410
 80032b0:	200003e8 	.word	0x200003e8
 80032b4:	200003a8 	.word	0x200003a8
 80032b8:	200003f0 	.word	0x200003f0
 80032bc:	200002ec 	.word	0x200002ec
 80032c0:	200002e8 	.word	0x200002e8
 80032c4:	200003fc 	.word	0x200003fc
 80032c8:	200003f8 	.word	0x200003f8
 80032cc:	e000ed04 	.word	0xe000ed04

080032d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80032d6:	2300      	movs	r3, #0
 80032d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032da:	4b4e      	ldr	r3, [pc, #312]	; (8003414 <xTaskIncrementTick+0x144>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f040 8087 	bne.w	80033f2 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80032e4:	4b4c      	ldr	r3, [pc, #304]	; (8003418 <xTaskIncrementTick+0x148>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	3301      	adds	r3, #1
 80032ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80032ec:	4a4a      	ldr	r2, [pc, #296]	; (8003418 <xTaskIncrementTick+0x148>)
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d11f      	bne.n	8003338 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80032f8:	4b48      	ldr	r3, [pc, #288]	; (800341c <xTaskIncrementTick+0x14c>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d009      	beq.n	8003316 <xTaskIncrementTick+0x46>
 8003302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003306:	f383 8811 	msr	BASEPRI, r3
 800330a:	f3bf 8f6f 	isb	sy
 800330e:	f3bf 8f4f 	dsb	sy
 8003312:	603b      	str	r3, [r7, #0]
 8003314:	e7fe      	b.n	8003314 <xTaskIncrementTick+0x44>
 8003316:	4b41      	ldr	r3, [pc, #260]	; (800341c <xTaskIncrementTick+0x14c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	4b40      	ldr	r3, [pc, #256]	; (8003420 <xTaskIncrementTick+0x150>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a3e      	ldr	r2, [pc, #248]	; (800341c <xTaskIncrementTick+0x14c>)
 8003322:	6013      	str	r3, [r2, #0]
 8003324:	4a3e      	ldr	r2, [pc, #248]	; (8003420 <xTaskIncrementTick+0x150>)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	4b3e      	ldr	r3, [pc, #248]	; (8003424 <xTaskIncrementTick+0x154>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	3301      	adds	r3, #1
 8003330:	4a3c      	ldr	r2, [pc, #240]	; (8003424 <xTaskIncrementTick+0x154>)
 8003332:	6013      	str	r3, [r2, #0]
 8003334:	f000 f990 	bl	8003658 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003338:	4b3b      	ldr	r3, [pc, #236]	; (8003428 <xTaskIncrementTick+0x158>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	429a      	cmp	r2, r3
 8003340:	d348      	bcc.n	80033d4 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003342:	4b36      	ldr	r3, [pc, #216]	; (800341c <xTaskIncrementTick+0x14c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d104      	bne.n	8003356 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800334c:	4b36      	ldr	r3, [pc, #216]	; (8003428 <xTaskIncrementTick+0x158>)
 800334e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003352:	601a      	str	r2, [r3, #0]
					break;
 8003354:	e03e      	b.n	80033d4 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003356:	4b31      	ldr	r3, [pc, #196]	; (800341c <xTaskIncrementTick+0x14c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	429a      	cmp	r2, r3
 800336c:	d203      	bcs.n	8003376 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800336e:	4a2e      	ldr	r2, [pc, #184]	; (8003428 <xTaskIncrementTick+0x158>)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003374:	e02e      	b.n	80033d4 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	3304      	adds	r3, #4
 800337a:	4618      	mov	r0, r3
 800337c:	f7ff fcb2 	bl	8002ce4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003384:	2b00      	cmp	r3, #0
 8003386:	d004      	beq.n	8003392 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	3318      	adds	r3, #24
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff fca9 	bl	8002ce4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003396:	2201      	movs	r2, #1
 8003398:	409a      	lsls	r2, r3
 800339a:	4b24      	ldr	r3, [pc, #144]	; (800342c <xTaskIncrementTick+0x15c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4313      	orrs	r3, r2
 80033a0:	4a22      	ldr	r2, [pc, #136]	; (800342c <xTaskIncrementTick+0x15c>)
 80033a2:	6013      	str	r3, [r2, #0]
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a8:	4613      	mov	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4413      	add	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4a1f      	ldr	r2, [pc, #124]	; (8003430 <xTaskIncrementTick+0x160>)
 80033b2:	441a      	add	r2, r3
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	3304      	adds	r3, #4
 80033b8:	4619      	mov	r1, r3
 80033ba:	4610      	mov	r0, r2
 80033bc:	f7ff fc35 	bl	8002c2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c4:	4b1b      	ldr	r3, [pc, #108]	; (8003434 <xTaskIncrementTick+0x164>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d3b9      	bcc.n	8003342 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80033ce:	2301      	movs	r3, #1
 80033d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033d2:	e7b6      	b.n	8003342 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80033d4:	4b17      	ldr	r3, [pc, #92]	; (8003434 <xTaskIncrementTick+0x164>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033da:	4915      	ldr	r1, [pc, #84]	; (8003430 <xTaskIncrementTick+0x160>)
 80033dc:	4613      	mov	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	440b      	add	r3, r1
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d907      	bls.n	80033fc <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80033ec:	2301      	movs	r3, #1
 80033ee:	617b      	str	r3, [r7, #20]
 80033f0:	e004      	b.n	80033fc <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80033f2:	4b11      	ldr	r3, [pc, #68]	; (8003438 <xTaskIncrementTick+0x168>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	3301      	adds	r3, #1
 80033f8:	4a0f      	ldr	r2, [pc, #60]	; (8003438 <xTaskIncrementTick+0x168>)
 80033fa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80033fc:	4b0f      	ldr	r3, [pc, #60]	; (800343c <xTaskIncrementTick+0x16c>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8003404:	2301      	movs	r3, #1
 8003406:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003408:	697b      	ldr	r3, [r7, #20]
}
 800340a:	4618      	mov	r0, r3
 800340c:	3718      	adds	r7, #24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	20000410 	.word	0x20000410
 8003418:	200003ec 	.word	0x200003ec
 800341c:	200003a0 	.word	0x200003a0
 8003420:	200003a4 	.word	0x200003a4
 8003424:	20000400 	.word	0x20000400
 8003428:	20000408 	.word	0x20000408
 800342c:	200003f0 	.word	0x200003f0
 8003430:	200002ec 	.word	0x200002ec
 8003434:	200002e8 	.word	0x200002e8
 8003438:	200003f8 	.word	0x200003f8
 800343c:	200003fc 	.word	0x200003fc

08003440 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003440:	b480      	push	{r7}
 8003442:	b087      	sub	sp, #28
 8003444:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003446:	4b26      	ldr	r3, [pc, #152]	; (80034e0 <vTaskSwitchContext+0xa0>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800344e:	4b25      	ldr	r3, [pc, #148]	; (80034e4 <vTaskSwitchContext+0xa4>)
 8003450:	2201      	movs	r2, #1
 8003452:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003454:	e03e      	b.n	80034d4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003456:	4b23      	ldr	r3, [pc, #140]	; (80034e4 <vTaskSwitchContext+0xa4>)
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800345c:	4b22      	ldr	r3, [pc, #136]	; (80034e8 <vTaskSwitchContext+0xa8>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	fab3 f383 	clz	r3, r3
 8003468:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800346a:	7afb      	ldrb	r3, [r7, #11]
 800346c:	f1c3 031f 	rsb	r3, r3, #31
 8003470:	617b      	str	r3, [r7, #20]
 8003472:	491e      	ldr	r1, [pc, #120]	; (80034ec <vTaskSwitchContext+0xac>)
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	4613      	mov	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4413      	add	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	440b      	add	r3, r1
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d109      	bne.n	800349a <vTaskSwitchContext+0x5a>
	__asm volatile
 8003486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348a:	f383 8811 	msr	BASEPRI, r3
 800348e:	f3bf 8f6f 	isb	sy
 8003492:	f3bf 8f4f 	dsb	sy
 8003496:	607b      	str	r3, [r7, #4]
 8003498:	e7fe      	b.n	8003498 <vTaskSwitchContext+0x58>
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4a11      	ldr	r2, [pc, #68]	; (80034ec <vTaskSwitchContext+0xac>)
 80034a6:	4413      	add	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	605a      	str	r2, [r3, #4]
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	3308      	adds	r3, #8
 80034bc:	429a      	cmp	r2, r3
 80034be:	d104      	bne.n	80034ca <vTaskSwitchContext+0x8a>
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	605a      	str	r2, [r3, #4]
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	4a07      	ldr	r2, [pc, #28]	; (80034f0 <vTaskSwitchContext+0xb0>)
 80034d2:	6013      	str	r3, [r2, #0]
}
 80034d4:	bf00      	nop
 80034d6:	371c      	adds	r7, #28
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr
 80034e0:	20000410 	.word	0x20000410
 80034e4:	200003fc 	.word	0x200003fc
 80034e8:	200003f0 	.word	0x200003f0
 80034ec:	200002ec 	.word	0x200002ec
 80034f0:	200002e8 	.word	0x200002e8

080034f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80034fc:	f000 f852 	bl	80035a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003500:	4b06      	ldr	r3, [pc, #24]	; (800351c <prvIdleTask+0x28>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d9f9      	bls.n	80034fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8003508:	4b05      	ldr	r3, [pc, #20]	; (8003520 <prvIdleTask+0x2c>)
 800350a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	f3bf 8f4f 	dsb	sy
 8003514:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003518:	e7f0      	b.n	80034fc <prvIdleTask+0x8>
 800351a:	bf00      	nop
 800351c:	200002ec 	.word	0x200002ec
 8003520:	e000ed04 	.word	0xe000ed04

08003524 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800352a:	2300      	movs	r3, #0
 800352c:	607b      	str	r3, [r7, #4]
 800352e:	e00c      	b.n	800354a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	4613      	mov	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4413      	add	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4a12      	ldr	r2, [pc, #72]	; (8003584 <prvInitialiseTaskLists+0x60>)
 800353c:	4413      	add	r3, r2
 800353e:	4618      	mov	r0, r3
 8003540:	f7ff fb46 	bl	8002bd0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3301      	adds	r3, #1
 8003548:	607b      	str	r3, [r7, #4]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b06      	cmp	r3, #6
 800354e:	d9ef      	bls.n	8003530 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003550:	480d      	ldr	r0, [pc, #52]	; (8003588 <prvInitialiseTaskLists+0x64>)
 8003552:	f7ff fb3d 	bl	8002bd0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003556:	480d      	ldr	r0, [pc, #52]	; (800358c <prvInitialiseTaskLists+0x68>)
 8003558:	f7ff fb3a 	bl	8002bd0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800355c:	480c      	ldr	r0, [pc, #48]	; (8003590 <prvInitialiseTaskLists+0x6c>)
 800355e:	f7ff fb37 	bl	8002bd0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003562:	480c      	ldr	r0, [pc, #48]	; (8003594 <prvInitialiseTaskLists+0x70>)
 8003564:	f7ff fb34 	bl	8002bd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003568:	480b      	ldr	r0, [pc, #44]	; (8003598 <prvInitialiseTaskLists+0x74>)
 800356a:	f7ff fb31 	bl	8002bd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800356e:	4b0b      	ldr	r3, [pc, #44]	; (800359c <prvInitialiseTaskLists+0x78>)
 8003570:	4a05      	ldr	r2, [pc, #20]	; (8003588 <prvInitialiseTaskLists+0x64>)
 8003572:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003574:	4b0a      	ldr	r3, [pc, #40]	; (80035a0 <prvInitialiseTaskLists+0x7c>)
 8003576:	4a05      	ldr	r2, [pc, #20]	; (800358c <prvInitialiseTaskLists+0x68>)
 8003578:	601a      	str	r2, [r3, #0]
}
 800357a:	bf00      	nop
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	200002ec 	.word	0x200002ec
 8003588:	20000378 	.word	0x20000378
 800358c:	2000038c 	.word	0x2000038c
 8003590:	200003a8 	.word	0x200003a8
 8003594:	200003bc 	.word	0x200003bc
 8003598:	200003d4 	.word	0x200003d4
 800359c:	200003a0 	.word	0x200003a0
 80035a0:	200003a4 	.word	0x200003a4

080035a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035aa:	e019      	b.n	80035e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80035ac:	f000 fa1e 	bl	80039ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035b0:	4b0f      	ldr	r3, [pc, #60]	; (80035f0 <prvCheckTasksWaitingTermination+0x4c>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	3304      	adds	r3, #4
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff fb91 	bl	8002ce4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80035c2:	4b0c      	ldr	r3, [pc, #48]	; (80035f4 <prvCheckTasksWaitingTermination+0x50>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	3b01      	subs	r3, #1
 80035c8:	4a0a      	ldr	r2, [pc, #40]	; (80035f4 <prvCheckTasksWaitingTermination+0x50>)
 80035ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80035cc:	4b0a      	ldr	r3, [pc, #40]	; (80035f8 <prvCheckTasksWaitingTermination+0x54>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	3b01      	subs	r3, #1
 80035d2:	4a09      	ldr	r2, [pc, #36]	; (80035f8 <prvCheckTasksWaitingTermination+0x54>)
 80035d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80035d6:	f000 fa37 	bl	8003a48 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f80e 	bl	80035fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035e0:	4b05      	ldr	r3, [pc, #20]	; (80035f8 <prvCheckTasksWaitingTermination+0x54>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1e1      	bne.n	80035ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80035e8:	bf00      	nop
 80035ea:	3708      	adds	r7, #8
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	200003bc 	.word	0x200003bc
 80035f4:	200003e8 	.word	0x200003e8
 80035f8:	200003d0 	.word	0x200003d0

080035fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800360a:	2b00      	cmp	r3, #0
 800360c:	d108      	bne.n	8003620 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	4618      	mov	r0, r3
 8003614:	f000 fb88 	bl	8003d28 <vPortFree>
				vPortFree( pxTCB );
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 fb85 	bl	8003d28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800361e:	e017      	b.n	8003650 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003626:	2b01      	cmp	r3, #1
 8003628:	d103      	bne.n	8003632 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 fb7c 	bl	8003d28 <vPortFree>
	}
 8003630:	e00e      	b.n	8003650 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003638:	2b02      	cmp	r3, #2
 800363a:	d009      	beq.n	8003650 <prvDeleteTCB+0x54>
 800363c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003640:	f383 8811 	msr	BASEPRI, r3
 8003644:	f3bf 8f6f 	isb	sy
 8003648:	f3bf 8f4f 	dsb	sy
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	e7fe      	b.n	800364e <prvDeleteTCB+0x52>
	}
 8003650:	bf00      	nop
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800365e:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <prvResetNextTaskUnblockTime+0x38>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d104      	bne.n	8003672 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003668:	4b0a      	ldr	r3, [pc, #40]	; (8003694 <prvResetNextTaskUnblockTime+0x3c>)
 800366a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800366e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003670:	e008      	b.n	8003684 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003672:	4b07      	ldr	r3, [pc, #28]	; (8003690 <prvResetNextTaskUnblockTime+0x38>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	4a04      	ldr	r2, [pc, #16]	; (8003694 <prvResetNextTaskUnblockTime+0x3c>)
 8003682:	6013      	str	r3, [r2, #0]
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	200003a0 	.word	0x200003a0
 8003694:	20000408 	.word	0x20000408

08003698 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800369e:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <xTaskGetSchedulerState+0x34>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d102      	bne.n	80036ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80036a6:	2301      	movs	r3, #1
 80036a8:	607b      	str	r3, [r7, #4]
 80036aa:	e008      	b.n	80036be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036ac:	4b08      	ldr	r3, [pc, #32]	; (80036d0 <xTaskGetSchedulerState+0x38>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d102      	bne.n	80036ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80036b4:	2302      	movs	r3, #2
 80036b6:	607b      	str	r3, [r7, #4]
 80036b8:	e001      	b.n	80036be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80036ba:	2300      	movs	r3, #0
 80036bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80036be:	687b      	ldr	r3, [r7, #4]
	}
 80036c0:	4618      	mov	r0, r3
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	200003f4 	.word	0x200003f4
 80036d0:	20000410 	.word	0x20000410

080036d4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80036de:	4b29      	ldr	r3, [pc, #164]	; (8003784 <prvAddCurrentTaskToDelayedList+0xb0>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80036e4:	4b28      	ldr	r3, [pc, #160]	; (8003788 <prvAddCurrentTaskToDelayedList+0xb4>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	3304      	adds	r3, #4
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7ff fafa 	bl	8002ce4 <uxListRemove>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10b      	bne.n	800370e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80036f6:	4b24      	ldr	r3, [pc, #144]	; (8003788 <prvAddCurrentTaskToDelayedList+0xb4>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	2201      	movs	r2, #1
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	43da      	mvns	r2, r3
 8003704:	4b21      	ldr	r3, [pc, #132]	; (800378c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4013      	ands	r3, r2
 800370a:	4a20      	ldr	r2, [pc, #128]	; (800378c <prvAddCurrentTaskToDelayedList+0xb8>)
 800370c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003714:	d10a      	bne.n	800372c <prvAddCurrentTaskToDelayedList+0x58>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d007      	beq.n	800372c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800371c:	4b1a      	ldr	r3, [pc, #104]	; (8003788 <prvAddCurrentTaskToDelayedList+0xb4>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	3304      	adds	r3, #4
 8003722:	4619      	mov	r1, r3
 8003724:	481a      	ldr	r0, [pc, #104]	; (8003790 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003726:	f7ff fa80 	bl	8002c2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800372a:	e026      	b.n	800377a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4413      	add	r3, r2
 8003732:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003734:	4b14      	ldr	r3, [pc, #80]	; (8003788 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	429a      	cmp	r2, r3
 8003742:	d209      	bcs.n	8003758 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003744:	4b13      	ldr	r3, [pc, #76]	; (8003794 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	4b0f      	ldr	r3, [pc, #60]	; (8003788 <prvAddCurrentTaskToDelayedList+0xb4>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	3304      	adds	r3, #4
 800374e:	4619      	mov	r1, r3
 8003750:	4610      	mov	r0, r2
 8003752:	f7ff fa8e 	bl	8002c72 <vListInsert>
}
 8003756:	e010      	b.n	800377a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003758:	4b0f      	ldr	r3, [pc, #60]	; (8003798 <prvAddCurrentTaskToDelayedList+0xc4>)
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	4b0a      	ldr	r3, [pc, #40]	; (8003788 <prvAddCurrentTaskToDelayedList+0xb4>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	3304      	adds	r3, #4
 8003762:	4619      	mov	r1, r3
 8003764:	4610      	mov	r0, r2
 8003766:	f7ff fa84 	bl	8002c72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800376a:	4b0c      	ldr	r3, [pc, #48]	; (800379c <prvAddCurrentTaskToDelayedList+0xc8>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	429a      	cmp	r2, r3
 8003772:	d202      	bcs.n	800377a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003774:	4a09      	ldr	r2, [pc, #36]	; (800379c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	6013      	str	r3, [r2, #0]
}
 800377a:	bf00      	nop
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	200003ec 	.word	0x200003ec
 8003788:	200002e8 	.word	0x200002e8
 800378c:	200003f0 	.word	0x200003f0
 8003790:	200003d4 	.word	0x200003d4
 8003794:	200003a4 	.word	0x200003a4
 8003798:	200003a0 	.word	0x200003a0
 800379c:	20000408 	.word	0x20000408

080037a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	3b04      	subs	r3, #4
 80037b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80037b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	3b04      	subs	r3, #4
 80037be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	f023 0201 	bic.w	r2, r3, #1
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	3b04      	subs	r3, #4
 80037ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80037d0:	4a0c      	ldr	r2, [pc, #48]	; (8003804 <pxPortInitialiseStack+0x64>)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	3b14      	subs	r3, #20
 80037da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	3b04      	subs	r3, #4
 80037e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f06f 0202 	mvn.w	r2, #2
 80037ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	3b20      	subs	r3, #32
 80037f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80037f6:	68fb      	ldr	r3, [r7, #12]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3714      	adds	r7, #20
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	08003809 	.word	0x08003809

08003808 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800380e:	2300      	movs	r3, #0
 8003810:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003812:	4b11      	ldr	r3, [pc, #68]	; (8003858 <prvTaskExitError+0x50>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800381a:	d009      	beq.n	8003830 <prvTaskExitError+0x28>
 800381c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003820:	f383 8811 	msr	BASEPRI, r3
 8003824:	f3bf 8f6f 	isb	sy
 8003828:	f3bf 8f4f 	dsb	sy
 800382c:	60fb      	str	r3, [r7, #12]
 800382e:	e7fe      	b.n	800382e <prvTaskExitError+0x26>
 8003830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003834:	f383 8811 	msr	BASEPRI, r3
 8003838:	f3bf 8f6f 	isb	sy
 800383c:	f3bf 8f4f 	dsb	sy
 8003840:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003842:	bf00      	nop
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0fc      	beq.n	8003844 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800384a:	bf00      	nop
 800384c:	3714      	adds	r7, #20
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	2000000c 	.word	0x2000000c
 800385c:	00000000 	.word	0x00000000

08003860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003860:	4b07      	ldr	r3, [pc, #28]	; (8003880 <pxCurrentTCBConst2>)
 8003862:	6819      	ldr	r1, [r3, #0]
 8003864:	6808      	ldr	r0, [r1, #0]
 8003866:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800386a:	f380 8809 	msr	PSP, r0
 800386e:	f3bf 8f6f 	isb	sy
 8003872:	f04f 0000 	mov.w	r0, #0
 8003876:	f380 8811 	msr	BASEPRI, r0
 800387a:	4770      	bx	lr
 800387c:	f3af 8000 	nop.w

08003880 <pxCurrentTCBConst2>:
 8003880:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003884:	bf00      	nop
 8003886:	bf00      	nop

08003888 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003888:	4808      	ldr	r0, [pc, #32]	; (80038ac <prvPortStartFirstTask+0x24>)
 800388a:	6800      	ldr	r0, [r0, #0]
 800388c:	6800      	ldr	r0, [r0, #0]
 800388e:	f380 8808 	msr	MSP, r0
 8003892:	f04f 0000 	mov.w	r0, #0
 8003896:	f380 8814 	msr	CONTROL, r0
 800389a:	b662      	cpsie	i
 800389c:	b661      	cpsie	f
 800389e:	f3bf 8f4f 	dsb	sy
 80038a2:	f3bf 8f6f 	isb	sy
 80038a6:	df00      	svc	0
 80038a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80038aa:	bf00      	nop
 80038ac:	e000ed08 	.word	0xe000ed08

080038b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80038b6:	4b44      	ldr	r3, [pc, #272]	; (80039c8 <xPortStartScheduler+0x118>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a44      	ldr	r2, [pc, #272]	; (80039cc <xPortStartScheduler+0x11c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d109      	bne.n	80038d4 <xPortStartScheduler+0x24>
 80038c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c4:	f383 8811 	msr	BASEPRI, r3
 80038c8:	f3bf 8f6f 	isb	sy
 80038cc:	f3bf 8f4f 	dsb	sy
 80038d0:	613b      	str	r3, [r7, #16]
 80038d2:	e7fe      	b.n	80038d2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80038d4:	4b3c      	ldr	r3, [pc, #240]	; (80039c8 <xPortStartScheduler+0x118>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a3d      	ldr	r2, [pc, #244]	; (80039d0 <xPortStartScheduler+0x120>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d109      	bne.n	80038f2 <xPortStartScheduler+0x42>
 80038de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e2:	f383 8811 	msr	BASEPRI, r3
 80038e6:	f3bf 8f6f 	isb	sy
 80038ea:	f3bf 8f4f 	dsb	sy
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	e7fe      	b.n	80038f0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80038f2:	4b38      	ldr	r3, [pc, #224]	; (80039d4 <xPortStartScheduler+0x124>)
 80038f4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	22ff      	movs	r2, #255	; 0xff
 8003902:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	b2db      	uxtb	r3, r3
 800390a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800390c:	78fb      	ldrb	r3, [r7, #3]
 800390e:	b2db      	uxtb	r3, r3
 8003910:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003914:	b2da      	uxtb	r2, r3
 8003916:	4b30      	ldr	r3, [pc, #192]	; (80039d8 <xPortStartScheduler+0x128>)
 8003918:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800391a:	4b30      	ldr	r3, [pc, #192]	; (80039dc <xPortStartScheduler+0x12c>)
 800391c:	2207      	movs	r2, #7
 800391e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003920:	e009      	b.n	8003936 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003922:	4b2e      	ldr	r3, [pc, #184]	; (80039dc <xPortStartScheduler+0x12c>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	3b01      	subs	r3, #1
 8003928:	4a2c      	ldr	r2, [pc, #176]	; (80039dc <xPortStartScheduler+0x12c>)
 800392a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800392c:	78fb      	ldrb	r3, [r7, #3]
 800392e:	b2db      	uxtb	r3, r3
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	b2db      	uxtb	r3, r3
 8003934:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003936:	78fb      	ldrb	r3, [r7, #3]
 8003938:	b2db      	uxtb	r3, r3
 800393a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800393e:	2b80      	cmp	r3, #128	; 0x80
 8003940:	d0ef      	beq.n	8003922 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003942:	4b26      	ldr	r3, [pc, #152]	; (80039dc <xPortStartScheduler+0x12c>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f1c3 0307 	rsb	r3, r3, #7
 800394a:	2b04      	cmp	r3, #4
 800394c:	d009      	beq.n	8003962 <xPortStartScheduler+0xb2>
 800394e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003952:	f383 8811 	msr	BASEPRI, r3
 8003956:	f3bf 8f6f 	isb	sy
 800395a:	f3bf 8f4f 	dsb	sy
 800395e:	60bb      	str	r3, [r7, #8]
 8003960:	e7fe      	b.n	8003960 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003962:	4b1e      	ldr	r3, [pc, #120]	; (80039dc <xPortStartScheduler+0x12c>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	021b      	lsls	r3, r3, #8
 8003968:	4a1c      	ldr	r2, [pc, #112]	; (80039dc <xPortStartScheduler+0x12c>)
 800396a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800396c:	4b1b      	ldr	r3, [pc, #108]	; (80039dc <xPortStartScheduler+0x12c>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003974:	4a19      	ldr	r2, [pc, #100]	; (80039dc <xPortStartScheduler+0x12c>)
 8003976:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	b2da      	uxtb	r2, r3
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003980:	4b17      	ldr	r3, [pc, #92]	; (80039e0 <xPortStartScheduler+0x130>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a16      	ldr	r2, [pc, #88]	; (80039e0 <xPortStartScheduler+0x130>)
 8003986:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800398a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800398c:	4b14      	ldr	r3, [pc, #80]	; (80039e0 <xPortStartScheduler+0x130>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a13      	ldr	r2, [pc, #76]	; (80039e0 <xPortStartScheduler+0x130>)
 8003992:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003996:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003998:	f000 f8d6 	bl	8003b48 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800399c:	4b11      	ldr	r3, [pc, #68]	; (80039e4 <xPortStartScheduler+0x134>)
 800399e:	2200      	movs	r2, #0
 80039a0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80039a2:	f000 f8f5 	bl	8003b90 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80039a6:	4b10      	ldr	r3, [pc, #64]	; (80039e8 <xPortStartScheduler+0x138>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a0f      	ldr	r2, [pc, #60]	; (80039e8 <xPortStartScheduler+0x138>)
 80039ac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80039b0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80039b2:	f7ff ff69 	bl	8003888 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80039b6:	f7ff fd43 	bl	8003440 <vTaskSwitchContext>
	prvTaskExitError();
 80039ba:	f7ff ff25 	bl	8003808 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3718      	adds	r7, #24
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	e000ed00 	.word	0xe000ed00
 80039cc:	410fc271 	.word	0x410fc271
 80039d0:	410fc270 	.word	0x410fc270
 80039d4:	e000e400 	.word	0xe000e400
 80039d8:	20000414 	.word	0x20000414
 80039dc:	20000418 	.word	0x20000418
 80039e0:	e000ed20 	.word	0xe000ed20
 80039e4:	2000000c 	.word	0x2000000c
 80039e8:	e000ef34 	.word	0xe000ef34

080039ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f6:	f383 8811 	msr	BASEPRI, r3
 80039fa:	f3bf 8f6f 	isb	sy
 80039fe:	f3bf 8f4f 	dsb	sy
 8003a02:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003a04:	4b0e      	ldr	r3, [pc, #56]	; (8003a40 <vPortEnterCritical+0x54>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	4a0d      	ldr	r2, [pc, #52]	; (8003a40 <vPortEnterCritical+0x54>)
 8003a0c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003a0e:	4b0c      	ldr	r3, [pc, #48]	; (8003a40 <vPortEnterCritical+0x54>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d10e      	bne.n	8003a34 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003a16:	4b0b      	ldr	r3, [pc, #44]	; (8003a44 <vPortEnterCritical+0x58>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d009      	beq.n	8003a34 <vPortEnterCritical+0x48>
 8003a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a24:	f383 8811 	msr	BASEPRI, r3
 8003a28:	f3bf 8f6f 	isb	sy
 8003a2c:	f3bf 8f4f 	dsb	sy
 8003a30:	603b      	str	r3, [r7, #0]
 8003a32:	e7fe      	b.n	8003a32 <vPortEnterCritical+0x46>
	}
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	2000000c 	.word	0x2000000c
 8003a44:	e000ed04 	.word	0xe000ed04

08003a48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003a4e:	4b11      	ldr	r3, [pc, #68]	; (8003a94 <vPortExitCritical+0x4c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d109      	bne.n	8003a6a <vPortExitCritical+0x22>
 8003a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5a:	f383 8811 	msr	BASEPRI, r3
 8003a5e:	f3bf 8f6f 	isb	sy
 8003a62:	f3bf 8f4f 	dsb	sy
 8003a66:	607b      	str	r3, [r7, #4]
 8003a68:	e7fe      	b.n	8003a68 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003a6a:	4b0a      	ldr	r3, [pc, #40]	; (8003a94 <vPortExitCritical+0x4c>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	4a08      	ldr	r2, [pc, #32]	; (8003a94 <vPortExitCritical+0x4c>)
 8003a72:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003a74:	4b07      	ldr	r3, [pc, #28]	; (8003a94 <vPortExitCritical+0x4c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d104      	bne.n	8003a86 <vPortExitCritical+0x3e>
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003a86:	bf00      	nop
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	2000000c 	.word	0x2000000c
	...

08003aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003aa0:	f3ef 8009 	mrs	r0, PSP
 8003aa4:	f3bf 8f6f 	isb	sy
 8003aa8:	4b15      	ldr	r3, [pc, #84]	; (8003b00 <pxCurrentTCBConst>)
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	f01e 0f10 	tst.w	lr, #16
 8003ab0:	bf08      	it	eq
 8003ab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003ab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aba:	6010      	str	r0, [r2, #0]
 8003abc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003ac0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003ac4:	f380 8811 	msr	BASEPRI, r0
 8003ac8:	f3bf 8f4f 	dsb	sy
 8003acc:	f3bf 8f6f 	isb	sy
 8003ad0:	f7ff fcb6 	bl	8003440 <vTaskSwitchContext>
 8003ad4:	f04f 0000 	mov.w	r0, #0
 8003ad8:	f380 8811 	msr	BASEPRI, r0
 8003adc:	bc09      	pop	{r0, r3}
 8003ade:	6819      	ldr	r1, [r3, #0]
 8003ae0:	6808      	ldr	r0, [r1, #0]
 8003ae2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ae6:	f01e 0f10 	tst.w	lr, #16
 8003aea:	bf08      	it	eq
 8003aec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003af0:	f380 8809 	msr	PSP, r0
 8003af4:	f3bf 8f6f 	isb	sy
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	f3af 8000 	nop.w

08003b00 <pxCurrentTCBConst>:
 8003b00:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003b04:	bf00      	nop
 8003b06:	bf00      	nop

08003b08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8003b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b12:	f383 8811 	msr	BASEPRI, r3
 8003b16:	f3bf 8f6f 	isb	sy
 8003b1a:	f3bf 8f4f 	dsb	sy
 8003b1e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003b20:	f7ff fbd6 	bl	80032d0 <xTaskIncrementTick>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003b2a:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <xPortSysTickHandler+0x3c>)
 8003b2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	2300      	movs	r3, #0
 8003b34:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003b3c:	bf00      	nop
 8003b3e:	3708      	adds	r7, #8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	e000ed04 	.word	0xe000ed04

08003b48 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003b4c:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <vPortSetupTimerInterrupt+0x34>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003b52:	4b0b      	ldr	r3, [pc, #44]	; (8003b80 <vPortSetupTimerInterrupt+0x38>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003b58:	4b0a      	ldr	r3, [pc, #40]	; (8003b84 <vPortSetupTimerInterrupt+0x3c>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a0a      	ldr	r2, [pc, #40]	; (8003b88 <vPortSetupTimerInterrupt+0x40>)
 8003b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b62:	099b      	lsrs	r3, r3, #6
 8003b64:	4a09      	ldr	r2, [pc, #36]	; (8003b8c <vPortSetupTimerInterrupt+0x44>)
 8003b66:	3b01      	subs	r3, #1
 8003b68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003b6a:	4b04      	ldr	r3, [pc, #16]	; (8003b7c <vPortSetupTimerInterrupt+0x34>)
 8003b6c:	2207      	movs	r2, #7
 8003b6e:	601a      	str	r2, [r3, #0]
}
 8003b70:	bf00      	nop
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	e000e010 	.word	0xe000e010
 8003b80:	e000e018 	.word	0xe000e018
 8003b84:	20000000 	.word	0x20000000
 8003b88:	10624dd3 	.word	0x10624dd3
 8003b8c:	e000e014 	.word	0xe000e014

08003b90 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003b90:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003ba0 <vPortEnableVFP+0x10>
 8003b94:	6801      	ldr	r1, [r0, #0]
 8003b96:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003b9a:	6001      	str	r1, [r0, #0]
 8003b9c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003b9e:	bf00      	nop
 8003ba0:	e000ed88 	.word	0xe000ed88

08003ba4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b08a      	sub	sp, #40	; 0x28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003bac:	2300      	movs	r3, #0
 8003bae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003bb0:	f7ff fae4 	bl	800317c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003bb4:	4b57      	ldr	r3, [pc, #348]	; (8003d14 <pvPortMalloc+0x170>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d101      	bne.n	8003bc0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003bbc:	f000 f90c 	bl	8003dd8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003bc0:	4b55      	ldr	r3, [pc, #340]	; (8003d18 <pvPortMalloc+0x174>)
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f040 808c 	bne.w	8003ce6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d01c      	beq.n	8003c0e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003bd4:	2208      	movs	r2, #8
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4413      	add	r3, r2
 8003bda:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f003 0307 	and.w	r3, r3, #7
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d013      	beq.n	8003c0e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f023 0307 	bic.w	r3, r3, #7
 8003bec:	3308      	adds	r3, #8
 8003bee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f003 0307 	and.w	r3, r3, #7
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d009      	beq.n	8003c0e <pvPortMalloc+0x6a>
	__asm volatile
 8003bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfe:	f383 8811 	msr	BASEPRI, r3
 8003c02:	f3bf 8f6f 	isb	sy
 8003c06:	f3bf 8f4f 	dsb	sy
 8003c0a:	617b      	str	r3, [r7, #20]
 8003c0c:	e7fe      	b.n	8003c0c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d068      	beq.n	8003ce6 <pvPortMalloc+0x142>
 8003c14:	4b41      	ldr	r3, [pc, #260]	; (8003d1c <pvPortMalloc+0x178>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d863      	bhi.n	8003ce6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003c1e:	4b40      	ldr	r3, [pc, #256]	; (8003d20 <pvPortMalloc+0x17c>)
 8003c20:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003c22:	4b3f      	ldr	r3, [pc, #252]	; (8003d20 <pvPortMalloc+0x17c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c28:	e004      	b.n	8003c34 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d903      	bls.n	8003c46 <pvPortMalloc+0xa2>
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f1      	bne.n	8003c2a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003c46:	4b33      	ldr	r3, [pc, #204]	; (8003d14 <pvPortMalloc+0x170>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d04a      	beq.n	8003ce6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003c50:	6a3b      	ldr	r3, [r7, #32]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2208      	movs	r2, #8
 8003c56:	4413      	add	r3, r2
 8003c58:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	6a3b      	ldr	r3, [r7, #32]
 8003c60:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	1ad2      	subs	r2, r2, r3
 8003c6a:	2308      	movs	r3, #8
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d91e      	bls.n	8003cb0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4413      	add	r3, r2
 8003c78:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d009      	beq.n	8003c98 <pvPortMalloc+0xf4>
 8003c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c88:	f383 8811 	msr	BASEPRI, r3
 8003c8c:	f3bf 8f6f 	isb	sy
 8003c90:	f3bf 8f4f 	dsb	sy
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	e7fe      	b.n	8003c96 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	1ad2      	subs	r2, r2, r3
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003caa:	69b8      	ldr	r0, [r7, #24]
 8003cac:	f000 f8f6 	bl	8003e9c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003cb0:	4b1a      	ldr	r3, [pc, #104]	; (8003d1c <pvPortMalloc+0x178>)
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	4a18      	ldr	r2, [pc, #96]	; (8003d1c <pvPortMalloc+0x178>)
 8003cbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003cbe:	4b17      	ldr	r3, [pc, #92]	; (8003d1c <pvPortMalloc+0x178>)
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	4b18      	ldr	r3, [pc, #96]	; (8003d24 <pvPortMalloc+0x180>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d203      	bcs.n	8003cd2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003cca:	4b14      	ldr	r3, [pc, #80]	; (8003d1c <pvPortMalloc+0x178>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a15      	ldr	r2, [pc, #84]	; (8003d24 <pvPortMalloc+0x180>)
 8003cd0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	4b10      	ldr	r3, [pc, #64]	; (8003d18 <pvPortMalloc+0x174>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003ce6:	f7ff fa57 	bl	8003198 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	f003 0307 	and.w	r3, r3, #7
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d009      	beq.n	8003d08 <pvPortMalloc+0x164>
 8003cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf8:	f383 8811 	msr	BASEPRI, r3
 8003cfc:	f3bf 8f6f 	isb	sy
 8003d00:	f3bf 8f4f 	dsb	sy
 8003d04:	60fb      	str	r3, [r7, #12]
 8003d06:	e7fe      	b.n	8003d06 <pvPortMalloc+0x162>
	return pvReturn;
 8003d08:	69fb      	ldr	r3, [r7, #28]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3728      	adds	r7, #40	; 0x28
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	20004024 	.word	0x20004024
 8003d18:	20004030 	.word	0x20004030
 8003d1c:	20004028 	.word	0x20004028
 8003d20:	2000401c 	.word	0x2000401c
 8003d24:	2000402c 	.word	0x2000402c

08003d28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d046      	beq.n	8003dc8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003d3a:	2308      	movs	r3, #8
 8003d3c:	425b      	negs	r3, r3
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	4413      	add	r3, r2
 8003d42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	685a      	ldr	r2, [r3, #4]
 8003d4c:	4b20      	ldr	r3, [pc, #128]	; (8003dd0 <vPortFree+0xa8>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4013      	ands	r3, r2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d109      	bne.n	8003d6a <vPortFree+0x42>
 8003d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5a:	f383 8811 	msr	BASEPRI, r3
 8003d5e:	f3bf 8f6f 	isb	sy
 8003d62:	f3bf 8f4f 	dsb	sy
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	e7fe      	b.n	8003d68 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d009      	beq.n	8003d86 <vPortFree+0x5e>
 8003d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d76:	f383 8811 	msr	BASEPRI, r3
 8003d7a:	f3bf 8f6f 	isb	sy
 8003d7e:	f3bf 8f4f 	dsb	sy
 8003d82:	60bb      	str	r3, [r7, #8]
 8003d84:	e7fe      	b.n	8003d84 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	4b11      	ldr	r3, [pc, #68]	; (8003dd0 <vPortFree+0xa8>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d019      	beq.n	8003dc8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d115      	bne.n	8003dc8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <vPortFree+0xa8>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	43db      	mvns	r3, r3
 8003da6:	401a      	ands	r2, r3
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003dac:	f7ff f9e6 	bl	800317c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	4b07      	ldr	r3, [pc, #28]	; (8003dd4 <vPortFree+0xac>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4413      	add	r3, r2
 8003dba:	4a06      	ldr	r2, [pc, #24]	; (8003dd4 <vPortFree+0xac>)
 8003dbc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003dbe:	6938      	ldr	r0, [r7, #16]
 8003dc0:	f000 f86c 	bl	8003e9c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003dc4:	f7ff f9e8 	bl	8003198 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003dc8:	bf00      	nop
 8003dca:	3718      	adds	r7, #24
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	20004030 	.word	0x20004030
 8003dd4:	20004028 	.word	0x20004028

08003dd8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003dde:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003de2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003de4:	4b27      	ldr	r3, [pc, #156]	; (8003e84 <prvHeapInit+0xac>)
 8003de6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00c      	beq.n	8003e0c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	3307      	adds	r3, #7
 8003df6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f023 0307 	bic.w	r3, r3, #7
 8003dfe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	4a1f      	ldr	r2, [pc, #124]	; (8003e84 <prvHeapInit+0xac>)
 8003e08:	4413      	add	r3, r2
 8003e0a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003e10:	4a1d      	ldr	r2, [pc, #116]	; (8003e88 <prvHeapInit+0xb0>)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003e16:	4b1c      	ldr	r3, [pc, #112]	; (8003e88 <prvHeapInit+0xb0>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	4413      	add	r3, r2
 8003e22:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003e24:	2208      	movs	r2, #8
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	1a9b      	subs	r3, r3, r2
 8003e2a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f023 0307 	bic.w	r3, r3, #7
 8003e32:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	4a15      	ldr	r2, [pc, #84]	; (8003e8c <prvHeapInit+0xb4>)
 8003e38:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003e3a:	4b14      	ldr	r3, [pc, #80]	; (8003e8c <prvHeapInit+0xb4>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003e42:	4b12      	ldr	r3, [pc, #72]	; (8003e8c <prvHeapInit+0xb4>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2200      	movs	r2, #0
 8003e48:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	1ad2      	subs	r2, r2, r3
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003e58:	4b0c      	ldr	r3, [pc, #48]	; (8003e8c <prvHeapInit+0xb4>)
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	4a0a      	ldr	r2, [pc, #40]	; (8003e90 <prvHeapInit+0xb8>)
 8003e66:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	4a09      	ldr	r2, [pc, #36]	; (8003e94 <prvHeapInit+0xbc>)
 8003e6e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003e70:	4b09      	ldr	r3, [pc, #36]	; (8003e98 <prvHeapInit+0xc0>)
 8003e72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003e76:	601a      	str	r2, [r3, #0]
}
 8003e78:	bf00      	nop
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	2000041c 	.word	0x2000041c
 8003e88:	2000401c 	.word	0x2000401c
 8003e8c:	20004024 	.word	0x20004024
 8003e90:	2000402c 	.word	0x2000402c
 8003e94:	20004028 	.word	0x20004028
 8003e98:	20004030 	.word	0x20004030

08003e9c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003ea4:	4b28      	ldr	r3, [pc, #160]	; (8003f48 <prvInsertBlockIntoFreeList+0xac>)
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	e002      	b.n	8003eb0 <prvInsertBlockIntoFreeList+0x14>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	60fb      	str	r3, [r7, #12]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d8f7      	bhi.n	8003eaa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d108      	bne.n	8003ede <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	441a      	add	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	441a      	add	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d118      	bne.n	8003f24 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	4b15      	ldr	r3, [pc, #84]	; (8003f4c <prvInsertBlockIntoFreeList+0xb0>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d00d      	beq.n	8003f1a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	441a      	add	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	e008      	b.n	8003f2c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003f1a:	4b0c      	ldr	r3, [pc, #48]	; (8003f4c <prvInsertBlockIntoFreeList+0xb0>)
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	e003      	b.n	8003f2c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d002      	beq.n	8003f3a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f3a:	bf00      	nop
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	2000401c 	.word	0x2000401c
 8003f4c:	20004024 	.word	0x20004024

08003f50 <__errno>:
 8003f50:	4b01      	ldr	r3, [pc, #4]	; (8003f58 <__errno+0x8>)
 8003f52:	6818      	ldr	r0, [r3, #0]
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	20000010 	.word	0x20000010

08003f5c <__libc_init_array>:
 8003f5c:	b570      	push	{r4, r5, r6, lr}
 8003f5e:	4e0d      	ldr	r6, [pc, #52]	; (8003f94 <__libc_init_array+0x38>)
 8003f60:	4c0d      	ldr	r4, [pc, #52]	; (8003f98 <__libc_init_array+0x3c>)
 8003f62:	1ba4      	subs	r4, r4, r6
 8003f64:	10a4      	asrs	r4, r4, #2
 8003f66:	2500      	movs	r5, #0
 8003f68:	42a5      	cmp	r5, r4
 8003f6a:	d109      	bne.n	8003f80 <__libc_init_array+0x24>
 8003f6c:	4e0b      	ldr	r6, [pc, #44]	; (8003f9c <__libc_init_array+0x40>)
 8003f6e:	4c0c      	ldr	r4, [pc, #48]	; (8003fa0 <__libc_init_array+0x44>)
 8003f70:	f000 fbca 	bl	8004708 <_init>
 8003f74:	1ba4      	subs	r4, r4, r6
 8003f76:	10a4      	asrs	r4, r4, #2
 8003f78:	2500      	movs	r5, #0
 8003f7a:	42a5      	cmp	r5, r4
 8003f7c:	d105      	bne.n	8003f8a <__libc_init_array+0x2e>
 8003f7e:	bd70      	pop	{r4, r5, r6, pc}
 8003f80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f84:	4798      	blx	r3
 8003f86:	3501      	adds	r5, #1
 8003f88:	e7ee      	b.n	8003f68 <__libc_init_array+0xc>
 8003f8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f8e:	4798      	blx	r3
 8003f90:	3501      	adds	r5, #1
 8003f92:	e7f2      	b.n	8003f7a <__libc_init_array+0x1e>
 8003f94:	080047d4 	.word	0x080047d4
 8003f98:	080047d4 	.word	0x080047d4
 8003f9c:	080047d4 	.word	0x080047d4
 8003fa0:	080047d8 	.word	0x080047d8

08003fa4 <memset>:
 8003fa4:	4402      	add	r2, r0
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d100      	bne.n	8003fae <memset+0xa>
 8003fac:	4770      	bx	lr
 8003fae:	f803 1b01 	strb.w	r1, [r3], #1
 8003fb2:	e7f9      	b.n	8003fa8 <memset+0x4>

08003fb4 <setvbuf>:
 8003fb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003fb8:	461d      	mov	r5, r3
 8003fba:	4b51      	ldr	r3, [pc, #324]	; (8004100 <setvbuf+0x14c>)
 8003fbc:	681e      	ldr	r6, [r3, #0]
 8003fbe:	4604      	mov	r4, r0
 8003fc0:	460f      	mov	r7, r1
 8003fc2:	4690      	mov	r8, r2
 8003fc4:	b126      	cbz	r6, 8003fd0 <setvbuf+0x1c>
 8003fc6:	69b3      	ldr	r3, [r6, #24]
 8003fc8:	b913      	cbnz	r3, 8003fd0 <setvbuf+0x1c>
 8003fca:	4630      	mov	r0, r6
 8003fcc:	f000 f990 	bl	80042f0 <__sinit>
 8003fd0:	4b4c      	ldr	r3, [pc, #304]	; (8004104 <setvbuf+0x150>)
 8003fd2:	429c      	cmp	r4, r3
 8003fd4:	d152      	bne.n	800407c <setvbuf+0xc8>
 8003fd6:	6874      	ldr	r4, [r6, #4]
 8003fd8:	f1b8 0f02 	cmp.w	r8, #2
 8003fdc:	d006      	beq.n	8003fec <setvbuf+0x38>
 8003fde:	f1b8 0f01 	cmp.w	r8, #1
 8003fe2:	f200 8089 	bhi.w	80040f8 <setvbuf+0x144>
 8003fe6:	2d00      	cmp	r5, #0
 8003fe8:	f2c0 8086 	blt.w	80040f8 <setvbuf+0x144>
 8003fec:	4621      	mov	r1, r4
 8003fee:	4630      	mov	r0, r6
 8003ff0:	f000 f914 	bl	800421c <_fflush_r>
 8003ff4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ff6:	b141      	cbz	r1, 800400a <setvbuf+0x56>
 8003ff8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ffc:	4299      	cmp	r1, r3
 8003ffe:	d002      	beq.n	8004006 <setvbuf+0x52>
 8004000:	4630      	mov	r0, r6
 8004002:	f000 fa2b 	bl	800445c <_free_r>
 8004006:	2300      	movs	r3, #0
 8004008:	6363      	str	r3, [r4, #52]	; 0x34
 800400a:	2300      	movs	r3, #0
 800400c:	61a3      	str	r3, [r4, #24]
 800400e:	6063      	str	r3, [r4, #4]
 8004010:	89a3      	ldrh	r3, [r4, #12]
 8004012:	061b      	lsls	r3, r3, #24
 8004014:	d503      	bpl.n	800401e <setvbuf+0x6a>
 8004016:	6921      	ldr	r1, [r4, #16]
 8004018:	4630      	mov	r0, r6
 800401a:	f000 fa1f 	bl	800445c <_free_r>
 800401e:	89a3      	ldrh	r3, [r4, #12]
 8004020:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004024:	f023 0303 	bic.w	r3, r3, #3
 8004028:	f1b8 0f02 	cmp.w	r8, #2
 800402c:	81a3      	strh	r3, [r4, #12]
 800402e:	d05d      	beq.n	80040ec <setvbuf+0x138>
 8004030:	ab01      	add	r3, sp, #4
 8004032:	466a      	mov	r2, sp
 8004034:	4621      	mov	r1, r4
 8004036:	4630      	mov	r0, r6
 8004038:	f000 f9e4 	bl	8004404 <__swhatbuf_r>
 800403c:	89a3      	ldrh	r3, [r4, #12]
 800403e:	4318      	orrs	r0, r3
 8004040:	81a0      	strh	r0, [r4, #12]
 8004042:	bb2d      	cbnz	r5, 8004090 <setvbuf+0xdc>
 8004044:	9d00      	ldr	r5, [sp, #0]
 8004046:	4628      	mov	r0, r5
 8004048:	f000 fa00 	bl	800444c <malloc>
 800404c:	4607      	mov	r7, r0
 800404e:	2800      	cmp	r0, #0
 8004050:	d14e      	bne.n	80040f0 <setvbuf+0x13c>
 8004052:	f8dd 9000 	ldr.w	r9, [sp]
 8004056:	45a9      	cmp	r9, r5
 8004058:	d13c      	bne.n	80040d4 <setvbuf+0x120>
 800405a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800405e:	89a3      	ldrh	r3, [r4, #12]
 8004060:	f043 0302 	orr.w	r3, r3, #2
 8004064:	81a3      	strh	r3, [r4, #12]
 8004066:	2300      	movs	r3, #0
 8004068:	60a3      	str	r3, [r4, #8]
 800406a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800406e:	6023      	str	r3, [r4, #0]
 8004070:	6123      	str	r3, [r4, #16]
 8004072:	2301      	movs	r3, #1
 8004074:	6163      	str	r3, [r4, #20]
 8004076:	b003      	add	sp, #12
 8004078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800407c:	4b22      	ldr	r3, [pc, #136]	; (8004108 <setvbuf+0x154>)
 800407e:	429c      	cmp	r4, r3
 8004080:	d101      	bne.n	8004086 <setvbuf+0xd2>
 8004082:	68b4      	ldr	r4, [r6, #8]
 8004084:	e7a8      	b.n	8003fd8 <setvbuf+0x24>
 8004086:	4b21      	ldr	r3, [pc, #132]	; (800410c <setvbuf+0x158>)
 8004088:	429c      	cmp	r4, r3
 800408a:	bf08      	it	eq
 800408c:	68f4      	ldreq	r4, [r6, #12]
 800408e:	e7a3      	b.n	8003fd8 <setvbuf+0x24>
 8004090:	2f00      	cmp	r7, #0
 8004092:	d0d8      	beq.n	8004046 <setvbuf+0x92>
 8004094:	69b3      	ldr	r3, [r6, #24]
 8004096:	b913      	cbnz	r3, 800409e <setvbuf+0xea>
 8004098:	4630      	mov	r0, r6
 800409a:	f000 f929 	bl	80042f0 <__sinit>
 800409e:	f1b8 0f01 	cmp.w	r8, #1
 80040a2:	bf08      	it	eq
 80040a4:	89a3      	ldrheq	r3, [r4, #12]
 80040a6:	6027      	str	r7, [r4, #0]
 80040a8:	bf04      	itt	eq
 80040aa:	f043 0301 	orreq.w	r3, r3, #1
 80040ae:	81a3      	strheq	r3, [r4, #12]
 80040b0:	89a3      	ldrh	r3, [r4, #12]
 80040b2:	f013 0008 	ands.w	r0, r3, #8
 80040b6:	e9c4 7504 	strd	r7, r5, [r4, #16]
 80040ba:	d01b      	beq.n	80040f4 <setvbuf+0x140>
 80040bc:	f013 0001 	ands.w	r0, r3, #1
 80040c0:	bf18      	it	ne
 80040c2:	426d      	negne	r5, r5
 80040c4:	f04f 0300 	mov.w	r3, #0
 80040c8:	bf1d      	ittte	ne
 80040ca:	60a3      	strne	r3, [r4, #8]
 80040cc:	61a5      	strne	r5, [r4, #24]
 80040ce:	4618      	movne	r0, r3
 80040d0:	60a5      	streq	r5, [r4, #8]
 80040d2:	e7d0      	b.n	8004076 <setvbuf+0xc2>
 80040d4:	4648      	mov	r0, r9
 80040d6:	f000 f9b9 	bl	800444c <malloc>
 80040da:	4607      	mov	r7, r0
 80040dc:	2800      	cmp	r0, #0
 80040de:	d0bc      	beq.n	800405a <setvbuf+0xa6>
 80040e0:	89a3      	ldrh	r3, [r4, #12]
 80040e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040e6:	81a3      	strh	r3, [r4, #12]
 80040e8:	464d      	mov	r5, r9
 80040ea:	e7d3      	b.n	8004094 <setvbuf+0xe0>
 80040ec:	2000      	movs	r0, #0
 80040ee:	e7b6      	b.n	800405e <setvbuf+0xaa>
 80040f0:	46a9      	mov	r9, r5
 80040f2:	e7f5      	b.n	80040e0 <setvbuf+0x12c>
 80040f4:	60a0      	str	r0, [r4, #8]
 80040f6:	e7be      	b.n	8004076 <setvbuf+0xc2>
 80040f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040fc:	e7bb      	b.n	8004076 <setvbuf+0xc2>
 80040fe:	bf00      	nop
 8004100:	20000010 	.word	0x20000010
 8004104:	0800478c 	.word	0x0800478c
 8004108:	080047ac 	.word	0x080047ac
 800410c:	0800476c 	.word	0x0800476c

08004110 <__sflush_r>:
 8004110:	898a      	ldrh	r2, [r1, #12]
 8004112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004116:	4605      	mov	r5, r0
 8004118:	0710      	lsls	r0, r2, #28
 800411a:	460c      	mov	r4, r1
 800411c:	d458      	bmi.n	80041d0 <__sflush_r+0xc0>
 800411e:	684b      	ldr	r3, [r1, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	dc05      	bgt.n	8004130 <__sflush_r+0x20>
 8004124:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004126:	2b00      	cmp	r3, #0
 8004128:	dc02      	bgt.n	8004130 <__sflush_r+0x20>
 800412a:	2000      	movs	r0, #0
 800412c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004130:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004132:	2e00      	cmp	r6, #0
 8004134:	d0f9      	beq.n	800412a <__sflush_r+0x1a>
 8004136:	2300      	movs	r3, #0
 8004138:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800413c:	682f      	ldr	r7, [r5, #0]
 800413e:	6a21      	ldr	r1, [r4, #32]
 8004140:	602b      	str	r3, [r5, #0]
 8004142:	d032      	beq.n	80041aa <__sflush_r+0x9a>
 8004144:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004146:	89a3      	ldrh	r3, [r4, #12]
 8004148:	075a      	lsls	r2, r3, #29
 800414a:	d505      	bpl.n	8004158 <__sflush_r+0x48>
 800414c:	6863      	ldr	r3, [r4, #4]
 800414e:	1ac0      	subs	r0, r0, r3
 8004150:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004152:	b10b      	cbz	r3, 8004158 <__sflush_r+0x48>
 8004154:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004156:	1ac0      	subs	r0, r0, r3
 8004158:	2300      	movs	r3, #0
 800415a:	4602      	mov	r2, r0
 800415c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800415e:	6a21      	ldr	r1, [r4, #32]
 8004160:	4628      	mov	r0, r5
 8004162:	47b0      	blx	r6
 8004164:	1c43      	adds	r3, r0, #1
 8004166:	89a3      	ldrh	r3, [r4, #12]
 8004168:	d106      	bne.n	8004178 <__sflush_r+0x68>
 800416a:	6829      	ldr	r1, [r5, #0]
 800416c:	291d      	cmp	r1, #29
 800416e:	d848      	bhi.n	8004202 <__sflush_r+0xf2>
 8004170:	4a29      	ldr	r2, [pc, #164]	; (8004218 <__sflush_r+0x108>)
 8004172:	40ca      	lsrs	r2, r1
 8004174:	07d6      	lsls	r6, r2, #31
 8004176:	d544      	bpl.n	8004202 <__sflush_r+0xf2>
 8004178:	2200      	movs	r2, #0
 800417a:	6062      	str	r2, [r4, #4]
 800417c:	04d9      	lsls	r1, r3, #19
 800417e:	6922      	ldr	r2, [r4, #16]
 8004180:	6022      	str	r2, [r4, #0]
 8004182:	d504      	bpl.n	800418e <__sflush_r+0x7e>
 8004184:	1c42      	adds	r2, r0, #1
 8004186:	d101      	bne.n	800418c <__sflush_r+0x7c>
 8004188:	682b      	ldr	r3, [r5, #0]
 800418a:	b903      	cbnz	r3, 800418e <__sflush_r+0x7e>
 800418c:	6560      	str	r0, [r4, #84]	; 0x54
 800418e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004190:	602f      	str	r7, [r5, #0]
 8004192:	2900      	cmp	r1, #0
 8004194:	d0c9      	beq.n	800412a <__sflush_r+0x1a>
 8004196:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800419a:	4299      	cmp	r1, r3
 800419c:	d002      	beq.n	80041a4 <__sflush_r+0x94>
 800419e:	4628      	mov	r0, r5
 80041a0:	f000 f95c 	bl	800445c <_free_r>
 80041a4:	2000      	movs	r0, #0
 80041a6:	6360      	str	r0, [r4, #52]	; 0x34
 80041a8:	e7c0      	b.n	800412c <__sflush_r+0x1c>
 80041aa:	2301      	movs	r3, #1
 80041ac:	4628      	mov	r0, r5
 80041ae:	47b0      	blx	r6
 80041b0:	1c41      	adds	r1, r0, #1
 80041b2:	d1c8      	bne.n	8004146 <__sflush_r+0x36>
 80041b4:	682b      	ldr	r3, [r5, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d0c5      	beq.n	8004146 <__sflush_r+0x36>
 80041ba:	2b1d      	cmp	r3, #29
 80041bc:	d001      	beq.n	80041c2 <__sflush_r+0xb2>
 80041be:	2b16      	cmp	r3, #22
 80041c0:	d101      	bne.n	80041c6 <__sflush_r+0xb6>
 80041c2:	602f      	str	r7, [r5, #0]
 80041c4:	e7b1      	b.n	800412a <__sflush_r+0x1a>
 80041c6:	89a3      	ldrh	r3, [r4, #12]
 80041c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041cc:	81a3      	strh	r3, [r4, #12]
 80041ce:	e7ad      	b.n	800412c <__sflush_r+0x1c>
 80041d0:	690f      	ldr	r7, [r1, #16]
 80041d2:	2f00      	cmp	r7, #0
 80041d4:	d0a9      	beq.n	800412a <__sflush_r+0x1a>
 80041d6:	0793      	lsls	r3, r2, #30
 80041d8:	680e      	ldr	r6, [r1, #0]
 80041da:	bf08      	it	eq
 80041dc:	694b      	ldreq	r3, [r1, #20]
 80041de:	600f      	str	r7, [r1, #0]
 80041e0:	bf18      	it	ne
 80041e2:	2300      	movne	r3, #0
 80041e4:	eba6 0807 	sub.w	r8, r6, r7
 80041e8:	608b      	str	r3, [r1, #8]
 80041ea:	f1b8 0f00 	cmp.w	r8, #0
 80041ee:	dd9c      	ble.n	800412a <__sflush_r+0x1a>
 80041f0:	4643      	mov	r3, r8
 80041f2:	463a      	mov	r2, r7
 80041f4:	6a21      	ldr	r1, [r4, #32]
 80041f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80041f8:	4628      	mov	r0, r5
 80041fa:	47b0      	blx	r6
 80041fc:	2800      	cmp	r0, #0
 80041fe:	dc06      	bgt.n	800420e <__sflush_r+0xfe>
 8004200:	89a3      	ldrh	r3, [r4, #12]
 8004202:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004206:	81a3      	strh	r3, [r4, #12]
 8004208:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800420c:	e78e      	b.n	800412c <__sflush_r+0x1c>
 800420e:	4407      	add	r7, r0
 8004210:	eba8 0800 	sub.w	r8, r8, r0
 8004214:	e7e9      	b.n	80041ea <__sflush_r+0xda>
 8004216:	bf00      	nop
 8004218:	20400001 	.word	0x20400001

0800421c <_fflush_r>:
 800421c:	b538      	push	{r3, r4, r5, lr}
 800421e:	690b      	ldr	r3, [r1, #16]
 8004220:	4605      	mov	r5, r0
 8004222:	460c      	mov	r4, r1
 8004224:	b1db      	cbz	r3, 800425e <_fflush_r+0x42>
 8004226:	b118      	cbz	r0, 8004230 <_fflush_r+0x14>
 8004228:	6983      	ldr	r3, [r0, #24]
 800422a:	b90b      	cbnz	r3, 8004230 <_fflush_r+0x14>
 800422c:	f000 f860 	bl	80042f0 <__sinit>
 8004230:	4b0c      	ldr	r3, [pc, #48]	; (8004264 <_fflush_r+0x48>)
 8004232:	429c      	cmp	r4, r3
 8004234:	d109      	bne.n	800424a <_fflush_r+0x2e>
 8004236:	686c      	ldr	r4, [r5, #4]
 8004238:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800423c:	b17b      	cbz	r3, 800425e <_fflush_r+0x42>
 800423e:	4621      	mov	r1, r4
 8004240:	4628      	mov	r0, r5
 8004242:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004246:	f7ff bf63 	b.w	8004110 <__sflush_r>
 800424a:	4b07      	ldr	r3, [pc, #28]	; (8004268 <_fflush_r+0x4c>)
 800424c:	429c      	cmp	r4, r3
 800424e:	d101      	bne.n	8004254 <_fflush_r+0x38>
 8004250:	68ac      	ldr	r4, [r5, #8]
 8004252:	e7f1      	b.n	8004238 <_fflush_r+0x1c>
 8004254:	4b05      	ldr	r3, [pc, #20]	; (800426c <_fflush_r+0x50>)
 8004256:	429c      	cmp	r4, r3
 8004258:	bf08      	it	eq
 800425a:	68ec      	ldreq	r4, [r5, #12]
 800425c:	e7ec      	b.n	8004238 <_fflush_r+0x1c>
 800425e:	2000      	movs	r0, #0
 8004260:	bd38      	pop	{r3, r4, r5, pc}
 8004262:	bf00      	nop
 8004264:	0800478c 	.word	0x0800478c
 8004268:	080047ac 	.word	0x080047ac
 800426c:	0800476c 	.word	0x0800476c

08004270 <std>:
 8004270:	2300      	movs	r3, #0
 8004272:	b510      	push	{r4, lr}
 8004274:	4604      	mov	r4, r0
 8004276:	e9c0 3300 	strd	r3, r3, [r0]
 800427a:	6083      	str	r3, [r0, #8]
 800427c:	8181      	strh	r1, [r0, #12]
 800427e:	6643      	str	r3, [r0, #100]	; 0x64
 8004280:	81c2      	strh	r2, [r0, #14]
 8004282:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004286:	6183      	str	r3, [r0, #24]
 8004288:	4619      	mov	r1, r3
 800428a:	2208      	movs	r2, #8
 800428c:	305c      	adds	r0, #92	; 0x5c
 800428e:	f7ff fe89 	bl	8003fa4 <memset>
 8004292:	4b05      	ldr	r3, [pc, #20]	; (80042a8 <std+0x38>)
 8004294:	6263      	str	r3, [r4, #36]	; 0x24
 8004296:	4b05      	ldr	r3, [pc, #20]	; (80042ac <std+0x3c>)
 8004298:	62a3      	str	r3, [r4, #40]	; 0x28
 800429a:	4b05      	ldr	r3, [pc, #20]	; (80042b0 <std+0x40>)
 800429c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800429e:	4b05      	ldr	r3, [pc, #20]	; (80042b4 <std+0x44>)
 80042a0:	6224      	str	r4, [r4, #32]
 80042a2:	6323      	str	r3, [r4, #48]	; 0x30
 80042a4:	bd10      	pop	{r4, pc}
 80042a6:	bf00      	nop
 80042a8:	080045cd 	.word	0x080045cd
 80042ac:	080045ef 	.word	0x080045ef
 80042b0:	08004627 	.word	0x08004627
 80042b4:	0800464b 	.word	0x0800464b

080042b8 <_cleanup_r>:
 80042b8:	4901      	ldr	r1, [pc, #4]	; (80042c0 <_cleanup_r+0x8>)
 80042ba:	f000 b885 	b.w	80043c8 <_fwalk_reent>
 80042be:	bf00      	nop
 80042c0:	0800421d 	.word	0x0800421d

080042c4 <__sfmoreglue>:
 80042c4:	b570      	push	{r4, r5, r6, lr}
 80042c6:	1e4a      	subs	r2, r1, #1
 80042c8:	2568      	movs	r5, #104	; 0x68
 80042ca:	4355      	muls	r5, r2
 80042cc:	460e      	mov	r6, r1
 80042ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80042d2:	f000 f911 	bl	80044f8 <_malloc_r>
 80042d6:	4604      	mov	r4, r0
 80042d8:	b140      	cbz	r0, 80042ec <__sfmoreglue+0x28>
 80042da:	2100      	movs	r1, #0
 80042dc:	e9c0 1600 	strd	r1, r6, [r0]
 80042e0:	300c      	adds	r0, #12
 80042e2:	60a0      	str	r0, [r4, #8]
 80042e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80042e8:	f7ff fe5c 	bl	8003fa4 <memset>
 80042ec:	4620      	mov	r0, r4
 80042ee:	bd70      	pop	{r4, r5, r6, pc}

080042f0 <__sinit>:
 80042f0:	6983      	ldr	r3, [r0, #24]
 80042f2:	b510      	push	{r4, lr}
 80042f4:	4604      	mov	r4, r0
 80042f6:	bb33      	cbnz	r3, 8004346 <__sinit+0x56>
 80042f8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80042fc:	6503      	str	r3, [r0, #80]	; 0x50
 80042fe:	4b12      	ldr	r3, [pc, #72]	; (8004348 <__sinit+0x58>)
 8004300:	4a12      	ldr	r2, [pc, #72]	; (800434c <__sinit+0x5c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6282      	str	r2, [r0, #40]	; 0x28
 8004306:	4298      	cmp	r0, r3
 8004308:	bf04      	itt	eq
 800430a:	2301      	moveq	r3, #1
 800430c:	6183      	streq	r3, [r0, #24]
 800430e:	f000 f81f 	bl	8004350 <__sfp>
 8004312:	6060      	str	r0, [r4, #4]
 8004314:	4620      	mov	r0, r4
 8004316:	f000 f81b 	bl	8004350 <__sfp>
 800431a:	60a0      	str	r0, [r4, #8]
 800431c:	4620      	mov	r0, r4
 800431e:	f000 f817 	bl	8004350 <__sfp>
 8004322:	2200      	movs	r2, #0
 8004324:	60e0      	str	r0, [r4, #12]
 8004326:	2104      	movs	r1, #4
 8004328:	6860      	ldr	r0, [r4, #4]
 800432a:	f7ff ffa1 	bl	8004270 <std>
 800432e:	2201      	movs	r2, #1
 8004330:	2109      	movs	r1, #9
 8004332:	68a0      	ldr	r0, [r4, #8]
 8004334:	f7ff ff9c 	bl	8004270 <std>
 8004338:	2202      	movs	r2, #2
 800433a:	2112      	movs	r1, #18
 800433c:	68e0      	ldr	r0, [r4, #12]
 800433e:	f7ff ff97 	bl	8004270 <std>
 8004342:	2301      	movs	r3, #1
 8004344:	61a3      	str	r3, [r4, #24]
 8004346:	bd10      	pop	{r4, pc}
 8004348:	08004768 	.word	0x08004768
 800434c:	080042b9 	.word	0x080042b9

08004350 <__sfp>:
 8004350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004352:	4b1b      	ldr	r3, [pc, #108]	; (80043c0 <__sfp+0x70>)
 8004354:	681e      	ldr	r6, [r3, #0]
 8004356:	69b3      	ldr	r3, [r6, #24]
 8004358:	4607      	mov	r7, r0
 800435a:	b913      	cbnz	r3, 8004362 <__sfp+0x12>
 800435c:	4630      	mov	r0, r6
 800435e:	f7ff ffc7 	bl	80042f0 <__sinit>
 8004362:	3648      	adds	r6, #72	; 0x48
 8004364:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004368:	3b01      	subs	r3, #1
 800436a:	d503      	bpl.n	8004374 <__sfp+0x24>
 800436c:	6833      	ldr	r3, [r6, #0]
 800436e:	b133      	cbz	r3, 800437e <__sfp+0x2e>
 8004370:	6836      	ldr	r6, [r6, #0]
 8004372:	e7f7      	b.n	8004364 <__sfp+0x14>
 8004374:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004378:	b16d      	cbz	r5, 8004396 <__sfp+0x46>
 800437a:	3468      	adds	r4, #104	; 0x68
 800437c:	e7f4      	b.n	8004368 <__sfp+0x18>
 800437e:	2104      	movs	r1, #4
 8004380:	4638      	mov	r0, r7
 8004382:	f7ff ff9f 	bl	80042c4 <__sfmoreglue>
 8004386:	6030      	str	r0, [r6, #0]
 8004388:	2800      	cmp	r0, #0
 800438a:	d1f1      	bne.n	8004370 <__sfp+0x20>
 800438c:	230c      	movs	r3, #12
 800438e:	603b      	str	r3, [r7, #0]
 8004390:	4604      	mov	r4, r0
 8004392:	4620      	mov	r0, r4
 8004394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004396:	4b0b      	ldr	r3, [pc, #44]	; (80043c4 <__sfp+0x74>)
 8004398:	6665      	str	r5, [r4, #100]	; 0x64
 800439a:	e9c4 5500 	strd	r5, r5, [r4]
 800439e:	60a5      	str	r5, [r4, #8]
 80043a0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80043a4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80043a8:	2208      	movs	r2, #8
 80043aa:	4629      	mov	r1, r5
 80043ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80043b0:	f7ff fdf8 	bl	8003fa4 <memset>
 80043b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80043b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80043bc:	e7e9      	b.n	8004392 <__sfp+0x42>
 80043be:	bf00      	nop
 80043c0:	08004768 	.word	0x08004768
 80043c4:	ffff0001 	.word	0xffff0001

080043c8 <_fwalk_reent>:
 80043c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043cc:	4680      	mov	r8, r0
 80043ce:	4689      	mov	r9, r1
 80043d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80043d4:	2600      	movs	r6, #0
 80043d6:	b914      	cbnz	r4, 80043de <_fwalk_reent+0x16>
 80043d8:	4630      	mov	r0, r6
 80043da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043de:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80043e2:	3f01      	subs	r7, #1
 80043e4:	d501      	bpl.n	80043ea <_fwalk_reent+0x22>
 80043e6:	6824      	ldr	r4, [r4, #0]
 80043e8:	e7f5      	b.n	80043d6 <_fwalk_reent+0xe>
 80043ea:	89ab      	ldrh	r3, [r5, #12]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d907      	bls.n	8004400 <_fwalk_reent+0x38>
 80043f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80043f4:	3301      	adds	r3, #1
 80043f6:	d003      	beq.n	8004400 <_fwalk_reent+0x38>
 80043f8:	4629      	mov	r1, r5
 80043fa:	4640      	mov	r0, r8
 80043fc:	47c8      	blx	r9
 80043fe:	4306      	orrs	r6, r0
 8004400:	3568      	adds	r5, #104	; 0x68
 8004402:	e7ee      	b.n	80043e2 <_fwalk_reent+0x1a>

08004404 <__swhatbuf_r>:
 8004404:	b570      	push	{r4, r5, r6, lr}
 8004406:	460e      	mov	r6, r1
 8004408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800440c:	2900      	cmp	r1, #0
 800440e:	b096      	sub	sp, #88	; 0x58
 8004410:	4614      	mov	r4, r2
 8004412:	461d      	mov	r5, r3
 8004414:	da07      	bge.n	8004426 <__swhatbuf_r+0x22>
 8004416:	2300      	movs	r3, #0
 8004418:	602b      	str	r3, [r5, #0]
 800441a:	89b3      	ldrh	r3, [r6, #12]
 800441c:	061a      	lsls	r2, r3, #24
 800441e:	d410      	bmi.n	8004442 <__swhatbuf_r+0x3e>
 8004420:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004424:	e00e      	b.n	8004444 <__swhatbuf_r+0x40>
 8004426:	466a      	mov	r2, sp
 8004428:	f000 f936 	bl	8004698 <_fstat_r>
 800442c:	2800      	cmp	r0, #0
 800442e:	dbf2      	blt.n	8004416 <__swhatbuf_r+0x12>
 8004430:	9a01      	ldr	r2, [sp, #4]
 8004432:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004436:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800443a:	425a      	negs	r2, r3
 800443c:	415a      	adcs	r2, r3
 800443e:	602a      	str	r2, [r5, #0]
 8004440:	e7ee      	b.n	8004420 <__swhatbuf_r+0x1c>
 8004442:	2340      	movs	r3, #64	; 0x40
 8004444:	2000      	movs	r0, #0
 8004446:	6023      	str	r3, [r4, #0]
 8004448:	b016      	add	sp, #88	; 0x58
 800444a:	bd70      	pop	{r4, r5, r6, pc}

0800444c <malloc>:
 800444c:	4b02      	ldr	r3, [pc, #8]	; (8004458 <malloc+0xc>)
 800444e:	4601      	mov	r1, r0
 8004450:	6818      	ldr	r0, [r3, #0]
 8004452:	f000 b851 	b.w	80044f8 <_malloc_r>
 8004456:	bf00      	nop
 8004458:	20000010 	.word	0x20000010

0800445c <_free_r>:
 800445c:	b538      	push	{r3, r4, r5, lr}
 800445e:	4605      	mov	r5, r0
 8004460:	2900      	cmp	r1, #0
 8004462:	d045      	beq.n	80044f0 <_free_r+0x94>
 8004464:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004468:	1f0c      	subs	r4, r1, #4
 800446a:	2b00      	cmp	r3, #0
 800446c:	bfb8      	it	lt
 800446e:	18e4      	addlt	r4, r4, r3
 8004470:	f000 f936 	bl	80046e0 <__malloc_lock>
 8004474:	4a1f      	ldr	r2, [pc, #124]	; (80044f4 <_free_r+0x98>)
 8004476:	6813      	ldr	r3, [r2, #0]
 8004478:	4610      	mov	r0, r2
 800447a:	b933      	cbnz	r3, 800448a <_free_r+0x2e>
 800447c:	6063      	str	r3, [r4, #4]
 800447e:	6014      	str	r4, [r2, #0]
 8004480:	4628      	mov	r0, r5
 8004482:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004486:	f000 b92c 	b.w	80046e2 <__malloc_unlock>
 800448a:	42a3      	cmp	r3, r4
 800448c:	d90c      	bls.n	80044a8 <_free_r+0x4c>
 800448e:	6821      	ldr	r1, [r4, #0]
 8004490:	1862      	adds	r2, r4, r1
 8004492:	4293      	cmp	r3, r2
 8004494:	bf04      	itt	eq
 8004496:	681a      	ldreq	r2, [r3, #0]
 8004498:	685b      	ldreq	r3, [r3, #4]
 800449a:	6063      	str	r3, [r4, #4]
 800449c:	bf04      	itt	eq
 800449e:	1852      	addeq	r2, r2, r1
 80044a0:	6022      	streq	r2, [r4, #0]
 80044a2:	6004      	str	r4, [r0, #0]
 80044a4:	e7ec      	b.n	8004480 <_free_r+0x24>
 80044a6:	4613      	mov	r3, r2
 80044a8:	685a      	ldr	r2, [r3, #4]
 80044aa:	b10a      	cbz	r2, 80044b0 <_free_r+0x54>
 80044ac:	42a2      	cmp	r2, r4
 80044ae:	d9fa      	bls.n	80044a6 <_free_r+0x4a>
 80044b0:	6819      	ldr	r1, [r3, #0]
 80044b2:	1858      	adds	r0, r3, r1
 80044b4:	42a0      	cmp	r0, r4
 80044b6:	d10b      	bne.n	80044d0 <_free_r+0x74>
 80044b8:	6820      	ldr	r0, [r4, #0]
 80044ba:	4401      	add	r1, r0
 80044bc:	1858      	adds	r0, r3, r1
 80044be:	4282      	cmp	r2, r0
 80044c0:	6019      	str	r1, [r3, #0]
 80044c2:	d1dd      	bne.n	8004480 <_free_r+0x24>
 80044c4:	6810      	ldr	r0, [r2, #0]
 80044c6:	6852      	ldr	r2, [r2, #4]
 80044c8:	605a      	str	r2, [r3, #4]
 80044ca:	4401      	add	r1, r0
 80044cc:	6019      	str	r1, [r3, #0]
 80044ce:	e7d7      	b.n	8004480 <_free_r+0x24>
 80044d0:	d902      	bls.n	80044d8 <_free_r+0x7c>
 80044d2:	230c      	movs	r3, #12
 80044d4:	602b      	str	r3, [r5, #0]
 80044d6:	e7d3      	b.n	8004480 <_free_r+0x24>
 80044d8:	6820      	ldr	r0, [r4, #0]
 80044da:	1821      	adds	r1, r4, r0
 80044dc:	428a      	cmp	r2, r1
 80044de:	bf04      	itt	eq
 80044e0:	6811      	ldreq	r1, [r2, #0]
 80044e2:	6852      	ldreq	r2, [r2, #4]
 80044e4:	6062      	str	r2, [r4, #4]
 80044e6:	bf04      	itt	eq
 80044e8:	1809      	addeq	r1, r1, r0
 80044ea:	6021      	streq	r1, [r4, #0]
 80044ec:	605c      	str	r4, [r3, #4]
 80044ee:	e7c7      	b.n	8004480 <_free_r+0x24>
 80044f0:	bd38      	pop	{r3, r4, r5, pc}
 80044f2:	bf00      	nop
 80044f4:	20004034 	.word	0x20004034

080044f8 <_malloc_r>:
 80044f8:	b570      	push	{r4, r5, r6, lr}
 80044fa:	1ccd      	adds	r5, r1, #3
 80044fc:	f025 0503 	bic.w	r5, r5, #3
 8004500:	3508      	adds	r5, #8
 8004502:	2d0c      	cmp	r5, #12
 8004504:	bf38      	it	cc
 8004506:	250c      	movcc	r5, #12
 8004508:	2d00      	cmp	r5, #0
 800450a:	4606      	mov	r6, r0
 800450c:	db01      	blt.n	8004512 <_malloc_r+0x1a>
 800450e:	42a9      	cmp	r1, r5
 8004510:	d903      	bls.n	800451a <_malloc_r+0x22>
 8004512:	230c      	movs	r3, #12
 8004514:	6033      	str	r3, [r6, #0]
 8004516:	2000      	movs	r0, #0
 8004518:	bd70      	pop	{r4, r5, r6, pc}
 800451a:	f000 f8e1 	bl	80046e0 <__malloc_lock>
 800451e:	4a21      	ldr	r2, [pc, #132]	; (80045a4 <_malloc_r+0xac>)
 8004520:	6814      	ldr	r4, [r2, #0]
 8004522:	4621      	mov	r1, r4
 8004524:	b991      	cbnz	r1, 800454c <_malloc_r+0x54>
 8004526:	4c20      	ldr	r4, [pc, #128]	; (80045a8 <_malloc_r+0xb0>)
 8004528:	6823      	ldr	r3, [r4, #0]
 800452a:	b91b      	cbnz	r3, 8004534 <_malloc_r+0x3c>
 800452c:	4630      	mov	r0, r6
 800452e:	f000 f83d 	bl	80045ac <_sbrk_r>
 8004532:	6020      	str	r0, [r4, #0]
 8004534:	4629      	mov	r1, r5
 8004536:	4630      	mov	r0, r6
 8004538:	f000 f838 	bl	80045ac <_sbrk_r>
 800453c:	1c43      	adds	r3, r0, #1
 800453e:	d124      	bne.n	800458a <_malloc_r+0x92>
 8004540:	230c      	movs	r3, #12
 8004542:	6033      	str	r3, [r6, #0]
 8004544:	4630      	mov	r0, r6
 8004546:	f000 f8cc 	bl	80046e2 <__malloc_unlock>
 800454a:	e7e4      	b.n	8004516 <_malloc_r+0x1e>
 800454c:	680b      	ldr	r3, [r1, #0]
 800454e:	1b5b      	subs	r3, r3, r5
 8004550:	d418      	bmi.n	8004584 <_malloc_r+0x8c>
 8004552:	2b0b      	cmp	r3, #11
 8004554:	d90f      	bls.n	8004576 <_malloc_r+0x7e>
 8004556:	600b      	str	r3, [r1, #0]
 8004558:	50cd      	str	r5, [r1, r3]
 800455a:	18cc      	adds	r4, r1, r3
 800455c:	4630      	mov	r0, r6
 800455e:	f000 f8c0 	bl	80046e2 <__malloc_unlock>
 8004562:	f104 000b 	add.w	r0, r4, #11
 8004566:	1d23      	adds	r3, r4, #4
 8004568:	f020 0007 	bic.w	r0, r0, #7
 800456c:	1ac3      	subs	r3, r0, r3
 800456e:	d0d3      	beq.n	8004518 <_malloc_r+0x20>
 8004570:	425a      	negs	r2, r3
 8004572:	50e2      	str	r2, [r4, r3]
 8004574:	e7d0      	b.n	8004518 <_malloc_r+0x20>
 8004576:	428c      	cmp	r4, r1
 8004578:	684b      	ldr	r3, [r1, #4]
 800457a:	bf16      	itet	ne
 800457c:	6063      	strne	r3, [r4, #4]
 800457e:	6013      	streq	r3, [r2, #0]
 8004580:	460c      	movne	r4, r1
 8004582:	e7eb      	b.n	800455c <_malloc_r+0x64>
 8004584:	460c      	mov	r4, r1
 8004586:	6849      	ldr	r1, [r1, #4]
 8004588:	e7cc      	b.n	8004524 <_malloc_r+0x2c>
 800458a:	1cc4      	adds	r4, r0, #3
 800458c:	f024 0403 	bic.w	r4, r4, #3
 8004590:	42a0      	cmp	r0, r4
 8004592:	d005      	beq.n	80045a0 <_malloc_r+0xa8>
 8004594:	1a21      	subs	r1, r4, r0
 8004596:	4630      	mov	r0, r6
 8004598:	f000 f808 	bl	80045ac <_sbrk_r>
 800459c:	3001      	adds	r0, #1
 800459e:	d0cf      	beq.n	8004540 <_malloc_r+0x48>
 80045a0:	6025      	str	r5, [r4, #0]
 80045a2:	e7db      	b.n	800455c <_malloc_r+0x64>
 80045a4:	20004034 	.word	0x20004034
 80045a8:	20004038 	.word	0x20004038

080045ac <_sbrk_r>:
 80045ac:	b538      	push	{r3, r4, r5, lr}
 80045ae:	4c06      	ldr	r4, [pc, #24]	; (80045c8 <_sbrk_r+0x1c>)
 80045b0:	2300      	movs	r3, #0
 80045b2:	4605      	mov	r5, r0
 80045b4:	4608      	mov	r0, r1
 80045b6:	6023      	str	r3, [r4, #0]
 80045b8:	f7fc fa0c 	bl	80009d4 <_sbrk>
 80045bc:	1c43      	adds	r3, r0, #1
 80045be:	d102      	bne.n	80045c6 <_sbrk_r+0x1a>
 80045c0:	6823      	ldr	r3, [r4, #0]
 80045c2:	b103      	cbz	r3, 80045c6 <_sbrk_r+0x1a>
 80045c4:	602b      	str	r3, [r5, #0]
 80045c6:	bd38      	pop	{r3, r4, r5, pc}
 80045c8:	20004374 	.word	0x20004374

080045cc <__sread>:
 80045cc:	b510      	push	{r4, lr}
 80045ce:	460c      	mov	r4, r1
 80045d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045d4:	f000 f886 	bl	80046e4 <_read_r>
 80045d8:	2800      	cmp	r0, #0
 80045da:	bfab      	itete	ge
 80045dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80045de:	89a3      	ldrhlt	r3, [r4, #12]
 80045e0:	181b      	addge	r3, r3, r0
 80045e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80045e6:	bfac      	ite	ge
 80045e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80045ea:	81a3      	strhlt	r3, [r4, #12]
 80045ec:	bd10      	pop	{r4, pc}

080045ee <__swrite>:
 80045ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045f2:	461f      	mov	r7, r3
 80045f4:	898b      	ldrh	r3, [r1, #12]
 80045f6:	05db      	lsls	r3, r3, #23
 80045f8:	4605      	mov	r5, r0
 80045fa:	460c      	mov	r4, r1
 80045fc:	4616      	mov	r6, r2
 80045fe:	d505      	bpl.n	800460c <__swrite+0x1e>
 8004600:	2302      	movs	r3, #2
 8004602:	2200      	movs	r2, #0
 8004604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004608:	f000 f858 	bl	80046bc <_lseek_r>
 800460c:	89a3      	ldrh	r3, [r4, #12]
 800460e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004612:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004616:	81a3      	strh	r3, [r4, #12]
 8004618:	4632      	mov	r2, r6
 800461a:	463b      	mov	r3, r7
 800461c:	4628      	mov	r0, r5
 800461e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004622:	f000 b817 	b.w	8004654 <_write_r>

08004626 <__sseek>:
 8004626:	b510      	push	{r4, lr}
 8004628:	460c      	mov	r4, r1
 800462a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800462e:	f000 f845 	bl	80046bc <_lseek_r>
 8004632:	1c43      	adds	r3, r0, #1
 8004634:	89a3      	ldrh	r3, [r4, #12]
 8004636:	bf15      	itete	ne
 8004638:	6560      	strne	r0, [r4, #84]	; 0x54
 800463a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800463e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004642:	81a3      	strheq	r3, [r4, #12]
 8004644:	bf18      	it	ne
 8004646:	81a3      	strhne	r3, [r4, #12]
 8004648:	bd10      	pop	{r4, pc}

0800464a <__sclose>:
 800464a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800464e:	f000 b813 	b.w	8004678 <_close_r>
	...

08004654 <_write_r>:
 8004654:	b538      	push	{r3, r4, r5, lr}
 8004656:	4c07      	ldr	r4, [pc, #28]	; (8004674 <_write_r+0x20>)
 8004658:	4605      	mov	r5, r0
 800465a:	4608      	mov	r0, r1
 800465c:	4611      	mov	r1, r2
 800465e:	2200      	movs	r2, #0
 8004660:	6022      	str	r2, [r4, #0]
 8004662:	461a      	mov	r2, r3
 8004664:	f7fe f99e 	bl	80029a4 <_write>
 8004668:	1c43      	adds	r3, r0, #1
 800466a:	d102      	bne.n	8004672 <_write_r+0x1e>
 800466c:	6823      	ldr	r3, [r4, #0]
 800466e:	b103      	cbz	r3, 8004672 <_write_r+0x1e>
 8004670:	602b      	str	r3, [r5, #0]
 8004672:	bd38      	pop	{r3, r4, r5, pc}
 8004674:	20004374 	.word	0x20004374

08004678 <_close_r>:
 8004678:	b538      	push	{r3, r4, r5, lr}
 800467a:	4c06      	ldr	r4, [pc, #24]	; (8004694 <_close_r+0x1c>)
 800467c:	2300      	movs	r3, #0
 800467e:	4605      	mov	r5, r0
 8004680:	4608      	mov	r0, r1
 8004682:	6023      	str	r3, [r4, #0]
 8004684:	f7fe f9ba 	bl	80029fc <_close>
 8004688:	1c43      	adds	r3, r0, #1
 800468a:	d102      	bne.n	8004692 <_close_r+0x1a>
 800468c:	6823      	ldr	r3, [r4, #0]
 800468e:	b103      	cbz	r3, 8004692 <_close_r+0x1a>
 8004690:	602b      	str	r3, [r5, #0]
 8004692:	bd38      	pop	{r3, r4, r5, pc}
 8004694:	20004374 	.word	0x20004374

08004698 <_fstat_r>:
 8004698:	b538      	push	{r3, r4, r5, lr}
 800469a:	4c07      	ldr	r4, [pc, #28]	; (80046b8 <_fstat_r+0x20>)
 800469c:	2300      	movs	r3, #0
 800469e:	4605      	mov	r5, r0
 80046a0:	4608      	mov	r0, r1
 80046a2:	4611      	mov	r1, r2
 80046a4:	6023      	str	r3, [r4, #0]
 80046a6:	f7fe f9f9 	bl	8002a9c <_fstat>
 80046aa:	1c43      	adds	r3, r0, #1
 80046ac:	d102      	bne.n	80046b4 <_fstat_r+0x1c>
 80046ae:	6823      	ldr	r3, [r4, #0]
 80046b0:	b103      	cbz	r3, 80046b4 <_fstat_r+0x1c>
 80046b2:	602b      	str	r3, [r5, #0]
 80046b4:	bd38      	pop	{r3, r4, r5, pc}
 80046b6:	bf00      	nop
 80046b8:	20004374 	.word	0x20004374

080046bc <_lseek_r>:
 80046bc:	b538      	push	{r3, r4, r5, lr}
 80046be:	4c07      	ldr	r4, [pc, #28]	; (80046dc <_lseek_r+0x20>)
 80046c0:	4605      	mov	r5, r0
 80046c2:	4608      	mov	r0, r1
 80046c4:	4611      	mov	r1, r2
 80046c6:	2200      	movs	r2, #0
 80046c8:	6022      	str	r2, [r4, #0]
 80046ca:	461a      	mov	r2, r3
 80046cc:	f7fe f9ad 	bl	8002a2a <_lseek>
 80046d0:	1c43      	adds	r3, r0, #1
 80046d2:	d102      	bne.n	80046da <_lseek_r+0x1e>
 80046d4:	6823      	ldr	r3, [r4, #0]
 80046d6:	b103      	cbz	r3, 80046da <_lseek_r+0x1e>
 80046d8:	602b      	str	r3, [r5, #0]
 80046da:	bd38      	pop	{r3, r4, r5, pc}
 80046dc:	20004374 	.word	0x20004374

080046e0 <__malloc_lock>:
 80046e0:	4770      	bx	lr

080046e2 <__malloc_unlock>:
 80046e2:	4770      	bx	lr

080046e4 <_read_r>:
 80046e4:	b538      	push	{r3, r4, r5, lr}
 80046e6:	4c07      	ldr	r4, [pc, #28]	; (8004704 <_read_r+0x20>)
 80046e8:	4605      	mov	r5, r0
 80046ea:	4608      	mov	r0, r1
 80046ec:	4611      	mov	r1, r2
 80046ee:	2200      	movs	r2, #0
 80046f0:	6022      	str	r2, [r4, #0]
 80046f2:	461a      	mov	r2, r3
 80046f4:	f7fe f9aa 	bl	8002a4c <_read>
 80046f8:	1c43      	adds	r3, r0, #1
 80046fa:	d102      	bne.n	8004702 <_read_r+0x1e>
 80046fc:	6823      	ldr	r3, [r4, #0]
 80046fe:	b103      	cbz	r3, 8004702 <_read_r+0x1e>
 8004700:	602b      	str	r3, [r5, #0]
 8004702:	bd38      	pop	{r3, r4, r5, pc}
 8004704:	20004374 	.word	0x20004374

08004708 <_init>:
 8004708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800470a:	bf00      	nop
 800470c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800470e:	bc08      	pop	{r3}
 8004710:	469e      	mov	lr, r3
 8004712:	4770      	bx	lr

08004714 <_fini>:
 8004714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004716:	bf00      	nop
 8004718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800471a:	bc08      	pop	{r3}
 800471c:	469e      	mov	lr, r3
 800471e:	4770      	bx	lr
