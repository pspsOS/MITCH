
Jacks Hardware Tesbed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fb8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08005158  08005158  00015158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005248  08005248  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005248  08005248  00015248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005250  08005250  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005250  08005250  00015250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005254  08005254  00015254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005258  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000490  20000070  080052c8  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  080052c8  00020500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000112f0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026bf  00000000  00000000  00031390  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c30  00000000  00000000  00033a50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b08  00000000  00000000  00034680  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000045d8  00000000  00000000  00035188  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b89f  00000000  00000000  00039760  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00091d44  00000000  00000000  00044fff  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d6d43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003828  00000000  00000000  000d6dc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005140 	.word	0x08005140

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005140 	.word	0x08005140

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b590      	push	{r4, r7, lr}
 8000582:	b09d      	sub	sp, #116	; 0x74
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f000 fadf 	bl	8000b48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f823 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 f909 	bl	80007a4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000592:	f000 f8b3 	bl	80006fc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000596:	f000 f8db 	bl	8000750 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800059a:	f000 f879 	bl	8000690 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 800059e:	480a      	ldr	r0, [pc, #40]	; (80005c8 <main+0x48>)
 80005a0:	f003 fac2 	bl	8003b28 <RetargetInit>


  imu = ICM20948_init(&hspi1,GPIO_PIN_4,GPIOA);
 80005a4:	4c09      	ldr	r4, [pc, #36]	; (80005cc <main+0x4c>)
 80005a6:	4638      	mov	r0, r7
 80005a8:	2300      	movs	r3, #0
 80005aa:	2210      	movs	r2, #16
 80005ac:	4908      	ldr	r1, [pc, #32]	; (80005d0 <main+0x50>)
 80005ae:	f002 ff51 	bl	8003454 <ICM20948_init>
 80005b2:	4620      	mov	r0, r4
 80005b4:	463b      	mov	r3, r7
 80005b6:	2270      	movs	r2, #112	; 0x70
 80005b8:	4619      	mov	r1, r3
 80005ba:	f003 fdaf 	bl	800411c <memcpy>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  //imu.read(&imu);
	  HAL_Delay(100);
 80005be:	2064      	movs	r0, #100	; 0x64
 80005c0:	f000 fb34 	bl	8000c2c <HAL_Delay>
 80005c4:	e7fb      	b.n	80005be <main+0x3e>
 80005c6:	bf00      	nop
 80005c8:	200004b4 	.word	0x200004b4
 80005cc:	20000158 	.word	0x20000158
 80005d0:	20000408 	.word	0x20000408

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	; 0x50
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	2230      	movs	r2, #48	; 0x30
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f003 fda5 	bl	8004132 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	4b22      	ldr	r3, [pc, #136]	; (8000688 <SystemClock_Config+0xb4>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	4a21      	ldr	r2, [pc, #132]	; (8000688 <SystemClock_Config+0xb4>)
 8000602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000606:	6413      	str	r3, [r2, #64]	; 0x40
 8000608:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <SystemClock_Config+0xb4>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	4b1c      	ldr	r3, [pc, #112]	; (800068c <SystemClock_Config+0xb8>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a1b      	ldr	r2, [pc, #108]	; (800068c <SystemClock_Config+0xb8>)
 800061e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b19      	ldr	r3, [pc, #100]	; (800068c <SystemClock_Config+0xb8>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000630:	2302      	movs	r3, #2
 8000632:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000634:	2301      	movs	r3, #1
 8000636:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000638:	2310      	movs	r3, #16
 800063a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800063c:	2300      	movs	r3, #0
 800063e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	f107 0320 	add.w	r3, r7, #32
 8000644:	4618      	mov	r0, r3
 8000646:	f000 fde3 	bl	8001210 <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000650:	f000 f8da 	bl	8000808 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000654:	230f      	movs	r3, #15
 8000656:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000658:	2300      	movs	r3, #0
 800065a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f001 f83e 	bl	80016f0 <HAL_RCC_ClockConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800067a:	f000 f8c5 	bl	8000808 <Error_Handler>
  }
}
 800067e:	bf00      	nop
 8000680:	3750      	adds	r7, #80	; 0x50
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000694:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <MX_SPI1_Init+0x64>)
 8000696:	4a18      	ldr	r2, [pc, #96]	; (80006f8 <MX_SPI1_Init+0x68>)
 8000698:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800069a:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_SPI1_Init+0x64>)
 800069c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006a2:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006a8:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006b0:	2202      	movs	r2, #2
 80006b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006c4:	2218      	movs	r2, #24
 80006c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006dc:	220a      	movs	r2, #10
 80006de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006e2:	f001 f9d1 	bl	8001a88 <HAL_SPI_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006ec:	f000 f88c 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000408 	.word	0x20000408
 80006f8:	40013000 	.word	0x40013000

080006fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_USART1_UART_Init+0x4c>)
 8000702:	4a12      	ldr	r2, [pc, #72]	; (800074c <MX_USART1_UART_Init+0x50>)
 8000704:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000706:	4b10      	ldr	r3, [pc, #64]	; (8000748 <MX_USART1_UART_Init+0x4c>)
 8000708:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800070c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_USART1_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_USART1_UART_Init+0x4c>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <MX_USART1_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_USART1_UART_Init+0x4c>)
 8000722:	220c      	movs	r2, #12
 8000724:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <MX_USART1_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_USART1_UART_Init+0x4c>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_USART1_UART_Init+0x4c>)
 8000734:	f001 fefc 	bl	8002530 <HAL_UART_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800073e:	f000 f863 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	200001c8 	.word	0x200001c8
 800074c:	40011000 	.word	0x40011000

08000750 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_USART2_UART_Init+0x4c>)
 8000756:	4a12      	ldr	r2, [pc, #72]	; (80007a0 <MX_USART2_UART_Init+0x50>)
 8000758:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <MX_USART2_UART_Init+0x4c>)
 800075c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000760:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_USART2_UART_Init+0x4c>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_USART2_UART_Init+0x4c>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_USART2_UART_Init+0x4c>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_USART2_UART_Init+0x4c>)
 8000776:	220c      	movs	r2, #12
 8000778:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <MX_USART2_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_USART2_UART_Init+0x4c>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_USART2_UART_Init+0x4c>)
 8000788:	f001 fed2 	bl	8002530 <HAL_UART_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000792:	f000 f839 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200004b4 	.word	0x200004b4
 80007a0:	40004400 	.word	0x40004400

080007a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b8:	2300      	movs	r3, #0
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	4b10      	ldr	r3, [pc, #64]	; (8000800 <MX_GPIO_Init+0x5c>)
 80007be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c0:	4a0f      	ldr	r2, [pc, #60]	; (8000800 <MX_GPIO_Init+0x5c>)
 80007c2:	f043 0301 	orr.w	r3, r3, #1
 80007c6:	6313      	str	r3, [r2, #48]	; 0x30
 80007c8:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <MX_GPIO_Init+0x5c>)
 80007ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007cc:	f003 0301 	and.w	r3, r3, #1
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80007d4:	2201      	movs	r2, #1
 80007d6:	2110      	movs	r1, #16
 80007d8:	480a      	ldr	r0, [pc, #40]	; (8000804 <MX_GPIO_Init+0x60>)
 80007da:	f000 fcff 	bl	80011dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 80007de:	2310      	movs	r3, #16
 80007e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	4619      	mov	r1, r3
 80007f2:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_GPIO_Init+0x60>)
 80007f4:	f000 fb70 	bl	8000ed8 <HAL_GPIO_Init>

}
 80007f8:	bf00      	nop
 80007fa:	3718      	adds	r7, #24
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40023800 	.word	0x40023800
 8000804:	40020000 	.word	0x40020000

08000808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800080c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800080e:	e7fe      	b.n	800080e <Error_Handler+0x6>

08000810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b12      	ldr	r3, [pc, #72]	; (8000864 <HAL_MspInit+0x54>)
 800081c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081e:	4a11      	ldr	r2, [pc, #68]	; (8000864 <HAL_MspInit+0x54>)
 8000820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000824:	6453      	str	r3, [r2, #68]	; 0x44
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <HAL_MspInit+0x54>)
 8000828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	603b      	str	r3, [r7, #0]
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <HAL_MspInit+0x54>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083a:	4a0a      	ldr	r2, [pc, #40]	; (8000864 <HAL_MspInit+0x54>)
 800083c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000840:	6413      	str	r3, [r2, #64]	; 0x40
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <HAL_MspInit+0x54>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	210f      	movs	r1, #15
 8000852:	f06f 0001 	mvn.w	r0, #1
 8000856:	f000 fae6 	bl	8000e26 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800

08000868 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08a      	sub	sp, #40	; 0x28
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a19      	ldr	r2, [pc, #100]	; (80008ec <HAL_SPI_MspInit+0x84>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d12b      	bne.n	80008e2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
 800088e:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <HAL_SPI_MspInit+0x88>)
 8000890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000892:	4a17      	ldr	r2, [pc, #92]	; (80008f0 <HAL_SPI_MspInit+0x88>)
 8000894:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000898:	6453      	str	r3, [r2, #68]	; 0x44
 800089a:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <HAL_SPI_MspInit+0x88>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <HAL_SPI_MspInit+0x88>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a10      	ldr	r2, [pc, #64]	; (80008f0 <HAL_SPI_MspInit+0x88>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <HAL_SPI_MspInit+0x88>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008c2:	23e0      	movs	r3, #224	; 0xe0
 80008c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ce:	2303      	movs	r3, #3
 80008d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008d2:	2305      	movs	r3, #5
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4619      	mov	r1, r3
 80008dc:	4805      	ldr	r0, [pc, #20]	; (80008f4 <HAL_SPI_MspInit+0x8c>)
 80008de:	f000 fafb 	bl	8000ed8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008e2:	bf00      	nop
 80008e4:	3728      	adds	r7, #40	; 0x28
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40013000 	.word	0x40013000
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40020000 	.word	0x40020000

080008f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08c      	sub	sp, #48	; 0x30
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a36      	ldr	r2, [pc, #216]	; (80009f0 <HAL_UART_MspInit+0xf8>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d135      	bne.n	8000986 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	61bb      	str	r3, [r7, #24]
 800091e:	4b35      	ldr	r3, [pc, #212]	; (80009f4 <HAL_UART_MspInit+0xfc>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000922:	4a34      	ldr	r2, [pc, #208]	; (80009f4 <HAL_UART_MspInit+0xfc>)
 8000924:	f043 0310 	orr.w	r3, r3, #16
 8000928:	6453      	str	r3, [r2, #68]	; 0x44
 800092a:	4b32      	ldr	r3, [pc, #200]	; (80009f4 <HAL_UART_MspInit+0xfc>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092e:	f003 0310 	and.w	r3, r3, #16
 8000932:	61bb      	str	r3, [r7, #24]
 8000934:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
 800093a:	4b2e      	ldr	r3, [pc, #184]	; (80009f4 <HAL_UART_MspInit+0xfc>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a2d      	ldr	r2, [pc, #180]	; (80009f4 <HAL_UART_MspInit+0xfc>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b2b      	ldr	r3, [pc, #172]	; (80009f4 <HAL_UART_MspInit+0xfc>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000952:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000960:	2303      	movs	r3, #3
 8000962:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000964:	2307      	movs	r3, #7
 8000966:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	4822      	ldr	r0, [pc, #136]	; (80009f8 <HAL_UART_MspInit+0x100>)
 8000970:	f000 fab2 	bl	8000ed8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000974:	2200      	movs	r2, #0
 8000976:	2105      	movs	r1, #5
 8000978:	2025      	movs	r0, #37	; 0x25
 800097a:	f000 fa54 	bl	8000e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800097e:	2025      	movs	r0, #37	; 0x25
 8000980:	f000 fa6d 	bl	8000e5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000984:	e030      	b.n	80009e8 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a1c      	ldr	r2, [pc, #112]	; (80009fc <HAL_UART_MspInit+0x104>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d12b      	bne.n	80009e8 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000990:	2300      	movs	r3, #0
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <HAL_UART_MspInit+0xfc>)
 8000996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000998:	4a16      	ldr	r2, [pc, #88]	; (80009f4 <HAL_UART_MspInit+0xfc>)
 800099a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800099e:	6413      	str	r3, [r2, #64]	; 0x40
 80009a0:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <HAL_UART_MspInit+0xfc>)
 80009a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <HAL_UART_MspInit+0xfc>)
 80009b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b4:	4a0f      	ldr	r2, [pc, #60]	; (80009f4 <HAL_UART_MspInit+0xfc>)
 80009b6:	f043 0301 	orr.w	r3, r3, #1
 80009ba:	6313      	str	r3, [r2, #48]	; 0x30
 80009bc:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <HAL_UART_MspInit+0xfc>)
 80009be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c0:	f003 0301 	and.w	r3, r3, #1
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009c8:	230c      	movs	r3, #12
 80009ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009cc:	2302      	movs	r3, #2
 80009ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009d8:	2307      	movs	r3, #7
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <HAL_UART_MspInit+0x100>)
 80009e4:	f000 fa78 	bl	8000ed8 <HAL_GPIO_Init>
}
 80009e8:	bf00      	nop
 80009ea:	3730      	adds	r7, #48	; 0x30
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40011000 	.word	0x40011000
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40020000 	.word	0x40020000
 80009fc:	40004400 	.word	0x40004400

08000a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <NMI_Handler+0x4>

08000a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <HardFault_Handler+0x4>

08000a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <MemManage_Handler+0x4>

08000a12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <BusFault_Handler+0x4>

08000a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <UsageFault_Handler+0x4>

08000a1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a30:	f000 f8dc 	bl	8000bec <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a34:	f003 fabe 	bl	8003fb4 <xTaskGetSchedulerState>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d001      	beq.n	8000a42 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a3e:	f003 fb23 	bl	8004088 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a4c:	4802      	ldr	r0, [pc, #8]	; (8000a58 <USART1_IRQHandler+0x10>)
 8000a4e:	f001 fefb 	bl	8002848 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200001c8 	.word	0x200001c8

08000a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a64:	4a14      	ldr	r2, [pc, #80]	; (8000ab8 <_sbrk+0x5c>)
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <_sbrk+0x60>)
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a70:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <_sbrk+0x64>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d102      	bne.n	8000a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a78:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <_sbrk+0x64>)
 8000a7a:	4a12      	ldr	r2, [pc, #72]	; (8000ac4 <_sbrk+0x68>)
 8000a7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <_sbrk+0x64>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4413      	add	r3, r2
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d207      	bcs.n	8000a9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a8c:	f003 fb1c 	bl	80040c8 <__errno>
 8000a90:	4602      	mov	r2, r0
 8000a92:	230c      	movs	r3, #12
 8000a94:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000a96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a9a:	e009      	b.n	8000ab0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <_sbrk+0x64>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aa2:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <_sbrk+0x64>)
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	4a05      	ldr	r2, [pc, #20]	; (8000ac0 <_sbrk+0x64>)
 8000aac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aae:	68fb      	ldr	r3, [r7, #12]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3718      	adds	r7, #24
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20020000 	.word	0x20020000
 8000abc:	00000400 	.word	0x00000400
 8000ac0:	2000008c 	.word	0x2000008c
 8000ac4:	20000500 	.word	0x20000500

08000ac8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <SystemInit+0x28>)
 8000ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ad2:	4a07      	ldr	r2, [pc, #28]	; (8000af0 <SystemInit+0x28>)
 8000ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000adc:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <SystemInit+0x28>)
 8000ade:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ae2:	609a      	str	r2, [r3, #8]
#endif
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000af4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b2c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000af8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000afa:	e003      	b.n	8000b04 <LoopCopyDataInit>

08000afc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000afe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b00:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b02:	3104      	adds	r1, #4

08000b04 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b04:	480b      	ldr	r0, [pc, #44]	; (8000b34 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b06:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b08:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b0a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b0c:	d3f6      	bcc.n	8000afc <CopyDataInit>
  ldr  r2, =_sbss
 8000b0e:	4a0b      	ldr	r2, [pc, #44]	; (8000b3c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b10:	e002      	b.n	8000b18 <LoopFillZerobss>

08000b12 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b12:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b14:	f842 3b04 	str.w	r3, [r2], #4

08000b18 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b1a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b1c:	d3f9      	bcc.n	8000b12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b1e:	f7ff ffd3 	bl	8000ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b22:	f003 fad7 	bl	80040d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b26:	f7ff fd2b 	bl	8000580 <main>
  bx  lr    
 8000b2a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b2c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b30:	08005258 	.word	0x08005258
  ldr  r0, =_sdata
 8000b34:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b38:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000b3c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000b40:	20000500 	.word	0x20000500

08000b44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b44:	e7fe      	b.n	8000b44 <ADC_IRQHandler>
	...

08000b48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <HAL_Init+0x40>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a0d      	ldr	r2, [pc, #52]	; (8000b88 <HAL_Init+0x40>)
 8000b52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b58:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <HAL_Init+0x40>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <HAL_Init+0x40>)
 8000b5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <HAL_Init+0x40>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a07      	ldr	r2, [pc, #28]	; (8000b88 <HAL_Init+0x40>)
 8000b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b70:	2003      	movs	r0, #3
 8000b72:	f000 f94d 	bl	8000e10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b76:	200f      	movs	r0, #15
 8000b78:	f000 f808 	bl	8000b8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b7c:	f7ff fe48 	bl	8000810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40023c00 	.word	0x40023c00

08000b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <HAL_InitTick+0x54>)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <HAL_InitTick+0x58>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 f965 	bl	8000e7a <HAL_SYSTICK_Config>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e00e      	b.n	8000bd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2b0f      	cmp	r3, #15
 8000bbe:	d80a      	bhi.n	8000bd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	6879      	ldr	r1, [r7, #4]
 8000bc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bc8:	f000 f92d 	bl	8000e26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bcc:	4a06      	ldr	r2, [pc, #24]	; (8000be8 <HAL_InitTick+0x5c>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e000      	b.n	8000bd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000000 	.word	0x20000000
 8000be4:	20000008 	.word	0x20000008
 8000be8:	20000004 	.word	0x20000004

08000bec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <HAL_IncTick+0x20>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_IncTick+0x24>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <HAL_IncTick+0x24>)
 8000bfe:	6013      	str	r3, [r2, #0]
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	20000008 	.word	0x20000008
 8000c10:	200004f4 	.word	0x200004f4

08000c14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return uwTick;
 8000c18:	4b03      	ldr	r3, [pc, #12]	; (8000c28 <HAL_GetTick+0x14>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	200004f4 	.word	0x200004f4

08000c2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c34:	f7ff ffee 	bl	8000c14 <HAL_GetTick>
 8000c38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c44:	d005      	beq.n	8000c52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <HAL_Delay+0x40>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	4413      	add	r3, r2
 8000c50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c52:	bf00      	nop
 8000c54:	f7ff ffde 	bl	8000c14 <HAL_GetTick>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d8f7      	bhi.n	8000c54 <HAL_Delay+0x28>
  {
  }
}
 8000c64:	bf00      	nop
 8000c66:	3710      	adds	r7, #16
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000008 	.word	0x20000008

08000c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca2:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	60d3      	str	r3, [r2, #12]
}
 8000ca8:	bf00      	nop
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cbc:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	0a1b      	lsrs	r3, r3, #8
 8000cc2:	f003 0307 	and.w	r3, r3, #7
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	db0b      	blt.n	8000cfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	f003 021f 	and.w	r2, r3, #31
 8000cec:	4907      	ldr	r1, [pc, #28]	; (8000d0c <__NVIC_EnableIRQ+0x38>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	095b      	lsrs	r3, r3, #5
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000e100 	.word	0xe000e100

08000d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	6039      	str	r1, [r7, #0]
 8000d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db0a      	blt.n	8000d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	490c      	ldr	r1, [pc, #48]	; (8000d5c <__NVIC_SetPriority+0x4c>)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	440b      	add	r3, r1
 8000d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d38:	e00a      	b.n	8000d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4908      	ldr	r1, [pc, #32]	; (8000d60 <__NVIC_SetPriority+0x50>)
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	f003 030f 	and.w	r3, r3, #15
 8000d46:	3b04      	subs	r3, #4
 8000d48:	0112      	lsls	r2, r2, #4
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	440b      	add	r3, r1
 8000d4e:	761a      	strb	r2, [r3, #24]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000e100 	.word	0xe000e100
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b089      	sub	sp, #36	; 0x24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	f1c3 0307 	rsb	r3, r3, #7
 8000d7e:	2b04      	cmp	r3, #4
 8000d80:	bf28      	it	cs
 8000d82:	2304      	movcs	r3, #4
 8000d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3304      	adds	r3, #4
 8000d8a:	2b06      	cmp	r3, #6
 8000d8c:	d902      	bls.n	8000d94 <NVIC_EncodePriority+0x30>
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3b03      	subs	r3, #3
 8000d92:	e000      	b.n	8000d96 <NVIC_EncodePriority+0x32>
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43da      	mvns	r2, r3
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	401a      	ands	r2, r3
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	fa01 f303 	lsl.w	r3, r1, r3
 8000db6:	43d9      	mvns	r1, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	4313      	orrs	r3, r2
         );
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3724      	adds	r7, #36	; 0x24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
	...

08000dcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ddc:	d301      	bcc.n	8000de2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dde:	2301      	movs	r3, #1
 8000de0:	e00f      	b.n	8000e02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000de2:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <SysTick_Config+0x40>)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dea:	210f      	movs	r1, #15
 8000dec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000df0:	f7ff ff8e 	bl	8000d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df4:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <SysTick_Config+0x40>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dfa:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <SysTick_Config+0x40>)
 8000dfc:	2207      	movs	r2, #7
 8000dfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	e000e010 	.word	0xe000e010

08000e10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f7ff ff29 	bl	8000c70 <__NVIC_SetPriorityGrouping>
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b086      	sub	sp, #24
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	60b9      	str	r1, [r7, #8]
 8000e30:	607a      	str	r2, [r7, #4]
 8000e32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e38:	f7ff ff3e 	bl	8000cb8 <__NVIC_GetPriorityGrouping>
 8000e3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	68b9      	ldr	r1, [r7, #8]
 8000e42:	6978      	ldr	r0, [r7, #20]
 8000e44:	f7ff ff8e 	bl	8000d64 <NVIC_EncodePriority>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e4e:	4611      	mov	r1, r2
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff5d 	bl	8000d10 <__NVIC_SetPriority>
}
 8000e56:	bf00      	nop
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	4603      	mov	r3, r0
 8000e66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff31 	bl	8000cd4 <__NVIC_EnableIRQ>
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff ffa2 	bl	8000dcc <SysTick_Config>
 8000e88:	4603      	mov	r3, r0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b083      	sub	sp, #12
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d004      	beq.n	8000eb0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2280      	movs	r2, #128	; 0x80
 8000eaa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	e00c      	b.n	8000eca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2205      	movs	r2, #5
 8000eb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f022 0201 	bic.w	r2, r2, #1
 8000ec6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
	...

08000ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b089      	sub	sp, #36	; 0x24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
 8000ef2:	e159      	b.n	80011a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	4013      	ands	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	f040 8148 	bne.w	80011a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d00b      	beq.n	8000f32 <HAL_GPIO_Init+0x5a>
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d007      	beq.n	8000f32 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f26:	2b11      	cmp	r3, #17
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	2b12      	cmp	r3, #18
 8000f30:	d130      	bne.n	8000f94 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43db      	mvns	r3, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4013      	ands	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	68da      	ldr	r2, [r3, #12]
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f68:	2201      	movs	r2, #1
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	091b      	lsrs	r3, r3, #4
 8000f7e:	f003 0201 	and.w	r2, r3, #1
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	689a      	ldr	r2, [r3, #8]
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d003      	beq.n	8000fd4 <HAL_GPIO_Init+0xfc>
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	2b12      	cmp	r3, #18
 8000fd2:	d123      	bne.n	800101c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	08da      	lsrs	r2, r3, #3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3208      	adds	r2, #8
 8000fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	f003 0307 	and.w	r3, r3, #7
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	220f      	movs	r2, #15
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	691a      	ldr	r2, [r3, #16]
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	08da      	lsrs	r2, r3, #3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	3208      	adds	r2, #8
 8001016:	69b9      	ldr	r1, [r7, #24]
 8001018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	2203      	movs	r2, #3
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 0203 	and.w	r2, r3, #3
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001058:	2b00      	cmp	r3, #0
 800105a:	f000 80a2 	beq.w	80011a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	4b56      	ldr	r3, [pc, #344]	; (80011bc <HAL_GPIO_Init+0x2e4>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001066:	4a55      	ldr	r2, [pc, #340]	; (80011bc <HAL_GPIO_Init+0x2e4>)
 8001068:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800106c:	6453      	str	r3, [r2, #68]	; 0x44
 800106e:	4b53      	ldr	r3, [pc, #332]	; (80011bc <HAL_GPIO_Init+0x2e4>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800107a:	4a51      	ldr	r2, [pc, #324]	; (80011c0 <HAL_GPIO_Init+0x2e8>)
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	089b      	lsrs	r3, r3, #2
 8001080:	3302      	adds	r3, #2
 8001082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	220f      	movs	r2, #15
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4013      	ands	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a48      	ldr	r2, [pc, #288]	; (80011c4 <HAL_GPIO_Init+0x2ec>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d019      	beq.n	80010da <HAL_GPIO_Init+0x202>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a47      	ldr	r2, [pc, #284]	; (80011c8 <HAL_GPIO_Init+0x2f0>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d013      	beq.n	80010d6 <HAL_GPIO_Init+0x1fe>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a46      	ldr	r2, [pc, #280]	; (80011cc <HAL_GPIO_Init+0x2f4>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d00d      	beq.n	80010d2 <HAL_GPIO_Init+0x1fa>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a45      	ldr	r2, [pc, #276]	; (80011d0 <HAL_GPIO_Init+0x2f8>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d007      	beq.n	80010ce <HAL_GPIO_Init+0x1f6>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a44      	ldr	r2, [pc, #272]	; (80011d4 <HAL_GPIO_Init+0x2fc>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d101      	bne.n	80010ca <HAL_GPIO_Init+0x1f2>
 80010c6:	2304      	movs	r3, #4
 80010c8:	e008      	b.n	80010dc <HAL_GPIO_Init+0x204>
 80010ca:	2307      	movs	r3, #7
 80010cc:	e006      	b.n	80010dc <HAL_GPIO_Init+0x204>
 80010ce:	2303      	movs	r3, #3
 80010d0:	e004      	b.n	80010dc <HAL_GPIO_Init+0x204>
 80010d2:	2302      	movs	r3, #2
 80010d4:	e002      	b.n	80010dc <HAL_GPIO_Init+0x204>
 80010d6:	2301      	movs	r3, #1
 80010d8:	e000      	b.n	80010dc <HAL_GPIO_Init+0x204>
 80010da:	2300      	movs	r3, #0
 80010dc:	69fa      	ldr	r2, [r7, #28]
 80010de:	f002 0203 	and.w	r2, r2, #3
 80010e2:	0092      	lsls	r2, r2, #2
 80010e4:	4093      	lsls	r3, r2
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010ec:	4934      	ldr	r1, [pc, #208]	; (80011c0 <HAL_GPIO_Init+0x2e8>)
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	089b      	lsrs	r3, r3, #2
 80010f2:	3302      	adds	r3, #2
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010fa:	4b37      	ldr	r3, [pc, #220]	; (80011d8 <HAL_GPIO_Init+0x300>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	43db      	mvns	r3, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4013      	ands	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	4313      	orrs	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800111e:	4a2e      	ldr	r2, [pc, #184]	; (80011d8 <HAL_GPIO_Init+0x300>)
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001124:	4b2c      	ldr	r3, [pc, #176]	; (80011d8 <HAL_GPIO_Init+0x300>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d003      	beq.n	8001148 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	4313      	orrs	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001148:	4a23      	ldr	r2, [pc, #140]	; (80011d8 <HAL_GPIO_Init+0x300>)
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800114e:	4b22      	ldr	r3, [pc, #136]	; (80011d8 <HAL_GPIO_Init+0x300>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	43db      	mvns	r3, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4013      	ands	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001172:	4a19      	ldr	r2, [pc, #100]	; (80011d8 <HAL_GPIO_Init+0x300>)
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001178:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <HAL_GPIO_Init+0x300>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d003      	beq.n	800119c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800119c:	4a0e      	ldr	r2, [pc, #56]	; (80011d8 <HAL_GPIO_Init+0x300>)
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3301      	adds	r3, #1
 80011a6:	61fb      	str	r3, [r7, #28]
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	2b0f      	cmp	r3, #15
 80011ac:	f67f aea2 	bls.w	8000ef4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011b0:	bf00      	nop
 80011b2:	3724      	adds	r7, #36	; 0x24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40013800 	.word	0x40013800
 80011c4:	40020000 	.word	0x40020000
 80011c8:	40020400 	.word	0x40020400
 80011cc:	40020800 	.word	0x40020800
 80011d0:	40020c00 	.word	0x40020c00
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40013c00 	.word	0x40013c00

080011dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	460b      	mov	r3, r1
 80011e6:	807b      	strh	r3, [r7, #2]
 80011e8:	4613      	mov	r3, r2
 80011ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011ec:	787b      	ldrb	r3, [r7, #1]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011f2:	887a      	ldrh	r2, [r7, #2]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011f8:	e003      	b.n	8001202 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011fa:	887b      	ldrh	r3, [r7, #2]
 80011fc:	041a      	lsls	r2, r3, #16
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	619a      	str	r2, [r3, #24]
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e25b      	b.n	80016da <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	2b00      	cmp	r3, #0
 800122c:	d075      	beq.n	800131a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800122e:	4ba3      	ldr	r3, [pc, #652]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f003 030c 	and.w	r3, r3, #12
 8001236:	2b04      	cmp	r3, #4
 8001238:	d00c      	beq.n	8001254 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800123a:	4ba0      	ldr	r3, [pc, #640]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001242:	2b08      	cmp	r3, #8
 8001244:	d112      	bne.n	800126c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001246:	4b9d      	ldr	r3, [pc, #628]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800124e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001252:	d10b      	bne.n	800126c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001254:	4b99      	ldr	r3, [pc, #612]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d05b      	beq.n	8001318 <HAL_RCC_OscConfig+0x108>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d157      	bne.n	8001318 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e236      	b.n	80016da <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001274:	d106      	bne.n	8001284 <HAL_RCC_OscConfig+0x74>
 8001276:	4b91      	ldr	r3, [pc, #580]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a90      	ldr	r2, [pc, #576]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 800127c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	e01d      	b.n	80012c0 <HAL_RCC_OscConfig+0xb0>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800128c:	d10c      	bne.n	80012a8 <HAL_RCC_OscConfig+0x98>
 800128e:	4b8b      	ldr	r3, [pc, #556]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a8a      	ldr	r2, [pc, #552]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001294:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	4b88      	ldr	r3, [pc, #544]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a87      	ldr	r2, [pc, #540]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 80012a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	e00b      	b.n	80012c0 <HAL_RCC_OscConfig+0xb0>
 80012a8:	4b84      	ldr	r3, [pc, #528]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a83      	ldr	r2, [pc, #524]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 80012ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012b2:	6013      	str	r3, [r2, #0]
 80012b4:	4b81      	ldr	r3, [pc, #516]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a80      	ldr	r2, [pc, #512]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 80012ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d013      	beq.n	80012f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c8:	f7ff fca4 	bl	8000c14 <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012d0:	f7ff fca0 	bl	8000c14 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b64      	cmp	r3, #100	; 0x64
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e1fb      	b.n	80016da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e2:	4b76      	ldr	r3, [pc, #472]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f0      	beq.n	80012d0 <HAL_RCC_OscConfig+0xc0>
 80012ee:	e014      	b.n	800131a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f0:	f7ff fc90 	bl	8000c14 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f8:	f7ff fc8c 	bl	8000c14 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b64      	cmp	r3, #100	; 0x64
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e1e7      	b.n	80016da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800130a:	4b6c      	ldr	r3, [pc, #432]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1f0      	bne.n	80012f8 <HAL_RCC_OscConfig+0xe8>
 8001316:	e000      	b.n	800131a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d063      	beq.n	80013ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001326:	4b65      	ldr	r3, [pc, #404]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f003 030c 	and.w	r3, r3, #12
 800132e:	2b00      	cmp	r3, #0
 8001330:	d00b      	beq.n	800134a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001332:	4b62      	ldr	r3, [pc, #392]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800133a:	2b08      	cmp	r3, #8
 800133c:	d11c      	bne.n	8001378 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800133e:	4b5f      	ldr	r3, [pc, #380]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d116      	bne.n	8001378 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800134a:	4b5c      	ldr	r3, [pc, #368]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d005      	beq.n	8001362 <HAL_RCC_OscConfig+0x152>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d001      	beq.n	8001362 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e1bb      	b.n	80016da <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001362:	4b56      	ldr	r3, [pc, #344]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	4952      	ldr	r1, [pc, #328]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001372:	4313      	orrs	r3, r2
 8001374:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001376:	e03a      	b.n	80013ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d020      	beq.n	80013c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001380:	4b4f      	ldr	r3, [pc, #316]	; (80014c0 <HAL_RCC_OscConfig+0x2b0>)
 8001382:	2201      	movs	r2, #1
 8001384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001386:	f7ff fc45 	bl	8000c14 <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800138e:	f7ff fc41 	bl	8000c14 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e19c      	b.n	80016da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a0:	4b46      	ldr	r3, [pc, #280]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0f0      	beq.n	800138e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ac:	4b43      	ldr	r3, [pc, #268]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	4940      	ldr	r1, [pc, #256]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 80013bc:	4313      	orrs	r3, r2
 80013be:	600b      	str	r3, [r1, #0]
 80013c0:	e015      	b.n	80013ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013c2:	4b3f      	ldr	r3, [pc, #252]	; (80014c0 <HAL_RCC_OscConfig+0x2b0>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c8:	f7ff fc24 	bl	8000c14 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013d0:	f7ff fc20 	bl	8000c14 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e17b      	b.n	80016da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e2:	4b36      	ldr	r3, [pc, #216]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1f0      	bne.n	80013d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0308 	and.w	r3, r3, #8
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d030      	beq.n	800145c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d016      	beq.n	8001430 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001402:	4b30      	ldr	r3, [pc, #192]	; (80014c4 <HAL_RCC_OscConfig+0x2b4>)
 8001404:	2201      	movs	r2, #1
 8001406:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001408:	f7ff fc04 	bl	8000c14 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001410:	f7ff fc00 	bl	8000c14 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e15b      	b.n	80016da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001422:	4b26      	ldr	r3, [pc, #152]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d0f0      	beq.n	8001410 <HAL_RCC_OscConfig+0x200>
 800142e:	e015      	b.n	800145c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001430:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <HAL_RCC_OscConfig+0x2b4>)
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001436:	f7ff fbed 	bl	8000c14 <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800143e:	f7ff fbe9 	bl	8000c14 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e144      	b.n	80016da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001450:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1f0      	bne.n	800143e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 80a0 	beq.w	80015aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800146a:	2300      	movs	r3, #0
 800146c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800146e:	4b13      	ldr	r3, [pc, #76]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10f      	bne.n	800149a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	4a0e      	ldr	r2, [pc, #56]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 8001484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001488:	6413      	str	r3, [r2, #64]	; 0x40
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <HAL_RCC_OscConfig+0x2ac>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001496:	2301      	movs	r3, #1
 8001498:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <HAL_RCC_OscConfig+0x2b8>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d121      	bne.n	80014ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014a6:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <HAL_RCC_OscConfig+0x2b8>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a07      	ldr	r2, [pc, #28]	; (80014c8 <HAL_RCC_OscConfig+0x2b8>)
 80014ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014b2:	f7ff fbaf 	bl	8000c14 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b8:	e011      	b.n	80014de <HAL_RCC_OscConfig+0x2ce>
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800
 80014c0:	42470000 	.word	0x42470000
 80014c4:	42470e80 	.word	0x42470e80
 80014c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014cc:	f7ff fba2 	bl	8000c14 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e0fd      	b.n	80016da <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014de:	4b81      	ldr	r3, [pc, #516]	; (80016e4 <HAL_RCC_OscConfig+0x4d4>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d0f0      	beq.n	80014cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d106      	bne.n	8001500 <HAL_RCC_OscConfig+0x2f0>
 80014f2:	4b7d      	ldr	r3, [pc, #500]	; (80016e8 <HAL_RCC_OscConfig+0x4d8>)
 80014f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f6:	4a7c      	ldr	r2, [pc, #496]	; (80016e8 <HAL_RCC_OscConfig+0x4d8>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6713      	str	r3, [r2, #112]	; 0x70
 80014fe:	e01c      	b.n	800153a <HAL_RCC_OscConfig+0x32a>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	2b05      	cmp	r3, #5
 8001506:	d10c      	bne.n	8001522 <HAL_RCC_OscConfig+0x312>
 8001508:	4b77      	ldr	r3, [pc, #476]	; (80016e8 <HAL_RCC_OscConfig+0x4d8>)
 800150a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800150c:	4a76      	ldr	r2, [pc, #472]	; (80016e8 <HAL_RCC_OscConfig+0x4d8>)
 800150e:	f043 0304 	orr.w	r3, r3, #4
 8001512:	6713      	str	r3, [r2, #112]	; 0x70
 8001514:	4b74      	ldr	r3, [pc, #464]	; (80016e8 <HAL_RCC_OscConfig+0x4d8>)
 8001516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001518:	4a73      	ldr	r2, [pc, #460]	; (80016e8 <HAL_RCC_OscConfig+0x4d8>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	6713      	str	r3, [r2, #112]	; 0x70
 8001520:	e00b      	b.n	800153a <HAL_RCC_OscConfig+0x32a>
 8001522:	4b71      	ldr	r3, [pc, #452]	; (80016e8 <HAL_RCC_OscConfig+0x4d8>)
 8001524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001526:	4a70      	ldr	r2, [pc, #448]	; (80016e8 <HAL_RCC_OscConfig+0x4d8>)
 8001528:	f023 0301 	bic.w	r3, r3, #1
 800152c:	6713      	str	r3, [r2, #112]	; 0x70
 800152e:	4b6e      	ldr	r3, [pc, #440]	; (80016e8 <HAL_RCC_OscConfig+0x4d8>)
 8001530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001532:	4a6d      	ldr	r2, [pc, #436]	; (80016e8 <HAL_RCC_OscConfig+0x4d8>)
 8001534:	f023 0304 	bic.w	r3, r3, #4
 8001538:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d015      	beq.n	800156e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001542:	f7ff fb67 	bl	8000c14 <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001548:	e00a      	b.n	8001560 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800154a:	f7ff fb63 	bl	8000c14 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	f241 3288 	movw	r2, #5000	; 0x1388
 8001558:	4293      	cmp	r3, r2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e0bc      	b.n	80016da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001560:	4b61      	ldr	r3, [pc, #388]	; (80016e8 <HAL_RCC_OscConfig+0x4d8>)
 8001562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0ee      	beq.n	800154a <HAL_RCC_OscConfig+0x33a>
 800156c:	e014      	b.n	8001598 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800156e:	f7ff fb51 	bl	8000c14 <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001574:	e00a      	b.n	800158c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001576:	f7ff fb4d 	bl	8000c14 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	f241 3288 	movw	r2, #5000	; 0x1388
 8001584:	4293      	cmp	r3, r2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e0a6      	b.n	80016da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800158c:	4b56      	ldr	r3, [pc, #344]	; (80016e8 <HAL_RCC_OscConfig+0x4d8>)
 800158e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1ee      	bne.n	8001576 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001598:	7dfb      	ldrb	r3, [r7, #23]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d105      	bne.n	80015aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800159e:	4b52      	ldr	r3, [pc, #328]	; (80016e8 <HAL_RCC_OscConfig+0x4d8>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	4a51      	ldr	r2, [pc, #324]	; (80016e8 <HAL_RCC_OscConfig+0x4d8>)
 80015a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f000 8092 	beq.w	80016d8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015b4:	4b4c      	ldr	r3, [pc, #304]	; (80016e8 <HAL_RCC_OscConfig+0x4d8>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f003 030c 	and.w	r3, r3, #12
 80015bc:	2b08      	cmp	r3, #8
 80015be:	d05c      	beq.n	800167a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d141      	bne.n	800164c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c8:	4b48      	ldr	r3, [pc, #288]	; (80016ec <HAL_RCC_OscConfig+0x4dc>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ce:	f7ff fb21 	bl	8000c14 <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015d6:	f7ff fb1d 	bl	8000c14 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e078      	b.n	80016da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e8:	4b3f      	ldr	r3, [pc, #252]	; (80016e8 <HAL_RCC_OscConfig+0x4d8>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1f0      	bne.n	80015d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	69da      	ldr	r2, [r3, #28]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	431a      	orrs	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001602:	019b      	lsls	r3, r3, #6
 8001604:	431a      	orrs	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160a:	085b      	lsrs	r3, r3, #1
 800160c:	3b01      	subs	r3, #1
 800160e:	041b      	lsls	r3, r3, #16
 8001610:	431a      	orrs	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001616:	061b      	lsls	r3, r3, #24
 8001618:	4933      	ldr	r1, [pc, #204]	; (80016e8 <HAL_RCC_OscConfig+0x4d8>)
 800161a:	4313      	orrs	r3, r2
 800161c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800161e:	4b33      	ldr	r3, [pc, #204]	; (80016ec <HAL_RCC_OscConfig+0x4dc>)
 8001620:	2201      	movs	r2, #1
 8001622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001624:	f7ff faf6 	bl	8000c14 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800162c:	f7ff faf2 	bl	8000c14 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e04d      	b.n	80016da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800163e:	4b2a      	ldr	r3, [pc, #168]	; (80016e8 <HAL_RCC_OscConfig+0x4d8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0f0      	beq.n	800162c <HAL_RCC_OscConfig+0x41c>
 800164a:	e045      	b.n	80016d8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800164c:	4b27      	ldr	r3, [pc, #156]	; (80016ec <HAL_RCC_OscConfig+0x4dc>)
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001652:	f7ff fadf 	bl	8000c14 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800165a:	f7ff fadb 	bl	8000c14 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e036      	b.n	80016da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800166c:	4b1e      	ldr	r3, [pc, #120]	; (80016e8 <HAL_RCC_OscConfig+0x4d8>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1f0      	bne.n	800165a <HAL_RCC_OscConfig+0x44a>
 8001678:	e02e      	b.n	80016d8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d101      	bne.n	8001686 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e029      	b.n	80016da <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001686:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <HAL_RCC_OscConfig+0x4d8>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	429a      	cmp	r2, r3
 8001698:	d11c      	bne.n	80016d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d115      	bne.n	80016d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016ae:	4013      	ands	r3, r2
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d10d      	bne.n	80016d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d106      	bne.n	80016d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d001      	beq.n	80016d8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e000      	b.n	80016da <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3718      	adds	r7, #24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40007000 	.word	0x40007000
 80016e8:	40023800 	.word	0x40023800
 80016ec:	42470060 	.word	0x42470060

080016f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d101      	bne.n	8001704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e0cc      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001704:	4b68      	ldr	r3, [pc, #416]	; (80018a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 030f 	and.w	r3, r3, #15
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	429a      	cmp	r2, r3
 8001710:	d90c      	bls.n	800172c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001712:	4b65      	ldr	r3, [pc, #404]	; (80018a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800171a:	4b63      	ldr	r3, [pc, #396]	; (80018a8 <HAL_RCC_ClockConfig+0x1b8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 030f 	and.w	r3, r3, #15
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	429a      	cmp	r2, r3
 8001726:	d001      	beq.n	800172c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e0b8      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d020      	beq.n	800177a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	d005      	beq.n	8001750 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001744:	4b59      	ldr	r3, [pc, #356]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	4a58      	ldr	r2, [pc, #352]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800174e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0308 	and.w	r3, r3, #8
 8001758:	2b00      	cmp	r3, #0
 800175a:	d005      	beq.n	8001768 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800175c:	4b53      	ldr	r3, [pc, #332]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	4a52      	ldr	r2, [pc, #328]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001762:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001766:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001768:	4b50      	ldr	r3, [pc, #320]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	494d      	ldr	r1, [pc, #308]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	4313      	orrs	r3, r2
 8001778:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b00      	cmp	r3, #0
 8001784:	d044      	beq.n	8001810 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d107      	bne.n	800179e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178e:	4b47      	ldr	r3, [pc, #284]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d119      	bne.n	80017ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e07f      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d003      	beq.n	80017ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	d107      	bne.n	80017be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ae:	4b3f      	ldr	r3, [pc, #252]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d109      	bne.n	80017ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e06f      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017be:	4b3b      	ldr	r3, [pc, #236]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e067      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ce:	4b37      	ldr	r3, [pc, #220]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f023 0203 	bic.w	r2, r3, #3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	4934      	ldr	r1, [pc, #208]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017e0:	f7ff fa18 	bl	8000c14 <HAL_GetTick>
 80017e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017e6:	e00a      	b.n	80017fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e8:	f7ff fa14 	bl	8000c14 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e04f      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017fe:	4b2b      	ldr	r3, [pc, #172]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 020c 	and.w	r2, r3, #12
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	429a      	cmp	r2, r3
 800180e:	d1eb      	bne.n	80017e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001810:	4b25      	ldr	r3, [pc, #148]	; (80018a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 030f 	and.w	r3, r3, #15
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	429a      	cmp	r2, r3
 800181c:	d20c      	bcs.n	8001838 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181e:	4b22      	ldr	r3, [pc, #136]	; (80018a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001826:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	429a      	cmp	r2, r3
 8001832:	d001      	beq.n	8001838 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e032      	b.n	800189e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b00      	cmp	r3, #0
 8001842:	d008      	beq.n	8001856 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001844:	4b19      	ldr	r3, [pc, #100]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	4916      	ldr	r1, [pc, #88]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001852:	4313      	orrs	r3, r2
 8001854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0308 	and.w	r3, r3, #8
 800185e:	2b00      	cmp	r3, #0
 8001860:	d009      	beq.n	8001876 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001862:	4b12      	ldr	r3, [pc, #72]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	490e      	ldr	r1, [pc, #56]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 8001872:	4313      	orrs	r3, r2
 8001874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001876:	f000 f821 	bl	80018bc <HAL_RCC_GetSysClockFreq>
 800187a:	4601      	mov	r1, r0
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	091b      	lsrs	r3, r3, #4
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001888:	5cd3      	ldrb	r3, [r2, r3]
 800188a:	fa21 f303 	lsr.w	r3, r1, r3
 800188e:	4a09      	ldr	r2, [pc, #36]	; (80018b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001892:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff f978 	bl	8000b8c <HAL_InitTick>

  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40023c00 	.word	0x40023c00
 80018ac:	40023800 	.word	0x40023800
 80018b0:	08005198 	.word	0x08005198
 80018b4:	20000000 	.word	0x20000000
 80018b8:	20000004 	.word	0x20000004

080018bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018c2:	2300      	movs	r3, #0
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	2300      	movs	r3, #0
 80018cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018d2:	4b50      	ldr	r3, [pc, #320]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x158>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 030c 	and.w	r3, r3, #12
 80018da:	2b04      	cmp	r3, #4
 80018dc:	d007      	beq.n	80018ee <HAL_RCC_GetSysClockFreq+0x32>
 80018de:	2b08      	cmp	r3, #8
 80018e0:	d008      	beq.n	80018f4 <HAL_RCC_GetSysClockFreq+0x38>
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f040 808d 	bne.w	8001a02 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018e8:	4b4b      	ldr	r3, [pc, #300]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x15c>)
 80018ea:	60bb      	str	r3, [r7, #8]
       break;
 80018ec:	e08c      	b.n	8001a08 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018ee:	4b4b      	ldr	r3, [pc, #300]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x160>)
 80018f0:	60bb      	str	r3, [r7, #8]
      break;
 80018f2:	e089      	b.n	8001a08 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018f4:	4b47      	ldr	r3, [pc, #284]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x158>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018fe:	4b45      	ldr	r3, [pc, #276]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x158>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d023      	beq.n	8001952 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800190a:	4b42      	ldr	r3, [pc, #264]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x158>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	099b      	lsrs	r3, r3, #6
 8001910:	f04f 0400 	mov.w	r4, #0
 8001914:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001918:	f04f 0200 	mov.w	r2, #0
 800191c:	ea03 0501 	and.w	r5, r3, r1
 8001920:	ea04 0602 	and.w	r6, r4, r2
 8001924:	4a3d      	ldr	r2, [pc, #244]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x160>)
 8001926:	fb02 f106 	mul.w	r1, r2, r6
 800192a:	2200      	movs	r2, #0
 800192c:	fb02 f205 	mul.w	r2, r2, r5
 8001930:	440a      	add	r2, r1
 8001932:	493a      	ldr	r1, [pc, #232]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x160>)
 8001934:	fba5 0101 	umull	r0, r1, r5, r1
 8001938:	1853      	adds	r3, r2, r1
 800193a:	4619      	mov	r1, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f04f 0400 	mov.w	r4, #0
 8001942:	461a      	mov	r2, r3
 8001944:	4623      	mov	r3, r4
 8001946:	f7fe fc9b 	bl	8000280 <__aeabi_uldivmod>
 800194a:	4603      	mov	r3, r0
 800194c:	460c      	mov	r4, r1
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	e049      	b.n	80019e6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001952:	4b30      	ldr	r3, [pc, #192]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x158>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	099b      	lsrs	r3, r3, #6
 8001958:	f04f 0400 	mov.w	r4, #0
 800195c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001960:	f04f 0200 	mov.w	r2, #0
 8001964:	ea03 0501 	and.w	r5, r3, r1
 8001968:	ea04 0602 	and.w	r6, r4, r2
 800196c:	4629      	mov	r1, r5
 800196e:	4632      	mov	r2, r6
 8001970:	f04f 0300 	mov.w	r3, #0
 8001974:	f04f 0400 	mov.w	r4, #0
 8001978:	0154      	lsls	r4, r2, #5
 800197a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800197e:	014b      	lsls	r3, r1, #5
 8001980:	4619      	mov	r1, r3
 8001982:	4622      	mov	r2, r4
 8001984:	1b49      	subs	r1, r1, r5
 8001986:	eb62 0206 	sbc.w	r2, r2, r6
 800198a:	f04f 0300 	mov.w	r3, #0
 800198e:	f04f 0400 	mov.w	r4, #0
 8001992:	0194      	lsls	r4, r2, #6
 8001994:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001998:	018b      	lsls	r3, r1, #6
 800199a:	1a5b      	subs	r3, r3, r1
 800199c:	eb64 0402 	sbc.w	r4, r4, r2
 80019a0:	f04f 0100 	mov.w	r1, #0
 80019a4:	f04f 0200 	mov.w	r2, #0
 80019a8:	00e2      	lsls	r2, r4, #3
 80019aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80019ae:	00d9      	lsls	r1, r3, #3
 80019b0:	460b      	mov	r3, r1
 80019b2:	4614      	mov	r4, r2
 80019b4:	195b      	adds	r3, r3, r5
 80019b6:	eb44 0406 	adc.w	r4, r4, r6
 80019ba:	f04f 0100 	mov.w	r1, #0
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	02a2      	lsls	r2, r4, #10
 80019c4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80019c8:	0299      	lsls	r1, r3, #10
 80019ca:	460b      	mov	r3, r1
 80019cc:	4614      	mov	r4, r2
 80019ce:	4618      	mov	r0, r3
 80019d0:	4621      	mov	r1, r4
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f04f 0400 	mov.w	r4, #0
 80019d8:	461a      	mov	r2, r3
 80019da:	4623      	mov	r3, r4
 80019dc:	f7fe fc50 	bl	8000280 <__aeabi_uldivmod>
 80019e0:	4603      	mov	r3, r0
 80019e2:	460c      	mov	r4, r1
 80019e4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019e6:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x158>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	0c1b      	lsrs	r3, r3, #16
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	3301      	adds	r3, #1
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fe:	60bb      	str	r3, [r7, #8]
      break;
 8001a00:	e002      	b.n	8001a08 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a02:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001a04:	60bb      	str	r3, [r7, #8]
      break;
 8001a06:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a08:	68bb      	ldr	r3, [r7, #8]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40023800 	.word	0x40023800
 8001a18:	00f42400 	.word	0x00f42400
 8001a1c:	017d7840 	.word	0x017d7840

08001a20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a24:	4b03      	ldr	r3, [pc, #12]	; (8001a34 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a26:	681b      	ldr	r3, [r3, #0]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	20000000 	.word	0x20000000

08001a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a3c:	f7ff fff0 	bl	8001a20 <HAL_RCC_GetHCLKFreq>
 8001a40:	4601      	mov	r1, r0
 8001a42:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	0a9b      	lsrs	r3, r3, #10
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	4a03      	ldr	r2, [pc, #12]	; (8001a5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a4e:	5cd3      	ldrb	r3, [r2, r3]
 8001a50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	080051a8 	.word	0x080051a8

08001a60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a64:	f7ff ffdc 	bl	8001a20 <HAL_RCC_GetHCLKFreq>
 8001a68:	4601      	mov	r1, r0
 8001a6a:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	0b5b      	lsrs	r3, r3, #13
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	4a03      	ldr	r2, [pc, #12]	; (8001a84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a76:	5cd3      	ldrb	r3, [r2, r3]
 8001a78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40023800 	.word	0x40023800
 8001a84:	080051a8 	.word	0x080051a8

08001a88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e056      	b.n	8001b48 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d106      	bne.n	8001aba <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7fe fed7 	bl	8000868 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2202      	movs	r2, #2
 8001abe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ad0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	431a      	orrs	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	431a      	orrs	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	695b      	ldr	r3, [r3, #20]
 8001aec:	431a      	orrs	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001af6:	431a      	orrs	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	69db      	ldr	r3, [r3, #28]
 8001afc:	431a      	orrs	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a1b      	ldr	r3, [r3, #32]
 8001b02:	ea42 0103 	orr.w	r1, r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	0c1b      	lsrs	r3, r3, #16
 8001b18:	f003 0104 	and.w	r1, r3, #4
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	69da      	ldr	r2, [r3, #28]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b36:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b088      	sub	sp, #32
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	603b      	str	r3, [r7, #0]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001b60:	2300      	movs	r3, #0
 8001b62:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d101      	bne.n	8001b72 <HAL_SPI_Transmit+0x22>
 8001b6e:	2302      	movs	r3, #2
 8001b70:	e11e      	b.n	8001db0 <HAL_SPI_Transmit+0x260>
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2201      	movs	r2, #1
 8001b76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b7a:	f7ff f84b 	bl	8000c14 <HAL_GetTick>
 8001b7e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001b80:	88fb      	ldrh	r3, [r7, #6]
 8001b82:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d002      	beq.n	8001b96 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001b90:	2302      	movs	r3, #2
 8001b92:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001b94:	e103      	b.n	8001d9e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d002      	beq.n	8001ba2 <HAL_SPI_Transmit+0x52>
 8001b9c:	88fb      	ldrh	r3, [r7, #6]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d102      	bne.n	8001ba8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001ba6:	e0fa      	b.n	8001d9e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2203      	movs	r2, #3
 8001bac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	68ba      	ldr	r2, [r7, #8]
 8001bba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	88fa      	ldrh	r2, [r7, #6]
 8001bc0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	88fa      	ldrh	r2, [r7, #6]
 8001bc6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bee:	d107      	bne.n	8001c00 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bfe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c0a:	2b40      	cmp	r3, #64	; 0x40
 8001c0c:	d007      	beq.n	8001c1e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c26:	d14b      	bne.n	8001cc0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d002      	beq.n	8001c36 <HAL_SPI_Transmit+0xe6>
 8001c30:	8afb      	ldrh	r3, [r7, #22]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d13e      	bne.n	8001cb4 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	881a      	ldrh	r2, [r3, #0]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	1c9a      	adds	r2, r3, #2
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	3b01      	subs	r3, #1
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001c5a:	e02b      	b.n	8001cb4 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d112      	bne.n	8001c90 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	881a      	ldrh	r2, [r3, #0]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	1c9a      	adds	r2, r3, #2
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	3b01      	subs	r3, #1
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	86da      	strh	r2, [r3, #54]	; 0x36
 8001c8e:	e011      	b.n	8001cb4 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c90:	f7fe ffc0 	bl	8000c14 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d803      	bhi.n	8001ca8 <HAL_SPI_Transmit+0x158>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ca6:	d102      	bne.n	8001cae <HAL_SPI_Transmit+0x15e>
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d102      	bne.n	8001cb4 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001cb2:	e074      	b.n	8001d9e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1ce      	bne.n	8001c5c <HAL_SPI_Transmit+0x10c>
 8001cbe:	e04c      	b.n	8001d5a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d002      	beq.n	8001cce <HAL_SPI_Transmit+0x17e>
 8001cc8:	8afb      	ldrh	r3, [r7, #22]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d140      	bne.n	8001d50 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	330c      	adds	r3, #12
 8001cd8:	7812      	ldrb	r2, [r2, #0]
 8001cda:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce0:	1c5a      	adds	r2, r3, #1
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	3b01      	subs	r3, #1
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001cf4:	e02c      	b.n	8001d50 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d113      	bne.n	8001d2c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	330c      	adds	r3, #12
 8001d0e:	7812      	ldrb	r2, [r2, #0]
 8001d10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	1c5a      	adds	r2, r3, #1
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	3b01      	subs	r3, #1
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	86da      	strh	r2, [r3, #54]	; 0x36
 8001d2a:	e011      	b.n	8001d50 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d2c:	f7fe ff72 	bl	8000c14 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d803      	bhi.n	8001d44 <HAL_SPI_Transmit+0x1f4>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d42:	d102      	bne.n	8001d4a <HAL_SPI_Transmit+0x1fa>
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d102      	bne.n	8001d50 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001d4e:	e026      	b.n	8001d9e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1cd      	bne.n	8001cf6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	6839      	ldr	r1, [r7, #0]
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	f000 fba4 	bl	80024ac <SPI_EndRxTxTransaction>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d002      	beq.n	8001d70 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2220      	movs	r2, #32
 8001d6e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d10a      	bne.n	8001d8e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001d78:	2300      	movs	r3, #0
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	613b      	str	r3, [r7, #16]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d002      	beq.n	8001d9c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	77fb      	strb	r3, [r7, #31]
 8001d9a:	e000      	b.n	8001d9e <HAL_SPI_Transmit+0x24e>
  }

error:
 8001d9c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001dae:	7ffb      	ldrb	r3, [r7, #31]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3720      	adds	r7, #32
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b088      	sub	sp, #32
 8001dbc:	af02      	add	r7, sp, #8
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	603b      	str	r3, [r7, #0]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001dd4:	d112      	bne.n	8001dfc <HAL_SPI_Receive+0x44>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10e      	bne.n	8001dfc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2204      	movs	r2, #4
 8001de2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001de6:	88fa      	ldrh	r2, [r7, #6]
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	4613      	mov	r3, r2
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	68b9      	ldr	r1, [r7, #8]
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f000 f8e9 	bl	8001fca <HAL_SPI_TransmitReceive>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	e0e2      	b.n	8001fc2 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d101      	bne.n	8001e0a <HAL_SPI_Receive+0x52>
 8001e06:	2302      	movs	r3, #2
 8001e08:	e0db      	b.n	8001fc2 <HAL_SPI_Receive+0x20a>
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e12:	f7fe feff 	bl	8000c14 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d002      	beq.n	8001e2a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001e24:	2302      	movs	r3, #2
 8001e26:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001e28:	e0c2      	b.n	8001fb0 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d002      	beq.n	8001e36 <HAL_SPI_Receive+0x7e>
 8001e30:	88fb      	ldrh	r3, [r7, #6]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d102      	bne.n	8001e3c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001e3a:	e0b9      	b.n	8001fb0 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2204      	movs	r2, #4
 8001e40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2200      	movs	r2, #0
 8001e48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	68ba      	ldr	r2, [r7, #8]
 8001e4e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	88fa      	ldrh	r2, [r7, #6]
 8001e54:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	88fa      	ldrh	r2, [r7, #6]
 8001e5a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2200      	movs	r2, #0
 8001e72:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2200      	movs	r2, #0
 8001e78:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e82:	d107      	bne.n	8001e94 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e92:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e9e:	2b40      	cmp	r3, #64	; 0x40
 8001ea0:	d007      	beq.n	8001eb2 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001eb0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d162      	bne.n	8001f80 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001eba:	e02e      	b.n	8001f1a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d115      	bne.n	8001ef6 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f103 020c 	add.w	r2, r3, #12
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed6:	7812      	ldrb	r2, [r2, #0]
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee0:	1c5a      	adds	r2, r3, #1
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	3b01      	subs	r3, #1
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001ef4:	e011      	b.n	8001f1a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ef6:	f7fe fe8d 	bl	8000c14 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d803      	bhi.n	8001f0e <HAL_SPI_Receive+0x156>
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f0c:	d102      	bne.n	8001f14 <HAL_SPI_Receive+0x15c>
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d102      	bne.n	8001f1a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001f18:	e04a      	b.n	8001fb0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1cb      	bne.n	8001ebc <HAL_SPI_Receive+0x104>
 8001f24:	e031      	b.n	8001f8a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d113      	bne.n	8001f5c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f3e:	b292      	uxth	r2, r2
 8001f40:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f46:	1c9a      	adds	r2, r3, #2
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	3b01      	subs	r3, #1
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001f5a:	e011      	b.n	8001f80 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f5c:	f7fe fe5a 	bl	8000c14 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d803      	bhi.n	8001f74 <HAL_SPI_Receive+0x1bc>
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f72:	d102      	bne.n	8001f7a <HAL_SPI_Receive+0x1c2>
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d102      	bne.n	8001f80 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001f7e:	e017      	b.n	8001fb0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1cd      	bne.n	8001f26 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	6839      	ldr	r1, [r7, #0]
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 fa27 	bl	80023e2 <SPI_EndRxTransaction>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d002      	beq.n	8001fa0 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2220      	movs	r2, #32
 8001f9e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d002      	beq.n	8001fae <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	75fb      	strb	r3, [r7, #23]
 8001fac:	e000      	b.n	8001fb0 <HAL_SPI_Receive+0x1f8>
  }

error :
 8001fae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b08c      	sub	sp, #48	; 0x30
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	60f8      	str	r0, [r7, #12]
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	607a      	str	r2, [r7, #4]
 8001fd6:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d101      	bne.n	8001ff0 <HAL_SPI_TransmitReceive+0x26>
 8001fec:	2302      	movs	r3, #2
 8001fee:	e18a      	b.n	8002306 <HAL_SPI_TransmitReceive+0x33c>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ff8:	f7fe fe0c 	bl	8000c14 <HAL_GetTick>
 8001ffc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002004:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800200e:	887b      	ldrh	r3, [r7, #2]
 8002010:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002012:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002016:	2b01      	cmp	r3, #1
 8002018:	d00f      	beq.n	800203a <HAL_SPI_TransmitReceive+0x70>
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002020:	d107      	bne.n	8002032 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d103      	bne.n	8002032 <HAL_SPI_TransmitReceive+0x68>
 800202a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800202e:	2b04      	cmp	r3, #4
 8002030:	d003      	beq.n	800203a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002032:	2302      	movs	r3, #2
 8002034:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002038:	e15b      	b.n	80022f2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d005      	beq.n	800204c <HAL_SPI_TransmitReceive+0x82>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d002      	beq.n	800204c <HAL_SPI_TransmitReceive+0x82>
 8002046:	887b      	ldrh	r3, [r7, #2]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d103      	bne.n	8002054 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002052:	e14e      	b.n	80022f2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b04      	cmp	r3, #4
 800205e:	d003      	beq.n	8002068 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2205      	movs	r2, #5
 8002064:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	887a      	ldrh	r2, [r7, #2]
 8002078:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	887a      	ldrh	r2, [r7, #2]
 800207e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	887a      	ldrh	r2, [r7, #2]
 800208a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	887a      	ldrh	r2, [r7, #2]
 8002090:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a8:	2b40      	cmp	r3, #64	; 0x40
 80020aa:	d007      	beq.n	80020bc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020c4:	d178      	bne.n	80021b8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d002      	beq.n	80020d4 <HAL_SPI_TransmitReceive+0x10a>
 80020ce:	8b7b      	ldrh	r3, [r7, #26]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d166      	bne.n	80021a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d8:	881a      	ldrh	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e4:	1c9a      	adds	r2, r3, #2
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	3b01      	subs	r3, #1
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020f8:	e053      	b.n	80021a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b02      	cmp	r3, #2
 8002106:	d11b      	bne.n	8002140 <HAL_SPI_TransmitReceive+0x176>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800210c:	b29b      	uxth	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d016      	beq.n	8002140 <HAL_SPI_TransmitReceive+0x176>
 8002112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002114:	2b01      	cmp	r3, #1
 8002116:	d113      	bne.n	8002140 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211c:	881a      	ldrh	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002128:	1c9a      	adds	r2, r3, #2
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002132:	b29b      	uxth	r3, r3
 8002134:	3b01      	subs	r3, #1
 8002136:	b29a      	uxth	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b01      	cmp	r3, #1
 800214c:	d119      	bne.n	8002182 <HAL_SPI_TransmitReceive+0x1b8>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002152:	b29b      	uxth	r3, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	d014      	beq.n	8002182 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68da      	ldr	r2, [r3, #12]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002162:	b292      	uxth	r2, r2
 8002164:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800216a:	1c9a      	adds	r2, r3, #2
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002174:	b29b      	uxth	r3, r3
 8002176:	3b01      	subs	r3, #1
 8002178:	b29a      	uxth	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800217e:	2301      	movs	r3, #1
 8002180:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002182:	f7fe fd47 	bl	8000c14 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800218e:	429a      	cmp	r2, r3
 8002190:	d807      	bhi.n	80021a2 <HAL_SPI_TransmitReceive+0x1d8>
 8002192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002194:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002198:	d003      	beq.n	80021a2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80021a0:	e0a7      	b.n	80022f2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1a6      	bne.n	80020fa <HAL_SPI_TransmitReceive+0x130>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1a1      	bne.n	80020fa <HAL_SPI_TransmitReceive+0x130>
 80021b6:	e07c      	b.n	80022b2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d002      	beq.n	80021c6 <HAL_SPI_TransmitReceive+0x1fc>
 80021c0:	8b7b      	ldrh	r3, [r7, #26]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d16b      	bne.n	800229e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	330c      	adds	r3, #12
 80021d0:	7812      	ldrb	r2, [r2, #0]
 80021d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d8:	1c5a      	adds	r2, r3, #1
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	3b01      	subs	r3, #1
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021ec:	e057      	b.n	800229e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d11c      	bne.n	8002236 <HAL_SPI_TransmitReceive+0x26c>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002200:	b29b      	uxth	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d017      	beq.n	8002236 <HAL_SPI_TransmitReceive+0x26c>
 8002206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002208:	2b01      	cmp	r3, #1
 800220a:	d114      	bne.n	8002236 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	330c      	adds	r3, #12
 8002216:	7812      	ldrb	r2, [r2, #0]
 8002218:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	1c5a      	adds	r2, r3, #1
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002228:	b29b      	uxth	r3, r3
 800222a:	3b01      	subs	r3, #1
 800222c:	b29a      	uxth	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002232:	2300      	movs	r3, #0
 8002234:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	2b01      	cmp	r3, #1
 8002242:	d119      	bne.n	8002278 <HAL_SPI_TransmitReceive+0x2ae>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002248:	b29b      	uxth	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d014      	beq.n	8002278 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68da      	ldr	r2, [r3, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002260:	1c5a      	adds	r2, r3, #1
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800226a:	b29b      	uxth	r3, r3
 800226c:	3b01      	subs	r3, #1
 800226e:	b29a      	uxth	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002274:	2301      	movs	r3, #1
 8002276:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002278:	f7fe fccc 	bl	8000c14 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002284:	429a      	cmp	r2, r3
 8002286:	d803      	bhi.n	8002290 <HAL_SPI_TransmitReceive+0x2c6>
 8002288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800228a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800228e:	d102      	bne.n	8002296 <HAL_SPI_TransmitReceive+0x2cc>
 8002290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002292:	2b00      	cmp	r3, #0
 8002294:	d103      	bne.n	800229e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800229c:	e029      	b.n	80022f2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1a2      	bne.n	80021ee <HAL_SPI_TransmitReceive+0x224>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d19d      	bne.n	80021ee <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f000 f8f8 	bl	80024ac <SPI_EndRxTxTransaction>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d006      	beq.n	80022d0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2220      	movs	r2, #32
 80022cc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80022ce:	e010      	b.n	80022f2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d10b      	bne.n	80022f0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	e000      	b.n	80022f2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80022f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002302:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002306:	4618      	mov	r0, r3
 8002308:	3730      	adds	r7, #48	; 0x30
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b084      	sub	sp, #16
 8002312:	af00      	add	r7, sp, #0
 8002314:	60f8      	str	r0, [r7, #12]
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	603b      	str	r3, [r7, #0]
 800231a:	4613      	mov	r3, r2
 800231c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800231e:	e04c      	b.n	80023ba <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002326:	d048      	beq.n	80023ba <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002328:	f7fe fc74 	bl	8000c14 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d902      	bls.n	800233e <SPI_WaitFlagStateUntilTimeout+0x30>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d13d      	bne.n	80023ba <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800234c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002356:	d111      	bne.n	800237c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002360:	d004      	beq.n	800236c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800236a:	d107      	bne.n	800237c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800237a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002380:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002384:	d10f      	bne.n	80023a6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e00f      	b.n	80023da <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	4013      	ands	r3, r2
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	bf0c      	ite	eq
 80023ca:	2301      	moveq	r3, #1
 80023cc:	2300      	movne	r3, #0
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	461a      	mov	r2, r3
 80023d2:	79fb      	ldrb	r3, [r7, #7]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d1a3      	bne.n	8002320 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b086      	sub	sp, #24
 80023e6:	af02      	add	r7, sp, #8
 80023e8:	60f8      	str	r0, [r7, #12]
 80023ea:	60b9      	str	r1, [r7, #8]
 80023ec:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023f6:	d111      	bne.n	800241c <SPI_EndRxTransaction+0x3a>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002400:	d004      	beq.n	800240c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800240a:	d107      	bne.n	800241c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800241a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002424:	d12a      	bne.n	800247c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800242e:	d012      	beq.n	8002456 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	2200      	movs	r2, #0
 8002438:	2180      	movs	r1, #128	; 0x80
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f7ff ff67 	bl	800230e <SPI_WaitFlagStateUntilTimeout>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d02d      	beq.n	80024a2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244a:	f043 0220 	orr.w	r2, r3, #32
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e026      	b.n	80024a4 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2200      	movs	r2, #0
 800245e:	2101      	movs	r1, #1
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f7ff ff54 	bl	800230e <SPI_WaitFlagStateUntilTimeout>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d01a      	beq.n	80024a2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002470:	f043 0220 	orr.w	r2, r3, #32
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e013      	b.n	80024a4 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	2200      	movs	r2, #0
 8002484:	2101      	movs	r1, #1
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f7ff ff41 	bl	800230e <SPI_WaitFlagStateUntilTimeout>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d007      	beq.n	80024a2 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002496:	f043 0220 	orr.w	r2, r3, #32
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e000      	b.n	80024a4 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b088      	sub	sp, #32
 80024b0:	af02      	add	r7, sp, #8
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80024b8:	4b1b      	ldr	r3, [pc, #108]	; (8002528 <SPI_EndRxTxTransaction+0x7c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a1b      	ldr	r2, [pc, #108]	; (800252c <SPI_EndRxTxTransaction+0x80>)
 80024be:	fba2 2303 	umull	r2, r3, r2, r3
 80024c2:	0d5b      	lsrs	r3, r3, #21
 80024c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024c8:	fb02 f303 	mul.w	r3, r2, r3
 80024cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024d6:	d112      	bne.n	80024fe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2200      	movs	r2, #0
 80024e0:	2180      	movs	r1, #128	; 0x80
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f7ff ff13 	bl	800230e <SPI_WaitFlagStateUntilTimeout>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d016      	beq.n	800251c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f2:	f043 0220 	orr.w	r2, r3, #32
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e00f      	b.n	800251e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00a      	beq.n	800251a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	3b01      	subs	r3, #1
 8002508:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002514:	2b80      	cmp	r3, #128	; 0x80
 8002516:	d0f2      	beq.n	80024fe <SPI_EndRxTxTransaction+0x52>
 8002518:	e000      	b.n	800251c <SPI_EndRxTxTransaction+0x70>
        break;
 800251a:	bf00      	nop
  }

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	20000000 	.word	0x20000000
 800252c:	165e9f81 	.word	0x165e9f81

08002530 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e03f      	b.n	80025c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d106      	bne.n	800255c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7fe f9ce 	bl	80008f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2224      	movs	r2, #36	; 0x24
 8002560:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68da      	ldr	r2, [r3, #12]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002572:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 fbf1 	bl	8002d5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	691a      	ldr	r2, [r3, #16]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002588:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	695a      	ldr	r2, [r3, #20]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002598:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68da      	ldr	r2, [r3, #12]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2220      	movs	r2, #32
 80025b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2220      	movs	r2, #32
 80025bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b088      	sub	sp, #32
 80025ce:	af02      	add	r7, sp, #8
 80025d0:	60f8      	str	r0, [r7, #12]
 80025d2:	60b9      	str	r1, [r7, #8]
 80025d4:	603b      	str	r3, [r7, #0]
 80025d6:	4613      	mov	r3, r2
 80025d8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80025da:	2300      	movs	r3, #0
 80025dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b20      	cmp	r3, #32
 80025e8:	f040 8083 	bne.w	80026f2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d002      	beq.n	80025f8 <HAL_UART_Transmit+0x2e>
 80025f2:	88fb      	ldrh	r3, [r7, #6]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e07b      	b.n	80026f4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002602:	2b01      	cmp	r3, #1
 8002604:	d101      	bne.n	800260a <HAL_UART_Transmit+0x40>
 8002606:	2302      	movs	r3, #2
 8002608:	e074      	b.n	80026f4 <HAL_UART_Transmit+0x12a>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2221      	movs	r2, #33	; 0x21
 800261c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002620:	f7fe faf8 	bl	8000c14 <HAL_GetTick>
 8002624:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	88fa      	ldrh	r2, [r7, #6]
 800262a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	88fa      	ldrh	r2, [r7, #6]
 8002630:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800263a:	e042      	b.n	80026c2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002640:	b29b      	uxth	r3, r3
 8002642:	3b01      	subs	r3, #1
 8002644:	b29a      	uxth	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002652:	d122      	bne.n	800269a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	9300      	str	r3, [sp, #0]
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	2200      	movs	r2, #0
 800265c:	2180      	movs	r1, #128	; 0x80
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f000 fa10 	bl	8002a84 <UART_WaitOnFlagUntilTimeout>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e042      	b.n	80026f4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	461a      	mov	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002680:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d103      	bne.n	8002692 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	3302      	adds	r3, #2
 800268e:	60bb      	str	r3, [r7, #8]
 8002690:	e017      	b.n	80026c2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	3301      	adds	r3, #1
 8002696:	60bb      	str	r3, [r7, #8]
 8002698:	e013      	b.n	80026c2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	2200      	movs	r2, #0
 80026a2:	2180      	movs	r1, #128	; 0x80
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f000 f9ed 	bl	8002a84 <UART_WaitOnFlagUntilTimeout>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e01f      	b.n	80026f4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	60ba      	str	r2, [r7, #8]
 80026ba:	781a      	ldrb	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1b7      	bne.n	800263c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	2200      	movs	r2, #0
 80026d4:	2140      	movs	r1, #64	; 0x40
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 f9d4 	bl	8002a84 <UART_WaitOnFlagUntilTimeout>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e006      	b.n	80026f4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2220      	movs	r2, #32
 80026ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80026ee:	2300      	movs	r3, #0
 80026f0:	e000      	b.n	80026f4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80026f2:	2302      	movs	r3, #2
  }
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b088      	sub	sp, #32
 8002700:	af02      	add	r7, sp, #8
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	603b      	str	r3, [r7, #0]
 8002708:	4613      	mov	r3, r2
 800270a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800270c:	2300      	movs	r3, #0
 800270e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b20      	cmp	r3, #32
 800271a:	f040 8090 	bne.w	800283e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d002      	beq.n	800272a <HAL_UART_Receive+0x2e>
 8002724:	88fb      	ldrh	r3, [r7, #6]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e088      	b.n	8002840 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002734:	2b01      	cmp	r3, #1
 8002736:	d101      	bne.n	800273c <HAL_UART_Receive+0x40>
 8002738:	2302      	movs	r3, #2
 800273a:	e081      	b.n	8002840 <HAL_UART_Receive+0x144>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2222      	movs	r2, #34	; 0x22
 800274e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002752:	f7fe fa5f 	bl	8000c14 <HAL_GetTick>
 8002756:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	88fa      	ldrh	r2, [r7, #6]
 800275c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	88fa      	ldrh	r2, [r7, #6]
 8002762:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800276c:	e05c      	b.n	8002828 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002772:	b29b      	uxth	r3, r3
 8002774:	3b01      	subs	r3, #1
 8002776:	b29a      	uxth	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002784:	d12b      	bne.n	80027de <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	2200      	movs	r2, #0
 800278e:	2120      	movs	r1, #32
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 f977 	bl	8002a84 <UART_WaitOnFlagUntilTimeout>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e04f      	b.n	8002840 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10c      	bne.n	80027c6 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	3302      	adds	r3, #2
 80027c2:	60bb      	str	r3, [r7, #8]
 80027c4:	e030      	b.n	8002828 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	3301      	adds	r3, #1
 80027da:	60bb      	str	r3, [r7, #8]
 80027dc:	e024      	b.n	8002828 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	2200      	movs	r2, #0
 80027e6:	2120      	movs	r1, #32
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f000 f94b 	bl	8002a84 <UART_WaitOnFlagUntilTimeout>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e023      	b.n	8002840 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d108      	bne.n	8002812 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6859      	ldr	r1, [r3, #4]
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	1c5a      	adds	r2, r3, #1
 800280a:	60ba      	str	r2, [r7, #8]
 800280c:	b2ca      	uxtb	r2, r1
 800280e:	701a      	strb	r2, [r3, #0]
 8002810:	e00a      	b.n	8002828 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	b2da      	uxtb	r2, r3
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	1c59      	adds	r1, r3, #1
 800281e:	60b9      	str	r1, [r7, #8]
 8002820:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800282c:	b29b      	uxth	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d19d      	bne.n	800276e <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2220      	movs	r2, #32
 8002836:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800283a:	2300      	movs	r3, #0
 800283c:	e000      	b.n	8002840 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800283e:	2302      	movs	r3, #2
  }
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002868:	2300      	movs	r3, #0
 800286a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800286c:	2300      	movs	r3, #0
 800286e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10d      	bne.n	800289a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	f003 0320 	and.w	r3, r3, #32
 8002884:	2b00      	cmp	r3, #0
 8002886:	d008      	beq.n	800289a <HAL_UART_IRQHandler+0x52>
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	f003 0320 	and.w	r3, r3, #32
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f9e0 	bl	8002c58 <UART_Receive_IT>
      return;
 8002898:	e0d1      	b.n	8002a3e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 80b0 	beq.w	8002a02 <HAL_UART_IRQHandler+0x1ba>
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d105      	bne.n	80028b8 <HAL_UART_IRQHandler+0x70>
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 80a5 	beq.w	8002a02 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00a      	beq.n	80028d8 <HAL_UART_IRQHandler+0x90>
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d005      	beq.n	80028d8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d0:	f043 0201 	orr.w	r2, r3, #1
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00a      	beq.n	80028f8 <HAL_UART_IRQHandler+0xb0>
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d005      	beq.n	80028f8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f0:	f043 0202 	orr.w	r2, r3, #2
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00a      	beq.n	8002918 <HAL_UART_IRQHandler+0xd0>
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b00      	cmp	r3, #0
 800290a:	d005      	beq.n	8002918 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002910:	f043 0204 	orr.w	r2, r3, #4
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f003 0308 	and.w	r3, r3, #8
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00f      	beq.n	8002942 <HAL_UART_IRQHandler+0xfa>
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	f003 0320 	and.w	r3, r3, #32
 8002928:	2b00      	cmp	r3, #0
 800292a:	d104      	bne.n	8002936 <HAL_UART_IRQHandler+0xee>
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d005      	beq.n	8002942 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293a:	f043 0208 	orr.w	r2, r3, #8
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002946:	2b00      	cmp	r3, #0
 8002948:	d078      	beq.n	8002a3c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	f003 0320 	and.w	r3, r3, #32
 8002950:	2b00      	cmp	r3, #0
 8002952:	d007      	beq.n	8002964 <HAL_UART_IRQHandler+0x11c>
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	f003 0320 	and.w	r3, r3, #32
 800295a:	2b00      	cmp	r3, #0
 800295c:	d002      	beq.n	8002964 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f97a 	bl	8002c58 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800296e:	2b40      	cmp	r3, #64	; 0x40
 8002970:	bf0c      	ite	eq
 8002972:	2301      	moveq	r3, #1
 8002974:	2300      	movne	r3, #0
 8002976:	b2db      	uxtb	r3, r3
 8002978:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297e:	f003 0308 	and.w	r3, r3, #8
 8002982:	2b00      	cmp	r3, #0
 8002984:	d102      	bne.n	800298c <HAL_UART_IRQHandler+0x144>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d031      	beq.n	80029f0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 f8c3 	bl	8002b18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800299c:	2b40      	cmp	r3, #64	; 0x40
 800299e:	d123      	bne.n	80029e8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	695a      	ldr	r2, [r3, #20]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029ae:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d013      	beq.n	80029e0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029bc:	4a21      	ldr	r2, [pc, #132]	; (8002a44 <HAL_UART_IRQHandler+0x1fc>)
 80029be:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7fe fa64 	bl	8000e92 <HAL_DMA_Abort_IT>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d016      	beq.n	80029fe <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029da:	4610      	mov	r0, r2
 80029dc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029de:	e00e      	b.n	80029fe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 f845 	bl	8002a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029e6:	e00a      	b.n	80029fe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 f841 	bl	8002a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029ee:	e006      	b.n	80029fe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 f83d 	bl	8002a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80029fc:	e01e      	b.n	8002a3c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029fe:	bf00      	nop
    return;
 8002a00:	e01c      	b.n	8002a3c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d008      	beq.n	8002a1e <HAL_UART_IRQHandler+0x1d6>
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f8b0 	bl	8002b7c <UART_Transmit_IT>
    return;
 8002a1c:	e00f      	b.n	8002a3e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00a      	beq.n	8002a3e <HAL_UART_IRQHandler+0x1f6>
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d005      	beq.n	8002a3e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f8f8 	bl	8002c28 <UART_EndTransmit_IT>
    return;
 8002a38:	bf00      	nop
 8002a3a:	e000      	b.n	8002a3e <HAL_UART_IRQHandler+0x1f6>
    return;
 8002a3c:	bf00      	nop
  }
}
 8002a3e:	3720      	adds	r7, #32
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	08002b55 	.word	0x08002b55

08002a48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	603b      	str	r3, [r7, #0]
 8002a90:	4613      	mov	r3, r2
 8002a92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a94:	e02c      	b.n	8002af0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a9c:	d028      	beq.n	8002af0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d007      	beq.n	8002ab4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002aa4:	f7fe f8b6 	bl	8000c14 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d21d      	bcs.n	8002af0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68da      	ldr	r2, [r3, #12]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ac2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	695a      	ldr	r2, [r3, #20]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0201 	bic.w	r2, r2, #1
 8002ad2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e00f      	b.n	8002b10 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	4013      	ands	r3, r2
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	bf0c      	ite	eq
 8002b00:	2301      	moveq	r3, #1
 8002b02:	2300      	movne	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	461a      	mov	r2, r3
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d0c3      	beq.n	8002a96 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68da      	ldr	r2, [r3, #12]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002b2e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	695a      	ldr	r2, [r3, #20]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0201 	bic.w	r2, r2, #1
 8002b3e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2220      	movs	r2, #32
 8002b44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f7ff ff7e 	bl	8002a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b74:	bf00      	nop
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b21      	cmp	r3, #33	; 0x21
 8002b8e:	d144      	bne.n	8002c1a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b98:	d11a      	bne.n	8002bd0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	881b      	ldrh	r3, [r3, #0]
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bae:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d105      	bne.n	8002bc4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	1c9a      	adds	r2, r3, #2
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	621a      	str	r2, [r3, #32]
 8002bc2:	e00e      	b.n	8002be2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	1c5a      	adds	r2, r3, #1
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	621a      	str	r2, [r3, #32]
 8002bce:	e008      	b.n	8002be2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	1c59      	adds	r1, r3, #1
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	6211      	str	r1, [r2, #32]
 8002bda:	781a      	ldrb	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	3b01      	subs	r3, #1
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	4619      	mov	r1, r3
 8002bf0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10f      	bne.n	8002c16 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c04:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68da      	ldr	r2, [r3, #12]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c14:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002c16:	2300      	movs	r3, #0
 8002c18:	e000      	b.n	8002c1c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002c1a:	2302      	movs	r3, #2
  }
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c3e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2220      	movs	r2, #32
 8002c44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7ff fefd 	bl	8002a48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b22      	cmp	r3, #34	; 0x22
 8002c6a:	d171      	bne.n	8002d50 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c74:	d123      	bne.n	8002cbe <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10e      	bne.n	8002ca2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9a:	1c9a      	adds	r2, r3, #2
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	629a      	str	r2, [r3, #40]	; 0x28
 8002ca0:	e029      	b.n	8002cf6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb6:	1c5a      	adds	r2, r3, #1
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	629a      	str	r2, [r3, #40]	; 0x28
 8002cbc:	e01b      	b.n	8002cf6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10a      	bne.n	8002cdc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	6858      	ldr	r0, [r3, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd0:	1c59      	adds	r1, r3, #1
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	6291      	str	r1, [r2, #40]	; 0x28
 8002cd6:	b2c2      	uxtb	r2, r0
 8002cd8:	701a      	strb	r2, [r3, #0]
 8002cda:	e00c      	b.n	8002cf6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce8:	1c58      	adds	r0, r3, #1
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	6288      	str	r0, [r1, #40]	; 0x28
 8002cee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	4619      	mov	r1, r3
 8002d04:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d120      	bne.n	8002d4c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68da      	ldr	r2, [r3, #12]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 0220 	bic.w	r2, r2, #32
 8002d18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d28:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	695a      	ldr	r2, [r3, #20]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0201 	bic.w	r2, r2, #1
 8002d38:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7ff fe8a 	bl	8002a5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	e002      	b.n	8002d52 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	e000      	b.n	8002d52 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002d50:	2302      	movs	r3, #2
  }
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
	...

08002d5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d60:	b085      	sub	sp, #20
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68da      	ldr	r2, [r3, #12]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	431a      	orrs	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69db      	ldr	r3, [r3, #28]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002d9e:	f023 030c 	bic.w	r3, r3, #12
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6812      	ldr	r2, [r2, #0]
 8002da6:	68f9      	ldr	r1, [r7, #12]
 8002da8:	430b      	orrs	r3, r1
 8002daa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699a      	ldr	r2, [r3, #24]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dca:	f040 818b 	bne.w	80030e4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4ac1      	ldr	r2, [pc, #772]	; (80030d8 <UART_SetConfig+0x37c>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d005      	beq.n	8002de4 <UART_SetConfig+0x88>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4abf      	ldr	r2, [pc, #764]	; (80030dc <UART_SetConfig+0x380>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	f040 80bd 	bne.w	8002f5e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002de4:	f7fe fe3c 	bl	8001a60 <HAL_RCC_GetPCLK2Freq>
 8002de8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	461d      	mov	r5, r3
 8002dee:	f04f 0600 	mov.w	r6, #0
 8002df2:	46a8      	mov	r8, r5
 8002df4:	46b1      	mov	r9, r6
 8002df6:	eb18 0308 	adds.w	r3, r8, r8
 8002dfa:	eb49 0409 	adc.w	r4, r9, r9
 8002dfe:	4698      	mov	r8, r3
 8002e00:	46a1      	mov	r9, r4
 8002e02:	eb18 0805 	adds.w	r8, r8, r5
 8002e06:	eb49 0906 	adc.w	r9, r9, r6
 8002e0a:	f04f 0100 	mov.w	r1, #0
 8002e0e:	f04f 0200 	mov.w	r2, #0
 8002e12:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002e16:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002e1a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002e1e:	4688      	mov	r8, r1
 8002e20:	4691      	mov	r9, r2
 8002e22:	eb18 0005 	adds.w	r0, r8, r5
 8002e26:	eb49 0106 	adc.w	r1, r9, r6
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	461d      	mov	r5, r3
 8002e30:	f04f 0600 	mov.w	r6, #0
 8002e34:	196b      	adds	r3, r5, r5
 8002e36:	eb46 0406 	adc.w	r4, r6, r6
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	4623      	mov	r3, r4
 8002e3e:	f7fd fa1f 	bl	8000280 <__aeabi_uldivmod>
 8002e42:	4603      	mov	r3, r0
 8002e44:	460c      	mov	r4, r1
 8002e46:	461a      	mov	r2, r3
 8002e48:	4ba5      	ldr	r3, [pc, #660]	; (80030e0 <UART_SetConfig+0x384>)
 8002e4a:	fba3 2302 	umull	r2, r3, r3, r2
 8002e4e:	095b      	lsrs	r3, r3, #5
 8002e50:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	461d      	mov	r5, r3
 8002e58:	f04f 0600 	mov.w	r6, #0
 8002e5c:	46a9      	mov	r9, r5
 8002e5e:	46b2      	mov	sl, r6
 8002e60:	eb19 0309 	adds.w	r3, r9, r9
 8002e64:	eb4a 040a 	adc.w	r4, sl, sl
 8002e68:	4699      	mov	r9, r3
 8002e6a:	46a2      	mov	sl, r4
 8002e6c:	eb19 0905 	adds.w	r9, r9, r5
 8002e70:	eb4a 0a06 	adc.w	sl, sl, r6
 8002e74:	f04f 0100 	mov.w	r1, #0
 8002e78:	f04f 0200 	mov.w	r2, #0
 8002e7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e80:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e84:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e88:	4689      	mov	r9, r1
 8002e8a:	4692      	mov	sl, r2
 8002e8c:	eb19 0005 	adds.w	r0, r9, r5
 8002e90:	eb4a 0106 	adc.w	r1, sl, r6
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	461d      	mov	r5, r3
 8002e9a:	f04f 0600 	mov.w	r6, #0
 8002e9e:	196b      	adds	r3, r5, r5
 8002ea0:	eb46 0406 	adc.w	r4, r6, r6
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4623      	mov	r3, r4
 8002ea8:	f7fd f9ea 	bl	8000280 <__aeabi_uldivmod>
 8002eac:	4603      	mov	r3, r0
 8002eae:	460c      	mov	r4, r1
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	4b8b      	ldr	r3, [pc, #556]	; (80030e0 <UART_SetConfig+0x384>)
 8002eb4:	fba3 1302 	umull	r1, r3, r3, r2
 8002eb8:	095b      	lsrs	r3, r3, #5
 8002eba:	2164      	movs	r1, #100	; 0x64
 8002ebc:	fb01 f303 	mul.w	r3, r1, r3
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	3332      	adds	r3, #50	; 0x32
 8002ec6:	4a86      	ldr	r2, [pc, #536]	; (80030e0 <UART_SetConfig+0x384>)
 8002ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ecc:	095b      	lsrs	r3, r3, #5
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ed4:	4498      	add	r8, r3
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	461d      	mov	r5, r3
 8002eda:	f04f 0600 	mov.w	r6, #0
 8002ede:	46a9      	mov	r9, r5
 8002ee0:	46b2      	mov	sl, r6
 8002ee2:	eb19 0309 	adds.w	r3, r9, r9
 8002ee6:	eb4a 040a 	adc.w	r4, sl, sl
 8002eea:	4699      	mov	r9, r3
 8002eec:	46a2      	mov	sl, r4
 8002eee:	eb19 0905 	adds.w	r9, r9, r5
 8002ef2:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ef6:	f04f 0100 	mov.w	r1, #0
 8002efa:	f04f 0200 	mov.w	r2, #0
 8002efe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f02:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f06:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f0a:	4689      	mov	r9, r1
 8002f0c:	4692      	mov	sl, r2
 8002f0e:	eb19 0005 	adds.w	r0, r9, r5
 8002f12:	eb4a 0106 	adc.w	r1, sl, r6
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	461d      	mov	r5, r3
 8002f1c:	f04f 0600 	mov.w	r6, #0
 8002f20:	196b      	adds	r3, r5, r5
 8002f22:	eb46 0406 	adc.w	r4, r6, r6
 8002f26:	461a      	mov	r2, r3
 8002f28:	4623      	mov	r3, r4
 8002f2a:	f7fd f9a9 	bl	8000280 <__aeabi_uldivmod>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	460c      	mov	r4, r1
 8002f32:	461a      	mov	r2, r3
 8002f34:	4b6a      	ldr	r3, [pc, #424]	; (80030e0 <UART_SetConfig+0x384>)
 8002f36:	fba3 1302 	umull	r1, r3, r3, r2
 8002f3a:	095b      	lsrs	r3, r3, #5
 8002f3c:	2164      	movs	r1, #100	; 0x64
 8002f3e:	fb01 f303 	mul.w	r3, r1, r3
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	3332      	adds	r3, #50	; 0x32
 8002f48:	4a65      	ldr	r2, [pc, #404]	; (80030e0 <UART_SetConfig+0x384>)
 8002f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4e:	095b      	lsrs	r3, r3, #5
 8002f50:	f003 0207 	and.w	r2, r3, #7
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4442      	add	r2, r8
 8002f5a:	609a      	str	r2, [r3, #8]
 8002f5c:	e26f      	b.n	800343e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f5e:	f7fe fd6b 	bl	8001a38 <HAL_RCC_GetPCLK1Freq>
 8002f62:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	461d      	mov	r5, r3
 8002f68:	f04f 0600 	mov.w	r6, #0
 8002f6c:	46a8      	mov	r8, r5
 8002f6e:	46b1      	mov	r9, r6
 8002f70:	eb18 0308 	adds.w	r3, r8, r8
 8002f74:	eb49 0409 	adc.w	r4, r9, r9
 8002f78:	4698      	mov	r8, r3
 8002f7a:	46a1      	mov	r9, r4
 8002f7c:	eb18 0805 	adds.w	r8, r8, r5
 8002f80:	eb49 0906 	adc.w	r9, r9, r6
 8002f84:	f04f 0100 	mov.w	r1, #0
 8002f88:	f04f 0200 	mov.w	r2, #0
 8002f8c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002f90:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002f94:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002f98:	4688      	mov	r8, r1
 8002f9a:	4691      	mov	r9, r2
 8002f9c:	eb18 0005 	adds.w	r0, r8, r5
 8002fa0:	eb49 0106 	adc.w	r1, r9, r6
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	461d      	mov	r5, r3
 8002faa:	f04f 0600 	mov.w	r6, #0
 8002fae:	196b      	adds	r3, r5, r5
 8002fb0:	eb46 0406 	adc.w	r4, r6, r6
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	4623      	mov	r3, r4
 8002fb8:	f7fd f962 	bl	8000280 <__aeabi_uldivmod>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	460c      	mov	r4, r1
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4b47      	ldr	r3, [pc, #284]	; (80030e0 <UART_SetConfig+0x384>)
 8002fc4:	fba3 2302 	umull	r2, r3, r3, r2
 8002fc8:	095b      	lsrs	r3, r3, #5
 8002fca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	461d      	mov	r5, r3
 8002fd2:	f04f 0600 	mov.w	r6, #0
 8002fd6:	46a9      	mov	r9, r5
 8002fd8:	46b2      	mov	sl, r6
 8002fda:	eb19 0309 	adds.w	r3, r9, r9
 8002fde:	eb4a 040a 	adc.w	r4, sl, sl
 8002fe2:	4699      	mov	r9, r3
 8002fe4:	46a2      	mov	sl, r4
 8002fe6:	eb19 0905 	adds.w	r9, r9, r5
 8002fea:	eb4a 0a06 	adc.w	sl, sl, r6
 8002fee:	f04f 0100 	mov.w	r1, #0
 8002ff2:	f04f 0200 	mov.w	r2, #0
 8002ff6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ffa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ffe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003002:	4689      	mov	r9, r1
 8003004:	4692      	mov	sl, r2
 8003006:	eb19 0005 	adds.w	r0, r9, r5
 800300a:	eb4a 0106 	adc.w	r1, sl, r6
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	461d      	mov	r5, r3
 8003014:	f04f 0600 	mov.w	r6, #0
 8003018:	196b      	adds	r3, r5, r5
 800301a:	eb46 0406 	adc.w	r4, r6, r6
 800301e:	461a      	mov	r2, r3
 8003020:	4623      	mov	r3, r4
 8003022:	f7fd f92d 	bl	8000280 <__aeabi_uldivmod>
 8003026:	4603      	mov	r3, r0
 8003028:	460c      	mov	r4, r1
 800302a:	461a      	mov	r2, r3
 800302c:	4b2c      	ldr	r3, [pc, #176]	; (80030e0 <UART_SetConfig+0x384>)
 800302e:	fba3 1302 	umull	r1, r3, r3, r2
 8003032:	095b      	lsrs	r3, r3, #5
 8003034:	2164      	movs	r1, #100	; 0x64
 8003036:	fb01 f303 	mul.w	r3, r1, r3
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	3332      	adds	r3, #50	; 0x32
 8003040:	4a27      	ldr	r2, [pc, #156]	; (80030e0 <UART_SetConfig+0x384>)
 8003042:	fba2 2303 	umull	r2, r3, r2, r3
 8003046:	095b      	lsrs	r3, r3, #5
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800304e:	4498      	add	r8, r3
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	461d      	mov	r5, r3
 8003054:	f04f 0600 	mov.w	r6, #0
 8003058:	46a9      	mov	r9, r5
 800305a:	46b2      	mov	sl, r6
 800305c:	eb19 0309 	adds.w	r3, r9, r9
 8003060:	eb4a 040a 	adc.w	r4, sl, sl
 8003064:	4699      	mov	r9, r3
 8003066:	46a2      	mov	sl, r4
 8003068:	eb19 0905 	adds.w	r9, r9, r5
 800306c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003070:	f04f 0100 	mov.w	r1, #0
 8003074:	f04f 0200 	mov.w	r2, #0
 8003078:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800307c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003080:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003084:	4689      	mov	r9, r1
 8003086:	4692      	mov	sl, r2
 8003088:	eb19 0005 	adds.w	r0, r9, r5
 800308c:	eb4a 0106 	adc.w	r1, sl, r6
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	461d      	mov	r5, r3
 8003096:	f04f 0600 	mov.w	r6, #0
 800309a:	196b      	adds	r3, r5, r5
 800309c:	eb46 0406 	adc.w	r4, r6, r6
 80030a0:	461a      	mov	r2, r3
 80030a2:	4623      	mov	r3, r4
 80030a4:	f7fd f8ec 	bl	8000280 <__aeabi_uldivmod>
 80030a8:	4603      	mov	r3, r0
 80030aa:	460c      	mov	r4, r1
 80030ac:	461a      	mov	r2, r3
 80030ae:	4b0c      	ldr	r3, [pc, #48]	; (80030e0 <UART_SetConfig+0x384>)
 80030b0:	fba3 1302 	umull	r1, r3, r3, r2
 80030b4:	095b      	lsrs	r3, r3, #5
 80030b6:	2164      	movs	r1, #100	; 0x64
 80030b8:	fb01 f303 	mul.w	r3, r1, r3
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	3332      	adds	r3, #50	; 0x32
 80030c2:	4a07      	ldr	r2, [pc, #28]	; (80030e0 <UART_SetConfig+0x384>)
 80030c4:	fba2 2303 	umull	r2, r3, r2, r3
 80030c8:	095b      	lsrs	r3, r3, #5
 80030ca:	f003 0207 	and.w	r2, r3, #7
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4442      	add	r2, r8
 80030d4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80030d6:	e1b2      	b.n	800343e <UART_SetConfig+0x6e2>
 80030d8:	40011000 	.word	0x40011000
 80030dc:	40011400 	.word	0x40011400
 80030e0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4ad7      	ldr	r2, [pc, #860]	; (8003448 <UART_SetConfig+0x6ec>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d005      	beq.n	80030fa <UART_SetConfig+0x39e>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4ad6      	ldr	r2, [pc, #856]	; (800344c <UART_SetConfig+0x6f0>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	f040 80d1 	bne.w	800329c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80030fa:	f7fe fcb1 	bl	8001a60 <HAL_RCC_GetPCLK2Freq>
 80030fe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	469a      	mov	sl, r3
 8003104:	f04f 0b00 	mov.w	fp, #0
 8003108:	46d0      	mov	r8, sl
 800310a:	46d9      	mov	r9, fp
 800310c:	eb18 0308 	adds.w	r3, r8, r8
 8003110:	eb49 0409 	adc.w	r4, r9, r9
 8003114:	4698      	mov	r8, r3
 8003116:	46a1      	mov	r9, r4
 8003118:	eb18 080a 	adds.w	r8, r8, sl
 800311c:	eb49 090b 	adc.w	r9, r9, fp
 8003120:	f04f 0100 	mov.w	r1, #0
 8003124:	f04f 0200 	mov.w	r2, #0
 8003128:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800312c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003130:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003134:	4688      	mov	r8, r1
 8003136:	4691      	mov	r9, r2
 8003138:	eb1a 0508 	adds.w	r5, sl, r8
 800313c:	eb4b 0609 	adc.w	r6, fp, r9
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	4619      	mov	r1, r3
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	f04f 0300 	mov.w	r3, #0
 800314e:	f04f 0400 	mov.w	r4, #0
 8003152:	0094      	lsls	r4, r2, #2
 8003154:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003158:	008b      	lsls	r3, r1, #2
 800315a:	461a      	mov	r2, r3
 800315c:	4623      	mov	r3, r4
 800315e:	4628      	mov	r0, r5
 8003160:	4631      	mov	r1, r6
 8003162:	f7fd f88d 	bl	8000280 <__aeabi_uldivmod>
 8003166:	4603      	mov	r3, r0
 8003168:	460c      	mov	r4, r1
 800316a:	461a      	mov	r2, r3
 800316c:	4bb8      	ldr	r3, [pc, #736]	; (8003450 <UART_SetConfig+0x6f4>)
 800316e:	fba3 2302 	umull	r2, r3, r3, r2
 8003172:	095b      	lsrs	r3, r3, #5
 8003174:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	469b      	mov	fp, r3
 800317c:	f04f 0c00 	mov.w	ip, #0
 8003180:	46d9      	mov	r9, fp
 8003182:	46e2      	mov	sl, ip
 8003184:	eb19 0309 	adds.w	r3, r9, r9
 8003188:	eb4a 040a 	adc.w	r4, sl, sl
 800318c:	4699      	mov	r9, r3
 800318e:	46a2      	mov	sl, r4
 8003190:	eb19 090b 	adds.w	r9, r9, fp
 8003194:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003198:	f04f 0100 	mov.w	r1, #0
 800319c:	f04f 0200 	mov.w	r2, #0
 80031a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031ac:	4689      	mov	r9, r1
 80031ae:	4692      	mov	sl, r2
 80031b0:	eb1b 0509 	adds.w	r5, fp, r9
 80031b4:	eb4c 060a 	adc.w	r6, ip, sl
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	4619      	mov	r1, r3
 80031be:	f04f 0200 	mov.w	r2, #0
 80031c2:	f04f 0300 	mov.w	r3, #0
 80031c6:	f04f 0400 	mov.w	r4, #0
 80031ca:	0094      	lsls	r4, r2, #2
 80031cc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80031d0:	008b      	lsls	r3, r1, #2
 80031d2:	461a      	mov	r2, r3
 80031d4:	4623      	mov	r3, r4
 80031d6:	4628      	mov	r0, r5
 80031d8:	4631      	mov	r1, r6
 80031da:	f7fd f851 	bl	8000280 <__aeabi_uldivmod>
 80031de:	4603      	mov	r3, r0
 80031e0:	460c      	mov	r4, r1
 80031e2:	461a      	mov	r2, r3
 80031e4:	4b9a      	ldr	r3, [pc, #616]	; (8003450 <UART_SetConfig+0x6f4>)
 80031e6:	fba3 1302 	umull	r1, r3, r3, r2
 80031ea:	095b      	lsrs	r3, r3, #5
 80031ec:	2164      	movs	r1, #100	; 0x64
 80031ee:	fb01 f303 	mul.w	r3, r1, r3
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	3332      	adds	r3, #50	; 0x32
 80031f8:	4a95      	ldr	r2, [pc, #596]	; (8003450 <UART_SetConfig+0x6f4>)
 80031fa:	fba2 2303 	umull	r2, r3, r2, r3
 80031fe:	095b      	lsrs	r3, r3, #5
 8003200:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003204:	4498      	add	r8, r3
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	469b      	mov	fp, r3
 800320a:	f04f 0c00 	mov.w	ip, #0
 800320e:	46d9      	mov	r9, fp
 8003210:	46e2      	mov	sl, ip
 8003212:	eb19 0309 	adds.w	r3, r9, r9
 8003216:	eb4a 040a 	adc.w	r4, sl, sl
 800321a:	4699      	mov	r9, r3
 800321c:	46a2      	mov	sl, r4
 800321e:	eb19 090b 	adds.w	r9, r9, fp
 8003222:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003226:	f04f 0100 	mov.w	r1, #0
 800322a:	f04f 0200 	mov.w	r2, #0
 800322e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003232:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003236:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800323a:	4689      	mov	r9, r1
 800323c:	4692      	mov	sl, r2
 800323e:	eb1b 0509 	adds.w	r5, fp, r9
 8003242:	eb4c 060a 	adc.w	r6, ip, sl
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	4619      	mov	r1, r3
 800324c:	f04f 0200 	mov.w	r2, #0
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	f04f 0400 	mov.w	r4, #0
 8003258:	0094      	lsls	r4, r2, #2
 800325a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800325e:	008b      	lsls	r3, r1, #2
 8003260:	461a      	mov	r2, r3
 8003262:	4623      	mov	r3, r4
 8003264:	4628      	mov	r0, r5
 8003266:	4631      	mov	r1, r6
 8003268:	f7fd f80a 	bl	8000280 <__aeabi_uldivmod>
 800326c:	4603      	mov	r3, r0
 800326e:	460c      	mov	r4, r1
 8003270:	461a      	mov	r2, r3
 8003272:	4b77      	ldr	r3, [pc, #476]	; (8003450 <UART_SetConfig+0x6f4>)
 8003274:	fba3 1302 	umull	r1, r3, r3, r2
 8003278:	095b      	lsrs	r3, r3, #5
 800327a:	2164      	movs	r1, #100	; 0x64
 800327c:	fb01 f303 	mul.w	r3, r1, r3
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	011b      	lsls	r3, r3, #4
 8003284:	3332      	adds	r3, #50	; 0x32
 8003286:	4a72      	ldr	r2, [pc, #456]	; (8003450 <UART_SetConfig+0x6f4>)
 8003288:	fba2 2303 	umull	r2, r3, r2, r3
 800328c:	095b      	lsrs	r3, r3, #5
 800328e:	f003 020f 	and.w	r2, r3, #15
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4442      	add	r2, r8
 8003298:	609a      	str	r2, [r3, #8]
 800329a:	e0d0      	b.n	800343e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800329c:	f7fe fbcc 	bl	8001a38 <HAL_RCC_GetPCLK1Freq>
 80032a0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	469a      	mov	sl, r3
 80032a6:	f04f 0b00 	mov.w	fp, #0
 80032aa:	46d0      	mov	r8, sl
 80032ac:	46d9      	mov	r9, fp
 80032ae:	eb18 0308 	adds.w	r3, r8, r8
 80032b2:	eb49 0409 	adc.w	r4, r9, r9
 80032b6:	4698      	mov	r8, r3
 80032b8:	46a1      	mov	r9, r4
 80032ba:	eb18 080a 	adds.w	r8, r8, sl
 80032be:	eb49 090b 	adc.w	r9, r9, fp
 80032c2:	f04f 0100 	mov.w	r1, #0
 80032c6:	f04f 0200 	mov.w	r2, #0
 80032ca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80032ce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80032d2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80032d6:	4688      	mov	r8, r1
 80032d8:	4691      	mov	r9, r2
 80032da:	eb1a 0508 	adds.w	r5, sl, r8
 80032de:	eb4b 0609 	adc.w	r6, fp, r9
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	4619      	mov	r1, r3
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	f04f 0400 	mov.w	r4, #0
 80032f4:	0094      	lsls	r4, r2, #2
 80032f6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80032fa:	008b      	lsls	r3, r1, #2
 80032fc:	461a      	mov	r2, r3
 80032fe:	4623      	mov	r3, r4
 8003300:	4628      	mov	r0, r5
 8003302:	4631      	mov	r1, r6
 8003304:	f7fc ffbc 	bl	8000280 <__aeabi_uldivmod>
 8003308:	4603      	mov	r3, r0
 800330a:	460c      	mov	r4, r1
 800330c:	461a      	mov	r2, r3
 800330e:	4b50      	ldr	r3, [pc, #320]	; (8003450 <UART_SetConfig+0x6f4>)
 8003310:	fba3 2302 	umull	r2, r3, r3, r2
 8003314:	095b      	lsrs	r3, r3, #5
 8003316:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	469b      	mov	fp, r3
 800331e:	f04f 0c00 	mov.w	ip, #0
 8003322:	46d9      	mov	r9, fp
 8003324:	46e2      	mov	sl, ip
 8003326:	eb19 0309 	adds.w	r3, r9, r9
 800332a:	eb4a 040a 	adc.w	r4, sl, sl
 800332e:	4699      	mov	r9, r3
 8003330:	46a2      	mov	sl, r4
 8003332:	eb19 090b 	adds.w	r9, r9, fp
 8003336:	eb4a 0a0c 	adc.w	sl, sl, ip
 800333a:	f04f 0100 	mov.w	r1, #0
 800333e:	f04f 0200 	mov.w	r2, #0
 8003342:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003346:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800334a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800334e:	4689      	mov	r9, r1
 8003350:	4692      	mov	sl, r2
 8003352:	eb1b 0509 	adds.w	r5, fp, r9
 8003356:	eb4c 060a 	adc.w	r6, ip, sl
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	4619      	mov	r1, r3
 8003360:	f04f 0200 	mov.w	r2, #0
 8003364:	f04f 0300 	mov.w	r3, #0
 8003368:	f04f 0400 	mov.w	r4, #0
 800336c:	0094      	lsls	r4, r2, #2
 800336e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003372:	008b      	lsls	r3, r1, #2
 8003374:	461a      	mov	r2, r3
 8003376:	4623      	mov	r3, r4
 8003378:	4628      	mov	r0, r5
 800337a:	4631      	mov	r1, r6
 800337c:	f7fc ff80 	bl	8000280 <__aeabi_uldivmod>
 8003380:	4603      	mov	r3, r0
 8003382:	460c      	mov	r4, r1
 8003384:	461a      	mov	r2, r3
 8003386:	4b32      	ldr	r3, [pc, #200]	; (8003450 <UART_SetConfig+0x6f4>)
 8003388:	fba3 1302 	umull	r1, r3, r3, r2
 800338c:	095b      	lsrs	r3, r3, #5
 800338e:	2164      	movs	r1, #100	; 0x64
 8003390:	fb01 f303 	mul.w	r3, r1, r3
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	011b      	lsls	r3, r3, #4
 8003398:	3332      	adds	r3, #50	; 0x32
 800339a:	4a2d      	ldr	r2, [pc, #180]	; (8003450 <UART_SetConfig+0x6f4>)
 800339c:	fba2 2303 	umull	r2, r3, r2, r3
 80033a0:	095b      	lsrs	r3, r3, #5
 80033a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033a6:	4498      	add	r8, r3
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	469b      	mov	fp, r3
 80033ac:	f04f 0c00 	mov.w	ip, #0
 80033b0:	46d9      	mov	r9, fp
 80033b2:	46e2      	mov	sl, ip
 80033b4:	eb19 0309 	adds.w	r3, r9, r9
 80033b8:	eb4a 040a 	adc.w	r4, sl, sl
 80033bc:	4699      	mov	r9, r3
 80033be:	46a2      	mov	sl, r4
 80033c0:	eb19 090b 	adds.w	r9, r9, fp
 80033c4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80033c8:	f04f 0100 	mov.w	r1, #0
 80033cc:	f04f 0200 	mov.w	r2, #0
 80033d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033dc:	4689      	mov	r9, r1
 80033de:	4692      	mov	sl, r2
 80033e0:	eb1b 0509 	adds.w	r5, fp, r9
 80033e4:	eb4c 060a 	adc.w	r6, ip, sl
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	4619      	mov	r1, r3
 80033ee:	f04f 0200 	mov.w	r2, #0
 80033f2:	f04f 0300 	mov.w	r3, #0
 80033f6:	f04f 0400 	mov.w	r4, #0
 80033fa:	0094      	lsls	r4, r2, #2
 80033fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003400:	008b      	lsls	r3, r1, #2
 8003402:	461a      	mov	r2, r3
 8003404:	4623      	mov	r3, r4
 8003406:	4628      	mov	r0, r5
 8003408:	4631      	mov	r1, r6
 800340a:	f7fc ff39 	bl	8000280 <__aeabi_uldivmod>
 800340e:	4603      	mov	r3, r0
 8003410:	460c      	mov	r4, r1
 8003412:	461a      	mov	r2, r3
 8003414:	4b0e      	ldr	r3, [pc, #56]	; (8003450 <UART_SetConfig+0x6f4>)
 8003416:	fba3 1302 	umull	r1, r3, r3, r2
 800341a:	095b      	lsrs	r3, r3, #5
 800341c:	2164      	movs	r1, #100	; 0x64
 800341e:	fb01 f303 	mul.w	r3, r1, r3
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	3332      	adds	r3, #50	; 0x32
 8003428:	4a09      	ldr	r2, [pc, #36]	; (8003450 <UART_SetConfig+0x6f4>)
 800342a:	fba2 2303 	umull	r2, r3, r2, r3
 800342e:	095b      	lsrs	r3, r3, #5
 8003430:	f003 020f 	and.w	r2, r3, #15
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4442      	add	r2, r8
 800343a:	609a      	str	r2, [r3, #8]
}
 800343c:	e7ff      	b.n	800343e <UART_SetConfig+0x6e2>
 800343e:	bf00      	nop
 8003440:	3714      	adds	r7, #20
 8003442:	46bd      	mov	sp, r7
 8003444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003448:	40011000 	.word	0x40011000
 800344c:	40011400 	.word	0x40011400
 8003450:	51eb851f 	.word	0x51eb851f

08003454 <ICM20948_init>:
#include "generic_interface.h"
#include "ICM20948.h"
#include <stdio.h>

genericSensor_t ICM20948_init(SPI_HandleTypeDef *bus, GPIO_TypeDef *port, uint16_t pin)
{
 8003454:	b5b0      	push	{r4, r5, r7, lr}
 8003456:	b0a6      	sub	sp, #152	; 0x98
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
 8003460:	807b      	strh	r3, [r7, #2]
	/** Define MS5607 Struct **/
	    ICM20948_t _imu = {0};
 8003462:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003466:	2200      	movs	r2, #0
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	605a      	str	r2, [r3, #4]
 800346c:	609a      	str	r2, [r3, #8]
 800346e:	60da      	str	r2, [r3, #12]
 8003470:	821a      	strh	r2, [r3, #16]
		genericSensor_t gIMU = {0};
 8003472:	f107 0310 	add.w	r3, r7, #16
 8003476:	2270      	movs	r2, #112	; 0x70
 8003478:	2100      	movs	r1, #0
 800347a:	4618      	mov	r0, r3
 800347c:	f000 fe59 	bl	8004132 <memset>

		gIMU.sensorType = IMU_ICM20948;
 8003480:	2302      	movs	r3, #2
 8003482:	743b      	strb	r3, [r7, #16]
		gIMU.sensor.ICM20948 = _imu;
 8003484:	f107 0418 	add.w	r4, r7, #24
 8003488:	f107 0580 	add.w	r5, r7, #128	; 0x80
 800348c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800348e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003490:	682b      	ldr	r3, [r5, #0]
 8003492:	8023      	strh	r3, [r4, #0]
		gIMU.read = ICM20948_read;
 8003494:	4b3f      	ldr	r3, [pc, #252]	; (8003594 <ICM20948_init+0x140>)
 8003496:	617b      	str	r3, [r7, #20]
	//#ifndef __NO_HAL_SPI
		gIMU.interface.SPI.bus = bus;
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	66bb      	str	r3, [r7, #104]	; 0x68
		gIMU.interface.SPI.port = port;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	66fb      	str	r3, [r7, #108]	; 0x6c
		gIMU.interface.SPI.pin = pin;
 80034a0:	887b      	ldrh	r3, [r7, #2]
 80034a2:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
		gIMU.interface.SPI.timeout = HAL_MAX_DELAY;
 80034a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034aa:	677b      	str	r3, [r7, #116]	; 0x74

		gIMU.state = HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
	//#endif
		gIMU.hasUpdate = true;
 80034b2:	2301      	movs	r3, #1
 80034b4:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
		gIMU.lock = false;
 80034b8:	2300      	movs	r3, #0
 80034ba:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a


	#ifndef __NO_HAL_SPI
tryagain:
		//hello
gIMU.lock = false;
 80034be:	2300      	movs	r3, #0
 80034c0:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a

volatile ICM20948_t* imu;
		imu= &(gIMU.sensor.ICM20948);
 80034c4:	f107 0310 	add.w	r3, r7, #16
 80034c8:	3308      	adds	r3, #8
 80034ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		ICM_CSHigh(imu);
 80034ce:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80034d2:	f000 fa50 	bl	8003976 <ICM_CSHigh>
		uint8_t whoami = 0xEA;
 80034d6:	23ea      	movs	r3, #234	; 0xea
 80034d8:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
		uint8_t test = ICM_WHOAMI(imu);
 80034dc:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80034e0:	f000 faae 	bl	8003a40 <ICM_WHOAMI>
 80034e4:	4603      	mov	r3, r0
 80034e6:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
		if(test == whoami) {
 80034ea:	f897 2092 	ldrb.w	r2, [r7, #146]	; 0x92
 80034ee:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d136      	bne.n	8003564 <ICM20948_init+0x110>
			printf("WHO AM I PASSED\n\r");
 80034f6:	4828      	ldr	r0, [pc, #160]	; (8003598 <ICM20948_init+0x144>)
 80034f8:	f000 fe24 	bl	8004144 <iprintf>
				HAL_Delay(10);
 80034fc:	200a      	movs	r0, #10
 80034fe:	f7fd fb95 	bl	8000c2c <HAL_Delay>
				ICM_SelectBank(USER_BANK_0,imu);
 8003502:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8003506:	2000      	movs	r0, #0
 8003508:	f000 fa18 	bl	800393c <ICM_SelectBank>
				HAL_Delay(10);
 800350c:	200a      	movs	r0, #10
 800350e:	f7fd fb8d 	bl	8000c2c <HAL_Delay>
				ICM_Disable_I2C(imu);
 8003512:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8003516:	f000 fa21 	bl	800395c <ICM_Disable_I2C>
				HAL_Delay(10);
 800351a:	200a      	movs	r0, #10
 800351c:	f7fd fb86 	bl	8000c2c <HAL_Delay>
				ICM_SetClock((uint8_t)CLK_BEST_AVAIL,imu);
 8003520:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8003524:	2001      	movs	r0, #1
 8003526:	f000 fa4c 	bl	80039c2 <ICM_SetClock>
				HAL_Delay(10);
 800352a:	200a      	movs	r0, #10
 800352c:	f7fd fb7e 	bl	8000c2c <HAL_Delay>
				ICM_AccelGyroOff(imu);
 8003530:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8003534:	f000 fa55 	bl	80039e2 <ICM_AccelGyroOff>
				HAL_Delay(20);
 8003538:	2014      	movs	r0, #20
 800353a:	f7fd fb77 	bl	8000c2c <HAL_Delay>
				ICM_AccelGyroOn(imu);
 800353e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8003542:	f000 fa5b 	bl	80039fc <ICM_AccelGyroOn>
				HAL_Delay(10);
 8003546:	200a      	movs	r0, #10
 8003548:	f7fd fb70 	bl	8000c2c <HAL_Delay>
				ICM_Initialize(imu);
 800354c:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8003550:	f000 f8de 	bl	8003710 <ICM_Initialize>
				ICM_CSHigh(imu);
 8003554:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8003558:	f000 fa0d 	bl	8003976 <ICM_CSHigh>
				gIMU.state = HAL_OK;
 800355c:	2300      	movs	r3, #0
 800355e:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
 8003562:	e006      	b.n	8003572 <ICM20948_init+0x11e>
		}
		else
		{
			printf("Who AM I FAILED\r\n");
 8003564:	480d      	ldr	r0, [pc, #52]	; (800359c <ICM20948_init+0x148>)
 8003566:	f000 fe61 	bl	800422c <puts>
			HAL_Delay(1000);
 800356a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800356e:	f7fd fb5d 	bl	8000c2c <HAL_Delay>
		}
		if (gIMU.state==HAL_ERROR)
 8003572:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8003576:	2b01      	cmp	r3, #1
 8003578:	d100      	bne.n	800357c <ICM20948_init+0x128>
			goto tryagain;
 800357a:	e7a0      	b.n	80034be <ICM20948_init+0x6a>
	#endif
		// Update with all values

		return gIMU;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4618      	mov	r0, r3
 8003580:	f107 0310 	add.w	r3, r7, #16
 8003584:	2270      	movs	r2, #112	; 0x70
 8003586:	4619      	mov	r1, r3
 8003588:	f000 fdc8 	bl	800411c <memcpy>


}
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	3798      	adds	r7, #152	; 0x98
 8003590:	46bd      	mov	sp, r7
 8003592:	bdb0      	pop	{r4, r5, r7, pc}
 8003594:	08003a65 	.word	0x08003a65
 8003598:	08005158 	.word	0x08005158
 800359c:	0800516c 	.word	0x0800516c

080035a0 <ICM_readBytes>:
void ICM_readBytes(uint8_t reg, uint8_t *pData, uint16_t Size,genericSensor_t* sensor) // ***
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b088      	sub	sp, #32
 80035a4:	af02      	add	r7, sp, #8
 80035a6:	60b9      	str	r1, [r7, #8]
 80035a8:	607b      	str	r3, [r7, #4]
 80035aa:	4603      	mov	r3, r0
 80035ac:	73fb      	strb	r3, [r7, #15]
 80035ae:	4613      	mov	r3, r2
 80035b0:	81bb      	strh	r3, [r7, #12]

	SPI_t* SPI = &(sensor->interface.SPI);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	3358      	adds	r3, #88	; 0x58
 80035b6:	617b      	str	r3, [r7, #20]
	reg = reg | 0x80;
 80035b8:	7bfb      	ldrb	r3, [r7, #15]
 80035ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(SPI->port, SPI->pin, GPIO_PIN_RESET);
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	6858      	ldr	r0, [r3, #4]
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	891b      	ldrh	r3, [r3, #8]
 80035ca:	2200      	movs	r2, #0
 80035cc:	4619      	mov	r1, r3
 80035ce:	f7fd fe05 	bl	80011dc <HAL_GPIO_WritePin>
	receiveSPI(sensor, &reg, 1, pData, Size);
 80035d2:	89bb      	ldrh	r3, [r7, #12]
 80035d4:	f107 010f 	add.w	r1, r7, #15
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	2201      	movs	r2, #1
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 fa70 	bl	8003ac4 <receiveSPI>
	HAL_GPIO_WritePin(SPI->port, SPI->pin, GPIO_PIN_SET);
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	6858      	ldr	r0, [r3, #4]
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	891b      	ldrh	r3, [r3, #8]
 80035ec:	2201      	movs	r2, #1
 80035ee:	4619      	mov	r1, r3
 80035f0:	f7fd fdf4 	bl	80011dc <HAL_GPIO_WritePin>
}
 80035f4:	bf00      	nop
 80035f6:	3718      	adds	r7, #24
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <ICM_ReadOneByte>:
	HAL_GPIO_WritePin(SPI->port, SPI->pin, GPIO_PIN_SET);

}

void ICM_ReadOneByte(uint8_t reg, uint8_t* pData,genericSensor_t* sensor) // ***
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b088      	sub	sp, #32
 8003600:	af02      	add	r7, sp, #8
 8003602:	4603      	mov	r3, r0
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
 8003608:	73fb      	strb	r3, [r7, #15]
	SPI_t* SPI = &(sensor->interface.SPI);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	3358      	adds	r3, #88	; 0x58
 800360e:	617b      	str	r3, [r7, #20]
	reg = reg | 0x80;
 8003610:	7bfb      	ldrb	r3, [r7, #15]
 8003612:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003616:	b2db      	uxtb	r3, r3
 8003618:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(SPI->port, SPI->pin, GPIO_PIN_RESET);
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	6858      	ldr	r0, [r3, #4]
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	891b      	ldrh	r3, [r3, #8]
 8003622:	2200      	movs	r2, #0
 8003624:	4619      	mov	r1, r3
 8003626:	f7fd fdd9 	bl	80011dc <HAL_GPIO_WritePin>
	receiveSPI(sensor, &reg, 1, pData, 1);
 800362a:	f107 010f 	add.w	r1, r7, #15
 800362e:	2301      	movs	r3, #1
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2201      	movs	r2, #1
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 fa44 	bl	8003ac4 <receiveSPI>
	HAL_GPIO_WritePin(SPI->port, SPI->pin, GPIO_PIN_SET);
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	6858      	ldr	r0, [r3, #4]
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	891b      	ldrh	r3, [r3, #8]
 8003644:	2201      	movs	r2, #1
 8003646:	4619      	mov	r1, r3
 8003648:	f7fd fdc8 	bl	80011dc <HAL_GPIO_WritePin>
}
 800364c:	bf00      	nop
 800364e:	3718      	adds	r7, #24
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <ICM_WriteOneByte>:

void ICM_WriteOneByte(uint8_t reg, uint8_t Data,genericSensor_t* sensor) // ***
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	4603      	mov	r3, r0
 800365c:	603a      	str	r2, [r7, #0]
 800365e:	71fb      	strb	r3, [r7, #7]
 8003660:	460b      	mov	r3, r1
 8003662:	71bb      	strb	r3, [r7, #6]

	SPI_t* SPI = &(sensor->interface.SPI);
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	3358      	adds	r3, #88	; 0x58
 8003668:	60fb      	str	r3, [r7, #12]
	reg = reg & 0x7F;
 800366a:	79fb      	ldrb	r3, [r7, #7]
 800366c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003670:	b2db      	uxtb	r3, r3
 8003672:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SPI->port, SPI->pin, GPIO_PIN_RESET);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6858      	ldr	r0, [r3, #4]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	891b      	ldrh	r3, [r3, #8]
 800367c:	2200      	movs	r2, #0
 800367e:	4619      	mov	r1, r3
 8003680:	f7fd fdac 	bl	80011dc <HAL_GPIO_WritePin>
	sendSPI(sensor, &reg, 1);
 8003684:	1dfb      	adds	r3, r7, #7
 8003686:	2201      	movs	r2, #1
 8003688:	4619      	mov	r1, r3
 800368a:	6838      	ldr	r0, [r7, #0]
 800368c:	f000 f9fc 	bl	8003a88 <sendSPI>
	sendSPI(sensor, &Data, 1);
 8003690:	1dbb      	adds	r3, r7, #6
 8003692:	2201      	movs	r2, #1
 8003694:	4619      	mov	r1, r3
 8003696:	6838      	ldr	r0, [r7, #0]
 8003698:	f000 f9f6 	bl	8003a88 <sendSPI>
	HAL_GPIO_WritePin(SPI->port, SPI->pin, GPIO_PIN_SET);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6858      	ldr	r0, [r3, #4]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	891b      	ldrh	r3, [r3, #8]
 80036a4:	2201      	movs	r2, #1
 80036a6:	4619      	mov	r1, r3
 80036a8:	f7fd fd98 	bl	80011dc <HAL_GPIO_WritePin>

}
 80036ac:	bf00      	nop
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <i2c_Mag_write>:
 *
 * AUX I2C abstraction for magnetometer
 *
 */
void i2c_Mag_write(uint8_t reg,uint8_t value,genericSensor_t* sensor)
  {
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	4603      	mov	r3, r0
 80036bc:	603a      	str	r2, [r7, #0]
 80036be:	71fb      	strb	r3, [r7, #7]
 80036c0:	460b      	mov	r3, r1
 80036c2:	71bb      	strb	r3, [r7, #6]
  	ICM_WriteOneByte(0x7F, 0x30,sensor);
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	2130      	movs	r1, #48	; 0x30
 80036c8:	207f      	movs	r0, #127	; 0x7f
 80036ca:	f7ff ffc3 	bl	8003654 <ICM_WriteOneByte>

  	HAL_Delay(1);
 80036ce:	2001      	movs	r0, #1
 80036d0:	f7fd faac 	bl	8000c2c <HAL_Delay>
  	ICM_WriteOneByte(0x03 ,0x0C,sensor);//mode: write
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	210c      	movs	r1, #12
 80036d8:	2003      	movs	r0, #3
 80036da:	f7ff ffbb 	bl	8003654 <ICM_WriteOneByte>

  	HAL_Delay(1);
 80036de:	2001      	movs	r0, #1
 80036e0:	f7fd faa4 	bl	8000c2c <HAL_Delay>
  	ICM_WriteOneByte(0x04 ,reg,sensor);//set reg addr
 80036e4:	79fb      	ldrb	r3, [r7, #7]
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	4619      	mov	r1, r3
 80036ea:	2004      	movs	r0, #4
 80036ec:	f7ff ffb2 	bl	8003654 <ICM_WriteOneByte>

  	HAL_Delay(1);
 80036f0:	2001      	movs	r0, #1
 80036f2:	f7fd fa9b 	bl	8000c2c <HAL_Delay>
  	ICM_WriteOneByte(0x06 ,value,sensor);//send value
 80036f6:	79bb      	ldrb	r3, [r7, #6]
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	4619      	mov	r1, r3
 80036fc:	2006      	movs	r0, #6
 80036fe:	f7ff ffa9 	bl	8003654 <ICM_WriteOneByte>

  	HAL_Delay(1);
 8003702:	2001      	movs	r0, #1
 8003704:	f7fd fa92 	bl	8000c2c <HAL_Delay>
  }
 8003708:	bf00      	nop
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <ICM_Initialize>:
 *
 * Sequence to setup ICM290948 as early as possible after power on
 *
 */

uint16_t ICM_Initialize(genericSensor_t* sensor) {
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
		ICM_SelectBank(USER_BANK_2,sensor);
 8003718:	6879      	ldr	r1, [r7, #4]
 800371a:	2020      	movs	r0, #32
 800371c:	f000 f90e 	bl	800393c <ICM_SelectBank>
		HAL_Delay(20);
 8003720:	2014      	movs	r0, #20
 8003722:	f7fd fa83 	bl	8000c2c <HAL_Delay>
		ICM_SetGyroRateLPF(GYRO_RATE_250, GYRO_LPF_17HZ,sensor);
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	2129      	movs	r1, #41	; 0x29
 800372a:	2000      	movs	r0, #0
 800372c:	f000 f973 	bl	8003a16 <ICM_SetGyroRateLPF>
		HAL_Delay(10);
 8003730:	200a      	movs	r0, #10
 8003732:	f7fd fa7b 	bl	8000c2c <HAL_Delay>

		// Set gyroscope sample rate to 100hz (0x0A) in GYRO_SMPLRT_DIV register (0x00)
		ICM_WriteOneByte(0x00, 0x0A,sensor);
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	210a      	movs	r1, #10
 800373a:	2000      	movs	r0, #0
 800373c:	f7ff ff8a 	bl	8003654 <ICM_WriteOneByte>
		HAL_Delay(10);
 8003740:	200a      	movs	r0, #10
 8003742:	f7fd fa73 	bl	8000c2c <HAL_Delay>

		// Set accelerometer low pass filter to 136hz (0x11) and the rate to 8G (0x04) in register ACCEL_CONFIG (0x14)
		ICM_WriteOneByte(0x14, (0x04 | 0x11),sensor);
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	2115      	movs	r1, #21
 800374a:	2014      	movs	r0, #20
 800374c:	f7ff ff82 	bl	8003654 <ICM_WriteOneByte>

		// Set accelerometer sample rate to 225hz (0x00) in ACCEL_SMPLRT_DIV_1 register (0x10)
		ICM_WriteOneByte(0x10, 0x00,sensor);
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	2100      	movs	r1, #0
 8003754:	2010      	movs	r0, #16
 8003756:	f7ff ff7d 	bl	8003654 <ICM_WriteOneByte>
		HAL_Delay(10);
 800375a:	200a      	movs	r0, #10
 800375c:	f7fd fa66 	bl	8000c2c <HAL_Delay>

		// Set accelerometer sample rate to 100 hz (0x0A) in ACCEL_SMPLRT_DIV_2 register (0x11)
		ICM_WriteOneByte(0x11, 0x0A,sensor);
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	210a      	movs	r1, #10
 8003764:	2011      	movs	r0, #17
 8003766:	f7ff ff75 	bl	8003654 <ICM_WriteOneByte>
		HAL_Delay(10);
 800376a:	200a      	movs	r0, #10
 800376c:	f7fd fa5e 	bl	8000c2c <HAL_Delay>

		ICM_SelectBank(USER_BANK_2,sensor);
 8003770:	6879      	ldr	r1, [r7, #4]
 8003772:	2020      	movs	r0, #32
 8003774:	f000 f8e2 	bl	800393c <ICM_SelectBank>
		HAL_Delay(20);
 8003778:	2014      	movs	r0, #20
 800377a:	f7fd fa57 	bl	8000c2c <HAL_Delay>

		// Configure AUX_I2C Magnetometer (onboard ICM-20948)
		ICM_WriteOneByte(0x7F, 0x00,sensor); // Select user bank 0
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	2100      	movs	r1, #0
 8003782:	207f      	movs	r0, #127	; 0x7f
 8003784:	f7ff ff66 	bl	8003654 <ICM_WriteOneByte>
		ICM_WriteOneByte(0x0F, 0x30,sensor); // INT Pin / Bypass Enable Configuration
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	2130      	movs	r1, #48	; 0x30
 800378c:	200f      	movs	r0, #15
 800378e:	f7ff ff61 	bl	8003654 <ICM_WriteOneByte>
		ICM_WriteOneByte(0x03, 0x20,sensor); // I2C_MST_EN
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	2120      	movs	r1, #32
 8003796:	2003      	movs	r0, #3
 8003798:	f7ff ff5c 	bl	8003654 <ICM_WriteOneByte>
		ICM_WriteOneByte(0x7F, 0x30,sensor); // Select user bank 3
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	2130      	movs	r1, #48	; 0x30
 80037a0:	207f      	movs	r0, #127	; 0x7f
 80037a2:	f7ff ff57 	bl	8003654 <ICM_WriteOneByte>
		ICM_WriteOneByte(0x01, 0x4D,sensor); // I2C Master mode and Speed 400 kHz
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	214d      	movs	r1, #77	; 0x4d
 80037aa:	2001      	movs	r0, #1
 80037ac:	f7ff ff52 	bl	8003654 <ICM_WriteOneByte>
		ICM_WriteOneByte(0x02, 0x01,sensor); // I2C_SLV0 _DLY_ enable
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	2101      	movs	r1, #1
 80037b4:	2002      	movs	r0, #2
 80037b6:	f7ff ff4d 	bl	8003654 <ICM_WriteOneByte>
		ICM_WriteOneByte(0x05, 0x81,sensor); // enable IIC	and EXT_SENS_DATA==1 Byte
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	2181      	movs	r1, #129	; 0x81
 80037be:	2005      	movs	r0, #5
 80037c0:	f7ff ff48 	bl	8003654 <ICM_WriteOneByte>

		// Initialize magnetometer
		i2c_Mag_write(0x32, 0x01,sensor); // Reset AK8963
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	2101      	movs	r1, #1
 80037c8:	2032      	movs	r0, #50	; 0x32
 80037ca:	f7ff ff73 	bl	80036b4 <i2c_Mag_write>
		HAL_Delay(1000);
 80037ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80037d2:	f7fd fa2b 	bl	8000c2c <HAL_Delay>
		i2c_Mag_write(0x31, 0x02,sensor); // use i2c to set AK8963 working on Continuous measurement mode1 & 16-bit output
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	2102      	movs	r1, #2
 80037da:	2031      	movs	r0, #49	; 0x31
 80037dc:	f7ff ff6a 	bl	80036b4 <i2c_Mag_write>

		return 1337;
 80037e0:	f240 5339 	movw	r3, #1337	; 0x539
	}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3708      	adds	r7, #8
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <ICM_ReadAccelGyro>:

void ICM_ReadAccelGyro(genericSensor_t* sensor) {
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
	uint8_t raw_data[12];
	volatile ICM20948_t* imu = &(sensor->sensor.ICM20948);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3308      	adds	r3, #8
 80037f8:	617b      	str	r3, [r7, #20]
	ICM_readBytes(0x2D, raw_data, 12,sensor);
 80037fa:	f107 0108 	add.w	r1, r7, #8
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	220c      	movs	r2, #12
 8003802:	202d      	movs	r0, #45	; 0x2d
 8003804:	f7ff fecc 	bl	80035a0 <ICM_readBytes>

	imu->accel_xout = (raw_data[0] << 8) | raw_data[1];
 8003808:	7a3b      	ldrb	r3, [r7, #8]
 800380a:	021b      	lsls	r3, r3, #8
 800380c:	b21a      	sxth	r2, r3
 800380e:	7a7b      	ldrb	r3, [r7, #9]
 8003810:	b21b      	sxth	r3, r3
 8003812:	4313      	orrs	r3, r2
 8003814:	b21a      	sxth	r2, r3
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	801a      	strh	r2, [r3, #0]
	imu->accel_yout = (raw_data[2] << 8) | raw_data[3];
 800381a:	7abb      	ldrb	r3, [r7, #10]
 800381c:	021b      	lsls	r3, r3, #8
 800381e:	b21a      	sxth	r2, r3
 8003820:	7afb      	ldrb	r3, [r7, #11]
 8003822:	b21b      	sxth	r3, r3
 8003824:	4313      	orrs	r3, r2
 8003826:	b21a      	sxth	r2, r3
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	805a      	strh	r2, [r3, #2]
	imu->accel_zout = (raw_data[4] << 8) | raw_data[5];
 800382c:	7b3b      	ldrb	r3, [r7, #12]
 800382e:	021b      	lsls	r3, r3, #8
 8003830:	b21a      	sxth	r2, r3
 8003832:	7b7b      	ldrb	r3, [r7, #13]
 8003834:	b21b      	sxth	r3, r3
 8003836:	4313      	orrs	r3, r2
 8003838:	b21a      	sxth	r2, r3
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	809a      	strh	r2, [r3, #4]

	imu->gyr_xout = (raw_data[6] << 8) | raw_data[7];
 800383e:	7bbb      	ldrb	r3, [r7, #14]
 8003840:	021b      	lsls	r3, r3, #8
 8003842:	b21a      	sxth	r2, r3
 8003844:	7bfb      	ldrb	r3, [r7, #15]
 8003846:	b21b      	sxth	r3, r3
 8003848:	4313      	orrs	r3, r2
 800384a:	b21a      	sxth	r2, r3
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	80da      	strh	r2, [r3, #6]
	imu->gyr_yout = (raw_data[8] << 8) | raw_data[9];
 8003850:	7c3b      	ldrb	r3, [r7, #16]
 8003852:	021b      	lsls	r3, r3, #8
 8003854:	b21a      	sxth	r2, r3
 8003856:	7c7b      	ldrb	r3, [r7, #17]
 8003858:	b21b      	sxth	r3, r3
 800385a:	4313      	orrs	r3, r2
 800385c:	b21a      	sxth	r2, r3
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	811a      	strh	r2, [r3, #8]
	imu->gyr_zout = (raw_data[10] << 8) | raw_data[11];
 8003862:	7cbb      	ldrb	r3, [r7, #18]
 8003864:	021b      	lsls	r3, r3, #8
 8003866:	b21a      	sxth	r2, r3
 8003868:	7cfb      	ldrb	r3, [r7, #19]
 800386a:	b21b      	sxth	r3, r3
 800386c:	4313      	orrs	r3, r2
 800386e:	b21a      	sxth	r2, r3
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	815a      	strh	r2, [r3, #10]

	imu->accel_xout = imu->accel_xout / 8;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	881b      	ldrh	r3, [r3, #0]
 8003878:	b21b      	sxth	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	da00      	bge.n	8003880 <ICM_ReadAccelGyro+0x94>
 800387e:	3307      	adds	r3, #7
 8003880:	10db      	asrs	r3, r3, #3
 8003882:	b21a      	sxth	r2, r3
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	801a      	strh	r2, [r3, #0]
	imu->accel_yout = imu->accel_yout / 8;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	885b      	ldrh	r3, [r3, #2]
 800388c:	b21b      	sxth	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	da00      	bge.n	8003894 <ICM_ReadAccelGyro+0xa8>
 8003892:	3307      	adds	r3, #7
 8003894:	10db      	asrs	r3, r3, #3
 8003896:	b21a      	sxth	r2, r3
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	805a      	strh	r2, [r3, #2]
	imu->accel_zout = imu->accel_zout / 8;
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	889b      	ldrh	r3, [r3, #4]
 80038a0:	b21b      	sxth	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	da00      	bge.n	80038a8 <ICM_ReadAccelGyro+0xbc>
 80038a6:	3307      	adds	r3, #7
 80038a8:	10db      	asrs	r3, r3, #3
 80038aa:	b21a      	sxth	r2, r3
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	809a      	strh	r2, [r3, #4]
	printf("X:%d\r\n",imu->accel_xout);
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	b21b      	sxth	r3, r3
 80038b6:	4619      	mov	r1, r3
 80038b8:	481c      	ldr	r0, [pc, #112]	; (800392c <ICM_ReadAccelGyro+0x140>)
 80038ba:	f000 fc43 	bl	8004144 <iprintf>
	printf("Y:%d\r\n",imu->accel_yout);
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	885b      	ldrh	r3, [r3, #2]
 80038c2:	b21b      	sxth	r3, r3
 80038c4:	4619      	mov	r1, r3
 80038c6:	481a      	ldr	r0, [pc, #104]	; (8003930 <ICM_ReadAccelGyro+0x144>)
 80038c8:	f000 fc3c 	bl	8004144 <iprintf>
	printf("Z:%d\r\n",imu->accel_zout);
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	889b      	ldrh	r3, [r3, #4]
 80038d0:	b21b      	sxth	r3, r3
 80038d2:	4619      	mov	r1, r3
 80038d4:	4817      	ldr	r0, [pc, #92]	; (8003934 <ICM_ReadAccelGyro+0x148>)
 80038d6:	f000 fc35 	bl	8004144 <iprintf>
	imu->gyr_xout = imu->gyr_xout / 250;
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	88db      	ldrh	r3, [r3, #6]
 80038de:	b21b      	sxth	r3, r3
 80038e0:	4a15      	ldr	r2, [pc, #84]	; (8003938 <ICM_ReadAccelGyro+0x14c>)
 80038e2:	fb82 1203 	smull	r1, r2, r2, r3
 80038e6:	1112      	asrs	r2, r2, #4
 80038e8:	17db      	asrs	r3, r3, #31
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	b21a      	sxth	r2, r3
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	80da      	strh	r2, [r3, #6]
	imu->gyr_yout = imu->gyr_yout / 250;
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	891b      	ldrh	r3, [r3, #8]
 80038f6:	b21b      	sxth	r3, r3
 80038f8:	4a0f      	ldr	r2, [pc, #60]	; (8003938 <ICM_ReadAccelGyro+0x14c>)
 80038fa:	fb82 1203 	smull	r1, r2, r2, r3
 80038fe:	1112      	asrs	r2, r2, #4
 8003900:	17db      	asrs	r3, r3, #31
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	b21a      	sxth	r2, r3
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	811a      	strh	r2, [r3, #8]
	imu->gyr_zout = imu->gyr_zout / 250;
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	895b      	ldrh	r3, [r3, #10]
 800390e:	b21b      	sxth	r3, r3
 8003910:	4a09      	ldr	r2, [pc, #36]	; (8003938 <ICM_ReadAccelGyro+0x14c>)
 8003912:	fb82 1203 	smull	r1, r2, r2, r3
 8003916:	1112      	asrs	r2, r2, #4
 8003918:	17db      	asrs	r3, r3, #31
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	b21a      	sxth	r2, r3
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	815a      	strh	r2, [r3, #10]
}
 8003922:	bf00      	nop
 8003924:	3718      	adds	r7, #24
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	08005180 	.word	0x08005180
 8003930:	08005188 	.word	0x08005188
 8003934:	08005190 	.word	0x08005190
 8003938:	10624dd3 	.word	0x10624dd3

0800393c <ICM_SelectBank>:
void ICM_SelectBank(uint8_t bank,genericSensor_t* sensor) {
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	4603      	mov	r3, r0
 8003944:	6039      	str	r1, [r7, #0]
 8003946:	71fb      	strb	r3, [r7, #7]
	ICM_WriteOneByte(USER_BANK_SEL, bank,sensor);
 8003948:	79fb      	ldrb	r3, [r7, #7]
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	4619      	mov	r1, r3
 800394e:	207f      	movs	r0, #127	; 0x7f
 8003950:	f7ff fe80 	bl	8003654 <ICM_WriteOneByte>
}
 8003954:	bf00      	nop
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <ICM_Disable_I2C>:
void ICM_Disable_I2C(genericSensor_t* sensor) {
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(0x03, 0x78,sensor);
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	2178      	movs	r1, #120	; 0x78
 8003968:	2003      	movs	r0, #3
 800396a:	f7ff fe73 	bl	8003654 <ICM_WriteOneByte>
}
 800396e:	bf00      	nop
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <ICM_CSHigh>:
void ICM_CSHigh(genericSensor_t* sensor) {
 8003976:	b580      	push	{r7, lr}
 8003978:	b084      	sub	sp, #16
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]

	SPI_t* SPI = &(sensor->interface.SPI);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	3358      	adds	r3, #88	; 0x58
 8003982:	60fb      	str	r3, [r7, #12]

		HAL_GPIO_WritePin(SPI->port, SPI->pin,SET);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6858      	ldr	r0, [r3, #4]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	891b      	ldrh	r3, [r3, #8]
 800398c:	2201      	movs	r2, #1
 800398e:	4619      	mov	r1, r3
 8003990:	f7fd fc24 	bl	80011dc <HAL_GPIO_WritePin>

}
 8003994:	bf00      	nop
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <ICM_CSLow>:
void ICM_CSLow(genericSensor_t* sensor) {
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]

	SPI_t* SPI = &(sensor->interface.SPI);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3358      	adds	r3, #88	; 0x58
 80039a8:	60fb      	str	r3, [r7, #12]

		HAL_GPIO_WritePin(SPI->port, SPI->pin,RESET);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6858      	ldr	r0, [r3, #4]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	891b      	ldrh	r3, [r3, #8]
 80039b2:	2200      	movs	r2, #0
 80039b4:	4619      	mov	r1, r3
 80039b6:	f7fd fc11 	bl	80011dc <HAL_GPIO_WritePin>

}
 80039ba:	bf00      	nop
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <ICM_SetClock>:
void ICM_SetClock(uint8_t clk,genericSensor_t* sensor) {
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b082      	sub	sp, #8
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	4603      	mov	r3, r0
 80039ca:	6039      	str	r1, [r7, #0]
 80039cc:	71fb      	strb	r3, [r7, #7]
	ICM_WriteOneByte(PWR_MGMT_1, clk,sensor);
 80039ce:	79fb      	ldrb	r3, [r7, #7]
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	4619      	mov	r1, r3
 80039d4:	2006      	movs	r0, #6
 80039d6:	f7ff fe3d 	bl	8003654 <ICM_WriteOneByte>
}
 80039da:	bf00      	nop
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <ICM_AccelGyroOff>:
void ICM_AccelGyroOff(genericSensor_t* sensor) {
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b082      	sub	sp, #8
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(PWR_MGMT_2, (0x38 | 0x07),sensor);
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	213f      	movs	r1, #63	; 0x3f
 80039ee:	2007      	movs	r0, #7
 80039f0:	f7ff fe30 	bl	8003654 <ICM_WriteOneByte>
}
 80039f4:	bf00      	nop
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <ICM_AccelGyroOn>:
void ICM_AccelGyroOn(genericSensor_t* sensor) {
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(0x07, (0x00 | 0x00),sensor);
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	2100      	movs	r1, #0
 8003a08:	2007      	movs	r0, #7
 8003a0a:	f7ff fe23 	bl	8003654 <ICM_WriteOneByte>
}
 8003a0e:	bf00      	nop
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <ICM_SetGyroRateLPF>:

void ICM_SetGyroRateLPF(uint8_t rate, uint8_t lpf,genericSensor_t* sensor) {
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b082      	sub	sp, #8
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	603a      	str	r2, [r7, #0]
 8003a20:	71fb      	strb	r3, [r7, #7]
 8003a22:	460b      	mov	r3, r1
 8003a24:	71bb      	strb	r3, [r7, #6]
	ICM_WriteOneByte(GYRO_CONFIG_1, (rate|lpf),sensor);
 8003a26:	79fa      	ldrb	r2, [r7, #7]
 8003a28:	79bb      	ldrb	r3, [r7, #6]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	4619      	mov	r1, r3
 8003a32:	2001      	movs	r0, #1
 8003a34:	f7ff fe0e 	bl	8003654 <ICM_WriteOneByte>
}
 8003a38:	bf00      	nop
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <ICM_WHOAMI>:

uint8_t ICM_WHOAMI(genericSensor_t* sensor) {
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
	uint8_t spiData = 0x01;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	73fb      	strb	r3, [r7, #15]
	ICM_ReadOneByte(0x00, &spiData,sensor);
 8003a4c:	f107 030f 	add.w	r3, r7, #15
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	4619      	mov	r1, r3
 8003a54:	2000      	movs	r0, #0
 8003a56:	f7ff fdd1 	bl	80035fc <ICM_ReadOneByte>
	return spiData;
 8003a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <ICM20948_read>:

uint8_t ICM20948_read(volatile genericSensor_t* sensor){
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
	ICM_CSLow(sensor);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f7ff ff95 	bl	800399c <ICM_CSLow>
	ICM_ReadAccelGyro(sensor);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7ff feba 	bl	80037ec <ICM_ReadAccelGyro>
	ICM_CSHigh(sensor);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f7ff ff7c 	bl	8003976 <ICM_CSHigh>

}
 8003a7e:	bf00      	nop
 8003a80:	4618      	mov	r0, r3
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <sendSPI>:
#include "generic_interface.h"



/** Sensor, InterfaceLock should already be locked. CS Pin is left low.  **/
HAL_StatusTypeDef sendSPI(genericSensor_t* sensor, uint8_t* cmd, int cmdlen) {
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]



#ifndef __NO_HAL_SPI
	// Declares convenient SPI pointer
	SPI_t* SPI = &(sensor->interface.SPI);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	3358      	adds	r3, #88	; 0x58
 8003a98:	617b      	str	r3, [r7, #20]
	// SPI Transmission

	// Sends cmd
	sensor->state = HAL_SPI_Transmit(SPI->bus, cmd, cmdlen, SPI->timeout);
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	6818      	ldr	r0, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	68b9      	ldr	r1, [r7, #8]
 8003aa8:	f7fe f852 	bl	8001b50 <HAL_SPI_Transmit>
 8003aac:	4603      	mov	r3, r0
 8003aae:	461a      	mov	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
#endif

	// Returns sensor state
	return sensor->state;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3718      	adds	r7, #24
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <receiveSPI>:

HAL_StatusTypeDef receiveSPI(genericSensor_t* sensor, uint8_t* cmd, int cmdlen, uint8_t * data, int datalen) {
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
 8003ad0:	603b      	str	r3, [r7, #0]


#ifndef __NO_HAL_SPI

	SPI_t *SPI = &(sensor->interface.SPI);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	3358      	adds	r3, #88	; 0x58
 8003ad6:	617b      	str	r3, [r7, #20]
	sensor->state = HAL_SPI_Transmit(SPI->bus, cmd, cmdlen, SPI->timeout);
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	6818      	ldr	r0, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	68b9      	ldr	r1, [r7, #8]
 8003ae6:	f7fe f833 	bl	8001b50 <HAL_SPI_Transmit>
 8003aea:	4603      	mov	r3, r0
 8003aec:	461a      	mov	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	if(sensor->state == HAL_OK)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10d      	bne.n	8003b1a <receiveSPI+0x56>
	sensor->state = HAL_SPI_Receive(SPI->bus, data, datalen, SPI->timeout);
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	6818      	ldr	r0, [r3, #0]
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	6839      	ldr	r1, [r7, #0]
 8003b0c:	f7fe f954 	bl	8001db8 <HAL_SPI_Receive>
 8003b10:	4603      	mov	r3, r0
 8003b12:	461a      	mov	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68


#endif
	return sensor->state;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8003b30:	4a07      	ldr	r2, [pc, #28]	; (8003b50 <RetargetInit+0x28>)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8003b36:	4b07      	ldr	r3, [pc, #28]	; (8003b54 <RetargetInit+0x2c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6898      	ldr	r0, [r3, #8]
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	2202      	movs	r2, #2
 8003b40:	2100      	movs	r1, #0
 8003b42:	f000 fb7b 	bl	800423c <setvbuf>
}
 8003b46:	bf00      	nop
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	200004f8 	.word	0x200004f8
 8003b54:	2000000c 	.word	0x2000000c

08003b58 <_isatty>:

int _isatty(int fd) {
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	db04      	blt.n	8003b70 <_isatty+0x18>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	dc01      	bgt.n	8003b70 <_isatty+0x18>
    return 1;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e005      	b.n	8003b7c <_isatty+0x24>

  errno = EBADF;
 8003b70:	f000 faaa 	bl	80040c8 <__errno>
 8003b74:	4602      	mov	r2, r0
 8003b76:	2309      	movs	r3, #9
 8003b78:	6013      	str	r3, [r2, #0]
  return 0;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <_write>:

int _write(int fd, char* ptr, int len) {
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d002      	beq.n	8003b9c <_write+0x18>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d111      	bne.n	8003bc0 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8003b9c:	4b0e      	ldr	r3, [pc, #56]	; (8003bd8 <_write+0x54>)
 8003b9e:	6818      	ldr	r0, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ba8:	68b9      	ldr	r1, [r7, #8]
 8003baa:	f7fe fd0e 	bl	80025ca <HAL_UART_Transmit>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003bb2:	7dfb      	ldrb	r3, [r7, #23]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d101      	bne.n	8003bbc <_write+0x38>
      return len;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	e008      	b.n	8003bce <_write+0x4a>
    else
      return EIO;
 8003bbc:	2305      	movs	r3, #5
 8003bbe:	e006      	b.n	8003bce <_write+0x4a>
  }
  errno = EBADF;
 8003bc0:	f000 fa82 	bl	80040c8 <__errno>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	2309      	movs	r3, #9
 8003bc8:	6013      	str	r3, [r2, #0]
  return -1;
 8003bca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3718      	adds	r7, #24
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	200004f8 	.word	0x200004f8

08003bdc <_close>:

int _close(int fd) {
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	db04      	blt.n	8003bf4 <_close+0x18>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	dc01      	bgt.n	8003bf4 <_close+0x18>
    return 0;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	e006      	b.n	8003c02 <_close+0x26>

  errno = EBADF;
 8003bf4:	f000 fa68 	bl	80040c8 <__errno>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	2309      	movs	r3, #9
 8003bfc:	6013      	str	r3, [r2, #0]
  return -1;
 8003bfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b084      	sub	sp, #16
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	60f8      	str	r0, [r7, #12]
 8003c12:	60b9      	str	r1, [r7, #8]
 8003c14:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8003c16:	f000 fa57 	bl	80040c8 <__errno>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	2309      	movs	r3, #9
 8003c1e:	6013      	str	r3, [r2, #0]
  return -1;
 8003c20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <_read>:

int _read(int fd, char* ptr, int len) {
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d110      	bne.n	8003c60 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8003c3e:	4b0e      	ldr	r3, [pc, #56]	; (8003c78 <_read+0x4c>)
 8003c40:	6818      	ldr	r0, [r3, #0]
 8003c42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c46:	2201      	movs	r2, #1
 8003c48:	68b9      	ldr	r1, [r7, #8]
 8003c4a:	f7fe fd57 	bl	80026fc <HAL_UART_Receive>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003c52:	7dfb      	ldrb	r3, [r7, #23]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <_read+0x30>
      return 1;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e008      	b.n	8003c6e <_read+0x42>
    else
      return EIO;
 8003c5c:	2305      	movs	r3, #5
 8003c5e:	e006      	b.n	8003c6e <_read+0x42>
  }
  errno = EBADF;
 8003c60:	f000 fa32 	bl	80040c8 <__errno>
 8003c64:	4602      	mov	r2, r0
 8003c66:	2309      	movs	r3, #9
 8003c68:	6013      	str	r3, [r2, #0]
  return -1;
 8003c6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	200004f8 	.word	0x200004f8

08003c7c <_fstat>:

int _fstat(int fd, struct stat* st) {
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	db08      	blt.n	8003c9e <_fstat+0x22>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	dc05      	bgt.n	8003c9e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c98:	605a      	str	r2, [r3, #4]
    return 0;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	e005      	b.n	8003caa <_fstat+0x2e>
  }

  errno = EBADF;
 8003c9e:	f000 fa13 	bl	80040c8 <__errno>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	2309      	movs	r3, #9
 8003ca6:	6013      	str	r3, [r2, #0]
  return 0;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b085      	sub	sp, #20
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
 8003cba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	689a      	ldr	r2, [r3, #8]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	683a      	ldr	r2, [r7, #0]
 8003cd6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	1c5a      	adds	r2, r3, #1
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	601a      	str	r2, [r3, #0]
}
 8003cee:	bf00      	nop
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b085      	sub	sp, #20
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	6892      	ldr	r2, [r2, #8]
 8003d10:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6852      	ldr	r2, [r2, #4]
 8003d1a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d103      	bne.n	8003d2e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689a      	ldr	r2, [r3, #8]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	1e5a      	subs	r2, r3, #1
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
	...

08003d50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d56:	2300      	movs	r3, #0
 8003d58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d5a:	4b4e      	ldr	r3, [pc, #312]	; (8003e94 <xTaskIncrementTick+0x144>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f040 8087 	bne.w	8003e72 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d64:	4b4c      	ldr	r3, [pc, #304]	; (8003e98 <xTaskIncrementTick+0x148>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	3301      	adds	r3, #1
 8003d6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d6c:	4a4a      	ldr	r2, [pc, #296]	; (8003e98 <xTaskIncrementTick+0x148>)
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d11f      	bne.n	8003db8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d78:	4b48      	ldr	r3, [pc, #288]	; (8003e9c <xTaskIncrementTick+0x14c>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d009      	beq.n	8003d96 <xTaskIncrementTick+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	603b      	str	r3, [r7, #0]
 8003d94:	e7fe      	b.n	8003d94 <xTaskIncrementTick+0x44>
 8003d96:	4b41      	ldr	r3, [pc, #260]	; (8003e9c <xTaskIncrementTick+0x14c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	4b40      	ldr	r3, [pc, #256]	; (8003ea0 <xTaskIncrementTick+0x150>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a3e      	ldr	r2, [pc, #248]	; (8003e9c <xTaskIncrementTick+0x14c>)
 8003da2:	6013      	str	r3, [r2, #0]
 8003da4:	4a3e      	ldr	r2, [pc, #248]	; (8003ea0 <xTaskIncrementTick+0x150>)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6013      	str	r3, [r2, #0]
 8003daa:	4b3e      	ldr	r3, [pc, #248]	; (8003ea4 <xTaskIncrementTick+0x154>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	3301      	adds	r3, #1
 8003db0:	4a3c      	ldr	r2, [pc, #240]	; (8003ea4 <xTaskIncrementTick+0x154>)
 8003db2:	6013      	str	r3, [r2, #0]
 8003db4:	f000 f8de 	bl	8003f74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003db8:	4b3b      	ldr	r3, [pc, #236]	; (8003ea8 <xTaskIncrementTick+0x158>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d348      	bcc.n	8003e54 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dc2:	4b36      	ldr	r3, [pc, #216]	; (8003e9c <xTaskIncrementTick+0x14c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d104      	bne.n	8003dd6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dcc:	4b36      	ldr	r3, [pc, #216]	; (8003ea8 <xTaskIncrementTick+0x158>)
 8003dce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003dd2:	601a      	str	r2, [r3, #0]
					break;
 8003dd4:	e03e      	b.n	8003e54 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dd6:	4b31      	ldr	r3, [pc, #196]	; (8003e9c <xTaskIncrementTick+0x14c>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d203      	bcs.n	8003df6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003dee:	4a2e      	ldr	r2, [pc, #184]	; (8003ea8 <xTaskIncrementTick+0x158>)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003df4:	e02e      	b.n	8003e54 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	3304      	adds	r3, #4
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7ff ff7d 	bl	8003cfa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d004      	beq.n	8003e12 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	3318      	adds	r3, #24
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff ff74 	bl	8003cfa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e16:	2201      	movs	r2, #1
 8003e18:	409a      	lsls	r2, r3
 8003e1a:	4b24      	ldr	r3, [pc, #144]	; (8003eac <xTaskIncrementTick+0x15c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	4a22      	ldr	r2, [pc, #136]	; (8003eac <xTaskIncrementTick+0x15c>)
 8003e22:	6013      	str	r3, [r2, #0]
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e28:	4613      	mov	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4413      	add	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4a1f      	ldr	r2, [pc, #124]	; (8003eb0 <xTaskIncrementTick+0x160>)
 8003e32:	441a      	add	r2, r3
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	3304      	adds	r3, #4
 8003e38:	4619      	mov	r1, r3
 8003e3a:	4610      	mov	r0, r2
 8003e3c:	f7ff ff39 	bl	8003cb2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e44:	4b1b      	ldr	r3, [pc, #108]	; (8003eb4 <xTaskIncrementTick+0x164>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d3b9      	bcc.n	8003dc2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e52:	e7b6      	b.n	8003dc2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e54:	4b17      	ldr	r3, [pc, #92]	; (8003eb4 <xTaskIncrementTick+0x164>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e5a:	4915      	ldr	r1, [pc, #84]	; (8003eb0 <xTaskIncrementTick+0x160>)
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4413      	add	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	440b      	add	r3, r1
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d907      	bls.n	8003e7c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	617b      	str	r3, [r7, #20]
 8003e70:	e004      	b.n	8003e7c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003e72:	4b11      	ldr	r3, [pc, #68]	; (8003eb8 <xTaskIncrementTick+0x168>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	3301      	adds	r3, #1
 8003e78:	4a0f      	ldr	r2, [pc, #60]	; (8003eb8 <xTaskIncrementTick+0x168>)
 8003e7a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003e7c:	4b0f      	ldr	r3, [pc, #60]	; (8003ebc <xTaskIncrementTick+0x16c>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d001      	beq.n	8003e88 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8003e84:	2301      	movs	r3, #1
 8003e86:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003e88:	697b      	ldr	r3, [r7, #20]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	20000144 	.word	0x20000144
 8003e98:	20000128 	.word	0x20000128
 8003e9c:	20000120 	.word	0x20000120
 8003ea0:	20000124 	.word	0x20000124
 8003ea4:	2000013c 	.word	0x2000013c
 8003ea8:	20000140 	.word	0x20000140
 8003eac:	2000012c 	.word	0x2000012c
 8003eb0:	20000094 	.word	0x20000094
 8003eb4:	20000090 	.word	0x20000090
 8003eb8:	20000134 	.word	0x20000134
 8003ebc:	20000138 	.word	0x20000138

08003ec0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b087      	sub	sp, #28
 8003ec4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ec6:	4b26      	ldr	r3, [pc, #152]	; (8003f60 <vTaskSwitchContext+0xa0>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ece:	4b25      	ldr	r3, [pc, #148]	; (8003f64 <vTaskSwitchContext+0xa4>)
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ed4:	e03e      	b.n	8003f54 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003ed6:	4b23      	ldr	r3, [pc, #140]	; (8003f64 <vTaskSwitchContext+0xa4>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003edc:	4b22      	ldr	r3, [pc, #136]	; (8003f68 <vTaskSwitchContext+0xa8>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	fab3 f383 	clz	r3, r3
 8003ee8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003eea:	7afb      	ldrb	r3, [r7, #11]
 8003eec:	f1c3 031f 	rsb	r3, r3, #31
 8003ef0:	617b      	str	r3, [r7, #20]
 8003ef2:	491e      	ldr	r1, [pc, #120]	; (8003f6c <vTaskSwitchContext+0xac>)
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4413      	add	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	440b      	add	r3, r1
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d109      	bne.n	8003f1a <vTaskSwitchContext+0x5a>
	__asm volatile
 8003f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0a:	f383 8811 	msr	BASEPRI, r3
 8003f0e:	f3bf 8f6f 	isb	sy
 8003f12:	f3bf 8f4f 	dsb	sy
 8003f16:	607b      	str	r3, [r7, #4]
 8003f18:	e7fe      	b.n	8003f18 <vTaskSwitchContext+0x58>
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4413      	add	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4a11      	ldr	r2, [pc, #68]	; (8003f6c <vTaskSwitchContext+0xac>)
 8003f26:	4413      	add	r3, r2
 8003f28:	613b      	str	r3, [r7, #16]
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	685a      	ldr	r2, [r3, #4]
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	605a      	str	r2, [r3, #4]
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	3308      	adds	r3, #8
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d104      	bne.n	8003f4a <vTaskSwitchContext+0x8a>
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	605a      	str	r2, [r3, #4]
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	4a07      	ldr	r2, [pc, #28]	; (8003f70 <vTaskSwitchContext+0xb0>)
 8003f52:	6013      	str	r3, [r2, #0]
}
 8003f54:	bf00      	nop
 8003f56:	371c      	adds	r7, #28
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr
 8003f60:	20000144 	.word	0x20000144
 8003f64:	20000138 	.word	0x20000138
 8003f68:	2000012c 	.word	0x2000012c
 8003f6c:	20000094 	.word	0x20000094
 8003f70:	20000090 	.word	0x20000090

08003f74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f7a:	4b0c      	ldr	r3, [pc, #48]	; (8003fac <prvResetNextTaskUnblockTime+0x38>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d104      	bne.n	8003f8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003f84:	4b0a      	ldr	r3, [pc, #40]	; (8003fb0 <prvResetNextTaskUnblockTime+0x3c>)
 8003f86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003f8c:	e008      	b.n	8003fa0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f8e:	4b07      	ldr	r3, [pc, #28]	; (8003fac <prvResetNextTaskUnblockTime+0x38>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	4a04      	ldr	r2, [pc, #16]	; (8003fb0 <prvResetNextTaskUnblockTime+0x3c>)
 8003f9e:	6013      	str	r3, [r2, #0]
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	20000120 	.word	0x20000120
 8003fb0:	20000140 	.word	0x20000140

08003fb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003fba:	4b0b      	ldr	r3, [pc, #44]	; (8003fe8 <xTaskGetSchedulerState+0x34>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d102      	bne.n	8003fc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	607b      	str	r3, [r7, #4]
 8003fc6:	e008      	b.n	8003fda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fc8:	4b08      	ldr	r3, [pc, #32]	; (8003fec <xTaskGetSchedulerState+0x38>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d102      	bne.n	8003fd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	607b      	str	r3, [r7, #4]
 8003fd4:	e001      	b.n	8003fda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003fda:	687b      	ldr	r3, [r7, #4]
	}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	20000130 	.word	0x20000130
 8003fec:	20000144 	.word	0x20000144

08003ff0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003ff0:	4b07      	ldr	r3, [pc, #28]	; (8004010 <pxCurrentTCBConst2>)
 8003ff2:	6819      	ldr	r1, [r3, #0]
 8003ff4:	6808      	ldr	r0, [r1, #0]
 8003ff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ffa:	f380 8809 	msr	PSP, r0
 8003ffe:	f3bf 8f6f 	isb	sy
 8004002:	f04f 0000 	mov.w	r0, #0
 8004006:	f380 8811 	msr	BASEPRI, r0
 800400a:	4770      	bx	lr
 800400c:	f3af 8000 	nop.w

08004010 <pxCurrentTCBConst2>:
 8004010:	20000090 	.word	0x20000090
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004014:	bf00      	nop
 8004016:	bf00      	nop
	...

08004020 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004020:	f3ef 8009 	mrs	r0, PSP
 8004024:	f3bf 8f6f 	isb	sy
 8004028:	4b15      	ldr	r3, [pc, #84]	; (8004080 <pxCurrentTCBConst>)
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	f01e 0f10 	tst.w	lr, #16
 8004030:	bf08      	it	eq
 8004032:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004036:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800403a:	6010      	str	r0, [r2, #0]
 800403c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004040:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004044:	f380 8811 	msr	BASEPRI, r0
 8004048:	f3bf 8f4f 	dsb	sy
 800404c:	f3bf 8f6f 	isb	sy
 8004050:	f7ff ff36 	bl	8003ec0 <vTaskSwitchContext>
 8004054:	f04f 0000 	mov.w	r0, #0
 8004058:	f380 8811 	msr	BASEPRI, r0
 800405c:	bc09      	pop	{r0, r3}
 800405e:	6819      	ldr	r1, [r3, #0]
 8004060:	6808      	ldr	r0, [r1, #0]
 8004062:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004066:	f01e 0f10 	tst.w	lr, #16
 800406a:	bf08      	it	eq
 800406c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004070:	f380 8809 	msr	PSP, r0
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	f3af 8000 	nop.w

08004080 <pxCurrentTCBConst>:
 8004080:	20000090 	.word	0x20000090
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004084:	bf00      	nop
 8004086:	bf00      	nop

08004088 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004092:	f383 8811 	msr	BASEPRI, r3
 8004096:	f3bf 8f6f 	isb	sy
 800409a:	f3bf 8f4f 	dsb	sy
 800409e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80040a0:	f7ff fe56 	bl	8003d50 <xTaskIncrementTick>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80040aa:	4b06      	ldr	r3, [pc, #24]	; (80040c4 <xPortSysTickHandler+0x3c>)
 80040ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	2300      	movs	r3, #0
 80040b4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80040bc:	bf00      	nop
 80040be:	3708      	adds	r7, #8
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	e000ed04 	.word	0xe000ed04

080040c8 <__errno>:
 80040c8:	4b01      	ldr	r3, [pc, #4]	; (80040d0 <__errno+0x8>)
 80040ca:	6818      	ldr	r0, [r3, #0]
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	2000000c 	.word	0x2000000c

080040d4 <__libc_init_array>:
 80040d4:	b570      	push	{r4, r5, r6, lr}
 80040d6:	4e0d      	ldr	r6, [pc, #52]	; (800410c <__libc_init_array+0x38>)
 80040d8:	4c0d      	ldr	r4, [pc, #52]	; (8004110 <__libc_init_array+0x3c>)
 80040da:	1ba4      	subs	r4, r4, r6
 80040dc:	10a4      	asrs	r4, r4, #2
 80040de:	2500      	movs	r5, #0
 80040e0:	42a5      	cmp	r5, r4
 80040e2:	d109      	bne.n	80040f8 <__libc_init_array+0x24>
 80040e4:	4e0b      	ldr	r6, [pc, #44]	; (8004114 <__libc_init_array+0x40>)
 80040e6:	4c0c      	ldr	r4, [pc, #48]	; (8004118 <__libc_init_array+0x44>)
 80040e8:	f001 f82a 	bl	8005140 <_init>
 80040ec:	1ba4      	subs	r4, r4, r6
 80040ee:	10a4      	asrs	r4, r4, #2
 80040f0:	2500      	movs	r5, #0
 80040f2:	42a5      	cmp	r5, r4
 80040f4:	d105      	bne.n	8004102 <__libc_init_array+0x2e>
 80040f6:	bd70      	pop	{r4, r5, r6, pc}
 80040f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040fc:	4798      	blx	r3
 80040fe:	3501      	adds	r5, #1
 8004100:	e7ee      	b.n	80040e0 <__libc_init_array+0xc>
 8004102:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004106:	4798      	blx	r3
 8004108:	3501      	adds	r5, #1
 800410a:	e7f2      	b.n	80040f2 <__libc_init_array+0x1e>
 800410c:	08005250 	.word	0x08005250
 8004110:	08005250 	.word	0x08005250
 8004114:	08005250 	.word	0x08005250
 8004118:	08005254 	.word	0x08005254

0800411c <memcpy>:
 800411c:	b510      	push	{r4, lr}
 800411e:	1e43      	subs	r3, r0, #1
 8004120:	440a      	add	r2, r1
 8004122:	4291      	cmp	r1, r2
 8004124:	d100      	bne.n	8004128 <memcpy+0xc>
 8004126:	bd10      	pop	{r4, pc}
 8004128:	f811 4b01 	ldrb.w	r4, [r1], #1
 800412c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004130:	e7f7      	b.n	8004122 <memcpy+0x6>

08004132 <memset>:
 8004132:	4402      	add	r2, r0
 8004134:	4603      	mov	r3, r0
 8004136:	4293      	cmp	r3, r2
 8004138:	d100      	bne.n	800413c <memset+0xa>
 800413a:	4770      	bx	lr
 800413c:	f803 1b01 	strb.w	r1, [r3], #1
 8004140:	e7f9      	b.n	8004136 <memset+0x4>
	...

08004144 <iprintf>:
 8004144:	b40f      	push	{r0, r1, r2, r3}
 8004146:	4b0a      	ldr	r3, [pc, #40]	; (8004170 <iprintf+0x2c>)
 8004148:	b513      	push	{r0, r1, r4, lr}
 800414a:	681c      	ldr	r4, [r3, #0]
 800414c:	b124      	cbz	r4, 8004158 <iprintf+0x14>
 800414e:	69a3      	ldr	r3, [r4, #24]
 8004150:	b913      	cbnz	r3, 8004158 <iprintf+0x14>
 8004152:	4620      	mov	r0, r4
 8004154:	f000 fad0 	bl	80046f8 <__sinit>
 8004158:	ab05      	add	r3, sp, #20
 800415a:	9a04      	ldr	r2, [sp, #16]
 800415c:	68a1      	ldr	r1, [r4, #8]
 800415e:	9301      	str	r3, [sp, #4]
 8004160:	4620      	mov	r0, r4
 8004162:	f000 fc91 	bl	8004a88 <_vfiprintf_r>
 8004166:	b002      	add	sp, #8
 8004168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800416c:	b004      	add	sp, #16
 800416e:	4770      	bx	lr
 8004170:	2000000c 	.word	0x2000000c

08004174 <_puts_r>:
 8004174:	b570      	push	{r4, r5, r6, lr}
 8004176:	460e      	mov	r6, r1
 8004178:	4605      	mov	r5, r0
 800417a:	b118      	cbz	r0, 8004184 <_puts_r+0x10>
 800417c:	6983      	ldr	r3, [r0, #24]
 800417e:	b90b      	cbnz	r3, 8004184 <_puts_r+0x10>
 8004180:	f000 faba 	bl	80046f8 <__sinit>
 8004184:	69ab      	ldr	r3, [r5, #24]
 8004186:	68ac      	ldr	r4, [r5, #8]
 8004188:	b913      	cbnz	r3, 8004190 <_puts_r+0x1c>
 800418a:	4628      	mov	r0, r5
 800418c:	f000 fab4 	bl	80046f8 <__sinit>
 8004190:	4b23      	ldr	r3, [pc, #140]	; (8004220 <_puts_r+0xac>)
 8004192:	429c      	cmp	r4, r3
 8004194:	d117      	bne.n	80041c6 <_puts_r+0x52>
 8004196:	686c      	ldr	r4, [r5, #4]
 8004198:	89a3      	ldrh	r3, [r4, #12]
 800419a:	071b      	lsls	r3, r3, #28
 800419c:	d51d      	bpl.n	80041da <_puts_r+0x66>
 800419e:	6923      	ldr	r3, [r4, #16]
 80041a0:	b1db      	cbz	r3, 80041da <_puts_r+0x66>
 80041a2:	3e01      	subs	r6, #1
 80041a4:	68a3      	ldr	r3, [r4, #8]
 80041a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80041aa:	3b01      	subs	r3, #1
 80041ac:	60a3      	str	r3, [r4, #8]
 80041ae:	b9e9      	cbnz	r1, 80041ec <_puts_r+0x78>
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	da2e      	bge.n	8004212 <_puts_r+0x9e>
 80041b4:	4622      	mov	r2, r4
 80041b6:	210a      	movs	r1, #10
 80041b8:	4628      	mov	r0, r5
 80041ba:	f000 f8ed 	bl	8004398 <__swbuf_r>
 80041be:	3001      	adds	r0, #1
 80041c0:	d011      	beq.n	80041e6 <_puts_r+0x72>
 80041c2:	200a      	movs	r0, #10
 80041c4:	e011      	b.n	80041ea <_puts_r+0x76>
 80041c6:	4b17      	ldr	r3, [pc, #92]	; (8004224 <_puts_r+0xb0>)
 80041c8:	429c      	cmp	r4, r3
 80041ca:	d101      	bne.n	80041d0 <_puts_r+0x5c>
 80041cc:	68ac      	ldr	r4, [r5, #8]
 80041ce:	e7e3      	b.n	8004198 <_puts_r+0x24>
 80041d0:	4b15      	ldr	r3, [pc, #84]	; (8004228 <_puts_r+0xb4>)
 80041d2:	429c      	cmp	r4, r3
 80041d4:	bf08      	it	eq
 80041d6:	68ec      	ldreq	r4, [r5, #12]
 80041d8:	e7de      	b.n	8004198 <_puts_r+0x24>
 80041da:	4621      	mov	r1, r4
 80041dc:	4628      	mov	r0, r5
 80041de:	f000 f92d 	bl	800443c <__swsetup_r>
 80041e2:	2800      	cmp	r0, #0
 80041e4:	d0dd      	beq.n	80041a2 <_puts_r+0x2e>
 80041e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041ea:	bd70      	pop	{r4, r5, r6, pc}
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	da04      	bge.n	80041fa <_puts_r+0x86>
 80041f0:	69a2      	ldr	r2, [r4, #24]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	dc06      	bgt.n	8004204 <_puts_r+0x90>
 80041f6:	290a      	cmp	r1, #10
 80041f8:	d004      	beq.n	8004204 <_puts_r+0x90>
 80041fa:	6823      	ldr	r3, [r4, #0]
 80041fc:	1c5a      	adds	r2, r3, #1
 80041fe:	6022      	str	r2, [r4, #0]
 8004200:	7019      	strb	r1, [r3, #0]
 8004202:	e7cf      	b.n	80041a4 <_puts_r+0x30>
 8004204:	4622      	mov	r2, r4
 8004206:	4628      	mov	r0, r5
 8004208:	f000 f8c6 	bl	8004398 <__swbuf_r>
 800420c:	3001      	adds	r0, #1
 800420e:	d1c9      	bne.n	80041a4 <_puts_r+0x30>
 8004210:	e7e9      	b.n	80041e6 <_puts_r+0x72>
 8004212:	6823      	ldr	r3, [r4, #0]
 8004214:	200a      	movs	r0, #10
 8004216:	1c5a      	adds	r2, r3, #1
 8004218:	6022      	str	r2, [r4, #0]
 800421a:	7018      	strb	r0, [r3, #0]
 800421c:	e7e5      	b.n	80041ea <_puts_r+0x76>
 800421e:	bf00      	nop
 8004220:	080051d4 	.word	0x080051d4
 8004224:	080051f4 	.word	0x080051f4
 8004228:	080051b4 	.word	0x080051b4

0800422c <puts>:
 800422c:	4b02      	ldr	r3, [pc, #8]	; (8004238 <puts+0xc>)
 800422e:	4601      	mov	r1, r0
 8004230:	6818      	ldr	r0, [r3, #0]
 8004232:	f7ff bf9f 	b.w	8004174 <_puts_r>
 8004236:	bf00      	nop
 8004238:	2000000c 	.word	0x2000000c

0800423c <setvbuf>:
 800423c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004240:	461d      	mov	r5, r3
 8004242:	4b51      	ldr	r3, [pc, #324]	; (8004388 <setvbuf+0x14c>)
 8004244:	681e      	ldr	r6, [r3, #0]
 8004246:	4604      	mov	r4, r0
 8004248:	460f      	mov	r7, r1
 800424a:	4690      	mov	r8, r2
 800424c:	b126      	cbz	r6, 8004258 <setvbuf+0x1c>
 800424e:	69b3      	ldr	r3, [r6, #24]
 8004250:	b913      	cbnz	r3, 8004258 <setvbuf+0x1c>
 8004252:	4630      	mov	r0, r6
 8004254:	f000 fa50 	bl	80046f8 <__sinit>
 8004258:	4b4c      	ldr	r3, [pc, #304]	; (800438c <setvbuf+0x150>)
 800425a:	429c      	cmp	r4, r3
 800425c:	d152      	bne.n	8004304 <setvbuf+0xc8>
 800425e:	6874      	ldr	r4, [r6, #4]
 8004260:	f1b8 0f02 	cmp.w	r8, #2
 8004264:	d006      	beq.n	8004274 <setvbuf+0x38>
 8004266:	f1b8 0f01 	cmp.w	r8, #1
 800426a:	f200 8089 	bhi.w	8004380 <setvbuf+0x144>
 800426e:	2d00      	cmp	r5, #0
 8004270:	f2c0 8086 	blt.w	8004380 <setvbuf+0x144>
 8004274:	4621      	mov	r1, r4
 8004276:	4630      	mov	r0, r6
 8004278:	f000 f9d4 	bl	8004624 <_fflush_r>
 800427c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800427e:	b141      	cbz	r1, 8004292 <setvbuf+0x56>
 8004280:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004284:	4299      	cmp	r1, r3
 8004286:	d002      	beq.n	800428e <setvbuf+0x52>
 8004288:	4630      	mov	r0, r6
 800428a:	f000 fb2b 	bl	80048e4 <_free_r>
 800428e:	2300      	movs	r3, #0
 8004290:	6363      	str	r3, [r4, #52]	; 0x34
 8004292:	2300      	movs	r3, #0
 8004294:	61a3      	str	r3, [r4, #24]
 8004296:	6063      	str	r3, [r4, #4]
 8004298:	89a3      	ldrh	r3, [r4, #12]
 800429a:	061b      	lsls	r3, r3, #24
 800429c:	d503      	bpl.n	80042a6 <setvbuf+0x6a>
 800429e:	6921      	ldr	r1, [r4, #16]
 80042a0:	4630      	mov	r0, r6
 80042a2:	f000 fb1f 	bl	80048e4 <_free_r>
 80042a6:	89a3      	ldrh	r3, [r4, #12]
 80042a8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80042ac:	f023 0303 	bic.w	r3, r3, #3
 80042b0:	f1b8 0f02 	cmp.w	r8, #2
 80042b4:	81a3      	strh	r3, [r4, #12]
 80042b6:	d05d      	beq.n	8004374 <setvbuf+0x138>
 80042b8:	ab01      	add	r3, sp, #4
 80042ba:	466a      	mov	r2, sp
 80042bc:	4621      	mov	r1, r4
 80042be:	4630      	mov	r0, r6
 80042c0:	f000 faa4 	bl	800480c <__swhatbuf_r>
 80042c4:	89a3      	ldrh	r3, [r4, #12]
 80042c6:	4318      	orrs	r0, r3
 80042c8:	81a0      	strh	r0, [r4, #12]
 80042ca:	bb2d      	cbnz	r5, 8004318 <setvbuf+0xdc>
 80042cc:	9d00      	ldr	r5, [sp, #0]
 80042ce:	4628      	mov	r0, r5
 80042d0:	f000 fb00 	bl	80048d4 <malloc>
 80042d4:	4607      	mov	r7, r0
 80042d6:	2800      	cmp	r0, #0
 80042d8:	d14e      	bne.n	8004378 <setvbuf+0x13c>
 80042da:	f8dd 9000 	ldr.w	r9, [sp]
 80042de:	45a9      	cmp	r9, r5
 80042e0:	d13c      	bne.n	800435c <setvbuf+0x120>
 80042e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042e6:	89a3      	ldrh	r3, [r4, #12]
 80042e8:	f043 0302 	orr.w	r3, r3, #2
 80042ec:	81a3      	strh	r3, [r4, #12]
 80042ee:	2300      	movs	r3, #0
 80042f0:	60a3      	str	r3, [r4, #8]
 80042f2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80042f6:	6023      	str	r3, [r4, #0]
 80042f8:	6123      	str	r3, [r4, #16]
 80042fa:	2301      	movs	r3, #1
 80042fc:	6163      	str	r3, [r4, #20]
 80042fe:	b003      	add	sp, #12
 8004300:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004304:	4b22      	ldr	r3, [pc, #136]	; (8004390 <setvbuf+0x154>)
 8004306:	429c      	cmp	r4, r3
 8004308:	d101      	bne.n	800430e <setvbuf+0xd2>
 800430a:	68b4      	ldr	r4, [r6, #8]
 800430c:	e7a8      	b.n	8004260 <setvbuf+0x24>
 800430e:	4b21      	ldr	r3, [pc, #132]	; (8004394 <setvbuf+0x158>)
 8004310:	429c      	cmp	r4, r3
 8004312:	bf08      	it	eq
 8004314:	68f4      	ldreq	r4, [r6, #12]
 8004316:	e7a3      	b.n	8004260 <setvbuf+0x24>
 8004318:	2f00      	cmp	r7, #0
 800431a:	d0d8      	beq.n	80042ce <setvbuf+0x92>
 800431c:	69b3      	ldr	r3, [r6, #24]
 800431e:	b913      	cbnz	r3, 8004326 <setvbuf+0xea>
 8004320:	4630      	mov	r0, r6
 8004322:	f000 f9e9 	bl	80046f8 <__sinit>
 8004326:	f1b8 0f01 	cmp.w	r8, #1
 800432a:	bf08      	it	eq
 800432c:	89a3      	ldrheq	r3, [r4, #12]
 800432e:	6027      	str	r7, [r4, #0]
 8004330:	bf04      	itt	eq
 8004332:	f043 0301 	orreq.w	r3, r3, #1
 8004336:	81a3      	strheq	r3, [r4, #12]
 8004338:	89a3      	ldrh	r3, [r4, #12]
 800433a:	f013 0008 	ands.w	r0, r3, #8
 800433e:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8004342:	d01b      	beq.n	800437c <setvbuf+0x140>
 8004344:	f013 0001 	ands.w	r0, r3, #1
 8004348:	bf18      	it	ne
 800434a:	426d      	negne	r5, r5
 800434c:	f04f 0300 	mov.w	r3, #0
 8004350:	bf1d      	ittte	ne
 8004352:	60a3      	strne	r3, [r4, #8]
 8004354:	61a5      	strne	r5, [r4, #24]
 8004356:	4618      	movne	r0, r3
 8004358:	60a5      	streq	r5, [r4, #8]
 800435a:	e7d0      	b.n	80042fe <setvbuf+0xc2>
 800435c:	4648      	mov	r0, r9
 800435e:	f000 fab9 	bl	80048d4 <malloc>
 8004362:	4607      	mov	r7, r0
 8004364:	2800      	cmp	r0, #0
 8004366:	d0bc      	beq.n	80042e2 <setvbuf+0xa6>
 8004368:	89a3      	ldrh	r3, [r4, #12]
 800436a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800436e:	81a3      	strh	r3, [r4, #12]
 8004370:	464d      	mov	r5, r9
 8004372:	e7d3      	b.n	800431c <setvbuf+0xe0>
 8004374:	2000      	movs	r0, #0
 8004376:	e7b6      	b.n	80042e6 <setvbuf+0xaa>
 8004378:	46a9      	mov	r9, r5
 800437a:	e7f5      	b.n	8004368 <setvbuf+0x12c>
 800437c:	60a0      	str	r0, [r4, #8]
 800437e:	e7be      	b.n	80042fe <setvbuf+0xc2>
 8004380:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004384:	e7bb      	b.n	80042fe <setvbuf+0xc2>
 8004386:	bf00      	nop
 8004388:	2000000c 	.word	0x2000000c
 800438c:	080051d4 	.word	0x080051d4
 8004390:	080051f4 	.word	0x080051f4
 8004394:	080051b4 	.word	0x080051b4

08004398 <__swbuf_r>:
 8004398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800439a:	460e      	mov	r6, r1
 800439c:	4614      	mov	r4, r2
 800439e:	4605      	mov	r5, r0
 80043a0:	b118      	cbz	r0, 80043aa <__swbuf_r+0x12>
 80043a2:	6983      	ldr	r3, [r0, #24]
 80043a4:	b90b      	cbnz	r3, 80043aa <__swbuf_r+0x12>
 80043a6:	f000 f9a7 	bl	80046f8 <__sinit>
 80043aa:	4b21      	ldr	r3, [pc, #132]	; (8004430 <__swbuf_r+0x98>)
 80043ac:	429c      	cmp	r4, r3
 80043ae:	d12a      	bne.n	8004406 <__swbuf_r+0x6e>
 80043b0:	686c      	ldr	r4, [r5, #4]
 80043b2:	69a3      	ldr	r3, [r4, #24]
 80043b4:	60a3      	str	r3, [r4, #8]
 80043b6:	89a3      	ldrh	r3, [r4, #12]
 80043b8:	071a      	lsls	r2, r3, #28
 80043ba:	d52e      	bpl.n	800441a <__swbuf_r+0x82>
 80043bc:	6923      	ldr	r3, [r4, #16]
 80043be:	b363      	cbz	r3, 800441a <__swbuf_r+0x82>
 80043c0:	6923      	ldr	r3, [r4, #16]
 80043c2:	6820      	ldr	r0, [r4, #0]
 80043c4:	1ac0      	subs	r0, r0, r3
 80043c6:	6963      	ldr	r3, [r4, #20]
 80043c8:	b2f6      	uxtb	r6, r6
 80043ca:	4283      	cmp	r3, r0
 80043cc:	4637      	mov	r7, r6
 80043ce:	dc04      	bgt.n	80043da <__swbuf_r+0x42>
 80043d0:	4621      	mov	r1, r4
 80043d2:	4628      	mov	r0, r5
 80043d4:	f000 f926 	bl	8004624 <_fflush_r>
 80043d8:	bb28      	cbnz	r0, 8004426 <__swbuf_r+0x8e>
 80043da:	68a3      	ldr	r3, [r4, #8]
 80043dc:	3b01      	subs	r3, #1
 80043de:	60a3      	str	r3, [r4, #8]
 80043e0:	6823      	ldr	r3, [r4, #0]
 80043e2:	1c5a      	adds	r2, r3, #1
 80043e4:	6022      	str	r2, [r4, #0]
 80043e6:	701e      	strb	r6, [r3, #0]
 80043e8:	6963      	ldr	r3, [r4, #20]
 80043ea:	3001      	adds	r0, #1
 80043ec:	4283      	cmp	r3, r0
 80043ee:	d004      	beq.n	80043fa <__swbuf_r+0x62>
 80043f0:	89a3      	ldrh	r3, [r4, #12]
 80043f2:	07db      	lsls	r3, r3, #31
 80043f4:	d519      	bpl.n	800442a <__swbuf_r+0x92>
 80043f6:	2e0a      	cmp	r6, #10
 80043f8:	d117      	bne.n	800442a <__swbuf_r+0x92>
 80043fa:	4621      	mov	r1, r4
 80043fc:	4628      	mov	r0, r5
 80043fe:	f000 f911 	bl	8004624 <_fflush_r>
 8004402:	b190      	cbz	r0, 800442a <__swbuf_r+0x92>
 8004404:	e00f      	b.n	8004426 <__swbuf_r+0x8e>
 8004406:	4b0b      	ldr	r3, [pc, #44]	; (8004434 <__swbuf_r+0x9c>)
 8004408:	429c      	cmp	r4, r3
 800440a:	d101      	bne.n	8004410 <__swbuf_r+0x78>
 800440c:	68ac      	ldr	r4, [r5, #8]
 800440e:	e7d0      	b.n	80043b2 <__swbuf_r+0x1a>
 8004410:	4b09      	ldr	r3, [pc, #36]	; (8004438 <__swbuf_r+0xa0>)
 8004412:	429c      	cmp	r4, r3
 8004414:	bf08      	it	eq
 8004416:	68ec      	ldreq	r4, [r5, #12]
 8004418:	e7cb      	b.n	80043b2 <__swbuf_r+0x1a>
 800441a:	4621      	mov	r1, r4
 800441c:	4628      	mov	r0, r5
 800441e:	f000 f80d 	bl	800443c <__swsetup_r>
 8004422:	2800      	cmp	r0, #0
 8004424:	d0cc      	beq.n	80043c0 <__swbuf_r+0x28>
 8004426:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800442a:	4638      	mov	r0, r7
 800442c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800442e:	bf00      	nop
 8004430:	080051d4 	.word	0x080051d4
 8004434:	080051f4 	.word	0x080051f4
 8004438:	080051b4 	.word	0x080051b4

0800443c <__swsetup_r>:
 800443c:	4b32      	ldr	r3, [pc, #200]	; (8004508 <__swsetup_r+0xcc>)
 800443e:	b570      	push	{r4, r5, r6, lr}
 8004440:	681d      	ldr	r5, [r3, #0]
 8004442:	4606      	mov	r6, r0
 8004444:	460c      	mov	r4, r1
 8004446:	b125      	cbz	r5, 8004452 <__swsetup_r+0x16>
 8004448:	69ab      	ldr	r3, [r5, #24]
 800444a:	b913      	cbnz	r3, 8004452 <__swsetup_r+0x16>
 800444c:	4628      	mov	r0, r5
 800444e:	f000 f953 	bl	80046f8 <__sinit>
 8004452:	4b2e      	ldr	r3, [pc, #184]	; (800450c <__swsetup_r+0xd0>)
 8004454:	429c      	cmp	r4, r3
 8004456:	d10f      	bne.n	8004478 <__swsetup_r+0x3c>
 8004458:	686c      	ldr	r4, [r5, #4]
 800445a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800445e:	b29a      	uxth	r2, r3
 8004460:	0715      	lsls	r5, r2, #28
 8004462:	d42c      	bmi.n	80044be <__swsetup_r+0x82>
 8004464:	06d0      	lsls	r0, r2, #27
 8004466:	d411      	bmi.n	800448c <__swsetup_r+0x50>
 8004468:	2209      	movs	r2, #9
 800446a:	6032      	str	r2, [r6, #0]
 800446c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004470:	81a3      	strh	r3, [r4, #12]
 8004472:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004476:	e03e      	b.n	80044f6 <__swsetup_r+0xba>
 8004478:	4b25      	ldr	r3, [pc, #148]	; (8004510 <__swsetup_r+0xd4>)
 800447a:	429c      	cmp	r4, r3
 800447c:	d101      	bne.n	8004482 <__swsetup_r+0x46>
 800447e:	68ac      	ldr	r4, [r5, #8]
 8004480:	e7eb      	b.n	800445a <__swsetup_r+0x1e>
 8004482:	4b24      	ldr	r3, [pc, #144]	; (8004514 <__swsetup_r+0xd8>)
 8004484:	429c      	cmp	r4, r3
 8004486:	bf08      	it	eq
 8004488:	68ec      	ldreq	r4, [r5, #12]
 800448a:	e7e6      	b.n	800445a <__swsetup_r+0x1e>
 800448c:	0751      	lsls	r1, r2, #29
 800448e:	d512      	bpl.n	80044b6 <__swsetup_r+0x7a>
 8004490:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004492:	b141      	cbz	r1, 80044a6 <__swsetup_r+0x6a>
 8004494:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004498:	4299      	cmp	r1, r3
 800449a:	d002      	beq.n	80044a2 <__swsetup_r+0x66>
 800449c:	4630      	mov	r0, r6
 800449e:	f000 fa21 	bl	80048e4 <_free_r>
 80044a2:	2300      	movs	r3, #0
 80044a4:	6363      	str	r3, [r4, #52]	; 0x34
 80044a6:	89a3      	ldrh	r3, [r4, #12]
 80044a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80044ac:	81a3      	strh	r3, [r4, #12]
 80044ae:	2300      	movs	r3, #0
 80044b0:	6063      	str	r3, [r4, #4]
 80044b2:	6923      	ldr	r3, [r4, #16]
 80044b4:	6023      	str	r3, [r4, #0]
 80044b6:	89a3      	ldrh	r3, [r4, #12]
 80044b8:	f043 0308 	orr.w	r3, r3, #8
 80044bc:	81a3      	strh	r3, [r4, #12]
 80044be:	6923      	ldr	r3, [r4, #16]
 80044c0:	b94b      	cbnz	r3, 80044d6 <__swsetup_r+0x9a>
 80044c2:	89a3      	ldrh	r3, [r4, #12]
 80044c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80044c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044cc:	d003      	beq.n	80044d6 <__swsetup_r+0x9a>
 80044ce:	4621      	mov	r1, r4
 80044d0:	4630      	mov	r0, r6
 80044d2:	f000 f9bf 	bl	8004854 <__smakebuf_r>
 80044d6:	89a2      	ldrh	r2, [r4, #12]
 80044d8:	f012 0301 	ands.w	r3, r2, #1
 80044dc:	d00c      	beq.n	80044f8 <__swsetup_r+0xbc>
 80044de:	2300      	movs	r3, #0
 80044e0:	60a3      	str	r3, [r4, #8]
 80044e2:	6963      	ldr	r3, [r4, #20]
 80044e4:	425b      	negs	r3, r3
 80044e6:	61a3      	str	r3, [r4, #24]
 80044e8:	6923      	ldr	r3, [r4, #16]
 80044ea:	b953      	cbnz	r3, 8004502 <__swsetup_r+0xc6>
 80044ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044f0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80044f4:	d1ba      	bne.n	800446c <__swsetup_r+0x30>
 80044f6:	bd70      	pop	{r4, r5, r6, pc}
 80044f8:	0792      	lsls	r2, r2, #30
 80044fa:	bf58      	it	pl
 80044fc:	6963      	ldrpl	r3, [r4, #20]
 80044fe:	60a3      	str	r3, [r4, #8]
 8004500:	e7f2      	b.n	80044e8 <__swsetup_r+0xac>
 8004502:	2000      	movs	r0, #0
 8004504:	e7f7      	b.n	80044f6 <__swsetup_r+0xba>
 8004506:	bf00      	nop
 8004508:	2000000c 	.word	0x2000000c
 800450c:	080051d4 	.word	0x080051d4
 8004510:	080051f4 	.word	0x080051f4
 8004514:	080051b4 	.word	0x080051b4

08004518 <__sflush_r>:
 8004518:	898a      	ldrh	r2, [r1, #12]
 800451a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800451e:	4605      	mov	r5, r0
 8004520:	0710      	lsls	r0, r2, #28
 8004522:	460c      	mov	r4, r1
 8004524:	d458      	bmi.n	80045d8 <__sflush_r+0xc0>
 8004526:	684b      	ldr	r3, [r1, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	dc05      	bgt.n	8004538 <__sflush_r+0x20>
 800452c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800452e:	2b00      	cmp	r3, #0
 8004530:	dc02      	bgt.n	8004538 <__sflush_r+0x20>
 8004532:	2000      	movs	r0, #0
 8004534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004538:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800453a:	2e00      	cmp	r6, #0
 800453c:	d0f9      	beq.n	8004532 <__sflush_r+0x1a>
 800453e:	2300      	movs	r3, #0
 8004540:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004544:	682f      	ldr	r7, [r5, #0]
 8004546:	6a21      	ldr	r1, [r4, #32]
 8004548:	602b      	str	r3, [r5, #0]
 800454a:	d032      	beq.n	80045b2 <__sflush_r+0x9a>
 800454c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800454e:	89a3      	ldrh	r3, [r4, #12]
 8004550:	075a      	lsls	r2, r3, #29
 8004552:	d505      	bpl.n	8004560 <__sflush_r+0x48>
 8004554:	6863      	ldr	r3, [r4, #4]
 8004556:	1ac0      	subs	r0, r0, r3
 8004558:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800455a:	b10b      	cbz	r3, 8004560 <__sflush_r+0x48>
 800455c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800455e:	1ac0      	subs	r0, r0, r3
 8004560:	2300      	movs	r3, #0
 8004562:	4602      	mov	r2, r0
 8004564:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004566:	6a21      	ldr	r1, [r4, #32]
 8004568:	4628      	mov	r0, r5
 800456a:	47b0      	blx	r6
 800456c:	1c43      	adds	r3, r0, #1
 800456e:	89a3      	ldrh	r3, [r4, #12]
 8004570:	d106      	bne.n	8004580 <__sflush_r+0x68>
 8004572:	6829      	ldr	r1, [r5, #0]
 8004574:	291d      	cmp	r1, #29
 8004576:	d848      	bhi.n	800460a <__sflush_r+0xf2>
 8004578:	4a29      	ldr	r2, [pc, #164]	; (8004620 <__sflush_r+0x108>)
 800457a:	40ca      	lsrs	r2, r1
 800457c:	07d6      	lsls	r6, r2, #31
 800457e:	d544      	bpl.n	800460a <__sflush_r+0xf2>
 8004580:	2200      	movs	r2, #0
 8004582:	6062      	str	r2, [r4, #4]
 8004584:	04d9      	lsls	r1, r3, #19
 8004586:	6922      	ldr	r2, [r4, #16]
 8004588:	6022      	str	r2, [r4, #0]
 800458a:	d504      	bpl.n	8004596 <__sflush_r+0x7e>
 800458c:	1c42      	adds	r2, r0, #1
 800458e:	d101      	bne.n	8004594 <__sflush_r+0x7c>
 8004590:	682b      	ldr	r3, [r5, #0]
 8004592:	b903      	cbnz	r3, 8004596 <__sflush_r+0x7e>
 8004594:	6560      	str	r0, [r4, #84]	; 0x54
 8004596:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004598:	602f      	str	r7, [r5, #0]
 800459a:	2900      	cmp	r1, #0
 800459c:	d0c9      	beq.n	8004532 <__sflush_r+0x1a>
 800459e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045a2:	4299      	cmp	r1, r3
 80045a4:	d002      	beq.n	80045ac <__sflush_r+0x94>
 80045a6:	4628      	mov	r0, r5
 80045a8:	f000 f99c 	bl	80048e4 <_free_r>
 80045ac:	2000      	movs	r0, #0
 80045ae:	6360      	str	r0, [r4, #52]	; 0x34
 80045b0:	e7c0      	b.n	8004534 <__sflush_r+0x1c>
 80045b2:	2301      	movs	r3, #1
 80045b4:	4628      	mov	r0, r5
 80045b6:	47b0      	blx	r6
 80045b8:	1c41      	adds	r1, r0, #1
 80045ba:	d1c8      	bne.n	800454e <__sflush_r+0x36>
 80045bc:	682b      	ldr	r3, [r5, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0c5      	beq.n	800454e <__sflush_r+0x36>
 80045c2:	2b1d      	cmp	r3, #29
 80045c4:	d001      	beq.n	80045ca <__sflush_r+0xb2>
 80045c6:	2b16      	cmp	r3, #22
 80045c8:	d101      	bne.n	80045ce <__sflush_r+0xb6>
 80045ca:	602f      	str	r7, [r5, #0]
 80045cc:	e7b1      	b.n	8004532 <__sflush_r+0x1a>
 80045ce:	89a3      	ldrh	r3, [r4, #12]
 80045d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045d4:	81a3      	strh	r3, [r4, #12]
 80045d6:	e7ad      	b.n	8004534 <__sflush_r+0x1c>
 80045d8:	690f      	ldr	r7, [r1, #16]
 80045da:	2f00      	cmp	r7, #0
 80045dc:	d0a9      	beq.n	8004532 <__sflush_r+0x1a>
 80045de:	0793      	lsls	r3, r2, #30
 80045e0:	680e      	ldr	r6, [r1, #0]
 80045e2:	bf08      	it	eq
 80045e4:	694b      	ldreq	r3, [r1, #20]
 80045e6:	600f      	str	r7, [r1, #0]
 80045e8:	bf18      	it	ne
 80045ea:	2300      	movne	r3, #0
 80045ec:	eba6 0807 	sub.w	r8, r6, r7
 80045f0:	608b      	str	r3, [r1, #8]
 80045f2:	f1b8 0f00 	cmp.w	r8, #0
 80045f6:	dd9c      	ble.n	8004532 <__sflush_r+0x1a>
 80045f8:	4643      	mov	r3, r8
 80045fa:	463a      	mov	r2, r7
 80045fc:	6a21      	ldr	r1, [r4, #32]
 80045fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004600:	4628      	mov	r0, r5
 8004602:	47b0      	blx	r6
 8004604:	2800      	cmp	r0, #0
 8004606:	dc06      	bgt.n	8004616 <__sflush_r+0xfe>
 8004608:	89a3      	ldrh	r3, [r4, #12]
 800460a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800460e:	81a3      	strh	r3, [r4, #12]
 8004610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004614:	e78e      	b.n	8004534 <__sflush_r+0x1c>
 8004616:	4407      	add	r7, r0
 8004618:	eba8 0800 	sub.w	r8, r8, r0
 800461c:	e7e9      	b.n	80045f2 <__sflush_r+0xda>
 800461e:	bf00      	nop
 8004620:	20400001 	.word	0x20400001

08004624 <_fflush_r>:
 8004624:	b538      	push	{r3, r4, r5, lr}
 8004626:	690b      	ldr	r3, [r1, #16]
 8004628:	4605      	mov	r5, r0
 800462a:	460c      	mov	r4, r1
 800462c:	b1db      	cbz	r3, 8004666 <_fflush_r+0x42>
 800462e:	b118      	cbz	r0, 8004638 <_fflush_r+0x14>
 8004630:	6983      	ldr	r3, [r0, #24]
 8004632:	b90b      	cbnz	r3, 8004638 <_fflush_r+0x14>
 8004634:	f000 f860 	bl	80046f8 <__sinit>
 8004638:	4b0c      	ldr	r3, [pc, #48]	; (800466c <_fflush_r+0x48>)
 800463a:	429c      	cmp	r4, r3
 800463c:	d109      	bne.n	8004652 <_fflush_r+0x2e>
 800463e:	686c      	ldr	r4, [r5, #4]
 8004640:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004644:	b17b      	cbz	r3, 8004666 <_fflush_r+0x42>
 8004646:	4621      	mov	r1, r4
 8004648:	4628      	mov	r0, r5
 800464a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800464e:	f7ff bf63 	b.w	8004518 <__sflush_r>
 8004652:	4b07      	ldr	r3, [pc, #28]	; (8004670 <_fflush_r+0x4c>)
 8004654:	429c      	cmp	r4, r3
 8004656:	d101      	bne.n	800465c <_fflush_r+0x38>
 8004658:	68ac      	ldr	r4, [r5, #8]
 800465a:	e7f1      	b.n	8004640 <_fflush_r+0x1c>
 800465c:	4b05      	ldr	r3, [pc, #20]	; (8004674 <_fflush_r+0x50>)
 800465e:	429c      	cmp	r4, r3
 8004660:	bf08      	it	eq
 8004662:	68ec      	ldreq	r4, [r5, #12]
 8004664:	e7ec      	b.n	8004640 <_fflush_r+0x1c>
 8004666:	2000      	movs	r0, #0
 8004668:	bd38      	pop	{r3, r4, r5, pc}
 800466a:	bf00      	nop
 800466c:	080051d4 	.word	0x080051d4
 8004670:	080051f4 	.word	0x080051f4
 8004674:	080051b4 	.word	0x080051b4

08004678 <std>:
 8004678:	2300      	movs	r3, #0
 800467a:	b510      	push	{r4, lr}
 800467c:	4604      	mov	r4, r0
 800467e:	e9c0 3300 	strd	r3, r3, [r0]
 8004682:	6083      	str	r3, [r0, #8]
 8004684:	8181      	strh	r1, [r0, #12]
 8004686:	6643      	str	r3, [r0, #100]	; 0x64
 8004688:	81c2      	strh	r2, [r0, #14]
 800468a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800468e:	6183      	str	r3, [r0, #24]
 8004690:	4619      	mov	r1, r3
 8004692:	2208      	movs	r2, #8
 8004694:	305c      	adds	r0, #92	; 0x5c
 8004696:	f7ff fd4c 	bl	8004132 <memset>
 800469a:	4b05      	ldr	r3, [pc, #20]	; (80046b0 <std+0x38>)
 800469c:	6263      	str	r3, [r4, #36]	; 0x24
 800469e:	4b05      	ldr	r3, [pc, #20]	; (80046b4 <std+0x3c>)
 80046a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80046a2:	4b05      	ldr	r3, [pc, #20]	; (80046b8 <std+0x40>)
 80046a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80046a6:	4b05      	ldr	r3, [pc, #20]	; (80046bc <std+0x44>)
 80046a8:	6224      	str	r4, [r4, #32]
 80046aa:	6323      	str	r3, [r4, #48]	; 0x30
 80046ac:	bd10      	pop	{r4, pc}
 80046ae:	bf00      	nop
 80046b0:	08004fe5 	.word	0x08004fe5
 80046b4:	08005007 	.word	0x08005007
 80046b8:	0800503f 	.word	0x0800503f
 80046bc:	08005063 	.word	0x08005063

080046c0 <_cleanup_r>:
 80046c0:	4901      	ldr	r1, [pc, #4]	; (80046c8 <_cleanup_r+0x8>)
 80046c2:	f000 b885 	b.w	80047d0 <_fwalk_reent>
 80046c6:	bf00      	nop
 80046c8:	08004625 	.word	0x08004625

080046cc <__sfmoreglue>:
 80046cc:	b570      	push	{r4, r5, r6, lr}
 80046ce:	1e4a      	subs	r2, r1, #1
 80046d0:	2568      	movs	r5, #104	; 0x68
 80046d2:	4355      	muls	r5, r2
 80046d4:	460e      	mov	r6, r1
 80046d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80046da:	f000 f951 	bl	8004980 <_malloc_r>
 80046de:	4604      	mov	r4, r0
 80046e0:	b140      	cbz	r0, 80046f4 <__sfmoreglue+0x28>
 80046e2:	2100      	movs	r1, #0
 80046e4:	e9c0 1600 	strd	r1, r6, [r0]
 80046e8:	300c      	adds	r0, #12
 80046ea:	60a0      	str	r0, [r4, #8]
 80046ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80046f0:	f7ff fd1f 	bl	8004132 <memset>
 80046f4:	4620      	mov	r0, r4
 80046f6:	bd70      	pop	{r4, r5, r6, pc}

080046f8 <__sinit>:
 80046f8:	6983      	ldr	r3, [r0, #24]
 80046fa:	b510      	push	{r4, lr}
 80046fc:	4604      	mov	r4, r0
 80046fe:	bb33      	cbnz	r3, 800474e <__sinit+0x56>
 8004700:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004704:	6503      	str	r3, [r0, #80]	; 0x50
 8004706:	4b12      	ldr	r3, [pc, #72]	; (8004750 <__sinit+0x58>)
 8004708:	4a12      	ldr	r2, [pc, #72]	; (8004754 <__sinit+0x5c>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6282      	str	r2, [r0, #40]	; 0x28
 800470e:	4298      	cmp	r0, r3
 8004710:	bf04      	itt	eq
 8004712:	2301      	moveq	r3, #1
 8004714:	6183      	streq	r3, [r0, #24]
 8004716:	f000 f81f 	bl	8004758 <__sfp>
 800471a:	6060      	str	r0, [r4, #4]
 800471c:	4620      	mov	r0, r4
 800471e:	f000 f81b 	bl	8004758 <__sfp>
 8004722:	60a0      	str	r0, [r4, #8]
 8004724:	4620      	mov	r0, r4
 8004726:	f000 f817 	bl	8004758 <__sfp>
 800472a:	2200      	movs	r2, #0
 800472c:	60e0      	str	r0, [r4, #12]
 800472e:	2104      	movs	r1, #4
 8004730:	6860      	ldr	r0, [r4, #4]
 8004732:	f7ff ffa1 	bl	8004678 <std>
 8004736:	2201      	movs	r2, #1
 8004738:	2109      	movs	r1, #9
 800473a:	68a0      	ldr	r0, [r4, #8]
 800473c:	f7ff ff9c 	bl	8004678 <std>
 8004740:	2202      	movs	r2, #2
 8004742:	2112      	movs	r1, #18
 8004744:	68e0      	ldr	r0, [r4, #12]
 8004746:	f7ff ff97 	bl	8004678 <std>
 800474a:	2301      	movs	r3, #1
 800474c:	61a3      	str	r3, [r4, #24]
 800474e:	bd10      	pop	{r4, pc}
 8004750:	080051b0 	.word	0x080051b0
 8004754:	080046c1 	.word	0x080046c1

08004758 <__sfp>:
 8004758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800475a:	4b1b      	ldr	r3, [pc, #108]	; (80047c8 <__sfp+0x70>)
 800475c:	681e      	ldr	r6, [r3, #0]
 800475e:	69b3      	ldr	r3, [r6, #24]
 8004760:	4607      	mov	r7, r0
 8004762:	b913      	cbnz	r3, 800476a <__sfp+0x12>
 8004764:	4630      	mov	r0, r6
 8004766:	f7ff ffc7 	bl	80046f8 <__sinit>
 800476a:	3648      	adds	r6, #72	; 0x48
 800476c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004770:	3b01      	subs	r3, #1
 8004772:	d503      	bpl.n	800477c <__sfp+0x24>
 8004774:	6833      	ldr	r3, [r6, #0]
 8004776:	b133      	cbz	r3, 8004786 <__sfp+0x2e>
 8004778:	6836      	ldr	r6, [r6, #0]
 800477a:	e7f7      	b.n	800476c <__sfp+0x14>
 800477c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004780:	b16d      	cbz	r5, 800479e <__sfp+0x46>
 8004782:	3468      	adds	r4, #104	; 0x68
 8004784:	e7f4      	b.n	8004770 <__sfp+0x18>
 8004786:	2104      	movs	r1, #4
 8004788:	4638      	mov	r0, r7
 800478a:	f7ff ff9f 	bl	80046cc <__sfmoreglue>
 800478e:	6030      	str	r0, [r6, #0]
 8004790:	2800      	cmp	r0, #0
 8004792:	d1f1      	bne.n	8004778 <__sfp+0x20>
 8004794:	230c      	movs	r3, #12
 8004796:	603b      	str	r3, [r7, #0]
 8004798:	4604      	mov	r4, r0
 800479a:	4620      	mov	r0, r4
 800479c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800479e:	4b0b      	ldr	r3, [pc, #44]	; (80047cc <__sfp+0x74>)
 80047a0:	6665      	str	r5, [r4, #100]	; 0x64
 80047a2:	e9c4 5500 	strd	r5, r5, [r4]
 80047a6:	60a5      	str	r5, [r4, #8]
 80047a8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80047ac:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80047b0:	2208      	movs	r2, #8
 80047b2:	4629      	mov	r1, r5
 80047b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80047b8:	f7ff fcbb 	bl	8004132 <memset>
 80047bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80047c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80047c4:	e7e9      	b.n	800479a <__sfp+0x42>
 80047c6:	bf00      	nop
 80047c8:	080051b0 	.word	0x080051b0
 80047cc:	ffff0001 	.word	0xffff0001

080047d0 <_fwalk_reent>:
 80047d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047d4:	4680      	mov	r8, r0
 80047d6:	4689      	mov	r9, r1
 80047d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80047dc:	2600      	movs	r6, #0
 80047de:	b914      	cbnz	r4, 80047e6 <_fwalk_reent+0x16>
 80047e0:	4630      	mov	r0, r6
 80047e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047e6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80047ea:	3f01      	subs	r7, #1
 80047ec:	d501      	bpl.n	80047f2 <_fwalk_reent+0x22>
 80047ee:	6824      	ldr	r4, [r4, #0]
 80047f0:	e7f5      	b.n	80047de <_fwalk_reent+0xe>
 80047f2:	89ab      	ldrh	r3, [r5, #12]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d907      	bls.n	8004808 <_fwalk_reent+0x38>
 80047f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047fc:	3301      	adds	r3, #1
 80047fe:	d003      	beq.n	8004808 <_fwalk_reent+0x38>
 8004800:	4629      	mov	r1, r5
 8004802:	4640      	mov	r0, r8
 8004804:	47c8      	blx	r9
 8004806:	4306      	orrs	r6, r0
 8004808:	3568      	adds	r5, #104	; 0x68
 800480a:	e7ee      	b.n	80047ea <_fwalk_reent+0x1a>

0800480c <__swhatbuf_r>:
 800480c:	b570      	push	{r4, r5, r6, lr}
 800480e:	460e      	mov	r6, r1
 8004810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004814:	2900      	cmp	r1, #0
 8004816:	b096      	sub	sp, #88	; 0x58
 8004818:	4614      	mov	r4, r2
 800481a:	461d      	mov	r5, r3
 800481c:	da07      	bge.n	800482e <__swhatbuf_r+0x22>
 800481e:	2300      	movs	r3, #0
 8004820:	602b      	str	r3, [r5, #0]
 8004822:	89b3      	ldrh	r3, [r6, #12]
 8004824:	061a      	lsls	r2, r3, #24
 8004826:	d410      	bmi.n	800484a <__swhatbuf_r+0x3e>
 8004828:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800482c:	e00e      	b.n	800484c <__swhatbuf_r+0x40>
 800482e:	466a      	mov	r2, sp
 8004830:	f000 fc3e 	bl	80050b0 <_fstat_r>
 8004834:	2800      	cmp	r0, #0
 8004836:	dbf2      	blt.n	800481e <__swhatbuf_r+0x12>
 8004838:	9a01      	ldr	r2, [sp, #4]
 800483a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800483e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004842:	425a      	negs	r2, r3
 8004844:	415a      	adcs	r2, r3
 8004846:	602a      	str	r2, [r5, #0]
 8004848:	e7ee      	b.n	8004828 <__swhatbuf_r+0x1c>
 800484a:	2340      	movs	r3, #64	; 0x40
 800484c:	2000      	movs	r0, #0
 800484e:	6023      	str	r3, [r4, #0]
 8004850:	b016      	add	sp, #88	; 0x58
 8004852:	bd70      	pop	{r4, r5, r6, pc}

08004854 <__smakebuf_r>:
 8004854:	898b      	ldrh	r3, [r1, #12]
 8004856:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004858:	079d      	lsls	r5, r3, #30
 800485a:	4606      	mov	r6, r0
 800485c:	460c      	mov	r4, r1
 800485e:	d507      	bpl.n	8004870 <__smakebuf_r+0x1c>
 8004860:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004864:	6023      	str	r3, [r4, #0]
 8004866:	6123      	str	r3, [r4, #16]
 8004868:	2301      	movs	r3, #1
 800486a:	6163      	str	r3, [r4, #20]
 800486c:	b002      	add	sp, #8
 800486e:	bd70      	pop	{r4, r5, r6, pc}
 8004870:	ab01      	add	r3, sp, #4
 8004872:	466a      	mov	r2, sp
 8004874:	f7ff ffca 	bl	800480c <__swhatbuf_r>
 8004878:	9900      	ldr	r1, [sp, #0]
 800487a:	4605      	mov	r5, r0
 800487c:	4630      	mov	r0, r6
 800487e:	f000 f87f 	bl	8004980 <_malloc_r>
 8004882:	b948      	cbnz	r0, 8004898 <__smakebuf_r+0x44>
 8004884:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004888:	059a      	lsls	r2, r3, #22
 800488a:	d4ef      	bmi.n	800486c <__smakebuf_r+0x18>
 800488c:	f023 0303 	bic.w	r3, r3, #3
 8004890:	f043 0302 	orr.w	r3, r3, #2
 8004894:	81a3      	strh	r3, [r4, #12]
 8004896:	e7e3      	b.n	8004860 <__smakebuf_r+0xc>
 8004898:	4b0d      	ldr	r3, [pc, #52]	; (80048d0 <__smakebuf_r+0x7c>)
 800489a:	62b3      	str	r3, [r6, #40]	; 0x28
 800489c:	89a3      	ldrh	r3, [r4, #12]
 800489e:	6020      	str	r0, [r4, #0]
 80048a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048a4:	81a3      	strh	r3, [r4, #12]
 80048a6:	9b00      	ldr	r3, [sp, #0]
 80048a8:	6163      	str	r3, [r4, #20]
 80048aa:	9b01      	ldr	r3, [sp, #4]
 80048ac:	6120      	str	r0, [r4, #16]
 80048ae:	b15b      	cbz	r3, 80048c8 <__smakebuf_r+0x74>
 80048b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048b4:	4630      	mov	r0, r6
 80048b6:	f000 fc0d 	bl	80050d4 <_isatty_r>
 80048ba:	b128      	cbz	r0, 80048c8 <__smakebuf_r+0x74>
 80048bc:	89a3      	ldrh	r3, [r4, #12]
 80048be:	f023 0303 	bic.w	r3, r3, #3
 80048c2:	f043 0301 	orr.w	r3, r3, #1
 80048c6:	81a3      	strh	r3, [r4, #12]
 80048c8:	89a3      	ldrh	r3, [r4, #12]
 80048ca:	431d      	orrs	r5, r3
 80048cc:	81a5      	strh	r5, [r4, #12]
 80048ce:	e7cd      	b.n	800486c <__smakebuf_r+0x18>
 80048d0:	080046c1 	.word	0x080046c1

080048d4 <malloc>:
 80048d4:	4b02      	ldr	r3, [pc, #8]	; (80048e0 <malloc+0xc>)
 80048d6:	4601      	mov	r1, r0
 80048d8:	6818      	ldr	r0, [r3, #0]
 80048da:	f000 b851 	b.w	8004980 <_malloc_r>
 80048de:	bf00      	nop
 80048e0:	2000000c 	.word	0x2000000c

080048e4 <_free_r>:
 80048e4:	b538      	push	{r3, r4, r5, lr}
 80048e6:	4605      	mov	r5, r0
 80048e8:	2900      	cmp	r1, #0
 80048ea:	d045      	beq.n	8004978 <_free_r+0x94>
 80048ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048f0:	1f0c      	subs	r4, r1, #4
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	bfb8      	it	lt
 80048f6:	18e4      	addlt	r4, r4, r3
 80048f8:	f000 fc0e 	bl	8005118 <__malloc_lock>
 80048fc:	4a1f      	ldr	r2, [pc, #124]	; (800497c <_free_r+0x98>)
 80048fe:	6813      	ldr	r3, [r2, #0]
 8004900:	4610      	mov	r0, r2
 8004902:	b933      	cbnz	r3, 8004912 <_free_r+0x2e>
 8004904:	6063      	str	r3, [r4, #4]
 8004906:	6014      	str	r4, [r2, #0]
 8004908:	4628      	mov	r0, r5
 800490a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800490e:	f000 bc04 	b.w	800511a <__malloc_unlock>
 8004912:	42a3      	cmp	r3, r4
 8004914:	d90c      	bls.n	8004930 <_free_r+0x4c>
 8004916:	6821      	ldr	r1, [r4, #0]
 8004918:	1862      	adds	r2, r4, r1
 800491a:	4293      	cmp	r3, r2
 800491c:	bf04      	itt	eq
 800491e:	681a      	ldreq	r2, [r3, #0]
 8004920:	685b      	ldreq	r3, [r3, #4]
 8004922:	6063      	str	r3, [r4, #4]
 8004924:	bf04      	itt	eq
 8004926:	1852      	addeq	r2, r2, r1
 8004928:	6022      	streq	r2, [r4, #0]
 800492a:	6004      	str	r4, [r0, #0]
 800492c:	e7ec      	b.n	8004908 <_free_r+0x24>
 800492e:	4613      	mov	r3, r2
 8004930:	685a      	ldr	r2, [r3, #4]
 8004932:	b10a      	cbz	r2, 8004938 <_free_r+0x54>
 8004934:	42a2      	cmp	r2, r4
 8004936:	d9fa      	bls.n	800492e <_free_r+0x4a>
 8004938:	6819      	ldr	r1, [r3, #0]
 800493a:	1858      	adds	r0, r3, r1
 800493c:	42a0      	cmp	r0, r4
 800493e:	d10b      	bne.n	8004958 <_free_r+0x74>
 8004940:	6820      	ldr	r0, [r4, #0]
 8004942:	4401      	add	r1, r0
 8004944:	1858      	adds	r0, r3, r1
 8004946:	4282      	cmp	r2, r0
 8004948:	6019      	str	r1, [r3, #0]
 800494a:	d1dd      	bne.n	8004908 <_free_r+0x24>
 800494c:	6810      	ldr	r0, [r2, #0]
 800494e:	6852      	ldr	r2, [r2, #4]
 8004950:	605a      	str	r2, [r3, #4]
 8004952:	4401      	add	r1, r0
 8004954:	6019      	str	r1, [r3, #0]
 8004956:	e7d7      	b.n	8004908 <_free_r+0x24>
 8004958:	d902      	bls.n	8004960 <_free_r+0x7c>
 800495a:	230c      	movs	r3, #12
 800495c:	602b      	str	r3, [r5, #0]
 800495e:	e7d3      	b.n	8004908 <_free_r+0x24>
 8004960:	6820      	ldr	r0, [r4, #0]
 8004962:	1821      	adds	r1, r4, r0
 8004964:	428a      	cmp	r2, r1
 8004966:	bf04      	itt	eq
 8004968:	6811      	ldreq	r1, [r2, #0]
 800496a:	6852      	ldreq	r2, [r2, #4]
 800496c:	6062      	str	r2, [r4, #4]
 800496e:	bf04      	itt	eq
 8004970:	1809      	addeq	r1, r1, r0
 8004972:	6021      	streq	r1, [r4, #0]
 8004974:	605c      	str	r4, [r3, #4]
 8004976:	e7c7      	b.n	8004908 <_free_r+0x24>
 8004978:	bd38      	pop	{r3, r4, r5, pc}
 800497a:	bf00      	nop
 800497c:	20000148 	.word	0x20000148

08004980 <_malloc_r>:
 8004980:	b570      	push	{r4, r5, r6, lr}
 8004982:	1ccd      	adds	r5, r1, #3
 8004984:	f025 0503 	bic.w	r5, r5, #3
 8004988:	3508      	adds	r5, #8
 800498a:	2d0c      	cmp	r5, #12
 800498c:	bf38      	it	cc
 800498e:	250c      	movcc	r5, #12
 8004990:	2d00      	cmp	r5, #0
 8004992:	4606      	mov	r6, r0
 8004994:	db01      	blt.n	800499a <_malloc_r+0x1a>
 8004996:	42a9      	cmp	r1, r5
 8004998:	d903      	bls.n	80049a2 <_malloc_r+0x22>
 800499a:	230c      	movs	r3, #12
 800499c:	6033      	str	r3, [r6, #0]
 800499e:	2000      	movs	r0, #0
 80049a0:	bd70      	pop	{r4, r5, r6, pc}
 80049a2:	f000 fbb9 	bl	8005118 <__malloc_lock>
 80049a6:	4a21      	ldr	r2, [pc, #132]	; (8004a2c <_malloc_r+0xac>)
 80049a8:	6814      	ldr	r4, [r2, #0]
 80049aa:	4621      	mov	r1, r4
 80049ac:	b991      	cbnz	r1, 80049d4 <_malloc_r+0x54>
 80049ae:	4c20      	ldr	r4, [pc, #128]	; (8004a30 <_malloc_r+0xb0>)
 80049b0:	6823      	ldr	r3, [r4, #0]
 80049b2:	b91b      	cbnz	r3, 80049bc <_malloc_r+0x3c>
 80049b4:	4630      	mov	r0, r6
 80049b6:	f000 fb05 	bl	8004fc4 <_sbrk_r>
 80049ba:	6020      	str	r0, [r4, #0]
 80049bc:	4629      	mov	r1, r5
 80049be:	4630      	mov	r0, r6
 80049c0:	f000 fb00 	bl	8004fc4 <_sbrk_r>
 80049c4:	1c43      	adds	r3, r0, #1
 80049c6:	d124      	bne.n	8004a12 <_malloc_r+0x92>
 80049c8:	230c      	movs	r3, #12
 80049ca:	6033      	str	r3, [r6, #0]
 80049cc:	4630      	mov	r0, r6
 80049ce:	f000 fba4 	bl	800511a <__malloc_unlock>
 80049d2:	e7e4      	b.n	800499e <_malloc_r+0x1e>
 80049d4:	680b      	ldr	r3, [r1, #0]
 80049d6:	1b5b      	subs	r3, r3, r5
 80049d8:	d418      	bmi.n	8004a0c <_malloc_r+0x8c>
 80049da:	2b0b      	cmp	r3, #11
 80049dc:	d90f      	bls.n	80049fe <_malloc_r+0x7e>
 80049de:	600b      	str	r3, [r1, #0]
 80049e0:	50cd      	str	r5, [r1, r3]
 80049e2:	18cc      	adds	r4, r1, r3
 80049e4:	4630      	mov	r0, r6
 80049e6:	f000 fb98 	bl	800511a <__malloc_unlock>
 80049ea:	f104 000b 	add.w	r0, r4, #11
 80049ee:	1d23      	adds	r3, r4, #4
 80049f0:	f020 0007 	bic.w	r0, r0, #7
 80049f4:	1ac3      	subs	r3, r0, r3
 80049f6:	d0d3      	beq.n	80049a0 <_malloc_r+0x20>
 80049f8:	425a      	negs	r2, r3
 80049fa:	50e2      	str	r2, [r4, r3]
 80049fc:	e7d0      	b.n	80049a0 <_malloc_r+0x20>
 80049fe:	428c      	cmp	r4, r1
 8004a00:	684b      	ldr	r3, [r1, #4]
 8004a02:	bf16      	itet	ne
 8004a04:	6063      	strne	r3, [r4, #4]
 8004a06:	6013      	streq	r3, [r2, #0]
 8004a08:	460c      	movne	r4, r1
 8004a0a:	e7eb      	b.n	80049e4 <_malloc_r+0x64>
 8004a0c:	460c      	mov	r4, r1
 8004a0e:	6849      	ldr	r1, [r1, #4]
 8004a10:	e7cc      	b.n	80049ac <_malloc_r+0x2c>
 8004a12:	1cc4      	adds	r4, r0, #3
 8004a14:	f024 0403 	bic.w	r4, r4, #3
 8004a18:	42a0      	cmp	r0, r4
 8004a1a:	d005      	beq.n	8004a28 <_malloc_r+0xa8>
 8004a1c:	1a21      	subs	r1, r4, r0
 8004a1e:	4630      	mov	r0, r6
 8004a20:	f000 fad0 	bl	8004fc4 <_sbrk_r>
 8004a24:	3001      	adds	r0, #1
 8004a26:	d0cf      	beq.n	80049c8 <_malloc_r+0x48>
 8004a28:	6025      	str	r5, [r4, #0]
 8004a2a:	e7db      	b.n	80049e4 <_malloc_r+0x64>
 8004a2c:	20000148 	.word	0x20000148
 8004a30:	2000014c 	.word	0x2000014c

08004a34 <__sfputc_r>:
 8004a34:	6893      	ldr	r3, [r2, #8]
 8004a36:	3b01      	subs	r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	b410      	push	{r4}
 8004a3c:	6093      	str	r3, [r2, #8]
 8004a3e:	da08      	bge.n	8004a52 <__sfputc_r+0x1e>
 8004a40:	6994      	ldr	r4, [r2, #24]
 8004a42:	42a3      	cmp	r3, r4
 8004a44:	db01      	blt.n	8004a4a <__sfputc_r+0x16>
 8004a46:	290a      	cmp	r1, #10
 8004a48:	d103      	bne.n	8004a52 <__sfputc_r+0x1e>
 8004a4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a4e:	f7ff bca3 	b.w	8004398 <__swbuf_r>
 8004a52:	6813      	ldr	r3, [r2, #0]
 8004a54:	1c58      	adds	r0, r3, #1
 8004a56:	6010      	str	r0, [r2, #0]
 8004a58:	7019      	strb	r1, [r3, #0]
 8004a5a:	4608      	mov	r0, r1
 8004a5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <__sfputs_r>:
 8004a62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a64:	4606      	mov	r6, r0
 8004a66:	460f      	mov	r7, r1
 8004a68:	4614      	mov	r4, r2
 8004a6a:	18d5      	adds	r5, r2, r3
 8004a6c:	42ac      	cmp	r4, r5
 8004a6e:	d101      	bne.n	8004a74 <__sfputs_r+0x12>
 8004a70:	2000      	movs	r0, #0
 8004a72:	e007      	b.n	8004a84 <__sfputs_r+0x22>
 8004a74:	463a      	mov	r2, r7
 8004a76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a7a:	4630      	mov	r0, r6
 8004a7c:	f7ff ffda 	bl	8004a34 <__sfputc_r>
 8004a80:	1c43      	adds	r3, r0, #1
 8004a82:	d1f3      	bne.n	8004a6c <__sfputs_r+0xa>
 8004a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004a88 <_vfiprintf_r>:
 8004a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a8c:	460c      	mov	r4, r1
 8004a8e:	b09d      	sub	sp, #116	; 0x74
 8004a90:	4617      	mov	r7, r2
 8004a92:	461d      	mov	r5, r3
 8004a94:	4606      	mov	r6, r0
 8004a96:	b118      	cbz	r0, 8004aa0 <_vfiprintf_r+0x18>
 8004a98:	6983      	ldr	r3, [r0, #24]
 8004a9a:	b90b      	cbnz	r3, 8004aa0 <_vfiprintf_r+0x18>
 8004a9c:	f7ff fe2c 	bl	80046f8 <__sinit>
 8004aa0:	4b7c      	ldr	r3, [pc, #496]	; (8004c94 <_vfiprintf_r+0x20c>)
 8004aa2:	429c      	cmp	r4, r3
 8004aa4:	d158      	bne.n	8004b58 <_vfiprintf_r+0xd0>
 8004aa6:	6874      	ldr	r4, [r6, #4]
 8004aa8:	89a3      	ldrh	r3, [r4, #12]
 8004aaa:	0718      	lsls	r0, r3, #28
 8004aac:	d55e      	bpl.n	8004b6c <_vfiprintf_r+0xe4>
 8004aae:	6923      	ldr	r3, [r4, #16]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d05b      	beq.n	8004b6c <_vfiprintf_r+0xe4>
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ab8:	2320      	movs	r3, #32
 8004aba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004abe:	2330      	movs	r3, #48	; 0x30
 8004ac0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ac4:	9503      	str	r5, [sp, #12]
 8004ac6:	f04f 0b01 	mov.w	fp, #1
 8004aca:	46b8      	mov	r8, r7
 8004acc:	4645      	mov	r5, r8
 8004ace:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004ad2:	b10b      	cbz	r3, 8004ad8 <_vfiprintf_r+0x50>
 8004ad4:	2b25      	cmp	r3, #37	; 0x25
 8004ad6:	d154      	bne.n	8004b82 <_vfiprintf_r+0xfa>
 8004ad8:	ebb8 0a07 	subs.w	sl, r8, r7
 8004adc:	d00b      	beq.n	8004af6 <_vfiprintf_r+0x6e>
 8004ade:	4653      	mov	r3, sl
 8004ae0:	463a      	mov	r2, r7
 8004ae2:	4621      	mov	r1, r4
 8004ae4:	4630      	mov	r0, r6
 8004ae6:	f7ff ffbc 	bl	8004a62 <__sfputs_r>
 8004aea:	3001      	adds	r0, #1
 8004aec:	f000 80c2 	beq.w	8004c74 <_vfiprintf_r+0x1ec>
 8004af0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004af2:	4453      	add	r3, sl
 8004af4:	9309      	str	r3, [sp, #36]	; 0x24
 8004af6:	f898 3000 	ldrb.w	r3, [r8]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f000 80ba 	beq.w	8004c74 <_vfiprintf_r+0x1ec>
 8004b00:	2300      	movs	r3, #0
 8004b02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b0a:	9304      	str	r3, [sp, #16]
 8004b0c:	9307      	str	r3, [sp, #28]
 8004b0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b12:	931a      	str	r3, [sp, #104]	; 0x68
 8004b14:	46a8      	mov	r8, r5
 8004b16:	2205      	movs	r2, #5
 8004b18:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004b1c:	485e      	ldr	r0, [pc, #376]	; (8004c98 <_vfiprintf_r+0x210>)
 8004b1e:	f7fb fb5f 	bl	80001e0 <memchr>
 8004b22:	9b04      	ldr	r3, [sp, #16]
 8004b24:	bb78      	cbnz	r0, 8004b86 <_vfiprintf_r+0xfe>
 8004b26:	06d9      	lsls	r1, r3, #27
 8004b28:	bf44      	itt	mi
 8004b2a:	2220      	movmi	r2, #32
 8004b2c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004b30:	071a      	lsls	r2, r3, #28
 8004b32:	bf44      	itt	mi
 8004b34:	222b      	movmi	r2, #43	; 0x2b
 8004b36:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004b3a:	782a      	ldrb	r2, [r5, #0]
 8004b3c:	2a2a      	cmp	r2, #42	; 0x2a
 8004b3e:	d02a      	beq.n	8004b96 <_vfiprintf_r+0x10e>
 8004b40:	9a07      	ldr	r2, [sp, #28]
 8004b42:	46a8      	mov	r8, r5
 8004b44:	2000      	movs	r0, #0
 8004b46:	250a      	movs	r5, #10
 8004b48:	4641      	mov	r1, r8
 8004b4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b4e:	3b30      	subs	r3, #48	; 0x30
 8004b50:	2b09      	cmp	r3, #9
 8004b52:	d969      	bls.n	8004c28 <_vfiprintf_r+0x1a0>
 8004b54:	b360      	cbz	r0, 8004bb0 <_vfiprintf_r+0x128>
 8004b56:	e024      	b.n	8004ba2 <_vfiprintf_r+0x11a>
 8004b58:	4b50      	ldr	r3, [pc, #320]	; (8004c9c <_vfiprintf_r+0x214>)
 8004b5a:	429c      	cmp	r4, r3
 8004b5c:	d101      	bne.n	8004b62 <_vfiprintf_r+0xda>
 8004b5e:	68b4      	ldr	r4, [r6, #8]
 8004b60:	e7a2      	b.n	8004aa8 <_vfiprintf_r+0x20>
 8004b62:	4b4f      	ldr	r3, [pc, #316]	; (8004ca0 <_vfiprintf_r+0x218>)
 8004b64:	429c      	cmp	r4, r3
 8004b66:	bf08      	it	eq
 8004b68:	68f4      	ldreq	r4, [r6, #12]
 8004b6a:	e79d      	b.n	8004aa8 <_vfiprintf_r+0x20>
 8004b6c:	4621      	mov	r1, r4
 8004b6e:	4630      	mov	r0, r6
 8004b70:	f7ff fc64 	bl	800443c <__swsetup_r>
 8004b74:	2800      	cmp	r0, #0
 8004b76:	d09d      	beq.n	8004ab4 <_vfiprintf_r+0x2c>
 8004b78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b7c:	b01d      	add	sp, #116	; 0x74
 8004b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b82:	46a8      	mov	r8, r5
 8004b84:	e7a2      	b.n	8004acc <_vfiprintf_r+0x44>
 8004b86:	4a44      	ldr	r2, [pc, #272]	; (8004c98 <_vfiprintf_r+0x210>)
 8004b88:	1a80      	subs	r0, r0, r2
 8004b8a:	fa0b f000 	lsl.w	r0, fp, r0
 8004b8e:	4318      	orrs	r0, r3
 8004b90:	9004      	str	r0, [sp, #16]
 8004b92:	4645      	mov	r5, r8
 8004b94:	e7be      	b.n	8004b14 <_vfiprintf_r+0x8c>
 8004b96:	9a03      	ldr	r2, [sp, #12]
 8004b98:	1d11      	adds	r1, r2, #4
 8004b9a:	6812      	ldr	r2, [r2, #0]
 8004b9c:	9103      	str	r1, [sp, #12]
 8004b9e:	2a00      	cmp	r2, #0
 8004ba0:	db01      	blt.n	8004ba6 <_vfiprintf_r+0x11e>
 8004ba2:	9207      	str	r2, [sp, #28]
 8004ba4:	e004      	b.n	8004bb0 <_vfiprintf_r+0x128>
 8004ba6:	4252      	negs	r2, r2
 8004ba8:	f043 0302 	orr.w	r3, r3, #2
 8004bac:	9207      	str	r2, [sp, #28]
 8004bae:	9304      	str	r3, [sp, #16]
 8004bb0:	f898 3000 	ldrb.w	r3, [r8]
 8004bb4:	2b2e      	cmp	r3, #46	; 0x2e
 8004bb6:	d10e      	bne.n	8004bd6 <_vfiprintf_r+0x14e>
 8004bb8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004bbc:	2b2a      	cmp	r3, #42	; 0x2a
 8004bbe:	d138      	bne.n	8004c32 <_vfiprintf_r+0x1aa>
 8004bc0:	9b03      	ldr	r3, [sp, #12]
 8004bc2:	1d1a      	adds	r2, r3, #4
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	9203      	str	r2, [sp, #12]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	bfb8      	it	lt
 8004bcc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004bd0:	f108 0802 	add.w	r8, r8, #2
 8004bd4:	9305      	str	r3, [sp, #20]
 8004bd6:	4d33      	ldr	r5, [pc, #204]	; (8004ca4 <_vfiprintf_r+0x21c>)
 8004bd8:	f898 1000 	ldrb.w	r1, [r8]
 8004bdc:	2203      	movs	r2, #3
 8004bde:	4628      	mov	r0, r5
 8004be0:	f7fb fafe 	bl	80001e0 <memchr>
 8004be4:	b140      	cbz	r0, 8004bf8 <_vfiprintf_r+0x170>
 8004be6:	2340      	movs	r3, #64	; 0x40
 8004be8:	1b40      	subs	r0, r0, r5
 8004bea:	fa03 f000 	lsl.w	r0, r3, r0
 8004bee:	9b04      	ldr	r3, [sp, #16]
 8004bf0:	4303      	orrs	r3, r0
 8004bf2:	f108 0801 	add.w	r8, r8, #1
 8004bf6:	9304      	str	r3, [sp, #16]
 8004bf8:	f898 1000 	ldrb.w	r1, [r8]
 8004bfc:	482a      	ldr	r0, [pc, #168]	; (8004ca8 <_vfiprintf_r+0x220>)
 8004bfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c02:	2206      	movs	r2, #6
 8004c04:	f108 0701 	add.w	r7, r8, #1
 8004c08:	f7fb faea 	bl	80001e0 <memchr>
 8004c0c:	2800      	cmp	r0, #0
 8004c0e:	d037      	beq.n	8004c80 <_vfiprintf_r+0x1f8>
 8004c10:	4b26      	ldr	r3, [pc, #152]	; (8004cac <_vfiprintf_r+0x224>)
 8004c12:	bb1b      	cbnz	r3, 8004c5c <_vfiprintf_r+0x1d4>
 8004c14:	9b03      	ldr	r3, [sp, #12]
 8004c16:	3307      	adds	r3, #7
 8004c18:	f023 0307 	bic.w	r3, r3, #7
 8004c1c:	3308      	adds	r3, #8
 8004c1e:	9303      	str	r3, [sp, #12]
 8004c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c22:	444b      	add	r3, r9
 8004c24:	9309      	str	r3, [sp, #36]	; 0x24
 8004c26:	e750      	b.n	8004aca <_vfiprintf_r+0x42>
 8004c28:	fb05 3202 	mla	r2, r5, r2, r3
 8004c2c:	2001      	movs	r0, #1
 8004c2e:	4688      	mov	r8, r1
 8004c30:	e78a      	b.n	8004b48 <_vfiprintf_r+0xc0>
 8004c32:	2300      	movs	r3, #0
 8004c34:	f108 0801 	add.w	r8, r8, #1
 8004c38:	9305      	str	r3, [sp, #20]
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	250a      	movs	r5, #10
 8004c3e:	4640      	mov	r0, r8
 8004c40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c44:	3a30      	subs	r2, #48	; 0x30
 8004c46:	2a09      	cmp	r2, #9
 8004c48:	d903      	bls.n	8004c52 <_vfiprintf_r+0x1ca>
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d0c3      	beq.n	8004bd6 <_vfiprintf_r+0x14e>
 8004c4e:	9105      	str	r1, [sp, #20]
 8004c50:	e7c1      	b.n	8004bd6 <_vfiprintf_r+0x14e>
 8004c52:	fb05 2101 	mla	r1, r5, r1, r2
 8004c56:	2301      	movs	r3, #1
 8004c58:	4680      	mov	r8, r0
 8004c5a:	e7f0      	b.n	8004c3e <_vfiprintf_r+0x1b6>
 8004c5c:	ab03      	add	r3, sp, #12
 8004c5e:	9300      	str	r3, [sp, #0]
 8004c60:	4622      	mov	r2, r4
 8004c62:	4b13      	ldr	r3, [pc, #76]	; (8004cb0 <_vfiprintf_r+0x228>)
 8004c64:	a904      	add	r1, sp, #16
 8004c66:	4630      	mov	r0, r6
 8004c68:	f3af 8000 	nop.w
 8004c6c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004c70:	4681      	mov	r9, r0
 8004c72:	d1d5      	bne.n	8004c20 <_vfiprintf_r+0x198>
 8004c74:	89a3      	ldrh	r3, [r4, #12]
 8004c76:	065b      	lsls	r3, r3, #25
 8004c78:	f53f af7e 	bmi.w	8004b78 <_vfiprintf_r+0xf0>
 8004c7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c7e:	e77d      	b.n	8004b7c <_vfiprintf_r+0xf4>
 8004c80:	ab03      	add	r3, sp, #12
 8004c82:	9300      	str	r3, [sp, #0]
 8004c84:	4622      	mov	r2, r4
 8004c86:	4b0a      	ldr	r3, [pc, #40]	; (8004cb0 <_vfiprintf_r+0x228>)
 8004c88:	a904      	add	r1, sp, #16
 8004c8a:	4630      	mov	r0, r6
 8004c8c:	f000 f888 	bl	8004da0 <_printf_i>
 8004c90:	e7ec      	b.n	8004c6c <_vfiprintf_r+0x1e4>
 8004c92:	bf00      	nop
 8004c94:	080051d4 	.word	0x080051d4
 8004c98:	08005214 	.word	0x08005214
 8004c9c:	080051f4 	.word	0x080051f4
 8004ca0:	080051b4 	.word	0x080051b4
 8004ca4:	0800521a 	.word	0x0800521a
 8004ca8:	0800521e 	.word	0x0800521e
 8004cac:	00000000 	.word	0x00000000
 8004cb0:	08004a63 	.word	0x08004a63

08004cb4 <_printf_common>:
 8004cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cb8:	4691      	mov	r9, r2
 8004cba:	461f      	mov	r7, r3
 8004cbc:	688a      	ldr	r2, [r1, #8]
 8004cbe:	690b      	ldr	r3, [r1, #16]
 8004cc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	bfb8      	it	lt
 8004cc8:	4613      	movlt	r3, r2
 8004cca:	f8c9 3000 	str.w	r3, [r9]
 8004cce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004cd2:	4606      	mov	r6, r0
 8004cd4:	460c      	mov	r4, r1
 8004cd6:	b112      	cbz	r2, 8004cde <_printf_common+0x2a>
 8004cd8:	3301      	adds	r3, #1
 8004cda:	f8c9 3000 	str.w	r3, [r9]
 8004cde:	6823      	ldr	r3, [r4, #0]
 8004ce0:	0699      	lsls	r1, r3, #26
 8004ce2:	bf42      	ittt	mi
 8004ce4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004ce8:	3302      	addmi	r3, #2
 8004cea:	f8c9 3000 	strmi.w	r3, [r9]
 8004cee:	6825      	ldr	r5, [r4, #0]
 8004cf0:	f015 0506 	ands.w	r5, r5, #6
 8004cf4:	d107      	bne.n	8004d06 <_printf_common+0x52>
 8004cf6:	f104 0a19 	add.w	sl, r4, #25
 8004cfa:	68e3      	ldr	r3, [r4, #12]
 8004cfc:	f8d9 2000 	ldr.w	r2, [r9]
 8004d00:	1a9b      	subs	r3, r3, r2
 8004d02:	42ab      	cmp	r3, r5
 8004d04:	dc28      	bgt.n	8004d58 <_printf_common+0xa4>
 8004d06:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004d0a:	6822      	ldr	r2, [r4, #0]
 8004d0c:	3300      	adds	r3, #0
 8004d0e:	bf18      	it	ne
 8004d10:	2301      	movne	r3, #1
 8004d12:	0692      	lsls	r2, r2, #26
 8004d14:	d42d      	bmi.n	8004d72 <_printf_common+0xbe>
 8004d16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d1a:	4639      	mov	r1, r7
 8004d1c:	4630      	mov	r0, r6
 8004d1e:	47c0      	blx	r8
 8004d20:	3001      	adds	r0, #1
 8004d22:	d020      	beq.n	8004d66 <_printf_common+0xb2>
 8004d24:	6823      	ldr	r3, [r4, #0]
 8004d26:	68e5      	ldr	r5, [r4, #12]
 8004d28:	f8d9 2000 	ldr.w	r2, [r9]
 8004d2c:	f003 0306 	and.w	r3, r3, #6
 8004d30:	2b04      	cmp	r3, #4
 8004d32:	bf08      	it	eq
 8004d34:	1aad      	subeq	r5, r5, r2
 8004d36:	68a3      	ldr	r3, [r4, #8]
 8004d38:	6922      	ldr	r2, [r4, #16]
 8004d3a:	bf0c      	ite	eq
 8004d3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d40:	2500      	movne	r5, #0
 8004d42:	4293      	cmp	r3, r2
 8004d44:	bfc4      	itt	gt
 8004d46:	1a9b      	subgt	r3, r3, r2
 8004d48:	18ed      	addgt	r5, r5, r3
 8004d4a:	f04f 0900 	mov.w	r9, #0
 8004d4e:	341a      	adds	r4, #26
 8004d50:	454d      	cmp	r5, r9
 8004d52:	d11a      	bne.n	8004d8a <_printf_common+0xd6>
 8004d54:	2000      	movs	r0, #0
 8004d56:	e008      	b.n	8004d6a <_printf_common+0xb6>
 8004d58:	2301      	movs	r3, #1
 8004d5a:	4652      	mov	r2, sl
 8004d5c:	4639      	mov	r1, r7
 8004d5e:	4630      	mov	r0, r6
 8004d60:	47c0      	blx	r8
 8004d62:	3001      	adds	r0, #1
 8004d64:	d103      	bne.n	8004d6e <_printf_common+0xba>
 8004d66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d6e:	3501      	adds	r5, #1
 8004d70:	e7c3      	b.n	8004cfa <_printf_common+0x46>
 8004d72:	18e1      	adds	r1, r4, r3
 8004d74:	1c5a      	adds	r2, r3, #1
 8004d76:	2030      	movs	r0, #48	; 0x30
 8004d78:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d7c:	4422      	add	r2, r4
 8004d7e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d86:	3302      	adds	r3, #2
 8004d88:	e7c5      	b.n	8004d16 <_printf_common+0x62>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	4622      	mov	r2, r4
 8004d8e:	4639      	mov	r1, r7
 8004d90:	4630      	mov	r0, r6
 8004d92:	47c0      	blx	r8
 8004d94:	3001      	adds	r0, #1
 8004d96:	d0e6      	beq.n	8004d66 <_printf_common+0xb2>
 8004d98:	f109 0901 	add.w	r9, r9, #1
 8004d9c:	e7d8      	b.n	8004d50 <_printf_common+0x9c>
	...

08004da0 <_printf_i>:
 8004da0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004da4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004da8:	460c      	mov	r4, r1
 8004daa:	7e09      	ldrb	r1, [r1, #24]
 8004dac:	b085      	sub	sp, #20
 8004dae:	296e      	cmp	r1, #110	; 0x6e
 8004db0:	4617      	mov	r7, r2
 8004db2:	4606      	mov	r6, r0
 8004db4:	4698      	mov	r8, r3
 8004db6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004db8:	f000 80b3 	beq.w	8004f22 <_printf_i+0x182>
 8004dbc:	d822      	bhi.n	8004e04 <_printf_i+0x64>
 8004dbe:	2963      	cmp	r1, #99	; 0x63
 8004dc0:	d036      	beq.n	8004e30 <_printf_i+0x90>
 8004dc2:	d80a      	bhi.n	8004dda <_printf_i+0x3a>
 8004dc4:	2900      	cmp	r1, #0
 8004dc6:	f000 80b9 	beq.w	8004f3c <_printf_i+0x19c>
 8004dca:	2958      	cmp	r1, #88	; 0x58
 8004dcc:	f000 8083 	beq.w	8004ed6 <_printf_i+0x136>
 8004dd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004dd4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004dd8:	e032      	b.n	8004e40 <_printf_i+0xa0>
 8004dda:	2964      	cmp	r1, #100	; 0x64
 8004ddc:	d001      	beq.n	8004de2 <_printf_i+0x42>
 8004dde:	2969      	cmp	r1, #105	; 0x69
 8004de0:	d1f6      	bne.n	8004dd0 <_printf_i+0x30>
 8004de2:	6820      	ldr	r0, [r4, #0]
 8004de4:	6813      	ldr	r3, [r2, #0]
 8004de6:	0605      	lsls	r5, r0, #24
 8004de8:	f103 0104 	add.w	r1, r3, #4
 8004dec:	d52a      	bpl.n	8004e44 <_printf_i+0xa4>
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6011      	str	r1, [r2, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	da03      	bge.n	8004dfe <_printf_i+0x5e>
 8004df6:	222d      	movs	r2, #45	; 0x2d
 8004df8:	425b      	negs	r3, r3
 8004dfa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004dfe:	486f      	ldr	r0, [pc, #444]	; (8004fbc <_printf_i+0x21c>)
 8004e00:	220a      	movs	r2, #10
 8004e02:	e039      	b.n	8004e78 <_printf_i+0xd8>
 8004e04:	2973      	cmp	r1, #115	; 0x73
 8004e06:	f000 809d 	beq.w	8004f44 <_printf_i+0x1a4>
 8004e0a:	d808      	bhi.n	8004e1e <_printf_i+0x7e>
 8004e0c:	296f      	cmp	r1, #111	; 0x6f
 8004e0e:	d020      	beq.n	8004e52 <_printf_i+0xb2>
 8004e10:	2970      	cmp	r1, #112	; 0x70
 8004e12:	d1dd      	bne.n	8004dd0 <_printf_i+0x30>
 8004e14:	6823      	ldr	r3, [r4, #0]
 8004e16:	f043 0320 	orr.w	r3, r3, #32
 8004e1a:	6023      	str	r3, [r4, #0]
 8004e1c:	e003      	b.n	8004e26 <_printf_i+0x86>
 8004e1e:	2975      	cmp	r1, #117	; 0x75
 8004e20:	d017      	beq.n	8004e52 <_printf_i+0xb2>
 8004e22:	2978      	cmp	r1, #120	; 0x78
 8004e24:	d1d4      	bne.n	8004dd0 <_printf_i+0x30>
 8004e26:	2378      	movs	r3, #120	; 0x78
 8004e28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e2c:	4864      	ldr	r0, [pc, #400]	; (8004fc0 <_printf_i+0x220>)
 8004e2e:	e055      	b.n	8004edc <_printf_i+0x13c>
 8004e30:	6813      	ldr	r3, [r2, #0]
 8004e32:	1d19      	adds	r1, r3, #4
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6011      	str	r1, [r2, #0]
 8004e38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e40:	2301      	movs	r3, #1
 8004e42:	e08c      	b.n	8004f5e <_printf_i+0x1be>
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	6011      	str	r1, [r2, #0]
 8004e48:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e4c:	bf18      	it	ne
 8004e4e:	b21b      	sxthne	r3, r3
 8004e50:	e7cf      	b.n	8004df2 <_printf_i+0x52>
 8004e52:	6813      	ldr	r3, [r2, #0]
 8004e54:	6825      	ldr	r5, [r4, #0]
 8004e56:	1d18      	adds	r0, r3, #4
 8004e58:	6010      	str	r0, [r2, #0]
 8004e5a:	0628      	lsls	r0, r5, #24
 8004e5c:	d501      	bpl.n	8004e62 <_printf_i+0xc2>
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	e002      	b.n	8004e68 <_printf_i+0xc8>
 8004e62:	0668      	lsls	r0, r5, #25
 8004e64:	d5fb      	bpl.n	8004e5e <_printf_i+0xbe>
 8004e66:	881b      	ldrh	r3, [r3, #0]
 8004e68:	4854      	ldr	r0, [pc, #336]	; (8004fbc <_printf_i+0x21c>)
 8004e6a:	296f      	cmp	r1, #111	; 0x6f
 8004e6c:	bf14      	ite	ne
 8004e6e:	220a      	movne	r2, #10
 8004e70:	2208      	moveq	r2, #8
 8004e72:	2100      	movs	r1, #0
 8004e74:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e78:	6865      	ldr	r5, [r4, #4]
 8004e7a:	60a5      	str	r5, [r4, #8]
 8004e7c:	2d00      	cmp	r5, #0
 8004e7e:	f2c0 8095 	blt.w	8004fac <_printf_i+0x20c>
 8004e82:	6821      	ldr	r1, [r4, #0]
 8004e84:	f021 0104 	bic.w	r1, r1, #4
 8004e88:	6021      	str	r1, [r4, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d13d      	bne.n	8004f0a <_printf_i+0x16a>
 8004e8e:	2d00      	cmp	r5, #0
 8004e90:	f040 808e 	bne.w	8004fb0 <_printf_i+0x210>
 8004e94:	4665      	mov	r5, ip
 8004e96:	2a08      	cmp	r2, #8
 8004e98:	d10b      	bne.n	8004eb2 <_printf_i+0x112>
 8004e9a:	6823      	ldr	r3, [r4, #0]
 8004e9c:	07db      	lsls	r3, r3, #31
 8004e9e:	d508      	bpl.n	8004eb2 <_printf_i+0x112>
 8004ea0:	6923      	ldr	r3, [r4, #16]
 8004ea2:	6862      	ldr	r2, [r4, #4]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	bfde      	ittt	le
 8004ea8:	2330      	movle	r3, #48	; 0x30
 8004eaa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004eae:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004eb2:	ebac 0305 	sub.w	r3, ip, r5
 8004eb6:	6123      	str	r3, [r4, #16]
 8004eb8:	f8cd 8000 	str.w	r8, [sp]
 8004ebc:	463b      	mov	r3, r7
 8004ebe:	aa03      	add	r2, sp, #12
 8004ec0:	4621      	mov	r1, r4
 8004ec2:	4630      	mov	r0, r6
 8004ec4:	f7ff fef6 	bl	8004cb4 <_printf_common>
 8004ec8:	3001      	adds	r0, #1
 8004eca:	d14d      	bne.n	8004f68 <_printf_i+0x1c8>
 8004ecc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ed0:	b005      	add	sp, #20
 8004ed2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ed6:	4839      	ldr	r0, [pc, #228]	; (8004fbc <_printf_i+0x21c>)
 8004ed8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004edc:	6813      	ldr	r3, [r2, #0]
 8004ede:	6821      	ldr	r1, [r4, #0]
 8004ee0:	1d1d      	adds	r5, r3, #4
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6015      	str	r5, [r2, #0]
 8004ee6:	060a      	lsls	r2, r1, #24
 8004ee8:	d50b      	bpl.n	8004f02 <_printf_i+0x162>
 8004eea:	07ca      	lsls	r2, r1, #31
 8004eec:	bf44      	itt	mi
 8004eee:	f041 0120 	orrmi.w	r1, r1, #32
 8004ef2:	6021      	strmi	r1, [r4, #0]
 8004ef4:	b91b      	cbnz	r3, 8004efe <_printf_i+0x15e>
 8004ef6:	6822      	ldr	r2, [r4, #0]
 8004ef8:	f022 0220 	bic.w	r2, r2, #32
 8004efc:	6022      	str	r2, [r4, #0]
 8004efe:	2210      	movs	r2, #16
 8004f00:	e7b7      	b.n	8004e72 <_printf_i+0xd2>
 8004f02:	064d      	lsls	r5, r1, #25
 8004f04:	bf48      	it	mi
 8004f06:	b29b      	uxthmi	r3, r3
 8004f08:	e7ef      	b.n	8004eea <_printf_i+0x14a>
 8004f0a:	4665      	mov	r5, ip
 8004f0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f10:	fb02 3311 	mls	r3, r2, r1, r3
 8004f14:	5cc3      	ldrb	r3, [r0, r3]
 8004f16:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	2900      	cmp	r1, #0
 8004f1e:	d1f5      	bne.n	8004f0c <_printf_i+0x16c>
 8004f20:	e7b9      	b.n	8004e96 <_printf_i+0xf6>
 8004f22:	6813      	ldr	r3, [r2, #0]
 8004f24:	6825      	ldr	r5, [r4, #0]
 8004f26:	6961      	ldr	r1, [r4, #20]
 8004f28:	1d18      	adds	r0, r3, #4
 8004f2a:	6010      	str	r0, [r2, #0]
 8004f2c:	0628      	lsls	r0, r5, #24
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	d501      	bpl.n	8004f36 <_printf_i+0x196>
 8004f32:	6019      	str	r1, [r3, #0]
 8004f34:	e002      	b.n	8004f3c <_printf_i+0x19c>
 8004f36:	066a      	lsls	r2, r5, #25
 8004f38:	d5fb      	bpl.n	8004f32 <_printf_i+0x192>
 8004f3a:	8019      	strh	r1, [r3, #0]
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	6123      	str	r3, [r4, #16]
 8004f40:	4665      	mov	r5, ip
 8004f42:	e7b9      	b.n	8004eb8 <_printf_i+0x118>
 8004f44:	6813      	ldr	r3, [r2, #0]
 8004f46:	1d19      	adds	r1, r3, #4
 8004f48:	6011      	str	r1, [r2, #0]
 8004f4a:	681d      	ldr	r5, [r3, #0]
 8004f4c:	6862      	ldr	r2, [r4, #4]
 8004f4e:	2100      	movs	r1, #0
 8004f50:	4628      	mov	r0, r5
 8004f52:	f7fb f945 	bl	80001e0 <memchr>
 8004f56:	b108      	cbz	r0, 8004f5c <_printf_i+0x1bc>
 8004f58:	1b40      	subs	r0, r0, r5
 8004f5a:	6060      	str	r0, [r4, #4]
 8004f5c:	6863      	ldr	r3, [r4, #4]
 8004f5e:	6123      	str	r3, [r4, #16]
 8004f60:	2300      	movs	r3, #0
 8004f62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f66:	e7a7      	b.n	8004eb8 <_printf_i+0x118>
 8004f68:	6923      	ldr	r3, [r4, #16]
 8004f6a:	462a      	mov	r2, r5
 8004f6c:	4639      	mov	r1, r7
 8004f6e:	4630      	mov	r0, r6
 8004f70:	47c0      	blx	r8
 8004f72:	3001      	adds	r0, #1
 8004f74:	d0aa      	beq.n	8004ecc <_printf_i+0x12c>
 8004f76:	6823      	ldr	r3, [r4, #0]
 8004f78:	079b      	lsls	r3, r3, #30
 8004f7a:	d413      	bmi.n	8004fa4 <_printf_i+0x204>
 8004f7c:	68e0      	ldr	r0, [r4, #12]
 8004f7e:	9b03      	ldr	r3, [sp, #12]
 8004f80:	4298      	cmp	r0, r3
 8004f82:	bfb8      	it	lt
 8004f84:	4618      	movlt	r0, r3
 8004f86:	e7a3      	b.n	8004ed0 <_printf_i+0x130>
 8004f88:	2301      	movs	r3, #1
 8004f8a:	464a      	mov	r2, r9
 8004f8c:	4639      	mov	r1, r7
 8004f8e:	4630      	mov	r0, r6
 8004f90:	47c0      	blx	r8
 8004f92:	3001      	adds	r0, #1
 8004f94:	d09a      	beq.n	8004ecc <_printf_i+0x12c>
 8004f96:	3501      	adds	r5, #1
 8004f98:	68e3      	ldr	r3, [r4, #12]
 8004f9a:	9a03      	ldr	r2, [sp, #12]
 8004f9c:	1a9b      	subs	r3, r3, r2
 8004f9e:	42ab      	cmp	r3, r5
 8004fa0:	dcf2      	bgt.n	8004f88 <_printf_i+0x1e8>
 8004fa2:	e7eb      	b.n	8004f7c <_printf_i+0x1dc>
 8004fa4:	2500      	movs	r5, #0
 8004fa6:	f104 0919 	add.w	r9, r4, #25
 8004faa:	e7f5      	b.n	8004f98 <_printf_i+0x1f8>
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1ac      	bne.n	8004f0a <_printf_i+0x16a>
 8004fb0:	7803      	ldrb	r3, [r0, #0]
 8004fb2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fb6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fba:	e76c      	b.n	8004e96 <_printf_i+0xf6>
 8004fbc:	08005225 	.word	0x08005225
 8004fc0:	08005236 	.word	0x08005236

08004fc4 <_sbrk_r>:
 8004fc4:	b538      	push	{r3, r4, r5, lr}
 8004fc6:	4c06      	ldr	r4, [pc, #24]	; (8004fe0 <_sbrk_r+0x1c>)
 8004fc8:	2300      	movs	r3, #0
 8004fca:	4605      	mov	r5, r0
 8004fcc:	4608      	mov	r0, r1
 8004fce:	6023      	str	r3, [r4, #0]
 8004fd0:	f7fb fd44 	bl	8000a5c <_sbrk>
 8004fd4:	1c43      	adds	r3, r0, #1
 8004fd6:	d102      	bne.n	8004fde <_sbrk_r+0x1a>
 8004fd8:	6823      	ldr	r3, [r4, #0]
 8004fda:	b103      	cbz	r3, 8004fde <_sbrk_r+0x1a>
 8004fdc:	602b      	str	r3, [r5, #0]
 8004fde:	bd38      	pop	{r3, r4, r5, pc}
 8004fe0:	200004fc 	.word	0x200004fc

08004fe4 <__sread>:
 8004fe4:	b510      	push	{r4, lr}
 8004fe6:	460c      	mov	r4, r1
 8004fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fec:	f000 f896 	bl	800511c <_read_r>
 8004ff0:	2800      	cmp	r0, #0
 8004ff2:	bfab      	itete	ge
 8004ff4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004ff6:	89a3      	ldrhlt	r3, [r4, #12]
 8004ff8:	181b      	addge	r3, r3, r0
 8004ffa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004ffe:	bfac      	ite	ge
 8005000:	6563      	strge	r3, [r4, #84]	; 0x54
 8005002:	81a3      	strhlt	r3, [r4, #12]
 8005004:	bd10      	pop	{r4, pc}

08005006 <__swrite>:
 8005006:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800500a:	461f      	mov	r7, r3
 800500c:	898b      	ldrh	r3, [r1, #12]
 800500e:	05db      	lsls	r3, r3, #23
 8005010:	4605      	mov	r5, r0
 8005012:	460c      	mov	r4, r1
 8005014:	4616      	mov	r6, r2
 8005016:	d505      	bpl.n	8005024 <__swrite+0x1e>
 8005018:	2302      	movs	r3, #2
 800501a:	2200      	movs	r2, #0
 800501c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005020:	f000 f868 	bl	80050f4 <_lseek_r>
 8005024:	89a3      	ldrh	r3, [r4, #12]
 8005026:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800502a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800502e:	81a3      	strh	r3, [r4, #12]
 8005030:	4632      	mov	r2, r6
 8005032:	463b      	mov	r3, r7
 8005034:	4628      	mov	r0, r5
 8005036:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800503a:	f000 b817 	b.w	800506c <_write_r>

0800503e <__sseek>:
 800503e:	b510      	push	{r4, lr}
 8005040:	460c      	mov	r4, r1
 8005042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005046:	f000 f855 	bl	80050f4 <_lseek_r>
 800504a:	1c43      	adds	r3, r0, #1
 800504c:	89a3      	ldrh	r3, [r4, #12]
 800504e:	bf15      	itete	ne
 8005050:	6560      	strne	r0, [r4, #84]	; 0x54
 8005052:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005056:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800505a:	81a3      	strheq	r3, [r4, #12]
 800505c:	bf18      	it	ne
 800505e:	81a3      	strhne	r3, [r4, #12]
 8005060:	bd10      	pop	{r4, pc}

08005062 <__sclose>:
 8005062:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005066:	f000 b813 	b.w	8005090 <_close_r>
	...

0800506c <_write_r>:
 800506c:	b538      	push	{r3, r4, r5, lr}
 800506e:	4c07      	ldr	r4, [pc, #28]	; (800508c <_write_r+0x20>)
 8005070:	4605      	mov	r5, r0
 8005072:	4608      	mov	r0, r1
 8005074:	4611      	mov	r1, r2
 8005076:	2200      	movs	r2, #0
 8005078:	6022      	str	r2, [r4, #0]
 800507a:	461a      	mov	r2, r3
 800507c:	f7fe fd82 	bl	8003b84 <_write>
 8005080:	1c43      	adds	r3, r0, #1
 8005082:	d102      	bne.n	800508a <_write_r+0x1e>
 8005084:	6823      	ldr	r3, [r4, #0]
 8005086:	b103      	cbz	r3, 800508a <_write_r+0x1e>
 8005088:	602b      	str	r3, [r5, #0]
 800508a:	bd38      	pop	{r3, r4, r5, pc}
 800508c:	200004fc 	.word	0x200004fc

08005090 <_close_r>:
 8005090:	b538      	push	{r3, r4, r5, lr}
 8005092:	4c06      	ldr	r4, [pc, #24]	; (80050ac <_close_r+0x1c>)
 8005094:	2300      	movs	r3, #0
 8005096:	4605      	mov	r5, r0
 8005098:	4608      	mov	r0, r1
 800509a:	6023      	str	r3, [r4, #0]
 800509c:	f7fe fd9e 	bl	8003bdc <_close>
 80050a0:	1c43      	adds	r3, r0, #1
 80050a2:	d102      	bne.n	80050aa <_close_r+0x1a>
 80050a4:	6823      	ldr	r3, [r4, #0]
 80050a6:	b103      	cbz	r3, 80050aa <_close_r+0x1a>
 80050a8:	602b      	str	r3, [r5, #0]
 80050aa:	bd38      	pop	{r3, r4, r5, pc}
 80050ac:	200004fc 	.word	0x200004fc

080050b0 <_fstat_r>:
 80050b0:	b538      	push	{r3, r4, r5, lr}
 80050b2:	4c07      	ldr	r4, [pc, #28]	; (80050d0 <_fstat_r+0x20>)
 80050b4:	2300      	movs	r3, #0
 80050b6:	4605      	mov	r5, r0
 80050b8:	4608      	mov	r0, r1
 80050ba:	4611      	mov	r1, r2
 80050bc:	6023      	str	r3, [r4, #0]
 80050be:	f7fe fddd 	bl	8003c7c <_fstat>
 80050c2:	1c43      	adds	r3, r0, #1
 80050c4:	d102      	bne.n	80050cc <_fstat_r+0x1c>
 80050c6:	6823      	ldr	r3, [r4, #0]
 80050c8:	b103      	cbz	r3, 80050cc <_fstat_r+0x1c>
 80050ca:	602b      	str	r3, [r5, #0]
 80050cc:	bd38      	pop	{r3, r4, r5, pc}
 80050ce:	bf00      	nop
 80050d0:	200004fc 	.word	0x200004fc

080050d4 <_isatty_r>:
 80050d4:	b538      	push	{r3, r4, r5, lr}
 80050d6:	4c06      	ldr	r4, [pc, #24]	; (80050f0 <_isatty_r+0x1c>)
 80050d8:	2300      	movs	r3, #0
 80050da:	4605      	mov	r5, r0
 80050dc:	4608      	mov	r0, r1
 80050de:	6023      	str	r3, [r4, #0]
 80050e0:	f7fe fd3a 	bl	8003b58 <_isatty>
 80050e4:	1c43      	adds	r3, r0, #1
 80050e6:	d102      	bne.n	80050ee <_isatty_r+0x1a>
 80050e8:	6823      	ldr	r3, [r4, #0]
 80050ea:	b103      	cbz	r3, 80050ee <_isatty_r+0x1a>
 80050ec:	602b      	str	r3, [r5, #0]
 80050ee:	bd38      	pop	{r3, r4, r5, pc}
 80050f0:	200004fc 	.word	0x200004fc

080050f4 <_lseek_r>:
 80050f4:	b538      	push	{r3, r4, r5, lr}
 80050f6:	4c07      	ldr	r4, [pc, #28]	; (8005114 <_lseek_r+0x20>)
 80050f8:	4605      	mov	r5, r0
 80050fa:	4608      	mov	r0, r1
 80050fc:	4611      	mov	r1, r2
 80050fe:	2200      	movs	r2, #0
 8005100:	6022      	str	r2, [r4, #0]
 8005102:	461a      	mov	r2, r3
 8005104:	f7fe fd81 	bl	8003c0a <_lseek>
 8005108:	1c43      	adds	r3, r0, #1
 800510a:	d102      	bne.n	8005112 <_lseek_r+0x1e>
 800510c:	6823      	ldr	r3, [r4, #0]
 800510e:	b103      	cbz	r3, 8005112 <_lseek_r+0x1e>
 8005110:	602b      	str	r3, [r5, #0]
 8005112:	bd38      	pop	{r3, r4, r5, pc}
 8005114:	200004fc 	.word	0x200004fc

08005118 <__malloc_lock>:
 8005118:	4770      	bx	lr

0800511a <__malloc_unlock>:
 800511a:	4770      	bx	lr

0800511c <_read_r>:
 800511c:	b538      	push	{r3, r4, r5, lr}
 800511e:	4c07      	ldr	r4, [pc, #28]	; (800513c <_read_r+0x20>)
 8005120:	4605      	mov	r5, r0
 8005122:	4608      	mov	r0, r1
 8005124:	4611      	mov	r1, r2
 8005126:	2200      	movs	r2, #0
 8005128:	6022      	str	r2, [r4, #0]
 800512a:	461a      	mov	r2, r3
 800512c:	f7fe fd7e 	bl	8003c2c <_read>
 8005130:	1c43      	adds	r3, r0, #1
 8005132:	d102      	bne.n	800513a <_read_r+0x1e>
 8005134:	6823      	ldr	r3, [r4, #0]
 8005136:	b103      	cbz	r3, 800513a <_read_r+0x1e>
 8005138:	602b      	str	r3, [r5, #0]
 800513a:	bd38      	pop	{r3, r4, r5, pc}
 800513c:	200004fc 	.word	0x200004fc

08005140 <_init>:
 8005140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005142:	bf00      	nop
 8005144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005146:	bc08      	pop	{r3}
 8005148:	469e      	mov	lr, r3
 800514a:	4770      	bx	lr

0800514c <_fini>:
 800514c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514e:	bf00      	nop
 8005150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005152:	bc08      	pop	{r3}
 8005154:	469e      	mov	lr, r3
 8005156:	4770      	bx	lr
