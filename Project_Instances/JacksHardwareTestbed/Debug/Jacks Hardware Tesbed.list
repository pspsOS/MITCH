
Jacks Hardware Tesbed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000835c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  08008500  08008500  00018500  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008958  08008958  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008958  08008958  00018958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008960  08008960  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008960  08008960  00018960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008964  08008964  00018964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008968  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000446c  200001e8  08008b4c  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20004654  08008b4c  00024654  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f95  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002bfc  00000000  00000000  000321a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c58  00000000  00000000  00034da8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b10  00000000  00000000  00035a00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000190ff  00000000  00000000  00036510  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c61f  00000000  00000000  0004f60f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00090aa1  00000000  00000000  0005bc2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ec6cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004258  00000000  00000000  000ec74c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080084e4 	.word	0x080084e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	080084e4 	.word	0x080084e4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4a07      	ldr	r2, [pc, #28]	; (8000fc4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000fa8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	4a06      	ldr	r2, [pc, #24]	; (8000fc8 <vApplicationGetIdleTaskMemory+0x30>)
 8000fae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2280      	movs	r2, #128	; 0x80
 8000fb4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000fb6:	bf00      	nop
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20000204 	.word	0x20000204
 8000fc8:	20000258 	.word	0x20000258

08000fcc <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	MT3339_receive(&gps,&temporary);
 8000fd4:	490f      	ldr	r1, [pc, #60]	; (8001014 <HAL_UART_RxCpltCallback+0x48>)
 8000fd6:	4810      	ldr	r0, [pc, #64]	; (8001018 <HAL_UART_RxCpltCallback+0x4c>)
 8000fd8:	f003 f80d 	bl	8003ff6 <MT3339_receive>
	if ( newNMEAreceived() ) {
 8000fdc:	f002 fef6 	bl	8003dcc <newNMEAreceived>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d013      	beq.n	800100e <HAL_UART_RxCpltCallback+0x42>
								 if ( !parse(lastNMEA()) ) {
 8000fe6:	f002 fefd 	bl	8003de4 <lastNMEA>
 8000fea:	4603      	mov	r3, r0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f002 faaf 	bl	8003550 <parse>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	f083 0301 	eor.w	r3, r3, #1
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d106      	bne.n	800100c <HAL_UART_RxCpltCallback+0x40>
										return;
								 }
							printf("%s\n", lastNMEA());
 8000ffe:	f002 fef1 	bl	8003de4 <lastNMEA>
 8001002:	4603      	mov	r3, r0
 8001004:	4618      	mov	r0, r3
 8001006:	f004 fb21 	bl	800564c <puts>
 800100a:	e000      	b.n	800100e <HAL_UART_RxCpltCallback+0x42>
										return;
 800100c:	bf00      	nop

								}
	}
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2000422c 	.word	0x2000422c
 8001018:	200041b8 	.word	0x200041b8

0800101c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800101c:	b5b0      	push	{r4, r5, r7, lr}
 800101e:	b0a4      	sub	sp, #144	; 0x90
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001022:	f000 fb2f 	bl	8001684 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001026:	f000 f83b 	bl	80010a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102a:	f000 f8eb 	bl	8001204 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800102e:	f000 f895 	bl	800115c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001032:	f000 f8bd 	bl	80011b0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 8001036:	4814      	ldr	r0, [pc, #80]	; (8001088 <main+0x6c>)
 8001038:	f000 f90a 	bl	8001250 <RetargetInit>
  printf("Starting\n");
 800103c:	4813      	ldr	r0, [pc, #76]	; (800108c <main+0x70>)
 800103e:	f004 fb05 	bl	800564c <puts>
  gps = MT3339_init(&huart1);
 8001042:	4c13      	ldr	r4, [pc, #76]	; (8001090 <main+0x74>)
 8001044:	463b      	mov	r3, r7
 8001046:	4913      	ldr	r1, [pc, #76]	; (8001094 <main+0x78>)
 8001048:	4618      	mov	r0, r3
 800104a:	f002 feff 	bl	8003e4c <MT3339_init>
 800104e:	4620      	mov	r0, r4
 8001050:	463b      	mov	r3, r7
 8001052:	2270      	movs	r2, #112	; 0x70
 8001054:	4619      	mov	r1, r3
 8001056:	f004 fa72 	bl	800553e <memcpy>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128, defaultTaskBuffer, &defaultTaskControlBlock);
 800105a:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <main+0x7c>)
 800105c:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001060:	461d      	mov	r5, r3
 8001062:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001064:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001066:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800106a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800106e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001072:	2100      	movs	r1, #0
 8001074:	4618      	mov	r0, r3
 8001076:	f002 fffd 	bl	8004074 <osThreadCreate>
 800107a:	4602      	mov	r2, r0
 800107c:	4b07      	ldr	r3, [pc, #28]	; (800109c <main+0x80>)
 800107e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001080:	f002 fff1 	bl	8004066 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001084:	e7fe      	b.n	8001084 <main+0x68>
 8001086:	bf00      	nop
 8001088:	200044c4 	.word	0x200044c4
 800108c:	08008500 	.word	0x08008500
 8001090:	200041b8 	.word	0x200041b8
 8001094:	20004230 	.word	0x20004230
 8001098:	08008518 	.word	0x08008518
 800109c:	20004228 	.word	0x20004228

080010a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b094      	sub	sp, #80	; 0x50
 80010a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a6:	f107 0320 	add.w	r3, r7, #32
 80010aa:	2230      	movs	r2, #48	; 0x30
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f004 fa50 	bl	8005554 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c4:	2300      	movs	r3, #0
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	4b22      	ldr	r3, [pc, #136]	; (8001154 <SystemClock_Config+0xb4>)
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	4a21      	ldr	r2, [pc, #132]	; (8001154 <SystemClock_Config+0xb4>)
 80010ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d2:	6413      	str	r3, [r2, #64]	; 0x40
 80010d4:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <SystemClock_Config+0xb4>)
 80010d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e0:	2300      	movs	r3, #0
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	4b1c      	ldr	r3, [pc, #112]	; (8001158 <SystemClock_Config+0xb8>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a1b      	ldr	r2, [pc, #108]	; (8001158 <SystemClock_Config+0xb8>)
 80010ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010ee:	6013      	str	r3, [r2, #0]
 80010f0:	4b19      	ldr	r3, [pc, #100]	; (8001158 <SystemClock_Config+0xb8>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010fc:	2302      	movs	r3, #2
 80010fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001100:	2301      	movs	r3, #1
 8001102:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001104:	2310      	movs	r3, #16
 8001106:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001108:	2300      	movs	r3, #0
 800110a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800110c:	f107 0320 	add.w	r3, r7, #32
 8001110:	4618      	mov	r0, r3
 8001112:	f000 fe01 	bl	8001d18 <HAL_RCC_OscConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800111c:	f000 f894 	bl	8001248 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001120:	230f      	movs	r3, #15
 8001122:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001124:	2300      	movs	r3, #0
 8001126:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f001 f85c 	bl	80021f8 <HAL_RCC_ClockConfig>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001146:	f000 f87f 	bl	8001248 <Error_Handler>
  }
}
 800114a:	bf00      	nop
 800114c:	3750      	adds	r7, #80	; 0x50
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40023800 	.word	0x40023800
 8001158:	40007000 	.word	0x40007000

0800115c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <MX_USART1_UART_Init+0x4c>)
 8001162:	4a12      	ldr	r2, [pc, #72]	; (80011ac <MX_USART1_UART_Init+0x50>)
 8001164:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <MX_USART1_UART_Init+0x4c>)
 8001168:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800116c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800116e:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <MX_USART1_UART_Init+0x4c>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <MX_USART1_UART_Init+0x4c>)
 8001176:	2200      	movs	r2, #0
 8001178:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800117a:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <MX_USART1_UART_Init+0x4c>)
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001180:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <MX_USART1_UART_Init+0x4c>)
 8001182:	220c      	movs	r2, #12
 8001184:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001186:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <MX_USART1_UART_Init+0x4c>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <MX_USART1_UART_Init+0x4c>)
 800118e:	2200      	movs	r2, #0
 8001190:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001192:	4805      	ldr	r0, [pc, #20]	; (80011a8 <MX_USART1_UART_Init+0x4c>)
 8001194:	f001 f9fc 	bl	8002590 <HAL_UART_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800119e:	f000 f853 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20004230 	.word	0x20004230
 80011ac:	40011000 	.word	0x40011000

080011b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <MX_USART2_UART_Init+0x4c>)
 80011b6:	4a12      	ldr	r2, [pc, #72]	; (8001200 <MX_USART2_UART_Init+0x50>)
 80011b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <MX_USART2_UART_Init+0x4c>)
 80011bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011c2:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <MX_USART2_UART_Init+0x4c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <MX_USART2_UART_Init+0x4c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011ce:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <MX_USART2_UART_Init+0x4c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011d4:	4b09      	ldr	r3, [pc, #36]	; (80011fc <MX_USART2_UART_Init+0x4c>)
 80011d6:	220c      	movs	r2, #12
 80011d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011da:	4b08      	ldr	r3, [pc, #32]	; (80011fc <MX_USART2_UART_Init+0x4c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <MX_USART2_UART_Init+0x4c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011e6:	4805      	ldr	r0, [pc, #20]	; (80011fc <MX_USART2_UART_Init+0x4c>)
 80011e8:	f001 f9d2 	bl	8002590 <HAL_UART_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011f2:	f000 f829 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	200044c4 	.word	0x200044c4
 8001200:	40004400 	.word	0x40004400

08001204 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <MX_GPIO_Init+0x30>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a08      	ldr	r2, [pc, #32]	; (8001234 <MX_GPIO_Init+0x30>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <MX_GPIO_Init+0x30>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]

}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40023800 	.word	0x40023800

08001238 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001240:	2001      	movs	r0, #1
 8001242:	f002 ff63 	bl	800410c <osDelay>
 8001246:	e7fb      	b.n	8001240 <StartDefaultTask+0x8>

08001248 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800124c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800124e:	e7fe      	b.n	800124e <Error_Handler+0x6>

08001250 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001258:	4a07      	ldr	r2, [pc, #28]	; (8001278 <RetargetInit+0x28>)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800125e:	4b07      	ldr	r3, [pc, #28]	; (800127c <RetargetInit+0x2c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6898      	ldr	r0, [r3, #8]
 8001264:	2300      	movs	r3, #0
 8001266:	2202      	movs	r2, #2
 8001268:	2100      	movs	r1, #0
 800126a:	f004 f9f7 	bl	800565c <setvbuf>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20004504 	.word	0x20004504
 800127c:	20000010 	.word	0x20000010

08001280 <_isatty>:

int _isatty(int fd) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	db04      	blt.n	8001298 <_isatty+0x18>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b02      	cmp	r3, #2
 8001292:	dc01      	bgt.n	8001298 <_isatty+0x18>
    return 1;
 8001294:	2301      	movs	r3, #1
 8001296:	e005      	b.n	80012a4 <_isatty+0x24>

  errno = EBADF;
 8001298:	f004 f912 	bl	80054c0 <__errno>
 800129c:	4602      	mov	r2, r0
 800129e:	2309      	movs	r3, #9
 80012a0:	6013      	str	r3, [r2, #0]
  return 0;
 80012a2:	2300      	movs	r3, #0
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <_write>:

int _write(int fd, char* ptr, int len) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d002      	beq.n	80012c4 <_write+0x18>
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d111      	bne.n	80012e8 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80012c4:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <_write+0x54>)
 80012c6:	6818      	ldr	r0, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012d0:	68b9      	ldr	r1, [r7, #8]
 80012d2:	f001 f9aa 	bl	800262a <HAL_UART_Transmit>
 80012d6:	4603      	mov	r3, r0
 80012d8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80012da:	7dfb      	ldrb	r3, [r7, #23]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d101      	bne.n	80012e4 <_write+0x38>
      return len;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	e008      	b.n	80012f6 <_write+0x4a>
    else
      return EIO;
 80012e4:	2305      	movs	r3, #5
 80012e6:	e006      	b.n	80012f6 <_write+0x4a>
  }
  errno = EBADF;
 80012e8:	f004 f8ea 	bl	80054c0 <__errno>
 80012ec:	4602      	mov	r2, r0
 80012ee:	2309      	movs	r3, #9
 80012f0:	6013      	str	r3, [r2, #0]
  return -1;
 80012f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20004504 	.word	0x20004504

08001304 <_close>:

int _close(int fd) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	db04      	blt.n	800131c <_close+0x18>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2b02      	cmp	r3, #2
 8001316:	dc01      	bgt.n	800131c <_close+0x18>
    return 0;
 8001318:	2300      	movs	r3, #0
 800131a:	e006      	b.n	800132a <_close+0x26>

  errno = EBADF;
 800131c:	f004 f8d0 	bl	80054c0 <__errno>
 8001320:	4602      	mov	r2, r0
 8001322:	2309      	movs	r3, #9
 8001324:	6013      	str	r3, [r2, #0]
  return -1;
 8001326:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800132a:	4618      	mov	r0, r3
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001332:	b580      	push	{r7, lr}
 8001334:	b084      	sub	sp, #16
 8001336:	af00      	add	r7, sp, #0
 8001338:	60f8      	str	r0, [r7, #12]
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800133e:	f004 f8bf 	bl	80054c0 <__errno>
 8001342:	4602      	mov	r2, r0
 8001344:	2309      	movs	r3, #9
 8001346:	6013      	str	r3, [r2, #0]
  return -1;
 8001348:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800134c:	4618      	mov	r0, r3
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <_read>:

int _read(int fd, char* ptr, int len) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d110      	bne.n	8001388 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <_read+0x4c>)
 8001368:	6818      	ldr	r0, [r3, #0]
 800136a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800136e:	2201      	movs	r2, #1
 8001370:	68b9      	ldr	r1, [r7, #8]
 8001372:	f001 f9f3 	bl	800275c <HAL_UART_Receive>
 8001376:	4603      	mov	r3, r0
 8001378:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800137a:	7dfb      	ldrb	r3, [r7, #23]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d101      	bne.n	8001384 <_read+0x30>
      return 1;
 8001380:	2301      	movs	r3, #1
 8001382:	e008      	b.n	8001396 <_read+0x42>
    else
      return EIO;
 8001384:	2305      	movs	r3, #5
 8001386:	e006      	b.n	8001396 <_read+0x42>
  }
  errno = EBADF;
 8001388:	f004 f89a 	bl	80054c0 <__errno>
 800138c:	4602      	mov	r2, r0
 800138e:	2309      	movs	r3, #9
 8001390:	6013      	str	r3, [r2, #0]
  return -1;
 8001392:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001396:	4618      	mov	r0, r3
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20004504 	.word	0x20004504

080013a4 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	db08      	blt.n	80013c6 <_fstat+0x22>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	dc05      	bgt.n	80013c6 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013c0:	605a      	str	r2, [r3, #4]
    return 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	e005      	b.n	80013d2 <_fstat+0x2e>
  }

  errno = EBADF;
 80013c6:	f004 f87b 	bl	80054c0 <__errno>
 80013ca:	4602      	mov	r2, r0
 80013cc:	2309      	movs	r3, #9
 80013ce:	6013      	str	r3, [r2, #0]
  return 0;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	4b12      	ldr	r3, [pc, #72]	; (8001430 <HAL_MspInit+0x54>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	4a11      	ldr	r2, [pc, #68]	; (8001430 <HAL_MspInit+0x54>)
 80013ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f0:	6453      	str	r3, [r2, #68]	; 0x44
 80013f2:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <HAL_MspInit+0x54>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	603b      	str	r3, [r7, #0]
 8001402:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <HAL_MspInit+0x54>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <HAL_MspInit+0x54>)
 8001408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800140c:	6413      	str	r3, [r2, #64]	; 0x40
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <HAL_MspInit+0x54>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001416:	603b      	str	r3, [r7, #0]
 8001418:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800141a:	2200      	movs	r2, #0
 800141c:	210f      	movs	r1, #15
 800141e:	f06f 0001 	mvn.w	r0, #1
 8001422:	f000 fa9e 	bl	8001962 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40023800 	.word	0x40023800

08001434 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08c      	sub	sp, #48	; 0x30
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 031c 	add.w	r3, r7, #28
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a36      	ldr	r2, [pc, #216]	; (800152c <HAL_UART_MspInit+0xf8>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d135      	bne.n	80014c2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	61bb      	str	r3, [r7, #24]
 800145a:	4b35      	ldr	r3, [pc, #212]	; (8001530 <HAL_UART_MspInit+0xfc>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	4a34      	ldr	r2, [pc, #208]	; (8001530 <HAL_UART_MspInit+0xfc>)
 8001460:	f043 0310 	orr.w	r3, r3, #16
 8001464:	6453      	str	r3, [r2, #68]	; 0x44
 8001466:	4b32      	ldr	r3, [pc, #200]	; (8001530 <HAL_UART_MspInit+0xfc>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	f003 0310 	and.w	r3, r3, #16
 800146e:	61bb      	str	r3, [r7, #24]
 8001470:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	4b2e      	ldr	r3, [pc, #184]	; (8001530 <HAL_UART_MspInit+0xfc>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a2d      	ldr	r2, [pc, #180]	; (8001530 <HAL_UART_MspInit+0xfc>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b2b      	ldr	r3, [pc, #172]	; (8001530 <HAL_UART_MspInit+0xfc>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	617b      	str	r3, [r7, #20]
 800148c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800148e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001494:	2302      	movs	r3, #2
 8001496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149c:	2303      	movs	r3, #3
 800149e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014a0:	2307      	movs	r3, #7
 80014a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a4:	f107 031c 	add.w	r3, r7, #28
 80014a8:	4619      	mov	r1, r3
 80014aa:	4822      	ldr	r0, [pc, #136]	; (8001534 <HAL_UART_MspInit+0x100>)
 80014ac:	f000 fab2 	bl	8001a14 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80014b0:	2200      	movs	r2, #0
 80014b2:	2105      	movs	r1, #5
 80014b4:	2025      	movs	r0, #37	; 0x25
 80014b6:	f000 fa54 	bl	8001962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80014ba:	2025      	movs	r0, #37	; 0x25
 80014bc:	f000 fa6d 	bl	800199a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014c0:	e030      	b.n	8001524 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a1c      	ldr	r2, [pc, #112]	; (8001538 <HAL_UART_MspInit+0x104>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d12b      	bne.n	8001524 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80014cc:	2300      	movs	r3, #0
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	4b17      	ldr	r3, [pc, #92]	; (8001530 <HAL_UART_MspInit+0xfc>)
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	4a16      	ldr	r2, [pc, #88]	; (8001530 <HAL_UART_MspInit+0xfc>)
 80014d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014da:	6413      	str	r3, [r2, #64]	; 0x40
 80014dc:	4b14      	ldr	r3, [pc, #80]	; (8001530 <HAL_UART_MspInit+0xfc>)
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	4b10      	ldr	r3, [pc, #64]	; (8001530 <HAL_UART_MspInit+0xfc>)
 80014ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f0:	4a0f      	ldr	r2, [pc, #60]	; (8001530 <HAL_UART_MspInit+0xfc>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	6313      	str	r3, [r2, #48]	; 0x30
 80014f8:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <HAL_UART_MspInit+0xfc>)
 80014fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001504:	230c      	movs	r3, #12
 8001506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	2302      	movs	r3, #2
 800150a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001510:	2303      	movs	r3, #3
 8001512:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001514:	2307      	movs	r3, #7
 8001516:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001518:	f107 031c 	add.w	r3, r7, #28
 800151c:	4619      	mov	r1, r3
 800151e:	4805      	ldr	r0, [pc, #20]	; (8001534 <HAL_UART_MspInit+0x100>)
 8001520:	f000 fa78 	bl	8001a14 <HAL_GPIO_Init>
}
 8001524:	bf00      	nop
 8001526:	3730      	adds	r7, #48	; 0x30
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40011000 	.word	0x40011000
 8001530:	40023800 	.word	0x40023800
 8001534:	40020000 	.word	0x40020000
 8001538:	40004400 	.word	0x40004400

0800153c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <NMI_Handler+0x4>

08001542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001546:	e7fe      	b.n	8001546 <HardFault_Handler+0x4>

08001548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800154c:	e7fe      	b.n	800154c <MemManage_Handler+0x4>

0800154e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001552:	e7fe      	b.n	8001552 <BusFault_Handler+0x4>

08001554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <UsageFault_Handler+0x4>

0800155a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800156c:	f000 f8dc 	bl	8001728 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001570:	f003 fb44 	bl	8004bfc <xTaskGetSchedulerState>
 8001574:	4603      	mov	r3, r0
 8001576:	2b01      	cmp	r3, #1
 8001578:	d001      	beq.n	800157e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800157a:	f003 fd75 	bl	8005068 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001588:	4802      	ldr	r0, [pc, #8]	; (8001594 <USART1_IRQHandler+0x10>)
 800158a:	f001 f9e3 	bl	8002954 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20004230 	.word	0x20004230

08001598 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a0:	4a14      	ldr	r2, [pc, #80]	; (80015f4 <_sbrk+0x5c>)
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <_sbrk+0x60>)
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015ac:	4b13      	ldr	r3, [pc, #76]	; (80015fc <_sbrk+0x64>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d102      	bne.n	80015ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <_sbrk+0x64>)
 80015b6:	4a12      	ldr	r2, [pc, #72]	; (8001600 <_sbrk+0x68>)
 80015b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <_sbrk+0x64>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d207      	bcs.n	80015d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015c8:	f003 ff7a 	bl	80054c0 <__errno>
 80015cc:	4602      	mov	r2, r0
 80015ce:	230c      	movs	r3, #12
 80015d0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80015d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015d6:	e009      	b.n	80015ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015d8:	4b08      	ldr	r3, [pc, #32]	; (80015fc <_sbrk+0x64>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015de:	4b07      	ldr	r3, [pc, #28]	; (80015fc <_sbrk+0x64>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	4a05      	ldr	r2, [pc, #20]	; (80015fc <_sbrk+0x64>)
 80015e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ea:	68fb      	ldr	r3, [r7, #12]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20020000 	.word	0x20020000
 80015f8:	00000400 	.word	0x00000400
 80015fc:	20000458 	.word	0x20000458
 8001600:	20004658 	.word	0x20004658

08001604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001608:	4b08      	ldr	r3, [pc, #32]	; (800162c <SystemInit+0x28>)
 800160a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800160e:	4a07      	ldr	r2, [pc, #28]	; (800162c <SystemInit+0x28>)
 8001610:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001614:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001618:	4b04      	ldr	r3, [pc, #16]	; (800162c <SystemInit+0x28>)
 800161a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800161e:	609a      	str	r2, [r3, #8]
#endif
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001630:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001668 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001634:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001636:	e003      	b.n	8001640 <LoopCopyDataInit>

08001638 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800163a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800163c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800163e:	3104      	adds	r1, #4

08001640 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001640:	480b      	ldr	r0, [pc, #44]	; (8001670 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001642:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001644:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001646:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001648:	d3f6      	bcc.n	8001638 <CopyDataInit>
  ldr  r2, =_sbss
 800164a:	4a0b      	ldr	r2, [pc, #44]	; (8001678 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800164c:	e002      	b.n	8001654 <LoopFillZerobss>

0800164e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800164e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001650:	f842 3b04 	str.w	r3, [r2], #4

08001654 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001654:	4b09      	ldr	r3, [pc, #36]	; (800167c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001656:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001658:	d3f9      	bcc.n	800164e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800165a:	f7ff ffd3 	bl	8001604 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800165e:	f003 ff35 	bl	80054cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001662:	f7ff fcdb 	bl	800101c <main>
  bx  lr    
 8001666:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001668:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800166c:	08008968 	.word	0x08008968
  ldr  r0, =_sdata
 8001670:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001674:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8001678:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 800167c:	20004654 	.word	0x20004654

08001680 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001680:	e7fe      	b.n	8001680 <ADC_IRQHandler>
	...

08001684 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001688:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <HAL_Init+0x40>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a0d      	ldr	r2, [pc, #52]	; (80016c4 <HAL_Init+0x40>)
 800168e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001692:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001694:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <HAL_Init+0x40>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a0a      	ldr	r2, [pc, #40]	; (80016c4 <HAL_Init+0x40>)
 800169a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800169e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016a0:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <HAL_Init+0x40>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a07      	ldr	r2, [pc, #28]	; (80016c4 <HAL_Init+0x40>)
 80016a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ac:	2003      	movs	r0, #3
 80016ae:	f000 f94d 	bl	800194c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016b2:	200f      	movs	r0, #15
 80016b4:	f000 f808 	bl	80016c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016b8:	f7ff fe90 	bl	80013dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40023c00 	.word	0x40023c00

080016c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_InitTick+0x54>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4b12      	ldr	r3, [pc, #72]	; (8001720 <HAL_InitTick+0x58>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	4619      	mov	r1, r3
 80016da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016de:	fbb3 f3f1 	udiv	r3, r3, r1
 80016e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e6:	4618      	mov	r0, r3
 80016e8:	f000 f965 	bl	80019b6 <HAL_SYSTICK_Config>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e00e      	b.n	8001714 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b0f      	cmp	r3, #15
 80016fa:	d80a      	bhi.n	8001712 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016fc:	2200      	movs	r2, #0
 80016fe:	6879      	ldr	r1, [r7, #4]
 8001700:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001704:	f000 f92d 	bl	8001962 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001708:	4a06      	ldr	r2, [pc, #24]	; (8001724 <HAL_InitTick+0x5c>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800170e:	2300      	movs	r3, #0
 8001710:	e000      	b.n	8001714 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
}
 8001714:	4618      	mov	r0, r3
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000000 	.word	0x20000000
 8001720:	20000008 	.word	0x20000008
 8001724:	20000004 	.word	0x20000004

08001728 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_IncTick+0x20>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_IncTick+0x24>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4413      	add	r3, r2
 8001738:	4a04      	ldr	r2, [pc, #16]	; (800174c <HAL_IncTick+0x24>)
 800173a:	6013      	str	r3, [r2, #0]
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	20000008 	.word	0x20000008
 800174c:	20004508 	.word	0x20004508

08001750 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  return uwTick;
 8001754:	4b03      	ldr	r3, [pc, #12]	; (8001764 <HAL_GetTick+0x14>)
 8001756:	681b      	ldr	r3, [r3, #0]
}
 8001758:	4618      	mov	r0, r3
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	20004508 	.word	0x20004508

08001768 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001770:	f7ff ffee 	bl	8001750 <HAL_GetTick>
 8001774:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001780:	d005      	beq.n	800178e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001782:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <HAL_Delay+0x40>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4413      	add	r3, r2
 800178c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800178e:	bf00      	nop
 8001790:	f7ff ffde 	bl	8001750 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	429a      	cmp	r2, r3
 800179e:	d8f7      	bhi.n	8001790 <HAL_Delay+0x28>
  {
  }
}
 80017a0:	bf00      	nop
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20000008 	.word	0x20000008

080017ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <__NVIC_SetPriorityGrouping+0x44>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c8:	4013      	ands	r3, r2
 80017ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017de:	4a04      	ldr	r2, [pc, #16]	; (80017f0 <__NVIC_SetPriorityGrouping+0x44>)
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	60d3      	str	r3, [r2, #12]
}
 80017e4:	bf00      	nop
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f8:	4b04      	ldr	r3, [pc, #16]	; (800180c <__NVIC_GetPriorityGrouping+0x18>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	0a1b      	lsrs	r3, r3, #8
 80017fe:	f003 0307 	and.w	r3, r3, #7
}
 8001802:	4618      	mov	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	2b00      	cmp	r3, #0
 8001820:	db0b      	blt.n	800183a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	f003 021f 	and.w	r2, r3, #31
 8001828:	4907      	ldr	r1, [pc, #28]	; (8001848 <__NVIC_EnableIRQ+0x38>)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	095b      	lsrs	r3, r3, #5
 8001830:	2001      	movs	r0, #1
 8001832:	fa00 f202 	lsl.w	r2, r0, r2
 8001836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000e100 	.word	0xe000e100

0800184c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	6039      	str	r1, [r7, #0]
 8001856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185c:	2b00      	cmp	r3, #0
 800185e:	db0a      	blt.n	8001876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	b2da      	uxtb	r2, r3
 8001864:	490c      	ldr	r1, [pc, #48]	; (8001898 <__NVIC_SetPriority+0x4c>)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	0112      	lsls	r2, r2, #4
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	440b      	add	r3, r1
 8001870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001874:	e00a      	b.n	800188c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4908      	ldr	r1, [pc, #32]	; (800189c <__NVIC_SetPriority+0x50>)
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	3b04      	subs	r3, #4
 8001884:	0112      	lsls	r2, r2, #4
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	440b      	add	r3, r1
 800188a:	761a      	strb	r2, [r3, #24]
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000e100 	.word	0xe000e100
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b089      	sub	sp, #36	; 0x24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f1c3 0307 	rsb	r3, r3, #7
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	bf28      	it	cs
 80018be:	2304      	movcs	r3, #4
 80018c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3304      	adds	r3, #4
 80018c6:	2b06      	cmp	r3, #6
 80018c8:	d902      	bls.n	80018d0 <NVIC_EncodePriority+0x30>
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3b03      	subs	r3, #3
 80018ce:	e000      	b.n	80018d2 <NVIC_EncodePriority+0x32>
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43da      	mvns	r2, r3
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	401a      	ands	r2, r3
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	fa01 f303 	lsl.w	r3, r1, r3
 80018f2:	43d9      	mvns	r1, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f8:	4313      	orrs	r3, r2
         );
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3724      	adds	r7, #36	; 0x24
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
	...

08001908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3b01      	subs	r3, #1
 8001914:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001918:	d301      	bcc.n	800191e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800191a:	2301      	movs	r3, #1
 800191c:	e00f      	b.n	800193e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800191e:	4a0a      	ldr	r2, [pc, #40]	; (8001948 <SysTick_Config+0x40>)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3b01      	subs	r3, #1
 8001924:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001926:	210f      	movs	r1, #15
 8001928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800192c:	f7ff ff8e 	bl	800184c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <SysTick_Config+0x40>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001936:	4b04      	ldr	r3, [pc, #16]	; (8001948 <SysTick_Config+0x40>)
 8001938:	2207      	movs	r2, #7
 800193a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	e000e010 	.word	0xe000e010

0800194c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff ff29 	bl	80017ac <__NVIC_SetPriorityGrouping>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001962:	b580      	push	{r7, lr}
 8001964:	b086      	sub	sp, #24
 8001966:	af00      	add	r7, sp, #0
 8001968:	4603      	mov	r3, r0
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
 800196e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001974:	f7ff ff3e 	bl	80017f4 <__NVIC_GetPriorityGrouping>
 8001978:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	68b9      	ldr	r1, [r7, #8]
 800197e:	6978      	ldr	r0, [r7, #20]
 8001980:	f7ff ff8e 	bl	80018a0 <NVIC_EncodePriority>
 8001984:	4602      	mov	r2, r0
 8001986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff5d 	bl	800184c <__NVIC_SetPriority>
}
 8001992:	bf00      	nop
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	4603      	mov	r3, r0
 80019a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ff31 	bl	8001810 <__NVIC_EnableIRQ>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7ff ffa2 	bl	8001908 <SysTick_Config>
 80019c4:	4603      	mov	r3, r0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d004      	beq.n	80019ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2280      	movs	r2, #128	; 0x80
 80019e6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e00c      	b.n	8001a06 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2205      	movs	r2, #5
 80019f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 0201 	bic.w	r2, r2, #1
 8001a02:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
	...

08001a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b089      	sub	sp, #36	; 0x24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
 8001a2e:	e159      	b.n	8001ce4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a30:	2201      	movs	r2, #1
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	4013      	ands	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	f040 8148 	bne.w	8001cde <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d00b      	beq.n	8001a6e <HAL_GPIO_Init+0x5a>
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d007      	beq.n	8001a6e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a62:	2b11      	cmp	r3, #17
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b12      	cmp	r3, #18
 8001a6c:	d130      	bne.n	8001ad0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	2203      	movs	r2, #3
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4013      	ands	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	68da      	ldr	r2, [r3, #12]
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	091b      	lsrs	r3, r3, #4
 8001aba:	f003 0201 	and.w	r2, r3, #1
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	2203      	movs	r2, #3
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d003      	beq.n	8001b10 <HAL_GPIO_Init+0xfc>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2b12      	cmp	r3, #18
 8001b0e:	d123      	bne.n	8001b58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	08da      	lsrs	r2, r3, #3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3208      	adds	r2, #8
 8001b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	220f      	movs	r2, #15
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	691a      	ldr	r2, [r3, #16]
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	08da      	lsrs	r2, r3, #3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	3208      	adds	r2, #8
 8001b52:	69b9      	ldr	r1, [r7, #24]
 8001b54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	2203      	movs	r2, #3
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 0203 	and.w	r2, r3, #3
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 80a2 	beq.w	8001cde <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	4b56      	ldr	r3, [pc, #344]	; (8001cf8 <HAL_GPIO_Init+0x2e4>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	4a55      	ldr	r2, [pc, #340]	; (8001cf8 <HAL_GPIO_Init+0x2e4>)
 8001ba4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8001baa:	4b53      	ldr	r3, [pc, #332]	; (8001cf8 <HAL_GPIO_Init+0x2e4>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bb6:	4a51      	ldr	r2, [pc, #324]	; (8001cfc <HAL_GPIO_Init+0x2e8>)
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	089b      	lsrs	r3, r3, #2
 8001bbc:	3302      	adds	r3, #2
 8001bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	220f      	movs	r2, #15
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a48      	ldr	r2, [pc, #288]	; (8001d00 <HAL_GPIO_Init+0x2ec>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d019      	beq.n	8001c16 <HAL_GPIO_Init+0x202>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a47      	ldr	r2, [pc, #284]	; (8001d04 <HAL_GPIO_Init+0x2f0>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d013      	beq.n	8001c12 <HAL_GPIO_Init+0x1fe>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a46      	ldr	r2, [pc, #280]	; (8001d08 <HAL_GPIO_Init+0x2f4>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d00d      	beq.n	8001c0e <HAL_GPIO_Init+0x1fa>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a45      	ldr	r2, [pc, #276]	; (8001d0c <HAL_GPIO_Init+0x2f8>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d007      	beq.n	8001c0a <HAL_GPIO_Init+0x1f6>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a44      	ldr	r2, [pc, #272]	; (8001d10 <HAL_GPIO_Init+0x2fc>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d101      	bne.n	8001c06 <HAL_GPIO_Init+0x1f2>
 8001c02:	2304      	movs	r3, #4
 8001c04:	e008      	b.n	8001c18 <HAL_GPIO_Init+0x204>
 8001c06:	2307      	movs	r3, #7
 8001c08:	e006      	b.n	8001c18 <HAL_GPIO_Init+0x204>
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e004      	b.n	8001c18 <HAL_GPIO_Init+0x204>
 8001c0e:	2302      	movs	r3, #2
 8001c10:	e002      	b.n	8001c18 <HAL_GPIO_Init+0x204>
 8001c12:	2301      	movs	r3, #1
 8001c14:	e000      	b.n	8001c18 <HAL_GPIO_Init+0x204>
 8001c16:	2300      	movs	r3, #0
 8001c18:	69fa      	ldr	r2, [r7, #28]
 8001c1a:	f002 0203 	and.w	r2, r2, #3
 8001c1e:	0092      	lsls	r2, r2, #2
 8001c20:	4093      	lsls	r3, r2
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c28:	4934      	ldr	r1, [pc, #208]	; (8001cfc <HAL_GPIO_Init+0x2e8>)
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	089b      	lsrs	r3, r3, #2
 8001c2e:	3302      	adds	r3, #2
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c36:	4b37      	ldr	r3, [pc, #220]	; (8001d14 <HAL_GPIO_Init+0x300>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c5a:	4a2e      	ldr	r2, [pc, #184]	; (8001d14 <HAL_GPIO_Init+0x300>)
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c60:	4b2c      	ldr	r3, [pc, #176]	; (8001d14 <HAL_GPIO_Init+0x300>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c84:	4a23      	ldr	r2, [pc, #140]	; (8001d14 <HAL_GPIO_Init+0x300>)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c8a:	4b22      	ldr	r3, [pc, #136]	; (8001d14 <HAL_GPIO_Init+0x300>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	43db      	mvns	r3, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4013      	ands	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cae:	4a19      	ldr	r2, [pc, #100]	; (8001d14 <HAL_GPIO_Init+0x300>)
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cb4:	4b17      	ldr	r3, [pc, #92]	; (8001d14 <HAL_GPIO_Init+0x300>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cd8:	4a0e      	ldr	r2, [pc, #56]	; (8001d14 <HAL_GPIO_Init+0x300>)
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	61fb      	str	r3, [r7, #28]
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	2b0f      	cmp	r3, #15
 8001ce8:	f67f aea2 	bls.w	8001a30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cec:	bf00      	nop
 8001cee:	3724      	adds	r7, #36	; 0x24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	40013800 	.word	0x40013800
 8001d00:	40020000 	.word	0x40020000
 8001d04:	40020400 	.word	0x40020400
 8001d08:	40020800 	.word	0x40020800
 8001d0c:	40020c00 	.word	0x40020c00
 8001d10:	40021000 	.word	0x40021000
 8001d14:	40013c00 	.word	0x40013c00

08001d18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e25b      	b.n	80021e2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d075      	beq.n	8001e22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d36:	4ba3      	ldr	r3, [pc, #652]	; (8001fc4 <HAL_RCC_OscConfig+0x2ac>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f003 030c 	and.w	r3, r3, #12
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	d00c      	beq.n	8001d5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d42:	4ba0      	ldr	r3, [pc, #640]	; (8001fc4 <HAL_RCC_OscConfig+0x2ac>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d4a:	2b08      	cmp	r3, #8
 8001d4c:	d112      	bne.n	8001d74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d4e:	4b9d      	ldr	r3, [pc, #628]	; (8001fc4 <HAL_RCC_OscConfig+0x2ac>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d5a:	d10b      	bne.n	8001d74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d5c:	4b99      	ldr	r3, [pc, #612]	; (8001fc4 <HAL_RCC_OscConfig+0x2ac>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d05b      	beq.n	8001e20 <HAL_RCC_OscConfig+0x108>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d157      	bne.n	8001e20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e236      	b.n	80021e2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d7c:	d106      	bne.n	8001d8c <HAL_RCC_OscConfig+0x74>
 8001d7e:	4b91      	ldr	r3, [pc, #580]	; (8001fc4 <HAL_RCC_OscConfig+0x2ac>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a90      	ldr	r2, [pc, #576]	; (8001fc4 <HAL_RCC_OscConfig+0x2ac>)
 8001d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d88:	6013      	str	r3, [r2, #0]
 8001d8a:	e01d      	b.n	8001dc8 <HAL_RCC_OscConfig+0xb0>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d94:	d10c      	bne.n	8001db0 <HAL_RCC_OscConfig+0x98>
 8001d96:	4b8b      	ldr	r3, [pc, #556]	; (8001fc4 <HAL_RCC_OscConfig+0x2ac>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a8a      	ldr	r2, [pc, #552]	; (8001fc4 <HAL_RCC_OscConfig+0x2ac>)
 8001d9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	4b88      	ldr	r3, [pc, #544]	; (8001fc4 <HAL_RCC_OscConfig+0x2ac>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a87      	ldr	r2, [pc, #540]	; (8001fc4 <HAL_RCC_OscConfig+0x2ac>)
 8001da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	e00b      	b.n	8001dc8 <HAL_RCC_OscConfig+0xb0>
 8001db0:	4b84      	ldr	r3, [pc, #528]	; (8001fc4 <HAL_RCC_OscConfig+0x2ac>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a83      	ldr	r2, [pc, #524]	; (8001fc4 <HAL_RCC_OscConfig+0x2ac>)
 8001db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dba:	6013      	str	r3, [r2, #0]
 8001dbc:	4b81      	ldr	r3, [pc, #516]	; (8001fc4 <HAL_RCC_OscConfig+0x2ac>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a80      	ldr	r2, [pc, #512]	; (8001fc4 <HAL_RCC_OscConfig+0x2ac>)
 8001dc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d013      	beq.n	8001df8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd0:	f7ff fcbe 	bl	8001750 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dd8:	f7ff fcba 	bl	8001750 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b64      	cmp	r3, #100	; 0x64
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e1fb      	b.n	80021e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dea:	4b76      	ldr	r3, [pc, #472]	; (8001fc4 <HAL_RCC_OscConfig+0x2ac>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0f0      	beq.n	8001dd8 <HAL_RCC_OscConfig+0xc0>
 8001df6:	e014      	b.n	8001e22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df8:	f7ff fcaa 	bl	8001750 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e00:	f7ff fca6 	bl	8001750 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b64      	cmp	r3, #100	; 0x64
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e1e7      	b.n	80021e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e12:	4b6c      	ldr	r3, [pc, #432]	; (8001fc4 <HAL_RCC_OscConfig+0x2ac>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f0      	bne.n	8001e00 <HAL_RCC_OscConfig+0xe8>
 8001e1e:	e000      	b.n	8001e22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d063      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e2e:	4b65      	ldr	r3, [pc, #404]	; (8001fc4 <HAL_RCC_OscConfig+0x2ac>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 030c 	and.w	r3, r3, #12
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00b      	beq.n	8001e52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e3a:	4b62      	ldr	r3, [pc, #392]	; (8001fc4 <HAL_RCC_OscConfig+0x2ac>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e42:	2b08      	cmp	r3, #8
 8001e44:	d11c      	bne.n	8001e80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e46:	4b5f      	ldr	r3, [pc, #380]	; (8001fc4 <HAL_RCC_OscConfig+0x2ac>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d116      	bne.n	8001e80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e52:	4b5c      	ldr	r3, [pc, #368]	; (8001fc4 <HAL_RCC_OscConfig+0x2ac>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d005      	beq.n	8001e6a <HAL_RCC_OscConfig+0x152>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d001      	beq.n	8001e6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e1bb      	b.n	80021e2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6a:	4b56      	ldr	r3, [pc, #344]	; (8001fc4 <HAL_RCC_OscConfig+0x2ac>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	4952      	ldr	r1, [pc, #328]	; (8001fc4 <HAL_RCC_OscConfig+0x2ac>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e7e:	e03a      	b.n	8001ef6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d020      	beq.n	8001eca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e88:	4b4f      	ldr	r3, [pc, #316]	; (8001fc8 <HAL_RCC_OscConfig+0x2b0>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8e:	f7ff fc5f 	bl	8001750 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e96:	f7ff fc5b 	bl	8001750 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e19c      	b.n	80021e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea8:	4b46      	ldr	r3, [pc, #280]	; (8001fc4 <HAL_RCC_OscConfig+0x2ac>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0f0      	beq.n	8001e96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb4:	4b43      	ldr	r3, [pc, #268]	; (8001fc4 <HAL_RCC_OscConfig+0x2ac>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	4940      	ldr	r1, [pc, #256]	; (8001fc4 <HAL_RCC_OscConfig+0x2ac>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	600b      	str	r3, [r1, #0]
 8001ec8:	e015      	b.n	8001ef6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eca:	4b3f      	ldr	r3, [pc, #252]	; (8001fc8 <HAL_RCC_OscConfig+0x2b0>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed0:	f7ff fc3e 	bl	8001750 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ed8:	f7ff fc3a 	bl	8001750 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e17b      	b.n	80021e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eea:	4b36      	ldr	r3, [pc, #216]	; (8001fc4 <HAL_RCC_OscConfig+0x2ac>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1f0      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0308 	and.w	r3, r3, #8
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d030      	beq.n	8001f64 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d016      	beq.n	8001f38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f0a:	4b30      	ldr	r3, [pc, #192]	; (8001fcc <HAL_RCC_OscConfig+0x2b4>)
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f10:	f7ff fc1e 	bl	8001750 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f18:	f7ff fc1a 	bl	8001750 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e15b      	b.n	80021e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f2a:	4b26      	ldr	r3, [pc, #152]	; (8001fc4 <HAL_RCC_OscConfig+0x2ac>)
 8001f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0f0      	beq.n	8001f18 <HAL_RCC_OscConfig+0x200>
 8001f36:	e015      	b.n	8001f64 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f38:	4b24      	ldr	r3, [pc, #144]	; (8001fcc <HAL_RCC_OscConfig+0x2b4>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3e:	f7ff fc07 	bl	8001750 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f46:	f7ff fc03 	bl	8001750 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e144      	b.n	80021e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f58:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <HAL_RCC_OscConfig+0x2ac>)
 8001f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1f0      	bne.n	8001f46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f000 80a0 	beq.w	80020b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f72:	2300      	movs	r3, #0
 8001f74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f76:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <HAL_RCC_OscConfig+0x2ac>)
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10f      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	60bb      	str	r3, [r7, #8]
 8001f86:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <HAL_RCC_OscConfig+0x2ac>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	4a0e      	ldr	r2, [pc, #56]	; (8001fc4 <HAL_RCC_OscConfig+0x2ac>)
 8001f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f90:	6413      	str	r3, [r2, #64]	; 0x40
 8001f92:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <HAL_RCC_OscConfig+0x2ac>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9a:	60bb      	str	r3, [r7, #8]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <HAL_RCC_OscConfig+0x2b8>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d121      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fae:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <HAL_RCC_OscConfig+0x2b8>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a07      	ldr	r2, [pc, #28]	; (8001fd0 <HAL_RCC_OscConfig+0x2b8>)
 8001fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fba:	f7ff fbc9 	bl	8001750 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc0:	e011      	b.n	8001fe6 <HAL_RCC_OscConfig+0x2ce>
 8001fc2:	bf00      	nop
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	42470000 	.word	0x42470000
 8001fcc:	42470e80 	.word	0x42470e80
 8001fd0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd4:	f7ff fbbc 	bl	8001750 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e0fd      	b.n	80021e2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe6:	4b81      	ldr	r3, [pc, #516]	; (80021ec <HAL_RCC_OscConfig+0x4d4>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d0f0      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d106      	bne.n	8002008 <HAL_RCC_OscConfig+0x2f0>
 8001ffa:	4b7d      	ldr	r3, [pc, #500]	; (80021f0 <HAL_RCC_OscConfig+0x4d8>)
 8001ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffe:	4a7c      	ldr	r2, [pc, #496]	; (80021f0 <HAL_RCC_OscConfig+0x4d8>)
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	6713      	str	r3, [r2, #112]	; 0x70
 8002006:	e01c      	b.n	8002042 <HAL_RCC_OscConfig+0x32a>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	2b05      	cmp	r3, #5
 800200e:	d10c      	bne.n	800202a <HAL_RCC_OscConfig+0x312>
 8002010:	4b77      	ldr	r3, [pc, #476]	; (80021f0 <HAL_RCC_OscConfig+0x4d8>)
 8002012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002014:	4a76      	ldr	r2, [pc, #472]	; (80021f0 <HAL_RCC_OscConfig+0x4d8>)
 8002016:	f043 0304 	orr.w	r3, r3, #4
 800201a:	6713      	str	r3, [r2, #112]	; 0x70
 800201c:	4b74      	ldr	r3, [pc, #464]	; (80021f0 <HAL_RCC_OscConfig+0x4d8>)
 800201e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002020:	4a73      	ldr	r2, [pc, #460]	; (80021f0 <HAL_RCC_OscConfig+0x4d8>)
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	6713      	str	r3, [r2, #112]	; 0x70
 8002028:	e00b      	b.n	8002042 <HAL_RCC_OscConfig+0x32a>
 800202a:	4b71      	ldr	r3, [pc, #452]	; (80021f0 <HAL_RCC_OscConfig+0x4d8>)
 800202c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202e:	4a70      	ldr	r2, [pc, #448]	; (80021f0 <HAL_RCC_OscConfig+0x4d8>)
 8002030:	f023 0301 	bic.w	r3, r3, #1
 8002034:	6713      	str	r3, [r2, #112]	; 0x70
 8002036:	4b6e      	ldr	r3, [pc, #440]	; (80021f0 <HAL_RCC_OscConfig+0x4d8>)
 8002038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800203a:	4a6d      	ldr	r2, [pc, #436]	; (80021f0 <HAL_RCC_OscConfig+0x4d8>)
 800203c:	f023 0304 	bic.w	r3, r3, #4
 8002040:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d015      	beq.n	8002076 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800204a:	f7ff fb81 	bl	8001750 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002050:	e00a      	b.n	8002068 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002052:	f7ff fb7d 	bl	8001750 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002060:	4293      	cmp	r3, r2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e0bc      	b.n	80021e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002068:	4b61      	ldr	r3, [pc, #388]	; (80021f0 <HAL_RCC_OscConfig+0x4d8>)
 800206a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0ee      	beq.n	8002052 <HAL_RCC_OscConfig+0x33a>
 8002074:	e014      	b.n	80020a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002076:	f7ff fb6b 	bl	8001750 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800207c:	e00a      	b.n	8002094 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800207e:	f7ff fb67 	bl	8001750 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	f241 3288 	movw	r2, #5000	; 0x1388
 800208c:	4293      	cmp	r3, r2
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e0a6      	b.n	80021e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002094:	4b56      	ldr	r3, [pc, #344]	; (80021f0 <HAL_RCC_OscConfig+0x4d8>)
 8002096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1ee      	bne.n	800207e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020a0:	7dfb      	ldrb	r3, [r7, #23]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d105      	bne.n	80020b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020a6:	4b52      	ldr	r3, [pc, #328]	; (80021f0 <HAL_RCC_OscConfig+0x4d8>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	4a51      	ldr	r2, [pc, #324]	; (80021f0 <HAL_RCC_OscConfig+0x4d8>)
 80020ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 8092 	beq.w	80021e0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020bc:	4b4c      	ldr	r3, [pc, #304]	; (80021f0 <HAL_RCC_OscConfig+0x4d8>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 030c 	and.w	r3, r3, #12
 80020c4:	2b08      	cmp	r3, #8
 80020c6:	d05c      	beq.n	8002182 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d141      	bne.n	8002154 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d0:	4b48      	ldr	r3, [pc, #288]	; (80021f4 <HAL_RCC_OscConfig+0x4dc>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d6:	f7ff fb3b 	bl	8001750 <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020de:	f7ff fb37 	bl	8001750 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e078      	b.n	80021e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020f0:	4b3f      	ldr	r3, [pc, #252]	; (80021f0 <HAL_RCC_OscConfig+0x4d8>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1f0      	bne.n	80020de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	69da      	ldr	r2, [r3, #28]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	431a      	orrs	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	019b      	lsls	r3, r3, #6
 800210c:	431a      	orrs	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002112:	085b      	lsrs	r3, r3, #1
 8002114:	3b01      	subs	r3, #1
 8002116:	041b      	lsls	r3, r3, #16
 8002118:	431a      	orrs	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211e:	061b      	lsls	r3, r3, #24
 8002120:	4933      	ldr	r1, [pc, #204]	; (80021f0 <HAL_RCC_OscConfig+0x4d8>)
 8002122:	4313      	orrs	r3, r2
 8002124:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002126:	4b33      	ldr	r3, [pc, #204]	; (80021f4 <HAL_RCC_OscConfig+0x4dc>)
 8002128:	2201      	movs	r2, #1
 800212a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212c:	f7ff fb10 	bl	8001750 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002134:	f7ff fb0c 	bl	8001750 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e04d      	b.n	80021e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002146:	4b2a      	ldr	r3, [pc, #168]	; (80021f0 <HAL_RCC_OscConfig+0x4d8>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0f0      	beq.n	8002134 <HAL_RCC_OscConfig+0x41c>
 8002152:	e045      	b.n	80021e0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002154:	4b27      	ldr	r3, [pc, #156]	; (80021f4 <HAL_RCC_OscConfig+0x4dc>)
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215a:	f7ff faf9 	bl	8001750 <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002160:	e008      	b.n	8002174 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002162:	f7ff faf5 	bl	8001750 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e036      	b.n	80021e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002174:	4b1e      	ldr	r3, [pc, #120]	; (80021f0 <HAL_RCC_OscConfig+0x4d8>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1f0      	bne.n	8002162 <HAL_RCC_OscConfig+0x44a>
 8002180:	e02e      	b.n	80021e0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d101      	bne.n	800218e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e029      	b.n	80021e2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800218e:	4b18      	ldr	r3, [pc, #96]	; (80021f0 <HAL_RCC_OscConfig+0x4d8>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d11c      	bne.n	80021dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d115      	bne.n	80021dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021b6:	4013      	ands	r3, r2
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021bc:	4293      	cmp	r3, r2
 80021be:	d10d      	bne.n	80021dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d106      	bne.n	80021dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021d8:	429a      	cmp	r2, r3
 80021da:	d001      	beq.n	80021e0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e000      	b.n	80021e2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40007000 	.word	0x40007000
 80021f0:	40023800 	.word	0x40023800
 80021f4:	42470060 	.word	0x42470060

080021f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e0cc      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800220c:	4b68      	ldr	r3, [pc, #416]	; (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 030f 	and.w	r3, r3, #15
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d90c      	bls.n	8002234 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221a:	4b65      	ldr	r3, [pc, #404]	; (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002222:	4b63      	ldr	r3, [pc, #396]	; (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	429a      	cmp	r2, r3
 800222e:	d001      	beq.n	8002234 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e0b8      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d020      	beq.n	8002282 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800224c:	4b59      	ldr	r3, [pc, #356]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	4a58      	ldr	r2, [pc, #352]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002252:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002256:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0308 	and.w	r3, r3, #8
 8002260:	2b00      	cmp	r3, #0
 8002262:	d005      	beq.n	8002270 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002264:	4b53      	ldr	r3, [pc, #332]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	4a52      	ldr	r2, [pc, #328]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800226a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800226e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002270:	4b50      	ldr	r3, [pc, #320]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	494d      	ldr	r1, [pc, #308]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800227e:	4313      	orrs	r3, r2
 8002280:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	d044      	beq.n	8002318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d107      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002296:	4b47      	ldr	r3, [pc, #284]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d119      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e07f      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d003      	beq.n	80022b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022b2:	2b03      	cmp	r3, #3
 80022b4:	d107      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b6:	4b3f      	ldr	r3, [pc, #252]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d109      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e06f      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c6:	4b3b      	ldr	r3, [pc, #236]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e067      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022d6:	4b37      	ldr	r3, [pc, #220]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f023 0203 	bic.w	r2, r3, #3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	4934      	ldr	r1, [pc, #208]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022e8:	f7ff fa32 	bl	8001750 <HAL_GetTick>
 80022ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ee:	e00a      	b.n	8002306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f0:	f7ff fa2e 	bl	8001750 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fe:	4293      	cmp	r3, r2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e04f      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002306:	4b2b      	ldr	r3, [pc, #172]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 020c 	and.w	r2, r3, #12
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	429a      	cmp	r2, r3
 8002316:	d1eb      	bne.n	80022f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002318:	4b25      	ldr	r3, [pc, #148]	; (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 030f 	and.w	r3, r3, #15
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d20c      	bcs.n	8002340 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002326:	4b22      	ldr	r3, [pc, #136]	; (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800232e:	4b20      	ldr	r3, [pc, #128]	; (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d001      	beq.n	8002340 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e032      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	2b00      	cmp	r3, #0
 800234a:	d008      	beq.n	800235e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800234c:	4b19      	ldr	r3, [pc, #100]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	4916      	ldr	r1, [pc, #88]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	4313      	orrs	r3, r2
 800235c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0308 	and.w	r3, r3, #8
 8002366:	2b00      	cmp	r3, #0
 8002368:	d009      	beq.n	800237e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800236a:	4b12      	ldr	r3, [pc, #72]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	490e      	ldr	r1, [pc, #56]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	4313      	orrs	r3, r2
 800237c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800237e:	f000 f821 	bl	80023c4 <HAL_RCC_GetSysClockFreq>
 8002382:	4601      	mov	r1, r0
 8002384:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	091b      	lsrs	r3, r3, #4
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	4a0a      	ldr	r2, [pc, #40]	; (80023b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002390:	5cd3      	ldrb	r3, [r2, r3]
 8002392:	fa21 f303 	lsr.w	r3, r1, r3
 8002396:	4a09      	ldr	r2, [pc, #36]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 8002398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800239a:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <HAL_RCC_ClockConfig+0x1c8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff f992 	bl	80016c8 <HAL_InitTick>

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40023c00 	.word	0x40023c00
 80023b4:	40023800 	.word	0x40023800
 80023b8:	08008620 	.word	0x08008620
 80023bc:	20000000 	.word	0x20000000
 80023c0:	20000004 	.word	0x20000004

080023c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	607b      	str	r3, [r7, #4]
 80023ce:	2300      	movs	r3, #0
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	2300      	movs	r3, #0
 80023d4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023da:	4b50      	ldr	r3, [pc, #320]	; (800251c <HAL_RCC_GetSysClockFreq+0x158>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 030c 	and.w	r3, r3, #12
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	d007      	beq.n	80023f6 <HAL_RCC_GetSysClockFreq+0x32>
 80023e6:	2b08      	cmp	r3, #8
 80023e8:	d008      	beq.n	80023fc <HAL_RCC_GetSysClockFreq+0x38>
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f040 808d 	bne.w	800250a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023f0:	4b4b      	ldr	r3, [pc, #300]	; (8002520 <HAL_RCC_GetSysClockFreq+0x15c>)
 80023f2:	60bb      	str	r3, [r7, #8]
       break;
 80023f4:	e08c      	b.n	8002510 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023f6:	4b4b      	ldr	r3, [pc, #300]	; (8002524 <HAL_RCC_GetSysClockFreq+0x160>)
 80023f8:	60bb      	str	r3, [r7, #8]
      break;
 80023fa:	e089      	b.n	8002510 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023fc:	4b47      	ldr	r3, [pc, #284]	; (800251c <HAL_RCC_GetSysClockFreq+0x158>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002404:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002406:	4b45      	ldr	r3, [pc, #276]	; (800251c <HAL_RCC_GetSysClockFreq+0x158>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d023      	beq.n	800245a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002412:	4b42      	ldr	r3, [pc, #264]	; (800251c <HAL_RCC_GetSysClockFreq+0x158>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	099b      	lsrs	r3, r3, #6
 8002418:	f04f 0400 	mov.w	r4, #0
 800241c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002420:	f04f 0200 	mov.w	r2, #0
 8002424:	ea03 0501 	and.w	r5, r3, r1
 8002428:	ea04 0602 	and.w	r6, r4, r2
 800242c:	4a3d      	ldr	r2, [pc, #244]	; (8002524 <HAL_RCC_GetSysClockFreq+0x160>)
 800242e:	fb02 f106 	mul.w	r1, r2, r6
 8002432:	2200      	movs	r2, #0
 8002434:	fb02 f205 	mul.w	r2, r2, r5
 8002438:	440a      	add	r2, r1
 800243a:	493a      	ldr	r1, [pc, #232]	; (8002524 <HAL_RCC_GetSysClockFreq+0x160>)
 800243c:	fba5 0101 	umull	r0, r1, r5, r1
 8002440:	1853      	adds	r3, r2, r1
 8002442:	4619      	mov	r1, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f04f 0400 	mov.w	r4, #0
 800244a:	461a      	mov	r2, r3
 800244c:	4623      	mov	r3, r4
 800244e:	f7fe fc23 	bl	8000c98 <__aeabi_uldivmod>
 8002452:	4603      	mov	r3, r0
 8002454:	460c      	mov	r4, r1
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	e049      	b.n	80024ee <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800245a:	4b30      	ldr	r3, [pc, #192]	; (800251c <HAL_RCC_GetSysClockFreq+0x158>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	099b      	lsrs	r3, r3, #6
 8002460:	f04f 0400 	mov.w	r4, #0
 8002464:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002468:	f04f 0200 	mov.w	r2, #0
 800246c:	ea03 0501 	and.w	r5, r3, r1
 8002470:	ea04 0602 	and.w	r6, r4, r2
 8002474:	4629      	mov	r1, r5
 8002476:	4632      	mov	r2, r6
 8002478:	f04f 0300 	mov.w	r3, #0
 800247c:	f04f 0400 	mov.w	r4, #0
 8002480:	0154      	lsls	r4, r2, #5
 8002482:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002486:	014b      	lsls	r3, r1, #5
 8002488:	4619      	mov	r1, r3
 800248a:	4622      	mov	r2, r4
 800248c:	1b49      	subs	r1, r1, r5
 800248e:	eb62 0206 	sbc.w	r2, r2, r6
 8002492:	f04f 0300 	mov.w	r3, #0
 8002496:	f04f 0400 	mov.w	r4, #0
 800249a:	0194      	lsls	r4, r2, #6
 800249c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80024a0:	018b      	lsls	r3, r1, #6
 80024a2:	1a5b      	subs	r3, r3, r1
 80024a4:	eb64 0402 	sbc.w	r4, r4, r2
 80024a8:	f04f 0100 	mov.w	r1, #0
 80024ac:	f04f 0200 	mov.w	r2, #0
 80024b0:	00e2      	lsls	r2, r4, #3
 80024b2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80024b6:	00d9      	lsls	r1, r3, #3
 80024b8:	460b      	mov	r3, r1
 80024ba:	4614      	mov	r4, r2
 80024bc:	195b      	adds	r3, r3, r5
 80024be:	eb44 0406 	adc.w	r4, r4, r6
 80024c2:	f04f 0100 	mov.w	r1, #0
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	02a2      	lsls	r2, r4, #10
 80024cc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80024d0:	0299      	lsls	r1, r3, #10
 80024d2:	460b      	mov	r3, r1
 80024d4:	4614      	mov	r4, r2
 80024d6:	4618      	mov	r0, r3
 80024d8:	4621      	mov	r1, r4
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f04f 0400 	mov.w	r4, #0
 80024e0:	461a      	mov	r2, r3
 80024e2:	4623      	mov	r3, r4
 80024e4:	f7fe fbd8 	bl	8000c98 <__aeabi_uldivmod>
 80024e8:	4603      	mov	r3, r0
 80024ea:	460c      	mov	r4, r1
 80024ec:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024ee:	4b0b      	ldr	r3, [pc, #44]	; (800251c <HAL_RCC_GetSysClockFreq+0x158>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	0c1b      	lsrs	r3, r3, #16
 80024f4:	f003 0303 	and.w	r3, r3, #3
 80024f8:	3301      	adds	r3, #1
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	fbb2 f3f3 	udiv	r3, r2, r3
 8002506:	60bb      	str	r3, [r7, #8]
      break;
 8002508:	e002      	b.n	8002510 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800250a:	4b05      	ldr	r3, [pc, #20]	; (8002520 <HAL_RCC_GetSysClockFreq+0x15c>)
 800250c:	60bb      	str	r3, [r7, #8]
      break;
 800250e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002510:	68bb      	ldr	r3, [r7, #8]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800251a:	bf00      	nop
 800251c:	40023800 	.word	0x40023800
 8002520:	00f42400 	.word	0x00f42400
 8002524:	017d7840 	.word	0x017d7840

08002528 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800252c:	4b03      	ldr	r3, [pc, #12]	; (800253c <HAL_RCC_GetHCLKFreq+0x14>)
 800252e:	681b      	ldr	r3, [r3, #0]
}
 8002530:	4618      	mov	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	20000000 	.word	0x20000000

08002540 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002544:	f7ff fff0 	bl	8002528 <HAL_RCC_GetHCLKFreq>
 8002548:	4601      	mov	r1, r0
 800254a:	4b05      	ldr	r3, [pc, #20]	; (8002560 <HAL_RCC_GetPCLK1Freq+0x20>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	0a9b      	lsrs	r3, r3, #10
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	4a03      	ldr	r2, [pc, #12]	; (8002564 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002556:	5cd3      	ldrb	r3, [r2, r3]
 8002558:	fa21 f303 	lsr.w	r3, r1, r3
}
 800255c:	4618      	mov	r0, r3
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40023800 	.word	0x40023800
 8002564:	08008630 	.word	0x08008630

08002568 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800256c:	f7ff ffdc 	bl	8002528 <HAL_RCC_GetHCLKFreq>
 8002570:	4601      	mov	r1, r0
 8002572:	4b05      	ldr	r3, [pc, #20]	; (8002588 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	0b5b      	lsrs	r3, r3, #13
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	4a03      	ldr	r2, [pc, #12]	; (800258c <HAL_RCC_GetPCLK2Freq+0x24>)
 800257e:	5cd3      	ldrb	r3, [r2, r3]
 8002580:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002584:	4618      	mov	r0, r3
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40023800 	.word	0x40023800
 800258c:	08008630 	.word	0x08008630

08002590 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e03f      	b.n	8002622 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d106      	bne.n	80025bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f7fe ff3c 	bl	8001434 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2224      	movs	r2, #36	; 0x24
 80025c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 fc3d 	bl	8002e54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	691a      	ldr	r2, [r3, #16]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	695a      	ldr	r2, [r3, #20]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68da      	ldr	r2, [r3, #12]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002608:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2220      	movs	r2, #32
 8002614:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2220      	movs	r2, #32
 800261c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b088      	sub	sp, #32
 800262e:	af02      	add	r7, sp, #8
 8002630:	60f8      	str	r0, [r7, #12]
 8002632:	60b9      	str	r1, [r7, #8]
 8002634:	603b      	str	r3, [r7, #0]
 8002636:	4613      	mov	r3, r2
 8002638:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800263a:	2300      	movs	r3, #0
 800263c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b20      	cmp	r3, #32
 8002648:	f040 8083 	bne.w	8002752 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d002      	beq.n	8002658 <HAL_UART_Transmit+0x2e>
 8002652:	88fb      	ldrh	r3, [r7, #6]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e07b      	b.n	8002754 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002662:	2b01      	cmp	r3, #1
 8002664:	d101      	bne.n	800266a <HAL_UART_Transmit+0x40>
 8002666:	2302      	movs	r3, #2
 8002668:	e074      	b.n	8002754 <HAL_UART_Transmit+0x12a>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2221      	movs	r2, #33	; 0x21
 800267c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002680:	f7ff f866 	bl	8001750 <HAL_GetTick>
 8002684:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	88fa      	ldrh	r2, [r7, #6]
 800268a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	88fa      	ldrh	r2, [r7, #6]
 8002690:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800269a:	e042      	b.n	8002722 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026b2:	d122      	bne.n	80026fa <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	2200      	movs	r2, #0
 80026bc:	2180      	movs	r1, #128	; 0x80
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 fa5c 	bl	8002b7c <UART_WaitOnFlagUntilTimeout>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e042      	b.n	8002754 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	461a      	mov	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026e0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d103      	bne.n	80026f2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	3302      	adds	r3, #2
 80026ee:	60bb      	str	r3, [r7, #8]
 80026f0:	e017      	b.n	8002722 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	3301      	adds	r3, #1
 80026f6:	60bb      	str	r3, [r7, #8]
 80026f8:	e013      	b.n	8002722 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	2200      	movs	r2, #0
 8002702:	2180      	movs	r1, #128	; 0x80
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f000 fa39 	bl	8002b7c <UART_WaitOnFlagUntilTimeout>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e01f      	b.n	8002754 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	1c5a      	adds	r2, r3, #1
 8002718:	60ba      	str	r2, [r7, #8]
 800271a:	781a      	ldrb	r2, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002726:	b29b      	uxth	r3, r3
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1b7      	bne.n	800269c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	2200      	movs	r2, #0
 8002734:	2140      	movs	r1, #64	; 0x40
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 fa20 	bl	8002b7c <UART_WaitOnFlagUntilTimeout>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e006      	b.n	8002754 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2220      	movs	r2, #32
 800274a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800274e:	2300      	movs	r3, #0
 8002750:	e000      	b.n	8002754 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002752:	2302      	movs	r3, #2
  }
}
 8002754:	4618      	mov	r0, r3
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b088      	sub	sp, #32
 8002760:	af02      	add	r7, sp, #8
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	603b      	str	r3, [r7, #0]
 8002768:	4613      	mov	r3, r2
 800276a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800276c:	2300      	movs	r3, #0
 800276e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b20      	cmp	r3, #32
 800277a:	f040 8090 	bne.w	800289e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d002      	beq.n	800278a <HAL_UART_Receive+0x2e>
 8002784:	88fb      	ldrh	r3, [r7, #6]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e088      	b.n	80028a0 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002794:	2b01      	cmp	r3, #1
 8002796:	d101      	bne.n	800279c <HAL_UART_Receive+0x40>
 8002798:	2302      	movs	r3, #2
 800279a:	e081      	b.n	80028a0 <HAL_UART_Receive+0x144>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2222      	movs	r2, #34	; 0x22
 80027ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80027b2:	f7fe ffcd 	bl	8001750 <HAL_GetTick>
 80027b6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	88fa      	ldrh	r2, [r7, #6]
 80027bc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	88fa      	ldrh	r2, [r7, #6]
 80027c2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80027cc:	e05c      	b.n	8002888 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027e4:	d12b      	bne.n	800283e <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2200      	movs	r2, #0
 80027ee:	2120      	movs	r1, #32
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 f9c3 	bl	8002b7c <UART_WaitOnFlagUntilTimeout>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e04f      	b.n	80028a0 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10c      	bne.n	8002826 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	b29b      	uxth	r3, r3
 8002814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002818:	b29a      	uxth	r2, r3
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	3302      	adds	r3, #2
 8002822:	60bb      	str	r3, [r7, #8]
 8002824:	e030      	b.n	8002888 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	b29b      	uxth	r3, r3
 800282e:	b2db      	uxtb	r3, r3
 8002830:	b29a      	uxth	r2, r3
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	3301      	adds	r3, #1
 800283a:	60bb      	str	r3, [r7, #8]
 800283c:	e024      	b.n	8002888 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	2200      	movs	r2, #0
 8002846:	2120      	movs	r1, #32
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f000 f997 	bl	8002b7c <UART_WaitOnFlagUntilTimeout>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e023      	b.n	80028a0 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d108      	bne.n	8002872 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6859      	ldr	r1, [r3, #4]
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	1c5a      	adds	r2, r3, #1
 800286a:	60ba      	str	r2, [r7, #8]
 800286c:	b2ca      	uxtb	r2, r1
 800286e:	701a      	strb	r2, [r3, #0]
 8002870:	e00a      	b.n	8002888 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	b2da      	uxtb	r2, r3
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	1c59      	adds	r1, r3, #1
 800287e:	60b9      	str	r1, [r7, #8]
 8002880:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800288c:	b29b      	uxth	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d19d      	bne.n	80027ce <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2220      	movs	r2, #32
 8002896:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800289a:	2300      	movs	r3, #0
 800289c:	e000      	b.n	80028a0 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800289e:	2302      	movs	r3, #2
  }
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3718      	adds	r7, #24
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	4613      	mov	r3, r2
 80028b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b20      	cmp	r3, #32
 80028c0:	d140      	bne.n	8002944 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d002      	beq.n	80028ce <HAL_UART_Receive_IT+0x26>
 80028c8:	88fb      	ldrh	r3, [r7, #6]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e039      	b.n	8002946 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d101      	bne.n	80028e0 <HAL_UART_Receive_IT+0x38>
 80028dc:	2302      	movs	r3, #2
 80028de:	e032      	b.n	8002946 <HAL_UART_Receive_IT+0x9e>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	88fa      	ldrh	r2, [r7, #6]
 80028f2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	88fa      	ldrh	r2, [r7, #6]
 80028f8:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2222      	movs	r2, #34	; 0x22
 8002904:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800291e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	695a      	ldr	r2, [r3, #20]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 0201 	orr.w	r2, r2, #1
 800292e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0220 	orr.w	r2, r2, #32
 800293e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002940:	2300      	movs	r3, #0
 8002942:	e000      	b.n	8002946 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002944:	2302      	movs	r3, #2
  }
}
 8002946:	4618      	mov	r0, r3
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
	...

08002954 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b088      	sub	sp, #32
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002974:	2300      	movs	r3, #0
 8002976:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002978:	2300      	movs	r3, #0
 800297a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10d      	bne.n	80029a6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	f003 0320 	and.w	r3, r3, #32
 8002990:	2b00      	cmp	r3, #0
 8002992:	d008      	beq.n	80029a6 <HAL_UART_IRQHandler+0x52>
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	f003 0320 	and.w	r3, r3, #32
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f9d6 	bl	8002d50 <UART_Receive_IT>
      return;
 80029a4:	e0d1      	b.n	8002b4a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 80b0 	beq.w	8002b0e <HAL_UART_IRQHandler+0x1ba>
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d105      	bne.n	80029c4 <HAL_UART_IRQHandler+0x70>
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f000 80a5 	beq.w	8002b0e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00a      	beq.n	80029e4 <HAL_UART_IRQHandler+0x90>
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d005      	beq.n	80029e4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029dc:	f043 0201 	orr.w	r2, r3, #1
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	f003 0304 	and.w	r3, r3, #4
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00a      	beq.n	8002a04 <HAL_UART_IRQHandler+0xb0>
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fc:	f043 0202 	orr.w	r2, r3, #2
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00a      	beq.n	8002a24 <HAL_UART_IRQHandler+0xd0>
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d005      	beq.n	8002a24 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1c:	f043 0204 	orr.w	r2, r3, #4
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f003 0308 	and.w	r3, r3, #8
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00f      	beq.n	8002a4e <HAL_UART_IRQHandler+0xfa>
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	f003 0320 	and.w	r3, r3, #32
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d104      	bne.n	8002a42 <HAL_UART_IRQHandler+0xee>
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d005      	beq.n	8002a4e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a46:	f043 0208 	orr.w	r2, r3, #8
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d078      	beq.n	8002b48 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	f003 0320 	and.w	r3, r3, #32
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d007      	beq.n	8002a70 <HAL_UART_IRQHandler+0x11c>
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	f003 0320 	and.w	r3, r3, #32
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d002      	beq.n	8002a70 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f970 	bl	8002d50 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a7a:	2b40      	cmp	r3, #64	; 0x40
 8002a7c:	bf0c      	ite	eq
 8002a7e:	2301      	moveq	r3, #1
 8002a80:	2300      	movne	r3, #0
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a8a:	f003 0308 	and.w	r3, r3, #8
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d102      	bne.n	8002a98 <HAL_UART_IRQHandler+0x144>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d031      	beq.n	8002afc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 f8b9 	bl	8002c10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa8:	2b40      	cmp	r3, #64	; 0x40
 8002aaa:	d123      	bne.n	8002af4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	695a      	ldr	r2, [r3, #20]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aba:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d013      	beq.n	8002aec <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac8:	4a21      	ldr	r2, [pc, #132]	; (8002b50 <HAL_UART_IRQHandler+0x1fc>)
 8002aca:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7fe ff7c 	bl	80019ce <HAL_DMA_Abort_IT>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d016      	beq.n	8002b0a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ae6:	4610      	mov	r0, r2
 8002ae8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aea:	e00e      	b.n	8002b0a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 f83b 	bl	8002b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002af2:	e00a      	b.n	8002b0a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 f837 	bl	8002b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002afa:	e006      	b.n	8002b0a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f833 	bl	8002b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002b08:	e01e      	b.n	8002b48 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b0a:	bf00      	nop
    return;
 8002b0c:	e01c      	b.n	8002b48 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d008      	beq.n	8002b2a <HAL_UART_IRQHandler+0x1d6>
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f8a6 	bl	8002c74 <UART_Transmit_IT>
    return;
 8002b28:	e00f      	b.n	8002b4a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00a      	beq.n	8002b4a <HAL_UART_IRQHandler+0x1f6>
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d005      	beq.n	8002b4a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f8ee 	bl	8002d20 <UART_EndTransmit_IT>
    return;
 8002b44:	bf00      	nop
 8002b46:	e000      	b.n	8002b4a <HAL_UART_IRQHandler+0x1f6>
    return;
 8002b48:	bf00      	nop
  }
}
 8002b4a:	3720      	adds	r7, #32
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	08002c4d 	.word	0x08002c4d

08002b54 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	603b      	str	r3, [r7, #0]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b8c:	e02c      	b.n	8002be8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b94:	d028      	beq.n	8002be8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d007      	beq.n	8002bac <UART_WaitOnFlagUntilTimeout+0x30>
 8002b9c:	f7fe fdd8 	bl	8001750 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d21d      	bcs.n	8002be8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68da      	ldr	r2, [r3, #12]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002bba:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	695a      	ldr	r2, [r3, #20]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 0201 	bic.w	r2, r2, #1
 8002bca:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e00f      	b.n	8002c08 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	bf0c      	ite	eq
 8002bf8:	2301      	moveq	r3, #1
 8002bfa:	2300      	movne	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	461a      	mov	r2, r3
 8002c00:	79fb      	ldrb	r3, [r7, #7]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d0c3      	beq.n	8002b8e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68da      	ldr	r2, [r3, #12]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c26:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	695a      	ldr	r2, [r3, #20]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0201 	bic.w	r2, r2, #1
 8002c36:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f7ff ff7e 	bl	8002b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c6c:	bf00      	nop
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b21      	cmp	r3, #33	; 0x21
 8002c86:	d144      	bne.n	8002d12 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c90:	d11a      	bne.n	8002cc8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	881b      	ldrh	r3, [r3, #0]
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ca6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d105      	bne.n	8002cbc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	1c9a      	adds	r2, r3, #2
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	621a      	str	r2, [r3, #32]
 8002cba:	e00e      	b.n	8002cda <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	1c5a      	adds	r2, r3, #1
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	621a      	str	r2, [r3, #32]
 8002cc6:	e008      	b.n	8002cda <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	1c59      	adds	r1, r3, #1
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	6211      	str	r1, [r2, #32]
 8002cd2:	781a      	ldrb	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10f      	bne.n	8002d0e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cfc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68da      	ldr	r2, [r3, #12]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d0c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	e000      	b.n	8002d14 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002d12:	2302      	movs	r3, #2
  }
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68da      	ldr	r2, [r3, #12]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d36:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f7ff ff07 	bl	8002b54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b22      	cmp	r3, #34	; 0x22
 8002d62:	d171      	bne.n	8002e48 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d6c:	d123      	bne.n	8002db6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d72:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10e      	bne.n	8002d9a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d92:	1c9a      	adds	r2, r3, #2
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	629a      	str	r2, [r3, #40]	; 0x28
 8002d98:	e029      	b.n	8002dee <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dae:	1c5a      	adds	r2, r3, #1
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	629a      	str	r2, [r3, #40]	; 0x28
 8002db4:	e01b      	b.n	8002dee <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10a      	bne.n	8002dd4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6858      	ldr	r0, [r3, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc8:	1c59      	adds	r1, r3, #1
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	6291      	str	r1, [r2, #40]	; 0x28
 8002dce:	b2c2      	uxtb	r2, r0
 8002dd0:	701a      	strb	r2, [r3, #0]
 8002dd2:	e00c      	b.n	8002dee <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de0:	1c58      	adds	r0, r3, #1
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	6288      	str	r0, [r1, #40]	; 0x28
 8002de6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d120      	bne.n	8002e44 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68da      	ldr	r2, [r3, #12]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0220 	bic.w	r2, r2, #32
 8002e10:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68da      	ldr	r2, [r3, #12]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e20:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	695a      	ldr	r2, [r3, #20]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f022 0201 	bic.w	r2, r2, #1
 8002e30:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2220      	movs	r2, #32
 8002e36:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7fe f8c6 	bl	8000fcc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002e40:	2300      	movs	r3, #0
 8002e42:	e002      	b.n	8002e4a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002e44:	2300      	movs	r3, #0
 8002e46:	e000      	b.n	8002e4a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002e48:	2302      	movs	r3, #2
  }
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
	...

08002e54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e58:	b085      	sub	sp, #20
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68da      	ldr	r2, [r3, #12]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	431a      	orrs	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002e96:	f023 030c 	bic.w	r3, r3, #12
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6812      	ldr	r2, [r2, #0]
 8002e9e:	68f9      	ldr	r1, [r7, #12]
 8002ea0:	430b      	orrs	r3, r1
 8002ea2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	699a      	ldr	r2, [r3, #24]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ec2:	f040 818b 	bne.w	80031dc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4ac1      	ldr	r2, [pc, #772]	; (80031d0 <UART_SetConfig+0x37c>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d005      	beq.n	8002edc <UART_SetConfig+0x88>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4abf      	ldr	r2, [pc, #764]	; (80031d4 <UART_SetConfig+0x380>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	f040 80bd 	bne.w	8003056 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002edc:	f7ff fb44 	bl	8002568 <HAL_RCC_GetPCLK2Freq>
 8002ee0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	461d      	mov	r5, r3
 8002ee6:	f04f 0600 	mov.w	r6, #0
 8002eea:	46a8      	mov	r8, r5
 8002eec:	46b1      	mov	r9, r6
 8002eee:	eb18 0308 	adds.w	r3, r8, r8
 8002ef2:	eb49 0409 	adc.w	r4, r9, r9
 8002ef6:	4698      	mov	r8, r3
 8002ef8:	46a1      	mov	r9, r4
 8002efa:	eb18 0805 	adds.w	r8, r8, r5
 8002efe:	eb49 0906 	adc.w	r9, r9, r6
 8002f02:	f04f 0100 	mov.w	r1, #0
 8002f06:	f04f 0200 	mov.w	r2, #0
 8002f0a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002f0e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002f12:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002f16:	4688      	mov	r8, r1
 8002f18:	4691      	mov	r9, r2
 8002f1a:	eb18 0005 	adds.w	r0, r8, r5
 8002f1e:	eb49 0106 	adc.w	r1, r9, r6
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	461d      	mov	r5, r3
 8002f28:	f04f 0600 	mov.w	r6, #0
 8002f2c:	196b      	adds	r3, r5, r5
 8002f2e:	eb46 0406 	adc.w	r4, r6, r6
 8002f32:	461a      	mov	r2, r3
 8002f34:	4623      	mov	r3, r4
 8002f36:	f7fd feaf 	bl	8000c98 <__aeabi_uldivmod>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	460c      	mov	r4, r1
 8002f3e:	461a      	mov	r2, r3
 8002f40:	4ba5      	ldr	r3, [pc, #660]	; (80031d8 <UART_SetConfig+0x384>)
 8002f42:	fba3 2302 	umull	r2, r3, r3, r2
 8002f46:	095b      	lsrs	r3, r3, #5
 8002f48:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	461d      	mov	r5, r3
 8002f50:	f04f 0600 	mov.w	r6, #0
 8002f54:	46a9      	mov	r9, r5
 8002f56:	46b2      	mov	sl, r6
 8002f58:	eb19 0309 	adds.w	r3, r9, r9
 8002f5c:	eb4a 040a 	adc.w	r4, sl, sl
 8002f60:	4699      	mov	r9, r3
 8002f62:	46a2      	mov	sl, r4
 8002f64:	eb19 0905 	adds.w	r9, r9, r5
 8002f68:	eb4a 0a06 	adc.w	sl, sl, r6
 8002f6c:	f04f 0100 	mov.w	r1, #0
 8002f70:	f04f 0200 	mov.w	r2, #0
 8002f74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f78:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f7c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f80:	4689      	mov	r9, r1
 8002f82:	4692      	mov	sl, r2
 8002f84:	eb19 0005 	adds.w	r0, r9, r5
 8002f88:	eb4a 0106 	adc.w	r1, sl, r6
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	461d      	mov	r5, r3
 8002f92:	f04f 0600 	mov.w	r6, #0
 8002f96:	196b      	adds	r3, r5, r5
 8002f98:	eb46 0406 	adc.w	r4, r6, r6
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	4623      	mov	r3, r4
 8002fa0:	f7fd fe7a 	bl	8000c98 <__aeabi_uldivmod>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	460c      	mov	r4, r1
 8002fa8:	461a      	mov	r2, r3
 8002faa:	4b8b      	ldr	r3, [pc, #556]	; (80031d8 <UART_SetConfig+0x384>)
 8002fac:	fba3 1302 	umull	r1, r3, r3, r2
 8002fb0:	095b      	lsrs	r3, r3, #5
 8002fb2:	2164      	movs	r1, #100	; 0x64
 8002fb4:	fb01 f303 	mul.w	r3, r1, r3
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	3332      	adds	r3, #50	; 0x32
 8002fbe:	4a86      	ldr	r2, [pc, #536]	; (80031d8 <UART_SetConfig+0x384>)
 8002fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc4:	095b      	lsrs	r3, r3, #5
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002fcc:	4498      	add	r8, r3
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	461d      	mov	r5, r3
 8002fd2:	f04f 0600 	mov.w	r6, #0
 8002fd6:	46a9      	mov	r9, r5
 8002fd8:	46b2      	mov	sl, r6
 8002fda:	eb19 0309 	adds.w	r3, r9, r9
 8002fde:	eb4a 040a 	adc.w	r4, sl, sl
 8002fe2:	4699      	mov	r9, r3
 8002fe4:	46a2      	mov	sl, r4
 8002fe6:	eb19 0905 	adds.w	r9, r9, r5
 8002fea:	eb4a 0a06 	adc.w	sl, sl, r6
 8002fee:	f04f 0100 	mov.w	r1, #0
 8002ff2:	f04f 0200 	mov.w	r2, #0
 8002ff6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ffa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ffe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003002:	4689      	mov	r9, r1
 8003004:	4692      	mov	sl, r2
 8003006:	eb19 0005 	adds.w	r0, r9, r5
 800300a:	eb4a 0106 	adc.w	r1, sl, r6
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	461d      	mov	r5, r3
 8003014:	f04f 0600 	mov.w	r6, #0
 8003018:	196b      	adds	r3, r5, r5
 800301a:	eb46 0406 	adc.w	r4, r6, r6
 800301e:	461a      	mov	r2, r3
 8003020:	4623      	mov	r3, r4
 8003022:	f7fd fe39 	bl	8000c98 <__aeabi_uldivmod>
 8003026:	4603      	mov	r3, r0
 8003028:	460c      	mov	r4, r1
 800302a:	461a      	mov	r2, r3
 800302c:	4b6a      	ldr	r3, [pc, #424]	; (80031d8 <UART_SetConfig+0x384>)
 800302e:	fba3 1302 	umull	r1, r3, r3, r2
 8003032:	095b      	lsrs	r3, r3, #5
 8003034:	2164      	movs	r1, #100	; 0x64
 8003036:	fb01 f303 	mul.w	r3, r1, r3
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	3332      	adds	r3, #50	; 0x32
 8003040:	4a65      	ldr	r2, [pc, #404]	; (80031d8 <UART_SetConfig+0x384>)
 8003042:	fba2 2303 	umull	r2, r3, r2, r3
 8003046:	095b      	lsrs	r3, r3, #5
 8003048:	f003 0207 	and.w	r2, r3, #7
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4442      	add	r2, r8
 8003052:	609a      	str	r2, [r3, #8]
 8003054:	e26f      	b.n	8003536 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003056:	f7ff fa73 	bl	8002540 <HAL_RCC_GetPCLK1Freq>
 800305a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	461d      	mov	r5, r3
 8003060:	f04f 0600 	mov.w	r6, #0
 8003064:	46a8      	mov	r8, r5
 8003066:	46b1      	mov	r9, r6
 8003068:	eb18 0308 	adds.w	r3, r8, r8
 800306c:	eb49 0409 	adc.w	r4, r9, r9
 8003070:	4698      	mov	r8, r3
 8003072:	46a1      	mov	r9, r4
 8003074:	eb18 0805 	adds.w	r8, r8, r5
 8003078:	eb49 0906 	adc.w	r9, r9, r6
 800307c:	f04f 0100 	mov.w	r1, #0
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003088:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800308c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003090:	4688      	mov	r8, r1
 8003092:	4691      	mov	r9, r2
 8003094:	eb18 0005 	adds.w	r0, r8, r5
 8003098:	eb49 0106 	adc.w	r1, r9, r6
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	461d      	mov	r5, r3
 80030a2:	f04f 0600 	mov.w	r6, #0
 80030a6:	196b      	adds	r3, r5, r5
 80030a8:	eb46 0406 	adc.w	r4, r6, r6
 80030ac:	461a      	mov	r2, r3
 80030ae:	4623      	mov	r3, r4
 80030b0:	f7fd fdf2 	bl	8000c98 <__aeabi_uldivmod>
 80030b4:	4603      	mov	r3, r0
 80030b6:	460c      	mov	r4, r1
 80030b8:	461a      	mov	r2, r3
 80030ba:	4b47      	ldr	r3, [pc, #284]	; (80031d8 <UART_SetConfig+0x384>)
 80030bc:	fba3 2302 	umull	r2, r3, r3, r2
 80030c0:	095b      	lsrs	r3, r3, #5
 80030c2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	461d      	mov	r5, r3
 80030ca:	f04f 0600 	mov.w	r6, #0
 80030ce:	46a9      	mov	r9, r5
 80030d0:	46b2      	mov	sl, r6
 80030d2:	eb19 0309 	adds.w	r3, r9, r9
 80030d6:	eb4a 040a 	adc.w	r4, sl, sl
 80030da:	4699      	mov	r9, r3
 80030dc:	46a2      	mov	sl, r4
 80030de:	eb19 0905 	adds.w	r9, r9, r5
 80030e2:	eb4a 0a06 	adc.w	sl, sl, r6
 80030e6:	f04f 0100 	mov.w	r1, #0
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80030f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030fa:	4689      	mov	r9, r1
 80030fc:	4692      	mov	sl, r2
 80030fe:	eb19 0005 	adds.w	r0, r9, r5
 8003102:	eb4a 0106 	adc.w	r1, sl, r6
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	461d      	mov	r5, r3
 800310c:	f04f 0600 	mov.w	r6, #0
 8003110:	196b      	adds	r3, r5, r5
 8003112:	eb46 0406 	adc.w	r4, r6, r6
 8003116:	461a      	mov	r2, r3
 8003118:	4623      	mov	r3, r4
 800311a:	f7fd fdbd 	bl	8000c98 <__aeabi_uldivmod>
 800311e:	4603      	mov	r3, r0
 8003120:	460c      	mov	r4, r1
 8003122:	461a      	mov	r2, r3
 8003124:	4b2c      	ldr	r3, [pc, #176]	; (80031d8 <UART_SetConfig+0x384>)
 8003126:	fba3 1302 	umull	r1, r3, r3, r2
 800312a:	095b      	lsrs	r3, r3, #5
 800312c:	2164      	movs	r1, #100	; 0x64
 800312e:	fb01 f303 	mul.w	r3, r1, r3
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	3332      	adds	r3, #50	; 0x32
 8003138:	4a27      	ldr	r2, [pc, #156]	; (80031d8 <UART_SetConfig+0x384>)
 800313a:	fba2 2303 	umull	r2, r3, r2, r3
 800313e:	095b      	lsrs	r3, r3, #5
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003146:	4498      	add	r8, r3
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	461d      	mov	r5, r3
 800314c:	f04f 0600 	mov.w	r6, #0
 8003150:	46a9      	mov	r9, r5
 8003152:	46b2      	mov	sl, r6
 8003154:	eb19 0309 	adds.w	r3, r9, r9
 8003158:	eb4a 040a 	adc.w	r4, sl, sl
 800315c:	4699      	mov	r9, r3
 800315e:	46a2      	mov	sl, r4
 8003160:	eb19 0905 	adds.w	r9, r9, r5
 8003164:	eb4a 0a06 	adc.w	sl, sl, r6
 8003168:	f04f 0100 	mov.w	r1, #0
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003174:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003178:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800317c:	4689      	mov	r9, r1
 800317e:	4692      	mov	sl, r2
 8003180:	eb19 0005 	adds.w	r0, r9, r5
 8003184:	eb4a 0106 	adc.w	r1, sl, r6
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	461d      	mov	r5, r3
 800318e:	f04f 0600 	mov.w	r6, #0
 8003192:	196b      	adds	r3, r5, r5
 8003194:	eb46 0406 	adc.w	r4, r6, r6
 8003198:	461a      	mov	r2, r3
 800319a:	4623      	mov	r3, r4
 800319c:	f7fd fd7c 	bl	8000c98 <__aeabi_uldivmod>
 80031a0:	4603      	mov	r3, r0
 80031a2:	460c      	mov	r4, r1
 80031a4:	461a      	mov	r2, r3
 80031a6:	4b0c      	ldr	r3, [pc, #48]	; (80031d8 <UART_SetConfig+0x384>)
 80031a8:	fba3 1302 	umull	r1, r3, r3, r2
 80031ac:	095b      	lsrs	r3, r3, #5
 80031ae:	2164      	movs	r1, #100	; 0x64
 80031b0:	fb01 f303 	mul.w	r3, r1, r3
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	3332      	adds	r3, #50	; 0x32
 80031ba:	4a07      	ldr	r2, [pc, #28]	; (80031d8 <UART_SetConfig+0x384>)
 80031bc:	fba2 2303 	umull	r2, r3, r2, r3
 80031c0:	095b      	lsrs	r3, r3, #5
 80031c2:	f003 0207 	and.w	r2, r3, #7
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4442      	add	r2, r8
 80031cc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80031ce:	e1b2      	b.n	8003536 <UART_SetConfig+0x6e2>
 80031d0:	40011000 	.word	0x40011000
 80031d4:	40011400 	.word	0x40011400
 80031d8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4ad7      	ldr	r2, [pc, #860]	; (8003540 <UART_SetConfig+0x6ec>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d005      	beq.n	80031f2 <UART_SetConfig+0x39e>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4ad6      	ldr	r2, [pc, #856]	; (8003544 <UART_SetConfig+0x6f0>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	f040 80d1 	bne.w	8003394 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80031f2:	f7ff f9b9 	bl	8002568 <HAL_RCC_GetPCLK2Freq>
 80031f6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	469a      	mov	sl, r3
 80031fc:	f04f 0b00 	mov.w	fp, #0
 8003200:	46d0      	mov	r8, sl
 8003202:	46d9      	mov	r9, fp
 8003204:	eb18 0308 	adds.w	r3, r8, r8
 8003208:	eb49 0409 	adc.w	r4, r9, r9
 800320c:	4698      	mov	r8, r3
 800320e:	46a1      	mov	r9, r4
 8003210:	eb18 080a 	adds.w	r8, r8, sl
 8003214:	eb49 090b 	adc.w	r9, r9, fp
 8003218:	f04f 0100 	mov.w	r1, #0
 800321c:	f04f 0200 	mov.w	r2, #0
 8003220:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003224:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003228:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800322c:	4688      	mov	r8, r1
 800322e:	4691      	mov	r9, r2
 8003230:	eb1a 0508 	adds.w	r5, sl, r8
 8003234:	eb4b 0609 	adc.w	r6, fp, r9
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	4619      	mov	r1, r3
 800323e:	f04f 0200 	mov.w	r2, #0
 8003242:	f04f 0300 	mov.w	r3, #0
 8003246:	f04f 0400 	mov.w	r4, #0
 800324a:	0094      	lsls	r4, r2, #2
 800324c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003250:	008b      	lsls	r3, r1, #2
 8003252:	461a      	mov	r2, r3
 8003254:	4623      	mov	r3, r4
 8003256:	4628      	mov	r0, r5
 8003258:	4631      	mov	r1, r6
 800325a:	f7fd fd1d 	bl	8000c98 <__aeabi_uldivmod>
 800325e:	4603      	mov	r3, r0
 8003260:	460c      	mov	r4, r1
 8003262:	461a      	mov	r2, r3
 8003264:	4bb8      	ldr	r3, [pc, #736]	; (8003548 <UART_SetConfig+0x6f4>)
 8003266:	fba3 2302 	umull	r2, r3, r3, r2
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	469b      	mov	fp, r3
 8003274:	f04f 0c00 	mov.w	ip, #0
 8003278:	46d9      	mov	r9, fp
 800327a:	46e2      	mov	sl, ip
 800327c:	eb19 0309 	adds.w	r3, r9, r9
 8003280:	eb4a 040a 	adc.w	r4, sl, sl
 8003284:	4699      	mov	r9, r3
 8003286:	46a2      	mov	sl, r4
 8003288:	eb19 090b 	adds.w	r9, r9, fp
 800328c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003290:	f04f 0100 	mov.w	r1, #0
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800329c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80032a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80032a4:	4689      	mov	r9, r1
 80032a6:	4692      	mov	sl, r2
 80032a8:	eb1b 0509 	adds.w	r5, fp, r9
 80032ac:	eb4c 060a 	adc.w	r6, ip, sl
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	4619      	mov	r1, r3
 80032b6:	f04f 0200 	mov.w	r2, #0
 80032ba:	f04f 0300 	mov.w	r3, #0
 80032be:	f04f 0400 	mov.w	r4, #0
 80032c2:	0094      	lsls	r4, r2, #2
 80032c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80032c8:	008b      	lsls	r3, r1, #2
 80032ca:	461a      	mov	r2, r3
 80032cc:	4623      	mov	r3, r4
 80032ce:	4628      	mov	r0, r5
 80032d0:	4631      	mov	r1, r6
 80032d2:	f7fd fce1 	bl	8000c98 <__aeabi_uldivmod>
 80032d6:	4603      	mov	r3, r0
 80032d8:	460c      	mov	r4, r1
 80032da:	461a      	mov	r2, r3
 80032dc:	4b9a      	ldr	r3, [pc, #616]	; (8003548 <UART_SetConfig+0x6f4>)
 80032de:	fba3 1302 	umull	r1, r3, r3, r2
 80032e2:	095b      	lsrs	r3, r3, #5
 80032e4:	2164      	movs	r1, #100	; 0x64
 80032e6:	fb01 f303 	mul.w	r3, r1, r3
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	3332      	adds	r3, #50	; 0x32
 80032f0:	4a95      	ldr	r2, [pc, #596]	; (8003548 <UART_SetConfig+0x6f4>)
 80032f2:	fba2 2303 	umull	r2, r3, r2, r3
 80032f6:	095b      	lsrs	r3, r3, #5
 80032f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032fc:	4498      	add	r8, r3
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	469b      	mov	fp, r3
 8003302:	f04f 0c00 	mov.w	ip, #0
 8003306:	46d9      	mov	r9, fp
 8003308:	46e2      	mov	sl, ip
 800330a:	eb19 0309 	adds.w	r3, r9, r9
 800330e:	eb4a 040a 	adc.w	r4, sl, sl
 8003312:	4699      	mov	r9, r3
 8003314:	46a2      	mov	sl, r4
 8003316:	eb19 090b 	adds.w	r9, r9, fp
 800331a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800331e:	f04f 0100 	mov.w	r1, #0
 8003322:	f04f 0200 	mov.w	r2, #0
 8003326:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800332a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800332e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003332:	4689      	mov	r9, r1
 8003334:	4692      	mov	sl, r2
 8003336:	eb1b 0509 	adds.w	r5, fp, r9
 800333a:	eb4c 060a 	adc.w	r6, ip, sl
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	4619      	mov	r1, r3
 8003344:	f04f 0200 	mov.w	r2, #0
 8003348:	f04f 0300 	mov.w	r3, #0
 800334c:	f04f 0400 	mov.w	r4, #0
 8003350:	0094      	lsls	r4, r2, #2
 8003352:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003356:	008b      	lsls	r3, r1, #2
 8003358:	461a      	mov	r2, r3
 800335a:	4623      	mov	r3, r4
 800335c:	4628      	mov	r0, r5
 800335e:	4631      	mov	r1, r6
 8003360:	f7fd fc9a 	bl	8000c98 <__aeabi_uldivmod>
 8003364:	4603      	mov	r3, r0
 8003366:	460c      	mov	r4, r1
 8003368:	461a      	mov	r2, r3
 800336a:	4b77      	ldr	r3, [pc, #476]	; (8003548 <UART_SetConfig+0x6f4>)
 800336c:	fba3 1302 	umull	r1, r3, r3, r2
 8003370:	095b      	lsrs	r3, r3, #5
 8003372:	2164      	movs	r1, #100	; 0x64
 8003374:	fb01 f303 	mul.w	r3, r1, r3
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	011b      	lsls	r3, r3, #4
 800337c:	3332      	adds	r3, #50	; 0x32
 800337e:	4a72      	ldr	r2, [pc, #456]	; (8003548 <UART_SetConfig+0x6f4>)
 8003380:	fba2 2303 	umull	r2, r3, r2, r3
 8003384:	095b      	lsrs	r3, r3, #5
 8003386:	f003 020f 	and.w	r2, r3, #15
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4442      	add	r2, r8
 8003390:	609a      	str	r2, [r3, #8]
 8003392:	e0d0      	b.n	8003536 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003394:	f7ff f8d4 	bl	8002540 <HAL_RCC_GetPCLK1Freq>
 8003398:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	469a      	mov	sl, r3
 800339e:	f04f 0b00 	mov.w	fp, #0
 80033a2:	46d0      	mov	r8, sl
 80033a4:	46d9      	mov	r9, fp
 80033a6:	eb18 0308 	adds.w	r3, r8, r8
 80033aa:	eb49 0409 	adc.w	r4, r9, r9
 80033ae:	4698      	mov	r8, r3
 80033b0:	46a1      	mov	r9, r4
 80033b2:	eb18 080a 	adds.w	r8, r8, sl
 80033b6:	eb49 090b 	adc.w	r9, r9, fp
 80033ba:	f04f 0100 	mov.w	r1, #0
 80033be:	f04f 0200 	mov.w	r2, #0
 80033c2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80033c6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80033ca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80033ce:	4688      	mov	r8, r1
 80033d0:	4691      	mov	r9, r2
 80033d2:	eb1a 0508 	adds.w	r5, sl, r8
 80033d6:	eb4b 0609 	adc.w	r6, fp, r9
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	4619      	mov	r1, r3
 80033e0:	f04f 0200 	mov.w	r2, #0
 80033e4:	f04f 0300 	mov.w	r3, #0
 80033e8:	f04f 0400 	mov.w	r4, #0
 80033ec:	0094      	lsls	r4, r2, #2
 80033ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80033f2:	008b      	lsls	r3, r1, #2
 80033f4:	461a      	mov	r2, r3
 80033f6:	4623      	mov	r3, r4
 80033f8:	4628      	mov	r0, r5
 80033fa:	4631      	mov	r1, r6
 80033fc:	f7fd fc4c 	bl	8000c98 <__aeabi_uldivmod>
 8003400:	4603      	mov	r3, r0
 8003402:	460c      	mov	r4, r1
 8003404:	461a      	mov	r2, r3
 8003406:	4b50      	ldr	r3, [pc, #320]	; (8003548 <UART_SetConfig+0x6f4>)
 8003408:	fba3 2302 	umull	r2, r3, r3, r2
 800340c:	095b      	lsrs	r3, r3, #5
 800340e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	469b      	mov	fp, r3
 8003416:	f04f 0c00 	mov.w	ip, #0
 800341a:	46d9      	mov	r9, fp
 800341c:	46e2      	mov	sl, ip
 800341e:	eb19 0309 	adds.w	r3, r9, r9
 8003422:	eb4a 040a 	adc.w	r4, sl, sl
 8003426:	4699      	mov	r9, r3
 8003428:	46a2      	mov	sl, r4
 800342a:	eb19 090b 	adds.w	r9, r9, fp
 800342e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003432:	f04f 0100 	mov.w	r1, #0
 8003436:	f04f 0200 	mov.w	r2, #0
 800343a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800343e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003442:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003446:	4689      	mov	r9, r1
 8003448:	4692      	mov	sl, r2
 800344a:	eb1b 0509 	adds.w	r5, fp, r9
 800344e:	eb4c 060a 	adc.w	r6, ip, sl
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	4619      	mov	r1, r3
 8003458:	f04f 0200 	mov.w	r2, #0
 800345c:	f04f 0300 	mov.w	r3, #0
 8003460:	f04f 0400 	mov.w	r4, #0
 8003464:	0094      	lsls	r4, r2, #2
 8003466:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800346a:	008b      	lsls	r3, r1, #2
 800346c:	461a      	mov	r2, r3
 800346e:	4623      	mov	r3, r4
 8003470:	4628      	mov	r0, r5
 8003472:	4631      	mov	r1, r6
 8003474:	f7fd fc10 	bl	8000c98 <__aeabi_uldivmod>
 8003478:	4603      	mov	r3, r0
 800347a:	460c      	mov	r4, r1
 800347c:	461a      	mov	r2, r3
 800347e:	4b32      	ldr	r3, [pc, #200]	; (8003548 <UART_SetConfig+0x6f4>)
 8003480:	fba3 1302 	umull	r1, r3, r3, r2
 8003484:	095b      	lsrs	r3, r3, #5
 8003486:	2164      	movs	r1, #100	; 0x64
 8003488:	fb01 f303 	mul.w	r3, r1, r3
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	3332      	adds	r3, #50	; 0x32
 8003492:	4a2d      	ldr	r2, [pc, #180]	; (8003548 <UART_SetConfig+0x6f4>)
 8003494:	fba2 2303 	umull	r2, r3, r2, r3
 8003498:	095b      	lsrs	r3, r3, #5
 800349a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800349e:	4498      	add	r8, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	469b      	mov	fp, r3
 80034a4:	f04f 0c00 	mov.w	ip, #0
 80034a8:	46d9      	mov	r9, fp
 80034aa:	46e2      	mov	sl, ip
 80034ac:	eb19 0309 	adds.w	r3, r9, r9
 80034b0:	eb4a 040a 	adc.w	r4, sl, sl
 80034b4:	4699      	mov	r9, r3
 80034b6:	46a2      	mov	sl, r4
 80034b8:	eb19 090b 	adds.w	r9, r9, fp
 80034bc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80034c0:	f04f 0100 	mov.w	r1, #0
 80034c4:	f04f 0200 	mov.w	r2, #0
 80034c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80034d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80034d4:	4689      	mov	r9, r1
 80034d6:	4692      	mov	sl, r2
 80034d8:	eb1b 0509 	adds.w	r5, fp, r9
 80034dc:	eb4c 060a 	adc.w	r6, ip, sl
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	4619      	mov	r1, r3
 80034e6:	f04f 0200 	mov.w	r2, #0
 80034ea:	f04f 0300 	mov.w	r3, #0
 80034ee:	f04f 0400 	mov.w	r4, #0
 80034f2:	0094      	lsls	r4, r2, #2
 80034f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80034f8:	008b      	lsls	r3, r1, #2
 80034fa:	461a      	mov	r2, r3
 80034fc:	4623      	mov	r3, r4
 80034fe:	4628      	mov	r0, r5
 8003500:	4631      	mov	r1, r6
 8003502:	f7fd fbc9 	bl	8000c98 <__aeabi_uldivmod>
 8003506:	4603      	mov	r3, r0
 8003508:	460c      	mov	r4, r1
 800350a:	461a      	mov	r2, r3
 800350c:	4b0e      	ldr	r3, [pc, #56]	; (8003548 <UART_SetConfig+0x6f4>)
 800350e:	fba3 1302 	umull	r1, r3, r3, r2
 8003512:	095b      	lsrs	r3, r3, #5
 8003514:	2164      	movs	r1, #100	; 0x64
 8003516:	fb01 f303 	mul.w	r3, r1, r3
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	3332      	adds	r3, #50	; 0x32
 8003520:	4a09      	ldr	r2, [pc, #36]	; (8003548 <UART_SetConfig+0x6f4>)
 8003522:	fba2 2303 	umull	r2, r3, r2, r3
 8003526:	095b      	lsrs	r3, r3, #5
 8003528:	f003 020f 	and.w	r2, r3, #15
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4442      	add	r2, r8
 8003532:	609a      	str	r2, [r3, #8]
}
 8003534:	e7ff      	b.n	8003536 <UART_SetConfig+0x6e2>
 8003536:	bf00      	nop
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003540:	40011000 	.word	0x40011000
 8003544:	40011400 	.word	0x40011400
 8003548:	51eb851f 	.word	0x51eb851f
 800354c:	00000000 	.word	0x00000000

08003550 <parse>:
bool paused;
uint8_t c;



bool parse(char *nmea) {
 8003550:	b590      	push	{r4, r7, lr}
 8003552:	b08b      	sub	sp, #44	; 0x2c
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  // do checksum check

  // first look if we even have one
  if (nmea[strlen(nmea)-4] == '*') {
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7fc fe41 	bl	80001e0 <strlen>
 800355e:	4603      	mov	r3, r0
 8003560:	3b04      	subs	r3, #4
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	4413      	add	r3, r2
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b2a      	cmp	r3, #42	; 0x2a
 800356a:	d139      	bne.n	80035e0 <parse+0x90>
    uint16_t sum = parseHex(nmea[strlen(nmea)-3]) * 16;
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f7fc fe37 	bl	80001e0 <strlen>
 8003572:	4603      	mov	r3, r0
 8003574:	3b03      	subs	r3, #3
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	4413      	add	r3, r2
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f000 fc41 	bl	8003e04 <parseHex>
 8003582:	4603      	mov	r3, r0
 8003584:	b29b      	uxth	r3, r3
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	84fb      	strh	r3, [r7, #38]	; 0x26
    sum += parseHex(nmea[strlen(nmea)-2]);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7fc fe28 	bl	80001e0 <strlen>
 8003590:	4603      	mov	r3, r0
 8003592:	3b02      	subs	r3, #2
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	4413      	add	r3, r2
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f000 fc32 	bl	8003e04 <parseHex>
 80035a0:	4603      	mov	r3, r0
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80035a6:	4413      	add	r3, r2
 80035a8:	84fb      	strh	r3, [r7, #38]	; 0x26
    
    // check checksum 
    for (uint8_t i=1; i < (strlen(nmea)-4); i++) {
 80035aa:	2301      	movs	r3, #1
 80035ac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80035b0:	e00d      	b.n	80035ce <parse+0x7e>
      sum ^= nmea[i];
 80035b2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	4413      	add	r3, r2
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	b29a      	uxth	r2, r3
 80035be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80035c0:	4053      	eors	r3, r2
 80035c2:	84fb      	strh	r3, [r7, #38]	; 0x26
    for (uint8_t i=1; i < (strlen(nmea)-4); i++) {
 80035c4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80035c8:	3301      	adds	r3, #1
 80035ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80035ce:	f897 4025 	ldrb.w	r4, [r7, #37]	; 0x25
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7fc fe04 	bl	80001e0 <strlen>
 80035d8:	4603      	mov	r3, r0
 80035da:	3b04      	subs	r3, #4
 80035dc:	429c      	cmp	r4, r3
 80035de:	d3e8      	bcc.n	80035b2 <parse+0x62>
      //return false;
    }
  }

  // look for a few common sentences
  if (strstr(nmea, "$GPGGA")) {
 80035e0:	4997      	ldr	r1, [pc, #604]	; (8003840 <parse+0x2f0>)
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f002 f91c 	bl	8005820 <strstr>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f000 814a 	beq.w	8003884 <parse+0x334>
    // found GGA
    char *p = nmea;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	613b      	str	r3, [r7, #16]
    // get time
    p = strchr(p, ',')+1;
 80035f4:	212c      	movs	r1, #44	; 0x2c
 80035f6:	6938      	ldr	r0, [r7, #16]
 80035f8:	f002 f8de 	bl	80057b8 <strchr>
 80035fc:	4603      	mov	r3, r0
 80035fe:	3301      	adds	r3, #1
 8003600:	613b      	str	r3, [r7, #16]
    float timef = atof(p);
 8003602:	6938      	ldr	r0, [r7, #16]
 8003604:	f001 ff54 	bl	80054b0 <atof>
 8003608:	ec54 3b10 	vmov	r3, r4, d0
 800360c:	4618      	mov	r0, r3
 800360e:	4621      	mov	r1, r4
 8003610:	f7fd faf2 	bl	8000bf8 <__aeabi_d2f>
 8003614:	4603      	mov	r3, r0
 8003616:	60fb      	str	r3, [r7, #12]
    uint32_t time = timef;
 8003618:	edd7 7a03 	vldr	s15, [r7, #12]
 800361c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003620:	ee17 3a90 	vmov	r3, s15
 8003624:	60bb      	str	r3, [r7, #8]
    hour = time / 10000;
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	4a86      	ldr	r2, [pc, #536]	; (8003844 <parse+0x2f4>)
 800362a:	fba2 2303 	umull	r2, r3, r2, r3
 800362e:	0b5b      	lsrs	r3, r3, #13
 8003630:	b2da      	uxtb	r2, r3
 8003632:	4b85      	ldr	r3, [pc, #532]	; (8003848 <parse+0x2f8>)
 8003634:	701a      	strb	r2, [r3, #0]
    minute = (time % 10000) / 100;
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	4b82      	ldr	r3, [pc, #520]	; (8003844 <parse+0x2f4>)
 800363a:	fba3 1302 	umull	r1, r3, r3, r2
 800363e:	0b5b      	lsrs	r3, r3, #13
 8003640:	f242 7110 	movw	r1, #10000	; 0x2710
 8003644:	fb01 f303 	mul.w	r3, r1, r3
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	4a80      	ldr	r2, [pc, #512]	; (800384c <parse+0x2fc>)
 800364c:	fba2 2303 	umull	r2, r3, r2, r3
 8003650:	095b      	lsrs	r3, r3, #5
 8003652:	b2da      	uxtb	r2, r3
 8003654:	4b7e      	ldr	r3, [pc, #504]	; (8003850 <parse+0x300>)
 8003656:	701a      	strb	r2, [r3, #0]
    seconds = (time % 100);
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	4b7c      	ldr	r3, [pc, #496]	; (800384c <parse+0x2fc>)
 800365c:	fba3 1302 	umull	r1, r3, r3, r2
 8003660:	095b      	lsrs	r3, r3, #5
 8003662:	2164      	movs	r1, #100	; 0x64
 8003664:	fb01 f303 	mul.w	r3, r1, r3
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	b2da      	uxtb	r2, r3
 800366c:	4b79      	ldr	r3, [pc, #484]	; (8003854 <parse+0x304>)
 800366e:	701a      	strb	r2, [r3, #0]

    milliseconds = fmod((double) timef, 1.0) * 1000;
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f7fc ff71 	bl	8000558 <__aeabi_f2d>
 8003676:	4603      	mov	r3, r0
 8003678:	460c      	mov	r4, r1
 800367a:	ed9f 1b6f 	vldr	d1, [pc, #444]	; 8003838 <parse+0x2e8>
 800367e:	ec44 3b10 	vmov	d0, r3, r4
 8003682:	f004 fdb7 	bl	80081f4 <fmod>
 8003686:	ec51 0b10 	vmov	r0, r1, d0
 800368a:	f04f 0200 	mov.w	r2, #0
 800368e:	4b72      	ldr	r3, [pc, #456]	; (8003858 <parse+0x308>)
 8003690:	f7fc ffba 	bl	8000608 <__aeabi_dmul>
 8003694:	4603      	mov	r3, r0
 8003696:	460c      	mov	r4, r1
 8003698:	4618      	mov	r0, r3
 800369a:	4621      	mov	r1, r4
 800369c:	f7fd fa8c 	bl	8000bb8 <__aeabi_d2uiz>
 80036a0:	4603      	mov	r3, r0
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	4b6d      	ldr	r3, [pc, #436]	; (800385c <parse+0x30c>)
 80036a6:	801a      	strh	r2, [r3, #0]

    // parse out latitude
    p = strchr(p, ',')+1;
 80036a8:	212c      	movs	r1, #44	; 0x2c
 80036aa:	6938      	ldr	r0, [r7, #16]
 80036ac:	f002 f884 	bl	80057b8 <strchr>
 80036b0:	4603      	mov	r3, r0
 80036b2:	3301      	adds	r3, #1
 80036b4:	613b      	str	r3, [r7, #16]
    latitude = atof(p);
 80036b6:	6938      	ldr	r0, [r7, #16]
 80036b8:	f001 fefa 	bl	80054b0 <atof>
 80036bc:	ec54 3b10 	vmov	r3, r4, d0
 80036c0:	4618      	mov	r0, r3
 80036c2:	4621      	mov	r1, r4
 80036c4:	f7fd fa98 	bl	8000bf8 <__aeabi_d2f>
 80036c8:	4602      	mov	r2, r0
 80036ca:	4b65      	ldr	r3, [pc, #404]	; (8003860 <parse+0x310>)
 80036cc:	601a      	str	r2, [r3, #0]

    p = strchr(p, ',')+1;
 80036ce:	212c      	movs	r1, #44	; 0x2c
 80036d0:	6938      	ldr	r0, [r7, #16]
 80036d2:	f002 f871 	bl	80057b8 <strchr>
 80036d6:	4603      	mov	r3, r0
 80036d8:	3301      	adds	r3, #1
 80036da:	613b      	str	r3, [r7, #16]
    if (p[0] == 'N') lat = 'N';
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	2b4e      	cmp	r3, #78	; 0x4e
 80036e2:	d103      	bne.n	80036ec <parse+0x19c>
 80036e4:	4b5f      	ldr	r3, [pc, #380]	; (8003864 <parse+0x314>)
 80036e6:	224e      	movs	r2, #78	; 0x4e
 80036e8:	701a      	strb	r2, [r3, #0]
 80036ea:	e011      	b.n	8003710 <parse+0x1c0>
    else if (p[0] == 'S') lat = 'S';
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	2b53      	cmp	r3, #83	; 0x53
 80036f2:	d103      	bne.n	80036fc <parse+0x1ac>
 80036f4:	4b5b      	ldr	r3, [pc, #364]	; (8003864 <parse+0x314>)
 80036f6:	2253      	movs	r2, #83	; 0x53
 80036f8:	701a      	strb	r2, [r3, #0]
 80036fa:	e009      	b.n	8003710 <parse+0x1c0>
    else if (p[0] == ',') lat = 0;
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	2b2c      	cmp	r3, #44	; 0x2c
 8003702:	d103      	bne.n	800370c <parse+0x1bc>
 8003704:	4b57      	ldr	r3, [pc, #348]	; (8003864 <parse+0x314>)
 8003706:	2200      	movs	r2, #0
 8003708:	701a      	strb	r2, [r3, #0]
 800370a:	e001      	b.n	8003710 <parse+0x1c0>
    else return false;
 800370c:	2300      	movs	r3, #0
 800370e:	e1fe      	b.n	8003b0e <parse+0x5be>

    // parse out longitude
    p = strchr(p, ',')+1;
 8003710:	212c      	movs	r1, #44	; 0x2c
 8003712:	6938      	ldr	r0, [r7, #16]
 8003714:	f002 f850 	bl	80057b8 <strchr>
 8003718:	4603      	mov	r3, r0
 800371a:	3301      	adds	r3, #1
 800371c:	613b      	str	r3, [r7, #16]
    longitude = atof(p);
 800371e:	6938      	ldr	r0, [r7, #16]
 8003720:	f001 fec6 	bl	80054b0 <atof>
 8003724:	ec54 3b10 	vmov	r3, r4, d0
 8003728:	4618      	mov	r0, r3
 800372a:	4621      	mov	r1, r4
 800372c:	f7fd fa64 	bl	8000bf8 <__aeabi_d2f>
 8003730:	4602      	mov	r2, r0
 8003732:	4b4d      	ldr	r3, [pc, #308]	; (8003868 <parse+0x318>)
 8003734:	601a      	str	r2, [r3, #0]

    p = strchr(p, ',')+1;
 8003736:	212c      	movs	r1, #44	; 0x2c
 8003738:	6938      	ldr	r0, [r7, #16]
 800373a:	f002 f83d 	bl	80057b8 <strchr>
 800373e:	4603      	mov	r3, r0
 8003740:	3301      	adds	r3, #1
 8003742:	613b      	str	r3, [r7, #16]
    if (p[0] == 'W') lon = 'W';
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	2b57      	cmp	r3, #87	; 0x57
 800374a:	d103      	bne.n	8003754 <parse+0x204>
 800374c:	4b47      	ldr	r3, [pc, #284]	; (800386c <parse+0x31c>)
 800374e:	2257      	movs	r2, #87	; 0x57
 8003750:	701a      	strb	r2, [r3, #0]
 8003752:	e011      	b.n	8003778 <parse+0x228>
    else if (p[0] == 'E') lon = 'E';
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	2b45      	cmp	r3, #69	; 0x45
 800375a:	d103      	bne.n	8003764 <parse+0x214>
 800375c:	4b43      	ldr	r3, [pc, #268]	; (800386c <parse+0x31c>)
 800375e:	2245      	movs	r2, #69	; 0x45
 8003760:	701a      	strb	r2, [r3, #0]
 8003762:	e009      	b.n	8003778 <parse+0x228>
    else if (p[0] == ',') lon = 0;
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	2b2c      	cmp	r3, #44	; 0x2c
 800376a:	d103      	bne.n	8003774 <parse+0x224>
 800376c:	4b3f      	ldr	r3, [pc, #252]	; (800386c <parse+0x31c>)
 800376e:	2200      	movs	r2, #0
 8003770:	701a      	strb	r2, [r3, #0]
 8003772:	e001      	b.n	8003778 <parse+0x228>
    else return false;
 8003774:	2300      	movs	r3, #0
 8003776:	e1ca      	b.n	8003b0e <parse+0x5be>

    p = strchr(p, ',')+1;
 8003778:	212c      	movs	r1, #44	; 0x2c
 800377a:	6938      	ldr	r0, [r7, #16]
 800377c:	f002 f81c 	bl	80057b8 <strchr>
 8003780:	4603      	mov	r3, r0
 8003782:	3301      	adds	r3, #1
 8003784:	613b      	str	r3, [r7, #16]
    fixquality = atoi(p);
 8003786:	6938      	ldr	r0, [r7, #16]
 8003788:	f001 fe95 	bl	80054b6 <atoi>
 800378c:	4603      	mov	r3, r0
 800378e:	b2da      	uxtb	r2, r3
 8003790:	4b37      	ldr	r3, [pc, #220]	; (8003870 <parse+0x320>)
 8003792:	701a      	strb	r2, [r3, #0]

    p = strchr(p, ',')+1;
 8003794:	212c      	movs	r1, #44	; 0x2c
 8003796:	6938      	ldr	r0, [r7, #16]
 8003798:	f002 f80e 	bl	80057b8 <strchr>
 800379c:	4603      	mov	r3, r0
 800379e:	3301      	adds	r3, #1
 80037a0:	613b      	str	r3, [r7, #16]
    satellites = atoi(p);
 80037a2:	6938      	ldr	r0, [r7, #16]
 80037a4:	f001 fe87 	bl	80054b6 <atoi>
 80037a8:	4603      	mov	r3, r0
 80037aa:	b2da      	uxtb	r2, r3
 80037ac:	4b31      	ldr	r3, [pc, #196]	; (8003874 <parse+0x324>)
 80037ae:	701a      	strb	r2, [r3, #0]

    p = strchr(p, ',')+1;
 80037b0:	212c      	movs	r1, #44	; 0x2c
 80037b2:	6938      	ldr	r0, [r7, #16]
 80037b4:	f002 f800 	bl	80057b8 <strchr>
 80037b8:	4603      	mov	r3, r0
 80037ba:	3301      	adds	r3, #1
 80037bc:	613b      	str	r3, [r7, #16]
    HDOP = atof(p);
 80037be:	6938      	ldr	r0, [r7, #16]
 80037c0:	f001 fe76 	bl	80054b0 <atof>
 80037c4:	ec54 3b10 	vmov	r3, r4, d0
 80037c8:	4618      	mov	r0, r3
 80037ca:	4621      	mov	r1, r4
 80037cc:	f7fd fa14 	bl	8000bf8 <__aeabi_d2f>
 80037d0:	4602      	mov	r2, r0
 80037d2:	4b29      	ldr	r3, [pc, #164]	; (8003878 <parse+0x328>)
 80037d4:	601a      	str	r2, [r3, #0]

    p = strchr(p, ',')+1;
 80037d6:	212c      	movs	r1, #44	; 0x2c
 80037d8:	6938      	ldr	r0, [r7, #16]
 80037da:	f001 ffed 	bl	80057b8 <strchr>
 80037de:	4603      	mov	r3, r0
 80037e0:	3301      	adds	r3, #1
 80037e2:	613b      	str	r3, [r7, #16]
    altitude = atof(p);
 80037e4:	6938      	ldr	r0, [r7, #16]
 80037e6:	f001 fe63 	bl	80054b0 <atof>
 80037ea:	ec54 3b10 	vmov	r3, r4, d0
 80037ee:	4618      	mov	r0, r3
 80037f0:	4621      	mov	r1, r4
 80037f2:	f7fd fa01 	bl	8000bf8 <__aeabi_d2f>
 80037f6:	4602      	mov	r2, r0
 80037f8:	4b20      	ldr	r3, [pc, #128]	; (800387c <parse+0x32c>)
 80037fa:	601a      	str	r2, [r3, #0]
    p = strchr(p, ',')+1;
 80037fc:	212c      	movs	r1, #44	; 0x2c
 80037fe:	6938      	ldr	r0, [r7, #16]
 8003800:	f001 ffda 	bl	80057b8 <strchr>
 8003804:	4603      	mov	r3, r0
 8003806:	3301      	adds	r3, #1
 8003808:	613b      	str	r3, [r7, #16]
    p = strchr(p, ',')+1;
 800380a:	212c      	movs	r1, #44	; 0x2c
 800380c:	6938      	ldr	r0, [r7, #16]
 800380e:	f001 ffd3 	bl	80057b8 <strchr>
 8003812:	4603      	mov	r3, r0
 8003814:	3301      	adds	r3, #1
 8003816:	613b      	str	r3, [r7, #16]
    geoidheight = atof(p);
 8003818:	6938      	ldr	r0, [r7, #16]
 800381a:	f001 fe49 	bl	80054b0 <atof>
 800381e:	ec54 3b10 	vmov	r3, r4, d0
 8003822:	4618      	mov	r0, r3
 8003824:	4621      	mov	r1, r4
 8003826:	f7fd f9e7 	bl	8000bf8 <__aeabi_d2f>
 800382a:	4602      	mov	r2, r0
 800382c:	4b14      	ldr	r3, [pc, #80]	; (8003880 <parse+0x330>)
 800382e:	601a      	str	r2, [r3, #0]
    return true;
 8003830:	2301      	movs	r3, #1
 8003832:	e16c      	b.n	8003b0e <parse+0x5be>
 8003834:	f3af 8000 	nop.w
 8003838:	00000000 	.word	0x00000000
 800383c:	3ff00000 	.word	0x3ff00000
 8003840:	08008534 	.word	0x08008534
 8003844:	d1b71759 	.word	0xd1b71759
 8003848:	20004529 	.word	0x20004529
 800384c:	51eb851f 	.word	0x51eb851f
 8003850:	20004522 	.word	0x20004522
 8003854:	200045b9 	.word	0x200045b9
 8003858:	408f4000 	.word	0x408f4000
 800385c:	20004526 	.word	0x20004526
 8003860:	200045c0 	.word	0x200045c0
 8003864:	2000464c 	.word	0x2000464c
 8003868:	200045ac 	.word	0x200045ac
 800386c:	20004530 	.word	0x20004530
 8003870:	20004518 	.word	0x20004518
 8003874:	200045b0 	.word	0x200045b0
 8003878:	20004648 	.word	0x20004648
 800387c:	200045b4 	.word	0x200045b4
 8003880:	2000450c 	.word	0x2000450c
  }
  if (strstr(nmea, "$GPRMC")) {
 8003884:	49a6      	ldr	r1, [pc, #664]	; (8003b20 <parse+0x5d0>)
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f001 ffca 	bl	8005820 <strstr>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 813c 	beq.w	8003b0c <parse+0x5bc>
   // found RMC
    char *p = nmea;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	623b      	str	r3, [r7, #32]

    // get time
    p = strchr(p, ',')+1;
 8003898:	212c      	movs	r1, #44	; 0x2c
 800389a:	6a38      	ldr	r0, [r7, #32]
 800389c:	f001 ff8c 	bl	80057b8 <strchr>
 80038a0:	4603      	mov	r3, r0
 80038a2:	3301      	adds	r3, #1
 80038a4:	623b      	str	r3, [r7, #32]
    float timef = atof(p);
 80038a6:	6a38      	ldr	r0, [r7, #32]
 80038a8:	f001 fe02 	bl	80054b0 <atof>
 80038ac:	ec54 3b10 	vmov	r3, r4, d0
 80038b0:	4618      	mov	r0, r3
 80038b2:	4621      	mov	r1, r4
 80038b4:	f7fd f9a0 	bl	8000bf8 <__aeabi_d2f>
 80038b8:	4603      	mov	r3, r0
 80038ba:	61fb      	str	r3, [r7, #28]
    uint32_t time = timef;
 80038bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80038c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038c4:	ee17 3a90 	vmov	r3, s15
 80038c8:	61bb      	str	r3, [r7, #24]
    hour = time / 10000;
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	4a95      	ldr	r2, [pc, #596]	; (8003b24 <parse+0x5d4>)
 80038ce:	fba2 2303 	umull	r2, r3, r2, r3
 80038d2:	0b5b      	lsrs	r3, r3, #13
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	4b94      	ldr	r3, [pc, #592]	; (8003b28 <parse+0x5d8>)
 80038d8:	701a      	strb	r2, [r3, #0]
    minute = (time % 10000) / 100;
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	4b91      	ldr	r3, [pc, #580]	; (8003b24 <parse+0x5d4>)
 80038de:	fba3 1302 	umull	r1, r3, r3, r2
 80038e2:	0b5b      	lsrs	r3, r3, #13
 80038e4:	f242 7110 	movw	r1, #10000	; 0x2710
 80038e8:	fb01 f303 	mul.w	r3, r1, r3
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	4a8f      	ldr	r2, [pc, #572]	; (8003b2c <parse+0x5dc>)
 80038f0:	fba2 2303 	umull	r2, r3, r2, r3
 80038f4:	095b      	lsrs	r3, r3, #5
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	4b8d      	ldr	r3, [pc, #564]	; (8003b30 <parse+0x5e0>)
 80038fa:	701a      	strb	r2, [r3, #0]
    seconds = (time % 100);
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	4b8b      	ldr	r3, [pc, #556]	; (8003b2c <parse+0x5dc>)
 8003900:	fba3 1302 	umull	r1, r3, r3, r2
 8003904:	095b      	lsrs	r3, r3, #5
 8003906:	2164      	movs	r1, #100	; 0x64
 8003908:	fb01 f303 	mul.w	r3, r1, r3
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	b2da      	uxtb	r2, r3
 8003910:	4b88      	ldr	r3, [pc, #544]	; (8003b34 <parse+0x5e4>)
 8003912:	701a      	strb	r2, [r3, #0]

    milliseconds = fmod((double) timef, 1.0) * 1000;
 8003914:	69f8      	ldr	r0, [r7, #28]
 8003916:	f7fc fe1f 	bl	8000558 <__aeabi_f2d>
 800391a:	4603      	mov	r3, r0
 800391c:	460c      	mov	r4, r1
 800391e:	ed9f 1b7e 	vldr	d1, [pc, #504]	; 8003b18 <parse+0x5c8>
 8003922:	ec44 3b10 	vmov	d0, r3, r4
 8003926:	f004 fc65 	bl	80081f4 <fmod>
 800392a:	ec51 0b10 	vmov	r0, r1, d0
 800392e:	f04f 0200 	mov.w	r2, #0
 8003932:	4b81      	ldr	r3, [pc, #516]	; (8003b38 <parse+0x5e8>)
 8003934:	f7fc fe68 	bl	8000608 <__aeabi_dmul>
 8003938:	4603      	mov	r3, r0
 800393a:	460c      	mov	r4, r1
 800393c:	4618      	mov	r0, r3
 800393e:	4621      	mov	r1, r4
 8003940:	f7fd f93a 	bl	8000bb8 <__aeabi_d2uiz>
 8003944:	4603      	mov	r3, r0
 8003946:	b29a      	uxth	r2, r3
 8003948:	4b7c      	ldr	r3, [pc, #496]	; (8003b3c <parse+0x5ec>)
 800394a:	801a      	strh	r2, [r3, #0]

    p = strchr(p, ',')+1;
 800394c:	212c      	movs	r1, #44	; 0x2c
 800394e:	6a38      	ldr	r0, [r7, #32]
 8003950:	f001 ff32 	bl	80057b8 <strchr>
 8003954:	4603      	mov	r3, r0
 8003956:	3301      	adds	r3, #1
 8003958:	623b      	str	r3, [r7, #32]
    // Serial.println(p);
    if (p[0] == 'A') 
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	2b41      	cmp	r3, #65	; 0x41
 8003960:	d103      	bne.n	800396a <parse+0x41a>
      fix = true;
 8003962:	4b77      	ldr	r3, [pc, #476]	; (8003b40 <parse+0x5f0>)
 8003964:	2201      	movs	r2, #1
 8003966:	701a      	strb	r2, [r3, #0]
 8003968:	e009      	b.n	800397e <parse+0x42e>
    else if (p[0] == 'V')
 800396a:	6a3b      	ldr	r3, [r7, #32]
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2b56      	cmp	r3, #86	; 0x56
 8003970:	d103      	bne.n	800397a <parse+0x42a>
      fix = false;
 8003972:	4b73      	ldr	r3, [pc, #460]	; (8003b40 <parse+0x5f0>)
 8003974:	2200      	movs	r2, #0
 8003976:	701a      	strb	r2, [r3, #0]
 8003978:	e001      	b.n	800397e <parse+0x42e>
    else
      return false;
 800397a:	2300      	movs	r3, #0
 800397c:	e0c7      	b.n	8003b0e <parse+0x5be>

    // parse out latitude
    p = strchr(p, ',')+1;
 800397e:	212c      	movs	r1, #44	; 0x2c
 8003980:	6a38      	ldr	r0, [r7, #32]
 8003982:	f001 ff19 	bl	80057b8 <strchr>
 8003986:	4603      	mov	r3, r0
 8003988:	3301      	adds	r3, #1
 800398a:	623b      	str	r3, [r7, #32]
    latitude = atof(p);
 800398c:	6a38      	ldr	r0, [r7, #32]
 800398e:	f001 fd8f 	bl	80054b0 <atof>
 8003992:	ec54 3b10 	vmov	r3, r4, d0
 8003996:	4618      	mov	r0, r3
 8003998:	4621      	mov	r1, r4
 800399a:	f7fd f92d 	bl	8000bf8 <__aeabi_d2f>
 800399e:	4602      	mov	r2, r0
 80039a0:	4b68      	ldr	r3, [pc, #416]	; (8003b44 <parse+0x5f4>)
 80039a2:	601a      	str	r2, [r3, #0]

    p = strchr(p, ',')+1;
 80039a4:	212c      	movs	r1, #44	; 0x2c
 80039a6:	6a38      	ldr	r0, [r7, #32]
 80039a8:	f001 ff06 	bl	80057b8 <strchr>
 80039ac:	4603      	mov	r3, r0
 80039ae:	3301      	adds	r3, #1
 80039b0:	623b      	str	r3, [r7, #32]
    if (p[0] == 'N') lat = 'N';
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	2b4e      	cmp	r3, #78	; 0x4e
 80039b8:	d103      	bne.n	80039c2 <parse+0x472>
 80039ba:	4b63      	ldr	r3, [pc, #396]	; (8003b48 <parse+0x5f8>)
 80039bc:	224e      	movs	r2, #78	; 0x4e
 80039be:	701a      	strb	r2, [r3, #0]
 80039c0:	e011      	b.n	80039e6 <parse+0x496>
    else if (p[0] == 'S') lat = 'S';
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	2b53      	cmp	r3, #83	; 0x53
 80039c8:	d103      	bne.n	80039d2 <parse+0x482>
 80039ca:	4b5f      	ldr	r3, [pc, #380]	; (8003b48 <parse+0x5f8>)
 80039cc:	2253      	movs	r2, #83	; 0x53
 80039ce:	701a      	strb	r2, [r3, #0]
 80039d0:	e009      	b.n	80039e6 <parse+0x496>
    else if (p[0] == ',') lat = 0;
 80039d2:	6a3b      	ldr	r3, [r7, #32]
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	2b2c      	cmp	r3, #44	; 0x2c
 80039d8:	d103      	bne.n	80039e2 <parse+0x492>
 80039da:	4b5b      	ldr	r3, [pc, #364]	; (8003b48 <parse+0x5f8>)
 80039dc:	2200      	movs	r2, #0
 80039de:	701a      	strb	r2, [r3, #0]
 80039e0:	e001      	b.n	80039e6 <parse+0x496>
    else return false;
 80039e2:	2300      	movs	r3, #0
 80039e4:	e093      	b.n	8003b0e <parse+0x5be>

    // parse out longitude
    p = strchr(p, ',')+1;
 80039e6:	212c      	movs	r1, #44	; 0x2c
 80039e8:	6a38      	ldr	r0, [r7, #32]
 80039ea:	f001 fee5 	bl	80057b8 <strchr>
 80039ee:	4603      	mov	r3, r0
 80039f0:	3301      	adds	r3, #1
 80039f2:	623b      	str	r3, [r7, #32]
    longitude = atof(p);
 80039f4:	6a38      	ldr	r0, [r7, #32]
 80039f6:	f001 fd5b 	bl	80054b0 <atof>
 80039fa:	ec54 3b10 	vmov	r3, r4, d0
 80039fe:	4618      	mov	r0, r3
 8003a00:	4621      	mov	r1, r4
 8003a02:	f7fd f8f9 	bl	8000bf8 <__aeabi_d2f>
 8003a06:	4602      	mov	r2, r0
 8003a08:	4b50      	ldr	r3, [pc, #320]	; (8003b4c <parse+0x5fc>)
 8003a0a:	601a      	str	r2, [r3, #0]

    p = strchr(p, ',')+1;
 8003a0c:	212c      	movs	r1, #44	; 0x2c
 8003a0e:	6a38      	ldr	r0, [r7, #32]
 8003a10:	f001 fed2 	bl	80057b8 <strchr>
 8003a14:	4603      	mov	r3, r0
 8003a16:	3301      	adds	r3, #1
 8003a18:	623b      	str	r3, [r7, #32]
    if (p[0] == 'W') lon = 'W';
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	2b57      	cmp	r3, #87	; 0x57
 8003a20:	d103      	bne.n	8003a2a <parse+0x4da>
 8003a22:	4b4b      	ldr	r3, [pc, #300]	; (8003b50 <parse+0x600>)
 8003a24:	2257      	movs	r2, #87	; 0x57
 8003a26:	701a      	strb	r2, [r3, #0]
 8003a28:	e011      	b.n	8003a4e <parse+0x4fe>
    else if (p[0] == 'E') lon = 'E';
 8003a2a:	6a3b      	ldr	r3, [r7, #32]
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b45      	cmp	r3, #69	; 0x45
 8003a30:	d103      	bne.n	8003a3a <parse+0x4ea>
 8003a32:	4b47      	ldr	r3, [pc, #284]	; (8003b50 <parse+0x600>)
 8003a34:	2245      	movs	r2, #69	; 0x45
 8003a36:	701a      	strb	r2, [r3, #0]
 8003a38:	e009      	b.n	8003a4e <parse+0x4fe>
    else if (p[0] == ',') lon = 0;
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	2b2c      	cmp	r3, #44	; 0x2c
 8003a40:	d103      	bne.n	8003a4a <parse+0x4fa>
 8003a42:	4b43      	ldr	r3, [pc, #268]	; (8003b50 <parse+0x600>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	701a      	strb	r2, [r3, #0]
 8003a48:	e001      	b.n	8003a4e <parse+0x4fe>
    else return false;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	e05f      	b.n	8003b0e <parse+0x5be>

    // speed
    p = strchr(p, ',')+1;
 8003a4e:	212c      	movs	r1, #44	; 0x2c
 8003a50:	6a38      	ldr	r0, [r7, #32]
 8003a52:	f001 feb1 	bl	80057b8 <strchr>
 8003a56:	4603      	mov	r3, r0
 8003a58:	3301      	adds	r3, #1
 8003a5a:	623b      	str	r3, [r7, #32]
    speed = atof(p);
 8003a5c:	6a38      	ldr	r0, [r7, #32]
 8003a5e:	f001 fd27 	bl	80054b0 <atof>
 8003a62:	ec54 3b10 	vmov	r3, r4, d0
 8003a66:	4618      	mov	r0, r3
 8003a68:	4621      	mov	r1, r4
 8003a6a:	f7fd f8c5 	bl	8000bf8 <__aeabi_d2f>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	4b38      	ldr	r3, [pc, #224]	; (8003b54 <parse+0x604>)
 8003a72:	601a      	str	r2, [r3, #0]

    // angle
    p = strchr(p, ',')+1;
 8003a74:	212c      	movs	r1, #44	; 0x2c
 8003a76:	6a38      	ldr	r0, [r7, #32]
 8003a78:	f001 fe9e 	bl	80057b8 <strchr>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	3301      	adds	r3, #1
 8003a80:	623b      	str	r3, [r7, #32]
    angle = atof(p);
 8003a82:	6a38      	ldr	r0, [r7, #32]
 8003a84:	f001 fd14 	bl	80054b0 <atof>
 8003a88:	ec54 3b10 	vmov	r3, r4, d0
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	4621      	mov	r1, r4
 8003a90:	f7fd f8b2 	bl	8000bf8 <__aeabi_d2f>
 8003a94:	4602      	mov	r2, r0
 8003a96:	4b30      	ldr	r3, [pc, #192]	; (8003b58 <parse+0x608>)
 8003a98:	601a      	str	r2, [r3, #0]

    p = strchr(p, ',')+1;
 8003a9a:	212c      	movs	r1, #44	; 0x2c
 8003a9c:	6a38      	ldr	r0, [r7, #32]
 8003a9e:	f001 fe8b 	bl	80057b8 <strchr>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	623b      	str	r3, [r7, #32]
    uint32_t fulldate = atof(p);
 8003aa8:	6a38      	ldr	r0, [r7, #32]
 8003aaa:	f001 fd01 	bl	80054b0 <atof>
 8003aae:	ec54 3b10 	vmov	r3, r4, d0
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	4621      	mov	r1, r4
 8003ab6:	f7fd f87f 	bl	8000bb8 <__aeabi_d2uiz>
 8003aba:	4603      	mov	r3, r0
 8003abc:	617b      	str	r3, [r7, #20]
    day = fulldate / 10000;
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	4a18      	ldr	r2, [pc, #96]	; (8003b24 <parse+0x5d4>)
 8003ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac6:	0b5b      	lsrs	r3, r3, #13
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	4b24      	ldr	r3, [pc, #144]	; (8003b5c <parse+0x60c>)
 8003acc:	701a      	strb	r2, [r3, #0]
    month = (fulldate % 10000) / 100;
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	4b14      	ldr	r3, [pc, #80]	; (8003b24 <parse+0x5d4>)
 8003ad2:	fba3 1302 	umull	r1, r3, r3, r2
 8003ad6:	0b5b      	lsrs	r3, r3, #13
 8003ad8:	f242 7110 	movw	r1, #10000	; 0x2710
 8003adc:	fb01 f303 	mul.w	r3, r1, r3
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	4a12      	ldr	r2, [pc, #72]	; (8003b2c <parse+0x5dc>)
 8003ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae8:	095b      	lsrs	r3, r3, #5
 8003aea:	b2da      	uxtb	r2, r3
 8003aec:	4b1c      	ldr	r3, [pc, #112]	; (8003b60 <parse+0x610>)
 8003aee:	701a      	strb	r2, [r3, #0]
    year = (fulldate % 100);
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	4b0e      	ldr	r3, [pc, #56]	; (8003b2c <parse+0x5dc>)
 8003af4:	fba3 1302 	umull	r1, r3, r3, r2
 8003af8:	095b      	lsrs	r3, r3, #5
 8003afa:	2164      	movs	r1, #100	; 0x64
 8003afc:	fb01 f303 	mul.w	r3, r1, r3
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	b2da      	uxtb	r2, r3
 8003b04:	4b17      	ldr	r3, [pc, #92]	; (8003b64 <parse+0x614>)
 8003b06:	701a      	strb	r2, [r3, #0]

    // we dont parse the remaining, yet!
    return true;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e000      	b.n	8003b0e <parse+0x5be>
  }

  return false;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	372c      	adds	r7, #44	; 0x2c
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd90      	pop	{r4, r7, pc}
 8003b16:	bf00      	nop
 8003b18:	00000000 	.word	0x00000000
 8003b1c:	3ff00000 	.word	0x3ff00000
 8003b20:	0800853c 	.word	0x0800853c
 8003b24:	d1b71759 	.word	0xd1b71759
 8003b28:	20004529 	.word	0x20004529
 8003b2c:	51eb851f 	.word	0x51eb851f
 8003b30:	20004522 	.word	0x20004522
 8003b34:	200045b9 	.word	0x200045b9
 8003b38:	408f4000 	.word	0x408f4000
 8003b3c:	20004526 	.word	0x20004526
 8003b40:	200045bb 	.word	0x200045bb
 8003b44:	200045c0 	.word	0x200045c0
 8003b48:	2000464c 	.word	0x2000464c
 8003b4c:	200045ac 	.word	0x200045ac
 8003b50:	20004530 	.word	0x20004530
 8003b54:	20004640 	.word	0x20004640
 8003b58:	2000452c 	.word	0x2000452c
 8003b5c:	200045c4 	.word	0x200045c4
 8003b60:	20004520 	.word	0x20004520
 8003b64:	200045bd 	.word	0x200045bd

08003b68 <read>:

char read(uint8_t c) {
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	4603      	mov	r3, r0
 8003b70:	71fb      	strb	r3, [r7, #7]
  
  //if (paused) return c;	
  if (c == '$') {
 8003b72:	79fb      	ldrb	r3, [r7, #7]
 8003b74:	2b24      	cmp	r3, #36	; 0x24
 8003b76:	d10a      	bne.n	8003b8e <read+0x26>
    currentline[lineidx] = 0;
 8003b78:	4b24      	ldr	r3, [pc, #144]	; (8003c0c <read+0xa4>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a24      	ldr	r2, [pc, #144]	; (8003c10 <read+0xa8>)
 8003b7e:	8812      	ldrh	r2, [r2, #0]
 8003b80:	b292      	uxth	r2, r2
 8003b82:	4413      	add	r3, r2
 8003b84:	2200      	movs	r2, #0
 8003b86:	701a      	strb	r2, [r3, #0]
    lineidx = 0;
 8003b88:	4b21      	ldr	r3, [pc, #132]	; (8003c10 <read+0xa8>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	801a      	strh	r2, [r3, #0]
  }
  if (c == '\n') {
 8003b8e:	79fb      	ldrb	r3, [r7, #7]
 8003b90:	2b0a      	cmp	r3, #10
 8003b92:	d11f      	bne.n	8003bd4 <read+0x6c>
    currentline[lineidx] = 0;
 8003b94:	4b1d      	ldr	r3, [pc, #116]	; (8003c0c <read+0xa4>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a1d      	ldr	r2, [pc, #116]	; (8003c10 <read+0xa8>)
 8003b9a:	8812      	ldrh	r2, [r2, #0]
 8003b9c:	b292      	uxth	r2, r2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	701a      	strb	r2, [r3, #0]

    if (currentline == line1) {
 8003ba4:	4b19      	ldr	r3, [pc, #100]	; (8003c0c <read+0xa4>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a1a      	ldr	r2, [pc, #104]	; (8003c14 <read+0xac>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d106      	bne.n	8003bbc <read+0x54>
      currentline = line2;
 8003bae:	4b17      	ldr	r3, [pc, #92]	; (8003c0c <read+0xa4>)
 8003bb0:	4a19      	ldr	r2, [pc, #100]	; (8003c18 <read+0xb0>)
 8003bb2:	601a      	str	r2, [r3, #0]
      lastline = line1;
 8003bb4:	4b19      	ldr	r3, [pc, #100]	; (8003c1c <read+0xb4>)
 8003bb6:	4a17      	ldr	r2, [pc, #92]	; (8003c14 <read+0xac>)
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	e005      	b.n	8003bc8 <read+0x60>
    } else {
      currentline = line1;
 8003bbc:	4b13      	ldr	r3, [pc, #76]	; (8003c0c <read+0xa4>)
 8003bbe:	4a15      	ldr	r2, [pc, #84]	; (8003c14 <read+0xac>)
 8003bc0:	601a      	str	r2, [r3, #0]
      lastline = line2;
 8003bc2:	4b16      	ldr	r3, [pc, #88]	; (8003c1c <read+0xb4>)
 8003bc4:	4a14      	ldr	r2, [pc, #80]	; (8003c18 <read+0xb0>)
 8003bc6:	601a      	str	r2, [r3, #0]
    }

    lineidx = 0;
 8003bc8:	4b11      	ldr	r3, [pc, #68]	; (8003c10 <read+0xa8>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	801a      	strh	r2, [r3, #0]
    recvdflag = true;
 8003bce:	4b14      	ldr	r3, [pc, #80]	; (8003c20 <read+0xb8>)
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	701a      	strb	r2, [r3, #0]
  }

  currentline[lineidx++] = c;
 8003bd4:	4b0d      	ldr	r3, [pc, #52]	; (8003c0c <read+0xa4>)
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	4b0d      	ldr	r3, [pc, #52]	; (8003c10 <read+0xa8>)
 8003bda:	881b      	ldrh	r3, [r3, #0]
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	1c59      	adds	r1, r3, #1
 8003be0:	b288      	uxth	r0, r1
 8003be2:	490b      	ldr	r1, [pc, #44]	; (8003c10 <read+0xa8>)
 8003be4:	8008      	strh	r0, [r1, #0]
 8003be6:	4413      	add	r3, r2
 8003be8:	79fa      	ldrb	r2, [r7, #7]
 8003bea:	701a      	strb	r2, [r3, #0]
  if (lineidx >= MAXLINELENGTH)
 8003bec:	4b08      	ldr	r3, [pc, #32]	; (8003c10 <read+0xa8>)
 8003bee:	881b      	ldrh	r3, [r3, #0]
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	2b77      	cmp	r3, #119	; 0x77
 8003bf4:	d902      	bls.n	8003bfc <read+0x94>
    lineidx = MAXLINELENGTH-1;
 8003bf6:	4b06      	ldr	r3, [pc, #24]	; (8003c10 <read+0xa8>)
 8003bf8:	2277      	movs	r2, #119	; 0x77
 8003bfa:	801a      	strh	r2, [r3, #0]

  return c;
 8003bfc:	79fb      	ldrb	r3, [r7, #7]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	20004644 	.word	0x20004644
 8003c10:	2000045c 	.word	0x2000045c
 8003c14:	20004534 	.word	0x20004534
 8003c18:	200045c8 	.word	0x200045c8
 8003c1c:	20004514 	.word	0x20004514
 8003c20:	20004524 	.word	0x20004524

08003c24 <Adafruit_GPS>:

void Adafruit_GPS (UART_HandleTypeDef huart)
{
 8003c24:	b084      	sub	sp, #16
 8003c26:	b580      	push	{r7, lr}
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	f107 0c08 	add.w	ip, r7, #8
 8003c2e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  common_init();     // Set everything to common state, then...
 8003c32:	f000 f807 	bl	8003c44 <common_init>
	
   // ...override gpsSwSerial with value passed.
}
 8003c36:	bf00      	nop
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c3e:	b004      	add	sp, #16
 8003c40:	4770      	bx	lr
	...

08003c44 <common_init>:

// Initialization code used by all constructor types
void common_init(void) {
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
  recvdflag   = false;
 8003c48:	4b31      	ldr	r3, [pc, #196]	; (8003d10 <common_init+0xcc>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	701a      	strb	r2, [r3, #0]
  paused      = false;
 8003c4e:	4b31      	ldr	r3, [pc, #196]	; (8003d14 <common_init+0xd0>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	701a      	strb	r2, [r3, #0]
  lineidx     = 0;
 8003c54:	4b30      	ldr	r3, [pc, #192]	; (8003d18 <common_init+0xd4>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	801a      	strh	r2, [r3, #0]
  currentline = line1;
 8003c5a:	4b30      	ldr	r3, [pc, #192]	; (8003d1c <common_init+0xd8>)
 8003c5c:	4a30      	ldr	r2, [pc, #192]	; (8003d20 <common_init+0xdc>)
 8003c5e:	601a      	str	r2, [r3, #0]
  lastline    = line2;
 8003c60:	4b30      	ldr	r3, [pc, #192]	; (8003d24 <common_init+0xe0>)
 8003c62:	4a31      	ldr	r2, [pc, #196]	; (8003d28 <common_init+0xe4>)
 8003c64:	601a      	str	r2, [r3, #0]

  hour = minute = seconds = year = month = day =
    fixquality = satellites = 0; // uint8_t
 8003c66:	4b31      	ldr	r3, [pc, #196]	; (8003d2c <common_init+0xe8>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	701a      	strb	r2, [r3, #0]
 8003c6c:	4b2f      	ldr	r3, [pc, #188]	; (8003d2c <common_init+0xe8>)
 8003c6e:	781a      	ldrb	r2, [r3, #0]
 8003c70:	4b2f      	ldr	r3, [pc, #188]	; (8003d30 <common_init+0xec>)
 8003c72:	701a      	strb	r2, [r3, #0]
  hour = minute = seconds = year = month = day =
 8003c74:	4b2e      	ldr	r3, [pc, #184]	; (8003d30 <common_init+0xec>)
 8003c76:	781a      	ldrb	r2, [r3, #0]
 8003c78:	4b2e      	ldr	r3, [pc, #184]	; (8003d34 <common_init+0xf0>)
 8003c7a:	701a      	strb	r2, [r3, #0]
 8003c7c:	4b2d      	ldr	r3, [pc, #180]	; (8003d34 <common_init+0xf0>)
 8003c7e:	781a      	ldrb	r2, [r3, #0]
 8003c80:	4b2d      	ldr	r3, [pc, #180]	; (8003d38 <common_init+0xf4>)
 8003c82:	701a      	strb	r2, [r3, #0]
 8003c84:	4b2c      	ldr	r3, [pc, #176]	; (8003d38 <common_init+0xf4>)
 8003c86:	781a      	ldrb	r2, [r3, #0]
 8003c88:	4b2c      	ldr	r3, [pc, #176]	; (8003d3c <common_init+0xf8>)
 8003c8a:	701a      	strb	r2, [r3, #0]
 8003c8c:	4b2b      	ldr	r3, [pc, #172]	; (8003d3c <common_init+0xf8>)
 8003c8e:	781a      	ldrb	r2, [r3, #0]
 8003c90:	4b2b      	ldr	r3, [pc, #172]	; (8003d40 <common_init+0xfc>)
 8003c92:	701a      	strb	r2, [r3, #0]
 8003c94:	4b2a      	ldr	r3, [pc, #168]	; (8003d40 <common_init+0xfc>)
 8003c96:	781a      	ldrb	r2, [r3, #0]
 8003c98:	4b2a      	ldr	r3, [pc, #168]	; (8003d44 <common_init+0x100>)
 8003c9a:	701a      	strb	r2, [r3, #0]
 8003c9c:	4b29      	ldr	r3, [pc, #164]	; (8003d44 <common_init+0x100>)
 8003c9e:	781a      	ldrb	r2, [r3, #0]
 8003ca0:	4b29      	ldr	r3, [pc, #164]	; (8003d48 <common_init+0x104>)
 8003ca2:	701a      	strb	r2, [r3, #0]
  lat = lon = mag = 0; // char
 8003ca4:	4b29      	ldr	r3, [pc, #164]	; (8003d4c <common_init+0x108>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	701a      	strb	r2, [r3, #0]
 8003caa:	4b28      	ldr	r3, [pc, #160]	; (8003d4c <common_init+0x108>)
 8003cac:	781a      	ldrb	r2, [r3, #0]
 8003cae:	4b28      	ldr	r3, [pc, #160]	; (8003d50 <common_init+0x10c>)
 8003cb0:	701a      	strb	r2, [r3, #0]
 8003cb2:	4b27      	ldr	r3, [pc, #156]	; (8003d50 <common_init+0x10c>)
 8003cb4:	781a      	ldrb	r2, [r3, #0]
 8003cb6:	4b27      	ldr	r3, [pc, #156]	; (8003d54 <common_init+0x110>)
 8003cb8:	701a      	strb	r2, [r3, #0]
  fix = false; // bool
 8003cba:	4b27      	ldr	r3, [pc, #156]	; (8003d58 <common_init+0x114>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	701a      	strb	r2, [r3, #0]
  milliseconds = 0; // uint16_t
 8003cc0:	4b26      	ldr	r3, [pc, #152]	; (8003d5c <common_init+0x118>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	801a      	strh	r2, [r3, #0]
  latitude = longitude = geoidheight = altitude =
    speed = angle = magvariation = HDOP = 0.0; // float
 8003cc6:	4b26      	ldr	r3, [pc, #152]	; (8003d60 <common_init+0x11c>)
 8003cc8:	f04f 0200 	mov.w	r2, #0
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	4b24      	ldr	r3, [pc, #144]	; (8003d60 <common_init+0x11c>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a24      	ldr	r2, [pc, #144]	; (8003d64 <common_init+0x120>)
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	4b23      	ldr	r3, [pc, #140]	; (8003d64 <common_init+0x120>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a23      	ldr	r2, [pc, #140]	; (8003d68 <common_init+0x124>)
 8003cdc:	6013      	str	r3, [r2, #0]
 8003cde:	4b22      	ldr	r3, [pc, #136]	; (8003d68 <common_init+0x124>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a22      	ldr	r2, [pc, #136]	; (8003d6c <common_init+0x128>)
 8003ce4:	6013      	str	r3, [r2, #0]
  latitude = longitude = geoidheight = altitude =
 8003ce6:	4b21      	ldr	r3, [pc, #132]	; (8003d6c <common_init+0x128>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a21      	ldr	r2, [pc, #132]	; (8003d70 <common_init+0x12c>)
 8003cec:	6013      	str	r3, [r2, #0]
 8003cee:	4b20      	ldr	r3, [pc, #128]	; (8003d70 <common_init+0x12c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a20      	ldr	r2, [pc, #128]	; (8003d74 <common_init+0x130>)
 8003cf4:	6013      	str	r3, [r2, #0]
 8003cf6:	4b1f      	ldr	r3, [pc, #124]	; (8003d74 <common_init+0x130>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a1f      	ldr	r2, [pc, #124]	; (8003d78 <common_init+0x134>)
 8003cfc:	6013      	str	r3, [r2, #0]
 8003cfe:	4b1e      	ldr	r3, [pc, #120]	; (8003d78 <common_init+0x134>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a1e      	ldr	r2, [pc, #120]	; (8003d7c <common_init+0x138>)
 8003d04:	6013      	str	r3, [r2, #0]
}
 8003d06:	bf00      	nop
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	20004524 	.word	0x20004524
 8003d14:	20004510 	.word	0x20004510
 8003d18:	2000045c 	.word	0x2000045c
 8003d1c:	20004644 	.word	0x20004644
 8003d20:	20004534 	.word	0x20004534
 8003d24:	20004514 	.word	0x20004514
 8003d28:	200045c8 	.word	0x200045c8
 8003d2c:	200045b0 	.word	0x200045b0
 8003d30:	20004518 	.word	0x20004518
 8003d34:	200045c4 	.word	0x200045c4
 8003d38:	20004520 	.word	0x20004520
 8003d3c:	200045bd 	.word	0x200045bd
 8003d40:	200045b9 	.word	0x200045b9
 8003d44:	20004522 	.word	0x20004522
 8003d48:	20004529 	.word	0x20004529
 8003d4c:	2000464d 	.word	0x2000464d
 8003d50:	20004530 	.word	0x20004530
 8003d54:	2000464c 	.word	0x2000464c
 8003d58:	200045bb 	.word	0x200045bb
 8003d5c:	20004526 	.word	0x20004526
 8003d60:	20004648 	.word	0x20004648
 8003d64:	2000451c 	.word	0x2000451c
 8003d68:	2000452c 	.word	0x2000452c
 8003d6c:	20004640 	.word	0x20004640
 8003d70:	200045b4 	.word	0x200045b4
 8003d74:	2000450c 	.word	0x2000450c
 8003d78:	200045ac 	.word	0x200045ac
 8003d7c:	200045c0 	.word	0x200045c0

08003d80 <sendCommand>:


void sendCommand(UART_HandleTypeDef huart, char *str) {
 8003d80:	b084      	sub	sp, #16
 8003d82:	b580      	push	{r7, lr}
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	f107 0c08 	add.w	ip, r7, #8
 8003d8a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  printf("%s\n",str);
 8003d8e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003d90:	f001 fc5c 	bl	800564c <puts>
	printf("%d\n", (uint16_t) strlen(str));
 8003d94:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003d96:	f7fc fa23 	bl	80001e0 <strlen>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	4619      	mov	r1, r3
 8003da0:	4809      	ldr	r0, [pc, #36]	; (8003dc8 <sendCommand+0x48>)
 8003da2:	f001 fbdf 	bl	8005564 <iprintf>
#ifndef __NO_HAL_UART
	HAL_UART_Transmit(&huart, (uint8_t *)str, (uint16_t) sizeof(str),100);
 8003da6:	2364      	movs	r3, #100	; 0x64
 8003da8:	2204      	movs	r2, #4
 8003daa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003dac:	f107 0008 	add.w	r0, r7, #8
 8003db0:	f7fe fc3b 	bl	800262a <HAL_UART_Transmit>
	HAL_Delay(50);
 8003db4:	2032      	movs	r0, #50	; 0x32
 8003db6:	f7fd fcd7 	bl	8001768 <HAL_Delay>
#endif
}
 8003dba:	bf00      	nop
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003dc2:	b004      	add	sp, #16
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	08008544 	.word	0x08008544

08003dcc <newNMEAreceived>:

bool newNMEAreceived(void) {
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
  return recvdflag;
 8003dd0:	4b03      	ldr	r3, [pc, #12]	; (8003de0 <newNMEAreceived+0x14>)
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	b2db      	uxtb	r3, r3
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	20004524 	.word	0x20004524

08003de4 <lastNMEA>:

void pause(bool p) {
  paused = p;
}

char *lastNMEA(void) {
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
  recvdflag = false;
 8003de8:	4b04      	ldr	r3, [pc, #16]	; (8003dfc <lastNMEA+0x18>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	701a      	strb	r2, [r3, #0]
  return (char *)lastline;
 8003dee:	4b04      	ldr	r3, [pc, #16]	; (8003e00 <lastNMEA+0x1c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	20004524 	.word	0x20004524
 8003e00:	20004514 	.word	0x20004514

08003e04 <parseHex>:

// read a Hex value and return the decimal equivalent
uint8_t parseHex(char c) {
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	71fb      	strb	r3, [r7, #7]
    if (c < '0')
 8003e0e:	79fb      	ldrb	r3, [r7, #7]
 8003e10:	2b2f      	cmp	r3, #47	; 0x2f
 8003e12:	d801      	bhi.n	8003e18 <parseHex+0x14>
      return 0;
 8003e14:	2300      	movs	r3, #0
 8003e16:	e013      	b.n	8003e40 <parseHex+0x3c>
    if (c <= '9')
 8003e18:	79fb      	ldrb	r3, [r7, #7]
 8003e1a:	2b39      	cmp	r3, #57	; 0x39
 8003e1c:	d803      	bhi.n	8003e26 <parseHex+0x22>
      return c - '0';
 8003e1e:	79fb      	ldrb	r3, [r7, #7]
 8003e20:	3b30      	subs	r3, #48	; 0x30
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	e00c      	b.n	8003e40 <parseHex+0x3c>
    if (c < 'A')
 8003e26:	79fb      	ldrb	r3, [r7, #7]
 8003e28:	2b40      	cmp	r3, #64	; 0x40
 8003e2a:	d801      	bhi.n	8003e30 <parseHex+0x2c>
       return 0;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	e007      	b.n	8003e40 <parseHex+0x3c>
    if (c <= 'F')
 8003e30:	79fb      	ldrb	r3, [r7, #7]
 8003e32:	2b46      	cmp	r3, #70	; 0x46
 8003e34:	d803      	bhi.n	8003e3e <parseHex+0x3a>
       return (c - 'A')+10;
 8003e36:	79fb      	ldrb	r3, [r7, #7]
 8003e38:	3b37      	subs	r3, #55	; 0x37
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	e000      	b.n	8003e40 <parseHex+0x3c>
    return 0;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <MT3339_init>:
#include "Adafruit_GPS.h"

#include "MT3339.h"
#include <string.h>

genericSensor_t MT3339_init(UART_HandleTypeDef *huart) {
 8003e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e4e:	b0c3      	sub	sp, #268	; 0x10c
 8003e50:	af0e      	add	r7, sp, #56	; 0x38
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
	/** Define MT3339 Struct **/
	MT3339_t _gps = {0};
 8003e56:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003e5a:	2250      	movs	r2, #80	; 0x50
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f001 fb78 	bl	8005554 <memset>

	genericSensor_t gGPS = {0};
 8003e64:	f107 0310 	add.w	r3, r7, #16
 8003e68:	2270      	movs	r2, #112	; 0x70
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f001 fb71 	bl	8005554 <memset>
	gGPS.sensorType = GPS_MT3339;
 8003e72:	2301      	movs	r3, #1
 8003e74:	743b      	strb	r3, [r7, #16]
	gGPS.read = MT3339_read;
 8003e76:	4b47      	ldr	r3, [pc, #284]	; (8003f94 <MT3339_init+0x148>)
 8003e78:	617b      	str	r3, [r7, #20]
	gGPS.sensor.MT3339 = _gps;
 8003e7a:	f107 0318 	add.w	r3, r7, #24
 8003e7e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8003e82:	2250      	movs	r2, #80	; 0x50
 8003e84:	4618      	mov	r0, r3
 8003e86:	f001 fb5a 	bl	800553e <memcpy>
	gGPS.interface.UART.huart = huart;
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	66bb      	str	r3, [r7, #104]	; 0x68
	/** Define Local Variables **/
	//MT3339_t* gps = &(gGPS.sensor.MT3339);
	uint8_t temporary; // Buffer to load data received


	HAL_Delay(10);
 8003e8e:	200a      	movs	r0, #10
 8003e90:	f7fd fc6a 	bl	8001768 <HAL_Delay>
	//printf("\nthe size is: %d\n",sizeof(trans));
	HAL_UART_Receive_IT(huart, &temporary, 1);
 8003e94:	f107 030f 	add.w	r3, r7, #15
 8003e98:	2201      	movs	r2, #1
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	6838      	ldr	r0, [r7, #0]
 8003e9e:	f7fe fd03 	bl	80028a8 <HAL_UART_Receive_IT>
	HAL_Delay(10);
 8003ea2:	200a      	movs	r0, #10
 8003ea4:	f7fd fc60 	bl	8001768 <HAL_Delay>

	Adafruit_GPS(*huart);
 8003ea8:	683e      	ldr	r6, [r7, #0]
 8003eaa:	466d      	mov	r5, sp
 8003eac:	f106 0410 	add.w	r4, r6, #16
 8003eb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003eb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003eb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003eb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003eb8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003ebc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003ec0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003ec4:	f7ff feae 	bl	8003c24 <Adafruit_GPS>

	HAL_Delay(10);
 8003ec8:	200a      	movs	r0, #10
 8003eca:	f7fd fc4d 	bl	8001768 <HAL_Delay>

	sendCommand(*huart, PMTK_SET_BAUD_9600);
 8003ece:	683e      	ldr	r6, [r7, #0]
 8003ed0:	4b31      	ldr	r3, [pc, #196]	; (8003f98 <MT3339_init+0x14c>)
 8003ed2:	930c      	str	r3, [sp, #48]	; 0x30
 8003ed4:	466d      	mov	r5, sp
 8003ed6:	f106 0410 	add.w	r4, r6, #16
 8003eda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003edc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ede:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ee0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ee2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003ee6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003eea:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003eee:	f7ff ff47 	bl	8003d80 <sendCommand>
	HAL_Delay(10);
 8003ef2:	200a      	movs	r0, #10
 8003ef4:	f7fd fc38 	bl	8001768 <HAL_Delay>
	sendCommand(*huart, PMTK_SET_NMEA_OUTPUT_RMCGGA);
 8003ef8:	683e      	ldr	r6, [r7, #0]
 8003efa:	4b28      	ldr	r3, [pc, #160]	; (8003f9c <MT3339_init+0x150>)
 8003efc:	930c      	str	r3, [sp, #48]	; 0x30
 8003efe:	466d      	mov	r5, sp
 8003f00:	f106 0410 	add.w	r4, r6, #16
 8003f04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f0c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003f10:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003f14:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003f18:	f7ff ff32 	bl	8003d80 <sendCommand>
	HAL_Delay(10);
 8003f1c:	200a      	movs	r0, #10
 8003f1e:	f7fd fc23 	bl	8001768 <HAL_Delay>
	//sendCommand(huart2, PMTK_SET_NMEA_UPDATE_10HZ);
	sendCommand(*huart, PMTK_API_SET_FIX_CTL_5HZ);
 8003f22:	683e      	ldr	r6, [r7, #0]
 8003f24:	4b1e      	ldr	r3, [pc, #120]	; (8003fa0 <MT3339_init+0x154>)
 8003f26:	930c      	str	r3, [sp, #48]	; 0x30
 8003f28:	466d      	mov	r5, sp
 8003f2a:	f106 0410 	add.w	r4, r6, #16
 8003f2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f36:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003f3a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003f3e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003f42:	f7ff ff1d 	bl	8003d80 <sendCommand>

	HAL_Delay(10);
 8003f46:	200a      	movs	r0, #10
 8003f48:	f7fd fc0e 	bl	8001768 <HAL_Delay>
	sendCommand(*huart, PGCMD_ANTENNA);
 8003f4c:	683e      	ldr	r6, [r7, #0]
 8003f4e:	4b15      	ldr	r3, [pc, #84]	; (8003fa4 <MT3339_init+0x158>)
 8003f50:	930c      	str	r3, [sp, #48]	; 0x30
 8003f52:	466d      	mov	r5, sp
 8003f54:	f106 0410 	add.w	r4, r6, #16
 8003f58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f60:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003f64:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003f68:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003f6c:	f7ff ff08 	bl	8003d80 <sendCommand>
	HAL_Delay(10);
 8003f70:	200a      	movs	r0, #10
 8003f72:	f7fd fbf9 	bl	8001768 <HAL_Delay>

	//printf(PMTK_Q_RELEASE);
	//printf("Connection established at 9600 baud...\n");
	HAL_Delay(1);
 8003f76:	2001      	movs	r0, #1
 8003f78:	f7fd fbf6 	bl	8001768 <HAL_Delay>
#endif


	return gGPS;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f107 0310 	add.w	r3, r7, #16
 8003f84:	2270      	movs	r2, #112	; 0x70
 8003f86:	4619      	mov	r1, r3
 8003f88:	f001 fad9 	bl	800553e <memcpy>
}
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	37d4      	adds	r7, #212	; 0xd4
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f94:	08003fa9 	.word	0x08003fa9
 8003f98:	080085a8 	.word	0x080085a8
 8003f9c:	080085bc 	.word	0x080085bc
 8003fa0:	080085f0 	.word	0x080085f0
 8003fa4:	08008608 	.word	0x08008608

08003fa8 <MT3339_read>:

uint8_t MT3339_read(genericSensor_t* sensor) {
 8003fa8:	b590      	push	{r4, r7, lr}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
	MT3339_t* gps = &(sensor->sensor.MT3339);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	3308      	adds	r3, #8
 8003fb4:	60fb      	str	r3, [r7, #12]

	 if ( !parse(lastNMEA()) ) {
 8003fb6:	f7ff ff15 	bl	8003de4 <lastNMEA>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7ff fac7 	bl	8003550 <parse>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	f083 0301 	eor.w	r3, r3, #1
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <MT3339_read+0x2e>
		 return (uint8_t) sensor->state;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8003fd4:	e00b      	b.n	8003fee <MT3339_read+0x46>
	 }
	 strncpy(gps->gpsString,lastNMEA(),MAX_NMEA);
 8003fd6:	68fc      	ldr	r4, [r7, #12]
 8003fd8:	f7ff ff04 	bl	8003de4 <lastNMEA>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2250      	movs	r2, #80	; 0x50
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4620      	mov	r0, r4
 8003fe4:	f001 fc07 	bl	80057f6 <strncpy>


	return (uint8_t) sensor->state;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68

}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd90      	pop	{r4, r7, pc}

08003ff6 <MT3339_receive>:


HAL_StatusTypeDef MT3339_receive(genericSensor_t* sensor,uint8_t* buffer) {
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b084      	sub	sp, #16
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
 8003ffe:	6039      	str	r1, [r7, #0]
#ifndef __NO_HAL_UART
	//MT3339_t* gps = &(sensor->sensor.MT3339);
	UART_HandleTypeDef* huart = sensor->interface.UART.huart;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004004:	60fb      	str	r3, [r7, #12]
	 // Buffer to load data received
	if (huart->Instance == sensor->interface.UART.huart->Instance)  {
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	429a      	cmp	r2, r3
 8004012:	d109      	bne.n	8004028 <MT3339_receive+0x32>
			//printf("hi");
			HAL_UART_Receive_IT(huart,buffer, 1);
 8004014:	2201      	movs	r2, #1
 8004016:	6839      	ldr	r1, [r7, #0]
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f7fe fc45 	bl	80028a8 <HAL_UART_Receive_IT>
			read(*buffer);
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	4618      	mov	r0, r3
 8004024:	f7ff fda0 	bl	8003b68 <read>
	}
#endif
	return sensor->state;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004036:	b480      	push	{r7}
 8004038:	b085      	sub	sp, #20
 800403a:	af00      	add	r7, sp, #0
 800403c:	4603      	mov	r3, r0
 800403e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004040:	2300      	movs	r3, #0
 8004042:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004044:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004048:	2b84      	cmp	r3, #132	; 0x84
 800404a:	d005      	beq.n	8004058 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800404c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	4413      	add	r3, r2
 8004054:	3303      	adds	r3, #3
 8004056:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004058:	68fb      	ldr	r3, [r7, #12]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr

08004066 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800406a:	f000 fadb 	bl	8004624 <vTaskStartScheduler>
  
  return osOK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	bd80      	pop	{r7, pc}

08004074 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004076:	b089      	sub	sp, #36	; 0x24
 8004078:	af04      	add	r7, sp, #16
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d020      	beq.n	80040c8 <osThreadCreate+0x54>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d01c      	beq.n	80040c8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685c      	ldr	r4, [r3, #4]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681d      	ldr	r5, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691e      	ldr	r6, [r3, #16]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7ff ffc8 	bl	8004036 <makeFreeRtosPriority>
 80040a6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040b0:	9202      	str	r2, [sp, #8]
 80040b2:	9301      	str	r3, [sp, #4]
 80040b4:	9100      	str	r1, [sp, #0]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	4632      	mov	r2, r6
 80040ba:	4629      	mov	r1, r5
 80040bc:	4620      	mov	r0, r4
 80040be:	f000 f8ed 	bl	800429c <xTaskCreateStatic>
 80040c2:	4603      	mov	r3, r0
 80040c4:	60fb      	str	r3, [r7, #12]
 80040c6:	e01c      	b.n	8004102 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685c      	ldr	r4, [r3, #4]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040d4:	b29e      	uxth	r6, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80040dc:	4618      	mov	r0, r3
 80040de:	f7ff ffaa 	bl	8004036 <makeFreeRtosPriority>
 80040e2:	4602      	mov	r2, r0
 80040e4:	f107 030c 	add.w	r3, r7, #12
 80040e8:	9301      	str	r3, [sp, #4]
 80040ea:	9200      	str	r2, [sp, #0]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	4632      	mov	r2, r6
 80040f0:	4629      	mov	r1, r5
 80040f2:	4620      	mov	r0, r4
 80040f4:	f000 f92c 	bl	8004350 <xTaskCreate>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d001      	beq.n	8004102 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80040fe:	2300      	movs	r3, #0
 8004100:	e000      	b.n	8004104 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004102:	68fb      	ldr	r3, [r7, #12]
}
 8004104:	4618      	mov	r0, r3
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800410c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <osDelay+0x16>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	e000      	b.n	8004124 <osDelay+0x18>
 8004122:	2301      	movs	r3, #1
 8004124:	4618      	mov	r0, r3
 8004126:	f000 fa49 	bl	80045bc <vTaskDelay>
  
  return osOK;
 800412a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800412c:	4618      	mov	r0, r3
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f103 0208 	add.w	r2, r3, #8
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800414c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f103 0208 	add.w	r2, r3, #8
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f103 0208 	add.w	r2, r3, #8
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004182:	bf00      	nop
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800418e:	b480      	push	{r7}
 8004190:	b085      	sub	sp, #20
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
 8004196:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	601a      	str	r2, [r3, #0]
}
 80041ca:	bf00      	nop
 80041cc:	3714      	adds	r7, #20
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80041d6:	b480      	push	{r7}
 80041d8:	b085      	sub	sp, #20
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
 80041de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041ec:	d103      	bne.n	80041f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	60fb      	str	r3, [r7, #12]
 80041f4:	e00c      	b.n	8004210 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	3308      	adds	r3, #8
 80041fa:	60fb      	str	r3, [r7, #12]
 80041fc:	e002      	b.n	8004204 <vListInsert+0x2e>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	429a      	cmp	r2, r3
 800420e:	d2f6      	bcs.n	80041fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	1c5a      	adds	r2, r3, #1
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	601a      	str	r2, [r3, #0]
}
 800423c:	bf00      	nop
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	6892      	ldr	r2, [r2, #8]
 800425e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6852      	ldr	r2, [r2, #4]
 8004268:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	429a      	cmp	r2, r3
 8004272:	d103      	bne.n	800427c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	1e5a      	subs	r2, r3, #1
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
}
 8004290:	4618      	mov	r0, r3
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800429c:	b580      	push	{r7, lr}
 800429e:	b08e      	sub	sp, #56	; 0x38
 80042a0:	af04      	add	r7, sp, #16
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
 80042a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80042aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d109      	bne.n	80042c4 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80042b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b4:	f383 8811 	msr	BASEPRI, r3
 80042b8:	f3bf 8f6f 	isb	sy
 80042bc:	f3bf 8f4f 	dsb	sy
 80042c0:	623b      	str	r3, [r7, #32]
 80042c2:	e7fe      	b.n	80042c2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80042c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d109      	bne.n	80042de <xTaskCreateStatic+0x42>
 80042ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ce:	f383 8811 	msr	BASEPRI, r3
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	f3bf 8f4f 	dsb	sy
 80042da:	61fb      	str	r3, [r7, #28]
 80042dc:	e7fe      	b.n	80042dc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80042de:	2354      	movs	r3, #84	; 0x54
 80042e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	2b54      	cmp	r3, #84	; 0x54
 80042e6:	d009      	beq.n	80042fc <xTaskCreateStatic+0x60>
 80042e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ec:	f383 8811 	msr	BASEPRI, r3
 80042f0:	f3bf 8f6f 	isb	sy
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	61bb      	str	r3, [r7, #24]
 80042fa:	e7fe      	b.n	80042fa <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80042fc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80042fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004300:	2b00      	cmp	r3, #0
 8004302:	d01e      	beq.n	8004342 <xTaskCreateStatic+0xa6>
 8004304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004306:	2b00      	cmp	r3, #0
 8004308:	d01b      	beq.n	8004342 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800430a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800430c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004312:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	2202      	movs	r2, #2
 8004318:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800431c:	2300      	movs	r3, #0
 800431e:	9303      	str	r3, [sp, #12]
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	9302      	str	r3, [sp, #8]
 8004324:	f107 0314 	add.w	r3, r7, #20
 8004328:	9301      	str	r3, [sp, #4]
 800432a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	68b9      	ldr	r1, [r7, #8]
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f000 f850 	bl	80043da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800433a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800433c:	f000 f8d4 	bl	80044e8 <prvAddNewTaskToReadyList>
 8004340:	e001      	b.n	8004346 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004342:	2300      	movs	r3, #0
 8004344:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004346:	697b      	ldr	r3, [r7, #20]
	}
 8004348:	4618      	mov	r0, r3
 800434a:	3728      	adds	r7, #40	; 0x28
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004350:	b580      	push	{r7, lr}
 8004352:	b08c      	sub	sp, #48	; 0x30
 8004354:	af04      	add	r7, sp, #16
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	603b      	str	r3, [r7, #0]
 800435c:	4613      	mov	r3, r2
 800435e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004360:	88fb      	ldrh	r3, [r7, #6]
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4618      	mov	r0, r3
 8004366:	f000 fecd 	bl	8005104 <pvPortMalloc>
 800436a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00e      	beq.n	8004390 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004372:	2054      	movs	r0, #84	; 0x54
 8004374:	f000 fec6 	bl	8005104 <pvPortMalloc>
 8004378:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d003      	beq.n	8004388 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	631a      	str	r2, [r3, #48]	; 0x30
 8004386:	e005      	b.n	8004394 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004388:	6978      	ldr	r0, [r7, #20]
 800438a:	f000 ff7d 	bl	8005288 <vPortFree>
 800438e:	e001      	b.n	8004394 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004390:	2300      	movs	r3, #0
 8004392:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d017      	beq.n	80043ca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80043a2:	88fa      	ldrh	r2, [r7, #6]
 80043a4:	2300      	movs	r3, #0
 80043a6:	9303      	str	r3, [sp, #12]
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	9302      	str	r3, [sp, #8]
 80043ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ae:	9301      	str	r3, [sp, #4]
 80043b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	68b9      	ldr	r1, [r7, #8]
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	f000 f80e 	bl	80043da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043be:	69f8      	ldr	r0, [r7, #28]
 80043c0:	f000 f892 	bl	80044e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80043c4:	2301      	movs	r3, #1
 80043c6:	61bb      	str	r3, [r7, #24]
 80043c8:	e002      	b.n	80043d0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80043ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043ce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80043d0:	69bb      	ldr	r3, [r7, #24]
	}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3720      	adds	r7, #32
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b088      	sub	sp, #32
 80043de:	af00      	add	r7, sp, #0
 80043e0:	60f8      	str	r0, [r7, #12]
 80043e2:	60b9      	str	r1, [r7, #8]
 80043e4:	607a      	str	r2, [r7, #4]
 80043e6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80043e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80043f2:	3b01      	subs	r3, #1
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	f023 0307 	bic.w	r3, r3, #7
 8004400:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	f003 0307 	and.w	r3, r3, #7
 8004408:	2b00      	cmp	r3, #0
 800440a:	d009      	beq.n	8004420 <prvInitialiseNewTask+0x46>
 800440c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004410:	f383 8811 	msr	BASEPRI, r3
 8004414:	f3bf 8f6f 	isb	sy
 8004418:	f3bf 8f4f 	dsb	sy
 800441c:	617b      	str	r3, [r7, #20]
 800441e:	e7fe      	b.n	800441e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d01f      	beq.n	8004466 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004426:	2300      	movs	r3, #0
 8004428:	61fb      	str	r3, [r7, #28]
 800442a:	e012      	b.n	8004452 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	4413      	add	r3, r2
 8004432:	7819      	ldrb	r1, [r3, #0]
 8004434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	4413      	add	r3, r2
 800443a:	3334      	adds	r3, #52	; 0x34
 800443c:	460a      	mov	r2, r1
 800443e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	4413      	add	r3, r2
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d006      	beq.n	800445a <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	3301      	adds	r3, #1
 8004450:	61fb      	str	r3, [r7, #28]
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	2b0f      	cmp	r3, #15
 8004456:	d9e9      	bls.n	800442c <prvInitialiseNewTask+0x52>
 8004458:	e000      	b.n	800445c <prvInitialiseNewTask+0x82>
			{
				break;
 800445a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800445c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004464:	e003      	b.n	800446e <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800446e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004470:	2b06      	cmp	r3, #6
 8004472:	d901      	bls.n	8004478 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004474:	2306      	movs	r3, #6
 8004476:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800447c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800447e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004482:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004486:	2200      	movs	r2, #0
 8004488:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800448a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448c:	3304      	adds	r3, #4
 800448e:	4618      	mov	r0, r3
 8004490:	f7ff fe70 	bl	8004174 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004496:	3318      	adds	r3, #24
 8004498:	4618      	mov	r0, r3
 800449a:	f7ff fe6b 	bl	8004174 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800449e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a6:	f1c3 0207 	rsb	r2, r3, #7
 80044aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80044ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80044b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b6:	2200      	movs	r2, #0
 80044b8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80044ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	68f9      	ldr	r1, [r7, #12]
 80044c6:	69b8      	ldr	r0, [r7, #24]
 80044c8:	f000 fc1c 	bl	8004d04 <pxPortInitialiseStack>
 80044cc:	4602      	mov	r2, r0
 80044ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80044d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d002      	beq.n	80044de <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80044d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044de:	bf00      	nop
 80044e0:	3720      	adds	r7, #32
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
	...

080044e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80044f0:	f000 fd2c 	bl	8004f4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80044f4:	4b2a      	ldr	r3, [pc, #168]	; (80045a0 <prvAddNewTaskToReadyList+0xb8>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	3301      	adds	r3, #1
 80044fa:	4a29      	ldr	r2, [pc, #164]	; (80045a0 <prvAddNewTaskToReadyList+0xb8>)
 80044fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80044fe:	4b29      	ldr	r3, [pc, #164]	; (80045a4 <prvAddNewTaskToReadyList+0xbc>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d109      	bne.n	800451a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004506:	4a27      	ldr	r2, [pc, #156]	; (80045a4 <prvAddNewTaskToReadyList+0xbc>)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800450c:	4b24      	ldr	r3, [pc, #144]	; (80045a0 <prvAddNewTaskToReadyList+0xb8>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d110      	bne.n	8004536 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004514:	f000 fab8 	bl	8004a88 <prvInitialiseTaskLists>
 8004518:	e00d      	b.n	8004536 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800451a:	4b23      	ldr	r3, [pc, #140]	; (80045a8 <prvAddNewTaskToReadyList+0xc0>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d109      	bne.n	8004536 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004522:	4b20      	ldr	r3, [pc, #128]	; (80045a4 <prvAddNewTaskToReadyList+0xbc>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452c:	429a      	cmp	r2, r3
 800452e:	d802      	bhi.n	8004536 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004530:	4a1c      	ldr	r2, [pc, #112]	; (80045a4 <prvAddNewTaskToReadyList+0xbc>)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004536:	4b1d      	ldr	r3, [pc, #116]	; (80045ac <prvAddNewTaskToReadyList+0xc4>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	3301      	adds	r3, #1
 800453c:	4a1b      	ldr	r2, [pc, #108]	; (80045ac <prvAddNewTaskToReadyList+0xc4>)
 800453e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004544:	2201      	movs	r2, #1
 8004546:	409a      	lsls	r2, r3
 8004548:	4b19      	ldr	r3, [pc, #100]	; (80045b0 <prvAddNewTaskToReadyList+0xc8>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4313      	orrs	r3, r2
 800454e:	4a18      	ldr	r2, [pc, #96]	; (80045b0 <prvAddNewTaskToReadyList+0xc8>)
 8004550:	6013      	str	r3, [r2, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004556:	4613      	mov	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4413      	add	r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4a15      	ldr	r2, [pc, #84]	; (80045b4 <prvAddNewTaskToReadyList+0xcc>)
 8004560:	441a      	add	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	3304      	adds	r3, #4
 8004566:	4619      	mov	r1, r3
 8004568:	4610      	mov	r0, r2
 800456a:	f7ff fe10 	bl	800418e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800456e:	f000 fd1b 	bl	8004fa8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004572:	4b0d      	ldr	r3, [pc, #52]	; (80045a8 <prvAddNewTaskToReadyList+0xc0>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00e      	beq.n	8004598 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800457a:	4b0a      	ldr	r3, [pc, #40]	; (80045a4 <prvAddNewTaskToReadyList+0xbc>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004584:	429a      	cmp	r2, r3
 8004586:	d207      	bcs.n	8004598 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004588:	4b0b      	ldr	r3, [pc, #44]	; (80045b8 <prvAddNewTaskToReadyList+0xd0>)
 800458a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800458e:	601a      	str	r2, [r3, #0]
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004598:	bf00      	nop
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	20000560 	.word	0x20000560
 80045a4:	20000460 	.word	0x20000460
 80045a8:	2000056c 	.word	0x2000056c
 80045ac:	2000057c 	.word	0x2000057c
 80045b0:	20000568 	.word	0x20000568
 80045b4:	20000464 	.word	0x20000464
 80045b8:	e000ed04 	.word	0xe000ed04

080045bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80045c4:	2300      	movs	r3, #0
 80045c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d016      	beq.n	80045fc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80045ce:	4b13      	ldr	r3, [pc, #76]	; (800461c <vTaskDelay+0x60>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d009      	beq.n	80045ea <vTaskDelay+0x2e>
 80045d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045da:	f383 8811 	msr	BASEPRI, r3
 80045de:	f3bf 8f6f 	isb	sy
 80045e2:	f3bf 8f4f 	dsb	sy
 80045e6:	60bb      	str	r3, [r7, #8]
 80045e8:	e7fe      	b.n	80045e8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80045ea:	f000 f879 	bl	80046e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80045ee:	2100      	movs	r1, #0
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 fb21 	bl	8004c38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80045f6:	f000 f881 	bl	80046fc <xTaskResumeAll>
 80045fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d107      	bne.n	8004612 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004602:	4b07      	ldr	r3, [pc, #28]	; (8004620 <vTaskDelay+0x64>)
 8004604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004608:	601a      	str	r2, [r3, #0]
 800460a:	f3bf 8f4f 	dsb	sy
 800460e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004612:	bf00      	nop
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	20000588 	.word	0x20000588
 8004620:	e000ed04 	.word	0xe000ed04

08004624 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b08a      	sub	sp, #40	; 0x28
 8004628:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800462a:	2300      	movs	r3, #0
 800462c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800462e:	2300      	movs	r3, #0
 8004630:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004632:	463a      	mov	r2, r7
 8004634:	1d39      	adds	r1, r7, #4
 8004636:	f107 0308 	add.w	r3, r7, #8
 800463a:	4618      	mov	r0, r3
 800463c:	f7fc fcac 	bl	8000f98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004640:	6839      	ldr	r1, [r7, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	9202      	str	r2, [sp, #8]
 8004648:	9301      	str	r3, [sp, #4]
 800464a:	2300      	movs	r3, #0
 800464c:	9300      	str	r3, [sp, #0]
 800464e:	2300      	movs	r3, #0
 8004650:	460a      	mov	r2, r1
 8004652:	491d      	ldr	r1, [pc, #116]	; (80046c8 <vTaskStartScheduler+0xa4>)
 8004654:	481d      	ldr	r0, [pc, #116]	; (80046cc <vTaskStartScheduler+0xa8>)
 8004656:	f7ff fe21 	bl	800429c <xTaskCreateStatic>
 800465a:	4602      	mov	r2, r0
 800465c:	4b1c      	ldr	r3, [pc, #112]	; (80046d0 <vTaskStartScheduler+0xac>)
 800465e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004660:	4b1b      	ldr	r3, [pc, #108]	; (80046d0 <vTaskStartScheduler+0xac>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d002      	beq.n	800466e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004668:	2301      	movs	r3, #1
 800466a:	617b      	str	r3, [r7, #20]
 800466c:	e001      	b.n	8004672 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800466e:	2300      	movs	r3, #0
 8004670:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d115      	bne.n	80046a4 <vTaskStartScheduler+0x80>
 8004678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800467c:	f383 8811 	msr	BASEPRI, r3
 8004680:	f3bf 8f6f 	isb	sy
 8004684:	f3bf 8f4f 	dsb	sy
 8004688:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800468a:	4b12      	ldr	r3, [pc, #72]	; (80046d4 <vTaskStartScheduler+0xb0>)
 800468c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004690:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004692:	4b11      	ldr	r3, [pc, #68]	; (80046d8 <vTaskStartScheduler+0xb4>)
 8004694:	2201      	movs	r2, #1
 8004696:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004698:	4b10      	ldr	r3, [pc, #64]	; (80046dc <vTaskStartScheduler+0xb8>)
 800469a:	2200      	movs	r2, #0
 800469c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800469e:	f000 fbb7 	bl	8004e10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80046a2:	e00d      	b.n	80046c0 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046aa:	d109      	bne.n	80046c0 <vTaskStartScheduler+0x9c>
 80046ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b0:	f383 8811 	msr	BASEPRI, r3
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	60fb      	str	r3, [r7, #12]
 80046be:	e7fe      	b.n	80046be <vTaskStartScheduler+0x9a>
}
 80046c0:	bf00      	nop
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	08008618 	.word	0x08008618
 80046cc:	08004a59 	.word	0x08004a59
 80046d0:	20000584 	.word	0x20000584
 80046d4:	20000580 	.word	0x20000580
 80046d8:	2000056c 	.word	0x2000056c
 80046dc:	20000564 	.word	0x20000564

080046e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80046e4:	4b04      	ldr	r3, [pc, #16]	; (80046f8 <vTaskSuspendAll+0x18>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	3301      	adds	r3, #1
 80046ea:	4a03      	ldr	r2, [pc, #12]	; (80046f8 <vTaskSuspendAll+0x18>)
 80046ec:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80046ee:	bf00      	nop
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	20000588 	.word	0x20000588

080046fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004702:	2300      	movs	r3, #0
 8004704:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004706:	2300      	movs	r3, #0
 8004708:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800470a:	4b41      	ldr	r3, [pc, #260]	; (8004810 <xTaskResumeAll+0x114>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d109      	bne.n	8004726 <xTaskResumeAll+0x2a>
 8004712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004716:	f383 8811 	msr	BASEPRI, r3
 800471a:	f3bf 8f6f 	isb	sy
 800471e:	f3bf 8f4f 	dsb	sy
 8004722:	603b      	str	r3, [r7, #0]
 8004724:	e7fe      	b.n	8004724 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004726:	f000 fc11 	bl	8004f4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800472a:	4b39      	ldr	r3, [pc, #228]	; (8004810 <xTaskResumeAll+0x114>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	3b01      	subs	r3, #1
 8004730:	4a37      	ldr	r2, [pc, #220]	; (8004810 <xTaskResumeAll+0x114>)
 8004732:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004734:	4b36      	ldr	r3, [pc, #216]	; (8004810 <xTaskResumeAll+0x114>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d161      	bne.n	8004800 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800473c:	4b35      	ldr	r3, [pc, #212]	; (8004814 <xTaskResumeAll+0x118>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d05d      	beq.n	8004800 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004744:	e02e      	b.n	80047a4 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004746:	4b34      	ldr	r3, [pc, #208]	; (8004818 <xTaskResumeAll+0x11c>)
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	3318      	adds	r3, #24
 8004752:	4618      	mov	r0, r3
 8004754:	f7ff fd78 	bl	8004248 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	3304      	adds	r3, #4
 800475c:	4618      	mov	r0, r3
 800475e:	f7ff fd73 	bl	8004248 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004766:	2201      	movs	r2, #1
 8004768:	409a      	lsls	r2, r3
 800476a:	4b2c      	ldr	r3, [pc, #176]	; (800481c <xTaskResumeAll+0x120>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4313      	orrs	r3, r2
 8004770:	4a2a      	ldr	r2, [pc, #168]	; (800481c <xTaskResumeAll+0x120>)
 8004772:	6013      	str	r3, [r2, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004778:	4613      	mov	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4413      	add	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4a27      	ldr	r2, [pc, #156]	; (8004820 <xTaskResumeAll+0x124>)
 8004782:	441a      	add	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	3304      	adds	r3, #4
 8004788:	4619      	mov	r1, r3
 800478a:	4610      	mov	r0, r2
 800478c:	f7ff fcff 	bl	800418e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004794:	4b23      	ldr	r3, [pc, #140]	; (8004824 <xTaskResumeAll+0x128>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479a:	429a      	cmp	r2, r3
 800479c:	d302      	bcc.n	80047a4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800479e:	4b22      	ldr	r3, [pc, #136]	; (8004828 <xTaskResumeAll+0x12c>)
 80047a0:	2201      	movs	r2, #1
 80047a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047a4:	4b1c      	ldr	r3, [pc, #112]	; (8004818 <xTaskResumeAll+0x11c>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1cc      	bne.n	8004746 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80047b2:	f000 fa03 	bl	8004bbc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80047b6:	4b1d      	ldr	r3, [pc, #116]	; (800482c <xTaskResumeAll+0x130>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d010      	beq.n	80047e4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80047c2:	f000 f837 	bl	8004834 <xTaskIncrementTick>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d002      	beq.n	80047d2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80047cc:	4b16      	ldr	r3, [pc, #88]	; (8004828 <xTaskResumeAll+0x12c>)
 80047ce:	2201      	movs	r2, #1
 80047d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	3b01      	subs	r3, #1
 80047d6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1f1      	bne.n	80047c2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80047de:	4b13      	ldr	r3, [pc, #76]	; (800482c <xTaskResumeAll+0x130>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80047e4:	4b10      	ldr	r3, [pc, #64]	; (8004828 <xTaskResumeAll+0x12c>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d009      	beq.n	8004800 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80047ec:	2301      	movs	r3, #1
 80047ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80047f0:	4b0f      	ldr	r3, [pc, #60]	; (8004830 <xTaskResumeAll+0x134>)
 80047f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004800:	f000 fbd2 	bl	8004fa8 <vPortExitCritical>

	return xAlreadyYielded;
 8004804:	68bb      	ldr	r3, [r7, #8]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	20000588 	.word	0x20000588
 8004814:	20000560 	.word	0x20000560
 8004818:	20000520 	.word	0x20000520
 800481c:	20000568 	.word	0x20000568
 8004820:	20000464 	.word	0x20000464
 8004824:	20000460 	.word	0x20000460
 8004828:	20000574 	.word	0x20000574
 800482c:	20000570 	.word	0x20000570
 8004830:	e000ed04 	.word	0xe000ed04

08004834 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b086      	sub	sp, #24
 8004838:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800483a:	2300      	movs	r3, #0
 800483c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800483e:	4b4e      	ldr	r3, [pc, #312]	; (8004978 <xTaskIncrementTick+0x144>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	f040 8087 	bne.w	8004956 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004848:	4b4c      	ldr	r3, [pc, #304]	; (800497c <xTaskIncrementTick+0x148>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3301      	adds	r3, #1
 800484e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004850:	4a4a      	ldr	r2, [pc, #296]	; (800497c <xTaskIncrementTick+0x148>)
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d11f      	bne.n	800489c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800485c:	4b48      	ldr	r3, [pc, #288]	; (8004980 <xTaskIncrementTick+0x14c>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d009      	beq.n	800487a <xTaskIncrementTick+0x46>
 8004866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486a:	f383 8811 	msr	BASEPRI, r3
 800486e:	f3bf 8f6f 	isb	sy
 8004872:	f3bf 8f4f 	dsb	sy
 8004876:	603b      	str	r3, [r7, #0]
 8004878:	e7fe      	b.n	8004878 <xTaskIncrementTick+0x44>
 800487a:	4b41      	ldr	r3, [pc, #260]	; (8004980 <xTaskIncrementTick+0x14c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	4b40      	ldr	r3, [pc, #256]	; (8004984 <xTaskIncrementTick+0x150>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a3e      	ldr	r2, [pc, #248]	; (8004980 <xTaskIncrementTick+0x14c>)
 8004886:	6013      	str	r3, [r2, #0]
 8004888:	4a3e      	ldr	r2, [pc, #248]	; (8004984 <xTaskIncrementTick+0x150>)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6013      	str	r3, [r2, #0]
 800488e:	4b3e      	ldr	r3, [pc, #248]	; (8004988 <xTaskIncrementTick+0x154>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	3301      	adds	r3, #1
 8004894:	4a3c      	ldr	r2, [pc, #240]	; (8004988 <xTaskIncrementTick+0x154>)
 8004896:	6013      	str	r3, [r2, #0]
 8004898:	f000 f990 	bl	8004bbc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800489c:	4b3b      	ldr	r3, [pc, #236]	; (800498c <xTaskIncrementTick+0x158>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d348      	bcc.n	8004938 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048a6:	4b36      	ldr	r3, [pc, #216]	; (8004980 <xTaskIncrementTick+0x14c>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d104      	bne.n	80048ba <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048b0:	4b36      	ldr	r3, [pc, #216]	; (800498c <xTaskIncrementTick+0x158>)
 80048b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048b6:	601a      	str	r2, [r3, #0]
					break;
 80048b8:	e03e      	b.n	8004938 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048ba:	4b31      	ldr	r3, [pc, #196]	; (8004980 <xTaskIncrementTick+0x14c>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d203      	bcs.n	80048da <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80048d2:	4a2e      	ldr	r2, [pc, #184]	; (800498c <xTaskIncrementTick+0x158>)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80048d8:	e02e      	b.n	8004938 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	3304      	adds	r3, #4
 80048de:	4618      	mov	r0, r3
 80048e0:	f7ff fcb2 	bl	8004248 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d004      	beq.n	80048f6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	3318      	adds	r3, #24
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7ff fca9 	bl	8004248 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fa:	2201      	movs	r2, #1
 80048fc:	409a      	lsls	r2, r3
 80048fe:	4b24      	ldr	r3, [pc, #144]	; (8004990 <xTaskIncrementTick+0x15c>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4313      	orrs	r3, r2
 8004904:	4a22      	ldr	r2, [pc, #136]	; (8004990 <xTaskIncrementTick+0x15c>)
 8004906:	6013      	str	r3, [r2, #0]
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800490c:	4613      	mov	r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4413      	add	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4a1f      	ldr	r2, [pc, #124]	; (8004994 <xTaskIncrementTick+0x160>)
 8004916:	441a      	add	r2, r3
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	3304      	adds	r3, #4
 800491c:	4619      	mov	r1, r3
 800491e:	4610      	mov	r0, r2
 8004920:	f7ff fc35 	bl	800418e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004928:	4b1b      	ldr	r3, [pc, #108]	; (8004998 <xTaskIncrementTick+0x164>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492e:	429a      	cmp	r2, r3
 8004930:	d3b9      	bcc.n	80048a6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004932:	2301      	movs	r3, #1
 8004934:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004936:	e7b6      	b.n	80048a6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004938:	4b17      	ldr	r3, [pc, #92]	; (8004998 <xTaskIncrementTick+0x164>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800493e:	4915      	ldr	r1, [pc, #84]	; (8004994 <xTaskIncrementTick+0x160>)
 8004940:	4613      	mov	r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4413      	add	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	440b      	add	r3, r1
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d907      	bls.n	8004960 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8004950:	2301      	movs	r3, #1
 8004952:	617b      	str	r3, [r7, #20]
 8004954:	e004      	b.n	8004960 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004956:	4b11      	ldr	r3, [pc, #68]	; (800499c <xTaskIncrementTick+0x168>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	3301      	adds	r3, #1
 800495c:	4a0f      	ldr	r2, [pc, #60]	; (800499c <xTaskIncrementTick+0x168>)
 800495e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004960:	4b0f      	ldr	r3, [pc, #60]	; (80049a0 <xTaskIncrementTick+0x16c>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8004968:	2301      	movs	r3, #1
 800496a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800496c:	697b      	ldr	r3, [r7, #20]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	20000588 	.word	0x20000588
 800497c:	20000564 	.word	0x20000564
 8004980:	20000518 	.word	0x20000518
 8004984:	2000051c 	.word	0x2000051c
 8004988:	20000578 	.word	0x20000578
 800498c:	20000580 	.word	0x20000580
 8004990:	20000568 	.word	0x20000568
 8004994:	20000464 	.word	0x20000464
 8004998:	20000460 	.word	0x20000460
 800499c:	20000570 	.word	0x20000570
 80049a0:	20000574 	.word	0x20000574

080049a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80049aa:	4b26      	ldr	r3, [pc, #152]	; (8004a44 <vTaskSwitchContext+0xa0>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d003      	beq.n	80049ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80049b2:	4b25      	ldr	r3, [pc, #148]	; (8004a48 <vTaskSwitchContext+0xa4>)
 80049b4:	2201      	movs	r2, #1
 80049b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80049b8:	e03e      	b.n	8004a38 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80049ba:	4b23      	ldr	r3, [pc, #140]	; (8004a48 <vTaskSwitchContext+0xa4>)
 80049bc:	2200      	movs	r2, #0
 80049be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049c0:	4b22      	ldr	r3, [pc, #136]	; (8004a4c <vTaskSwitchContext+0xa8>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	fab3 f383 	clz	r3, r3
 80049cc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80049ce:	7afb      	ldrb	r3, [r7, #11]
 80049d0:	f1c3 031f 	rsb	r3, r3, #31
 80049d4:	617b      	str	r3, [r7, #20]
 80049d6:	491e      	ldr	r1, [pc, #120]	; (8004a50 <vTaskSwitchContext+0xac>)
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	4613      	mov	r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4413      	add	r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	440b      	add	r3, r1
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d109      	bne.n	80049fe <vTaskSwitchContext+0x5a>
	__asm volatile
 80049ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ee:	f383 8811 	msr	BASEPRI, r3
 80049f2:	f3bf 8f6f 	isb	sy
 80049f6:	f3bf 8f4f 	dsb	sy
 80049fa:	607b      	str	r3, [r7, #4]
 80049fc:	e7fe      	b.n	80049fc <vTaskSwitchContext+0x58>
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	4613      	mov	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4413      	add	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4a11      	ldr	r2, [pc, #68]	; (8004a50 <vTaskSwitchContext+0xac>)
 8004a0a:	4413      	add	r3, r2
 8004a0c:	613b      	str	r3, [r7, #16]
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	605a      	str	r2, [r3, #4]
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	3308      	adds	r3, #8
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d104      	bne.n	8004a2e <vTaskSwitchContext+0x8a>
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	605a      	str	r2, [r3, #4]
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	4a07      	ldr	r2, [pc, #28]	; (8004a54 <vTaskSwitchContext+0xb0>)
 8004a36:	6013      	str	r3, [r2, #0]
}
 8004a38:	bf00      	nop
 8004a3a:	371c      	adds	r7, #28
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	20000588 	.word	0x20000588
 8004a48:	20000574 	.word	0x20000574
 8004a4c:	20000568 	.word	0x20000568
 8004a50:	20000464 	.word	0x20000464
 8004a54:	20000460 	.word	0x20000460

08004a58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a60:	f000 f852 	bl	8004b08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a64:	4b06      	ldr	r3, [pc, #24]	; (8004a80 <prvIdleTask+0x28>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d9f9      	bls.n	8004a60 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a6c:	4b05      	ldr	r3, [pc, #20]	; (8004a84 <prvIdleTask+0x2c>)
 8004a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a72:	601a      	str	r2, [r3, #0]
 8004a74:	f3bf 8f4f 	dsb	sy
 8004a78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004a7c:	e7f0      	b.n	8004a60 <prvIdleTask+0x8>
 8004a7e:	bf00      	nop
 8004a80:	20000464 	.word	0x20000464
 8004a84:	e000ed04 	.word	0xe000ed04

08004a88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a8e:	2300      	movs	r3, #0
 8004a90:	607b      	str	r3, [r7, #4]
 8004a92:	e00c      	b.n	8004aae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	4613      	mov	r3, r2
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4413      	add	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4a12      	ldr	r2, [pc, #72]	; (8004ae8 <prvInitialiseTaskLists+0x60>)
 8004aa0:	4413      	add	r3, r2
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7ff fb46 	bl	8004134 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	607b      	str	r3, [r7, #4]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2b06      	cmp	r3, #6
 8004ab2:	d9ef      	bls.n	8004a94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ab4:	480d      	ldr	r0, [pc, #52]	; (8004aec <prvInitialiseTaskLists+0x64>)
 8004ab6:	f7ff fb3d 	bl	8004134 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004aba:	480d      	ldr	r0, [pc, #52]	; (8004af0 <prvInitialiseTaskLists+0x68>)
 8004abc:	f7ff fb3a 	bl	8004134 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ac0:	480c      	ldr	r0, [pc, #48]	; (8004af4 <prvInitialiseTaskLists+0x6c>)
 8004ac2:	f7ff fb37 	bl	8004134 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004ac6:	480c      	ldr	r0, [pc, #48]	; (8004af8 <prvInitialiseTaskLists+0x70>)
 8004ac8:	f7ff fb34 	bl	8004134 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004acc:	480b      	ldr	r0, [pc, #44]	; (8004afc <prvInitialiseTaskLists+0x74>)
 8004ace:	f7ff fb31 	bl	8004134 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004ad2:	4b0b      	ldr	r3, [pc, #44]	; (8004b00 <prvInitialiseTaskLists+0x78>)
 8004ad4:	4a05      	ldr	r2, [pc, #20]	; (8004aec <prvInitialiseTaskLists+0x64>)
 8004ad6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ad8:	4b0a      	ldr	r3, [pc, #40]	; (8004b04 <prvInitialiseTaskLists+0x7c>)
 8004ada:	4a05      	ldr	r2, [pc, #20]	; (8004af0 <prvInitialiseTaskLists+0x68>)
 8004adc:	601a      	str	r2, [r3, #0]
}
 8004ade:	bf00      	nop
 8004ae0:	3708      	adds	r7, #8
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	20000464 	.word	0x20000464
 8004aec:	200004f0 	.word	0x200004f0
 8004af0:	20000504 	.word	0x20000504
 8004af4:	20000520 	.word	0x20000520
 8004af8:	20000534 	.word	0x20000534
 8004afc:	2000054c 	.word	0x2000054c
 8004b00:	20000518 	.word	0x20000518
 8004b04:	2000051c 	.word	0x2000051c

08004b08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b0e:	e019      	b.n	8004b44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004b10:	f000 fa1c 	bl	8004f4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b14:	4b0f      	ldr	r3, [pc, #60]	; (8004b54 <prvCheckTasksWaitingTermination+0x4c>)
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	3304      	adds	r3, #4
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7ff fb91 	bl	8004248 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b26:	4b0c      	ldr	r3, [pc, #48]	; (8004b58 <prvCheckTasksWaitingTermination+0x50>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	4a0a      	ldr	r2, [pc, #40]	; (8004b58 <prvCheckTasksWaitingTermination+0x50>)
 8004b2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b30:	4b0a      	ldr	r3, [pc, #40]	; (8004b5c <prvCheckTasksWaitingTermination+0x54>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	3b01      	subs	r3, #1
 8004b36:	4a09      	ldr	r2, [pc, #36]	; (8004b5c <prvCheckTasksWaitingTermination+0x54>)
 8004b38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004b3a:	f000 fa35 	bl	8004fa8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f80e 	bl	8004b60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b44:	4b05      	ldr	r3, [pc, #20]	; (8004b5c <prvCheckTasksWaitingTermination+0x54>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1e1      	bne.n	8004b10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b4c:	bf00      	nop
 8004b4e:	3708      	adds	r7, #8
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	20000534 	.word	0x20000534
 8004b58:	20000560 	.word	0x20000560
 8004b5c:	20000548 	.word	0x20000548

08004b60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d108      	bne.n	8004b84 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 fb86 	bl	8005288 <vPortFree>
				vPortFree( pxTCB );
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 fb83 	bl	8005288 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b82:	e017      	b.n	8004bb4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d103      	bne.n	8004b96 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 fb7a 	bl	8005288 <vPortFree>
	}
 8004b94:	e00e      	b.n	8004bb4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d009      	beq.n	8004bb4 <prvDeleteTCB+0x54>
 8004ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba4:	f383 8811 	msr	BASEPRI, r3
 8004ba8:	f3bf 8f6f 	isb	sy
 8004bac:	f3bf 8f4f 	dsb	sy
 8004bb0:	60fb      	str	r3, [r7, #12]
 8004bb2:	e7fe      	b.n	8004bb2 <prvDeleteTCB+0x52>
	}
 8004bb4:	bf00      	nop
 8004bb6:	3710      	adds	r7, #16
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bc2:	4b0c      	ldr	r3, [pc, #48]	; (8004bf4 <prvResetNextTaskUnblockTime+0x38>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d104      	bne.n	8004bd6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004bcc:	4b0a      	ldr	r3, [pc, #40]	; (8004bf8 <prvResetNextTaskUnblockTime+0x3c>)
 8004bce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bd2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004bd4:	e008      	b.n	8004be8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bd6:	4b07      	ldr	r3, [pc, #28]	; (8004bf4 <prvResetNextTaskUnblockTime+0x38>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	4a04      	ldr	r2, [pc, #16]	; (8004bf8 <prvResetNextTaskUnblockTime+0x3c>)
 8004be6:	6013      	str	r3, [r2, #0]
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	20000518 	.word	0x20000518
 8004bf8:	20000580 	.word	0x20000580

08004bfc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004c02:	4b0b      	ldr	r3, [pc, #44]	; (8004c30 <xTaskGetSchedulerState+0x34>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d102      	bne.n	8004c10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	607b      	str	r3, [r7, #4]
 8004c0e:	e008      	b.n	8004c22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c10:	4b08      	ldr	r3, [pc, #32]	; (8004c34 <xTaskGetSchedulerState+0x38>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d102      	bne.n	8004c1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004c18:	2302      	movs	r3, #2
 8004c1a:	607b      	str	r3, [r7, #4]
 8004c1c:	e001      	b.n	8004c22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004c22:	687b      	ldr	r3, [r7, #4]
	}
 8004c24:	4618      	mov	r0, r3
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr
 8004c30:	2000056c 	.word	0x2000056c
 8004c34:	20000588 	.word	0x20000588

08004c38 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c42:	4b29      	ldr	r3, [pc, #164]	; (8004ce8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c48:	4b28      	ldr	r3, [pc, #160]	; (8004cec <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	3304      	adds	r3, #4
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7ff fafa 	bl	8004248 <uxListRemove>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10b      	bne.n	8004c72 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004c5a:	4b24      	ldr	r3, [pc, #144]	; (8004cec <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c60:	2201      	movs	r2, #1
 8004c62:	fa02 f303 	lsl.w	r3, r2, r3
 8004c66:	43da      	mvns	r2, r3
 8004c68:	4b21      	ldr	r3, [pc, #132]	; (8004cf0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	4a20      	ldr	r2, [pc, #128]	; (8004cf0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c70:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c78:	d10a      	bne.n	8004c90 <prvAddCurrentTaskToDelayedList+0x58>
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d007      	beq.n	8004c90 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c80:	4b1a      	ldr	r3, [pc, #104]	; (8004cec <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	3304      	adds	r3, #4
 8004c86:	4619      	mov	r1, r3
 8004c88:	481a      	ldr	r0, [pc, #104]	; (8004cf4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004c8a:	f7ff fa80 	bl	800418e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c8e:	e026      	b.n	8004cde <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4413      	add	r3, r2
 8004c96:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c98:	4b14      	ldr	r3, [pc, #80]	; (8004cec <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d209      	bcs.n	8004cbc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ca8:	4b13      	ldr	r3, [pc, #76]	; (8004cf8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	4b0f      	ldr	r3, [pc, #60]	; (8004cec <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	3304      	adds	r3, #4
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	4610      	mov	r0, r2
 8004cb6:	f7ff fa8e 	bl	80041d6 <vListInsert>
}
 8004cba:	e010      	b.n	8004cde <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cbc:	4b0f      	ldr	r3, [pc, #60]	; (8004cfc <prvAddCurrentTaskToDelayedList+0xc4>)
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	4b0a      	ldr	r3, [pc, #40]	; (8004cec <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	3304      	adds	r3, #4
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	4610      	mov	r0, r2
 8004cca:	f7ff fa84 	bl	80041d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004cce:	4b0c      	ldr	r3, [pc, #48]	; (8004d00 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d202      	bcs.n	8004cde <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004cd8:	4a09      	ldr	r2, [pc, #36]	; (8004d00 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	6013      	str	r3, [r2, #0]
}
 8004cde:	bf00      	nop
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	20000564 	.word	0x20000564
 8004cec:	20000460 	.word	0x20000460
 8004cf0:	20000568 	.word	0x20000568
 8004cf4:	2000054c 	.word	0x2000054c
 8004cf8:	2000051c 	.word	0x2000051c
 8004cfc:	20000518 	.word	0x20000518
 8004d00:	20000580 	.word	0x20000580

08004d04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	3b04      	subs	r3, #4
 8004d14:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	3b04      	subs	r3, #4
 8004d22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	f023 0201 	bic.w	r2, r3, #1
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	3b04      	subs	r3, #4
 8004d32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d34:	4a0c      	ldr	r2, [pc, #48]	; (8004d68 <pxPortInitialiseStack+0x64>)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	3b14      	subs	r3, #20
 8004d3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	3b04      	subs	r3, #4
 8004d4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f06f 0202 	mvn.w	r2, #2
 8004d52:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	3b20      	subs	r3, #32
 8004d58:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3714      	adds	r7, #20
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr
 8004d68:	08004d6d 	.word	0x08004d6d

08004d6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004d72:	2300      	movs	r3, #0
 8004d74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d76:	4b11      	ldr	r3, [pc, #68]	; (8004dbc <prvTaskExitError+0x50>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d7e:	d009      	beq.n	8004d94 <prvTaskExitError+0x28>
 8004d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d84:	f383 8811 	msr	BASEPRI, r3
 8004d88:	f3bf 8f6f 	isb	sy
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	60fb      	str	r3, [r7, #12]
 8004d92:	e7fe      	b.n	8004d92 <prvTaskExitError+0x26>
 8004d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d98:	f383 8811 	msr	BASEPRI, r3
 8004d9c:	f3bf 8f6f 	isb	sy
 8004da0:	f3bf 8f4f 	dsb	sy
 8004da4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004da6:	bf00      	nop
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d0fc      	beq.n	8004da8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004dae:	bf00      	nop
 8004db0:	3714      	adds	r7, #20
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	2000000c 	.word	0x2000000c

08004dc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004dc0:	4b07      	ldr	r3, [pc, #28]	; (8004de0 <pxCurrentTCBConst2>)
 8004dc2:	6819      	ldr	r1, [r3, #0]
 8004dc4:	6808      	ldr	r0, [r1, #0]
 8004dc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dca:	f380 8809 	msr	PSP, r0
 8004dce:	f3bf 8f6f 	isb	sy
 8004dd2:	f04f 0000 	mov.w	r0, #0
 8004dd6:	f380 8811 	msr	BASEPRI, r0
 8004dda:	4770      	bx	lr
 8004ddc:	f3af 8000 	nop.w

08004de0 <pxCurrentTCBConst2>:
 8004de0:	20000460 	.word	0x20000460
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004de4:	bf00      	nop
 8004de6:	bf00      	nop

08004de8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004de8:	4808      	ldr	r0, [pc, #32]	; (8004e0c <prvPortStartFirstTask+0x24>)
 8004dea:	6800      	ldr	r0, [r0, #0]
 8004dec:	6800      	ldr	r0, [r0, #0]
 8004dee:	f380 8808 	msr	MSP, r0
 8004df2:	f04f 0000 	mov.w	r0, #0
 8004df6:	f380 8814 	msr	CONTROL, r0
 8004dfa:	b662      	cpsie	i
 8004dfc:	b661      	cpsie	f
 8004dfe:	f3bf 8f4f 	dsb	sy
 8004e02:	f3bf 8f6f 	isb	sy
 8004e06:	df00      	svc	0
 8004e08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004e0a:	bf00      	nop
 8004e0c:	e000ed08 	.word	0xe000ed08

08004e10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b086      	sub	sp, #24
 8004e14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004e16:	4b44      	ldr	r3, [pc, #272]	; (8004f28 <xPortStartScheduler+0x118>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a44      	ldr	r2, [pc, #272]	; (8004f2c <xPortStartScheduler+0x11c>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d109      	bne.n	8004e34 <xPortStartScheduler+0x24>
 8004e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e24:	f383 8811 	msr	BASEPRI, r3
 8004e28:	f3bf 8f6f 	isb	sy
 8004e2c:	f3bf 8f4f 	dsb	sy
 8004e30:	613b      	str	r3, [r7, #16]
 8004e32:	e7fe      	b.n	8004e32 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004e34:	4b3c      	ldr	r3, [pc, #240]	; (8004f28 <xPortStartScheduler+0x118>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a3d      	ldr	r2, [pc, #244]	; (8004f30 <xPortStartScheduler+0x120>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d109      	bne.n	8004e52 <xPortStartScheduler+0x42>
 8004e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e42:	f383 8811 	msr	BASEPRI, r3
 8004e46:	f3bf 8f6f 	isb	sy
 8004e4a:	f3bf 8f4f 	dsb	sy
 8004e4e:	60fb      	str	r3, [r7, #12]
 8004e50:	e7fe      	b.n	8004e50 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e52:	4b38      	ldr	r3, [pc, #224]	; (8004f34 <xPortStartScheduler+0x124>)
 8004e54:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	22ff      	movs	r2, #255	; 0xff
 8004e62:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e6c:	78fb      	ldrb	r3, [r7, #3]
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e74:	b2da      	uxtb	r2, r3
 8004e76:	4b30      	ldr	r3, [pc, #192]	; (8004f38 <xPortStartScheduler+0x128>)
 8004e78:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e7a:	4b30      	ldr	r3, [pc, #192]	; (8004f3c <xPortStartScheduler+0x12c>)
 8004e7c:	2207      	movs	r2, #7
 8004e7e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e80:	e009      	b.n	8004e96 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004e82:	4b2e      	ldr	r3, [pc, #184]	; (8004f3c <xPortStartScheduler+0x12c>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	3b01      	subs	r3, #1
 8004e88:	4a2c      	ldr	r2, [pc, #176]	; (8004f3c <xPortStartScheduler+0x12c>)
 8004e8a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e8c:	78fb      	ldrb	r3, [r7, #3]
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e96:	78fb      	ldrb	r3, [r7, #3]
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e9e:	2b80      	cmp	r3, #128	; 0x80
 8004ea0:	d0ef      	beq.n	8004e82 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ea2:	4b26      	ldr	r3, [pc, #152]	; (8004f3c <xPortStartScheduler+0x12c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f1c3 0307 	rsb	r3, r3, #7
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	d009      	beq.n	8004ec2 <xPortStartScheduler+0xb2>
 8004eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb2:	f383 8811 	msr	BASEPRI, r3
 8004eb6:	f3bf 8f6f 	isb	sy
 8004eba:	f3bf 8f4f 	dsb	sy
 8004ebe:	60bb      	str	r3, [r7, #8]
 8004ec0:	e7fe      	b.n	8004ec0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ec2:	4b1e      	ldr	r3, [pc, #120]	; (8004f3c <xPortStartScheduler+0x12c>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	021b      	lsls	r3, r3, #8
 8004ec8:	4a1c      	ldr	r2, [pc, #112]	; (8004f3c <xPortStartScheduler+0x12c>)
 8004eca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ecc:	4b1b      	ldr	r3, [pc, #108]	; (8004f3c <xPortStartScheduler+0x12c>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ed4:	4a19      	ldr	r2, [pc, #100]	; (8004f3c <xPortStartScheduler+0x12c>)
 8004ed6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	b2da      	uxtb	r2, r3
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ee0:	4b17      	ldr	r3, [pc, #92]	; (8004f40 <xPortStartScheduler+0x130>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a16      	ldr	r2, [pc, #88]	; (8004f40 <xPortStartScheduler+0x130>)
 8004ee6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004eea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004eec:	4b14      	ldr	r3, [pc, #80]	; (8004f40 <xPortStartScheduler+0x130>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a13      	ldr	r2, [pc, #76]	; (8004f40 <xPortStartScheduler+0x130>)
 8004ef2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004ef6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004ef8:	f000 f8d6 	bl	80050a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004efc:	4b11      	ldr	r3, [pc, #68]	; (8004f44 <xPortStartScheduler+0x134>)
 8004efe:	2200      	movs	r2, #0
 8004f00:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004f02:	f000 f8f5 	bl	80050f0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004f06:	4b10      	ldr	r3, [pc, #64]	; (8004f48 <xPortStartScheduler+0x138>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a0f      	ldr	r2, [pc, #60]	; (8004f48 <xPortStartScheduler+0x138>)
 8004f0c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004f10:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f12:	f7ff ff69 	bl	8004de8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004f16:	f7ff fd45 	bl	80049a4 <vTaskSwitchContext>
	prvTaskExitError();
 8004f1a:	f7ff ff27 	bl	8004d6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3718      	adds	r7, #24
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	e000ed00 	.word	0xe000ed00
 8004f2c:	410fc271 	.word	0x410fc271
 8004f30:	410fc270 	.word	0x410fc270
 8004f34:	e000e400 	.word	0xe000e400
 8004f38:	2000058c 	.word	0x2000058c
 8004f3c:	20000590 	.word	0x20000590
 8004f40:	e000ed20 	.word	0xe000ed20
 8004f44:	2000000c 	.word	0x2000000c
 8004f48:	e000ef34 	.word	0xe000ef34

08004f4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f56:	f383 8811 	msr	BASEPRI, r3
 8004f5a:	f3bf 8f6f 	isb	sy
 8004f5e:	f3bf 8f4f 	dsb	sy
 8004f62:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004f64:	4b0e      	ldr	r3, [pc, #56]	; (8004fa0 <vPortEnterCritical+0x54>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	4a0d      	ldr	r2, [pc, #52]	; (8004fa0 <vPortEnterCritical+0x54>)
 8004f6c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004f6e:	4b0c      	ldr	r3, [pc, #48]	; (8004fa0 <vPortEnterCritical+0x54>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d10e      	bne.n	8004f94 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f76:	4b0b      	ldr	r3, [pc, #44]	; (8004fa4 <vPortEnterCritical+0x58>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d009      	beq.n	8004f94 <vPortEnterCritical+0x48>
 8004f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f84:	f383 8811 	msr	BASEPRI, r3
 8004f88:	f3bf 8f6f 	isb	sy
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	603b      	str	r3, [r7, #0]
 8004f92:	e7fe      	b.n	8004f92 <vPortEnterCritical+0x46>
	}
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	2000000c 	.word	0x2000000c
 8004fa4:	e000ed04 	.word	0xe000ed04

08004fa8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004fae:	4b11      	ldr	r3, [pc, #68]	; (8004ff4 <vPortExitCritical+0x4c>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d109      	bne.n	8004fca <vPortExitCritical+0x22>
 8004fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fba:	f383 8811 	msr	BASEPRI, r3
 8004fbe:	f3bf 8f6f 	isb	sy
 8004fc2:	f3bf 8f4f 	dsb	sy
 8004fc6:	607b      	str	r3, [r7, #4]
 8004fc8:	e7fe      	b.n	8004fc8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004fca:	4b0a      	ldr	r3, [pc, #40]	; (8004ff4 <vPortExitCritical+0x4c>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	4a08      	ldr	r2, [pc, #32]	; (8004ff4 <vPortExitCritical+0x4c>)
 8004fd2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004fd4:	4b07      	ldr	r3, [pc, #28]	; (8004ff4 <vPortExitCritical+0x4c>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d104      	bne.n	8004fe6 <vPortExitCritical+0x3e>
 8004fdc:	2300      	movs	r3, #0
 8004fde:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004fe6:	bf00      	nop
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	2000000c 	.word	0x2000000c
	...

08005000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005000:	f3ef 8009 	mrs	r0, PSP
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	4b15      	ldr	r3, [pc, #84]	; (8005060 <pxCurrentTCBConst>)
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	f01e 0f10 	tst.w	lr, #16
 8005010:	bf08      	it	eq
 8005012:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005016:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800501a:	6010      	str	r0, [r2, #0]
 800501c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005020:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005024:	f380 8811 	msr	BASEPRI, r0
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f7ff fcb8 	bl	80049a4 <vTaskSwitchContext>
 8005034:	f04f 0000 	mov.w	r0, #0
 8005038:	f380 8811 	msr	BASEPRI, r0
 800503c:	bc09      	pop	{r0, r3}
 800503e:	6819      	ldr	r1, [r3, #0]
 8005040:	6808      	ldr	r0, [r1, #0]
 8005042:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005046:	f01e 0f10 	tst.w	lr, #16
 800504a:	bf08      	it	eq
 800504c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005050:	f380 8809 	msr	PSP, r0
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	f3af 8000 	nop.w

08005060 <pxCurrentTCBConst>:
 8005060:	20000460 	.word	0x20000460
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005064:	bf00      	nop
 8005066:	bf00      	nop

08005068 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
	__asm volatile
 800506e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005080:	f7ff fbd8 	bl	8004834 <xTaskIncrementTick>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800508a:	4b06      	ldr	r3, [pc, #24]	; (80050a4 <xPortSysTickHandler+0x3c>)
 800508c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005090:	601a      	str	r2, [r3, #0]
 8005092:	2300      	movs	r3, #0
 8005094:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800509c:	bf00      	nop
 800509e:	3708      	adds	r7, #8
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	e000ed04 	.word	0xe000ed04

080050a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80050a8:	b480      	push	{r7}
 80050aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80050ac:	4b0b      	ldr	r3, [pc, #44]	; (80050dc <vPortSetupTimerInterrupt+0x34>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80050b2:	4b0b      	ldr	r3, [pc, #44]	; (80050e0 <vPortSetupTimerInterrupt+0x38>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80050b8:	4b0a      	ldr	r3, [pc, #40]	; (80050e4 <vPortSetupTimerInterrupt+0x3c>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a0a      	ldr	r2, [pc, #40]	; (80050e8 <vPortSetupTimerInterrupt+0x40>)
 80050be:	fba2 2303 	umull	r2, r3, r2, r3
 80050c2:	099b      	lsrs	r3, r3, #6
 80050c4:	4a09      	ldr	r2, [pc, #36]	; (80050ec <vPortSetupTimerInterrupt+0x44>)
 80050c6:	3b01      	subs	r3, #1
 80050c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80050ca:	4b04      	ldr	r3, [pc, #16]	; (80050dc <vPortSetupTimerInterrupt+0x34>)
 80050cc:	2207      	movs	r2, #7
 80050ce:	601a      	str	r2, [r3, #0]
}
 80050d0:	bf00      	nop
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	e000e010 	.word	0xe000e010
 80050e0:	e000e018 	.word	0xe000e018
 80050e4:	20000000 	.word	0x20000000
 80050e8:	10624dd3 	.word	0x10624dd3
 80050ec:	e000e014 	.word	0xe000e014

080050f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80050f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005100 <vPortEnableVFP+0x10>
 80050f4:	6801      	ldr	r1, [r0, #0]
 80050f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80050fa:	6001      	str	r1, [r0, #0]
 80050fc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80050fe:	bf00      	nop
 8005100:	e000ed88 	.word	0xe000ed88

08005104 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b08a      	sub	sp, #40	; 0x28
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800510c:	2300      	movs	r3, #0
 800510e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005110:	f7ff fae6 	bl	80046e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005114:	4b57      	ldr	r3, [pc, #348]	; (8005274 <pvPortMalloc+0x170>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800511c:	f000 f90c 	bl	8005338 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005120:	4b55      	ldr	r3, [pc, #340]	; (8005278 <pvPortMalloc+0x174>)
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4013      	ands	r3, r2
 8005128:	2b00      	cmp	r3, #0
 800512a:	f040 808c 	bne.w	8005246 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d01c      	beq.n	800516e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005134:	2208      	movs	r2, #8
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4413      	add	r3, r2
 800513a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f003 0307 	and.w	r3, r3, #7
 8005142:	2b00      	cmp	r3, #0
 8005144:	d013      	beq.n	800516e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f023 0307 	bic.w	r3, r3, #7
 800514c:	3308      	adds	r3, #8
 800514e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f003 0307 	and.w	r3, r3, #7
 8005156:	2b00      	cmp	r3, #0
 8005158:	d009      	beq.n	800516e <pvPortMalloc+0x6a>
	__asm volatile
 800515a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515e:	f383 8811 	msr	BASEPRI, r3
 8005162:	f3bf 8f6f 	isb	sy
 8005166:	f3bf 8f4f 	dsb	sy
 800516a:	617b      	str	r3, [r7, #20]
 800516c:	e7fe      	b.n	800516c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d068      	beq.n	8005246 <pvPortMalloc+0x142>
 8005174:	4b41      	ldr	r3, [pc, #260]	; (800527c <pvPortMalloc+0x178>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	429a      	cmp	r2, r3
 800517c:	d863      	bhi.n	8005246 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800517e:	4b40      	ldr	r3, [pc, #256]	; (8005280 <pvPortMalloc+0x17c>)
 8005180:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005182:	4b3f      	ldr	r3, [pc, #252]	; (8005280 <pvPortMalloc+0x17c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005188:	e004      	b.n	8005194 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	429a      	cmp	r2, r3
 800519c:	d903      	bls.n	80051a6 <pvPortMalloc+0xa2>
 800519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1f1      	bne.n	800518a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80051a6:	4b33      	ldr	r3, [pc, #204]	; (8005274 <pvPortMalloc+0x170>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d04a      	beq.n	8005246 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80051b0:	6a3b      	ldr	r3, [r7, #32]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2208      	movs	r2, #8
 80051b6:	4413      	add	r3, r2
 80051b8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80051ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	6a3b      	ldr	r3, [r7, #32]
 80051c0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80051c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	1ad2      	subs	r2, r2, r3
 80051ca:	2308      	movs	r3, #8
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d91e      	bls.n	8005210 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80051d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4413      	add	r3, r2
 80051d8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	f003 0307 	and.w	r3, r3, #7
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d009      	beq.n	80051f8 <pvPortMalloc+0xf4>
 80051e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e8:	f383 8811 	msr	BASEPRI, r3
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	613b      	str	r3, [r7, #16]
 80051f6:	e7fe      	b.n	80051f6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80051f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	1ad2      	subs	r2, r2, r3
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800520a:	69b8      	ldr	r0, [r7, #24]
 800520c:	f000 f8f6 	bl	80053fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005210:	4b1a      	ldr	r3, [pc, #104]	; (800527c <pvPortMalloc+0x178>)
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	4a18      	ldr	r2, [pc, #96]	; (800527c <pvPortMalloc+0x178>)
 800521c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800521e:	4b17      	ldr	r3, [pc, #92]	; (800527c <pvPortMalloc+0x178>)
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	4b18      	ldr	r3, [pc, #96]	; (8005284 <pvPortMalloc+0x180>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	429a      	cmp	r2, r3
 8005228:	d203      	bcs.n	8005232 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800522a:	4b14      	ldr	r3, [pc, #80]	; (800527c <pvPortMalloc+0x178>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a15      	ldr	r2, [pc, #84]	; (8005284 <pvPortMalloc+0x180>)
 8005230:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005234:	685a      	ldr	r2, [r3, #4]
 8005236:	4b10      	ldr	r3, [pc, #64]	; (8005278 <pvPortMalloc+0x174>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	431a      	orrs	r2, r3
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	2200      	movs	r2, #0
 8005244:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005246:	f7ff fa59 	bl	80046fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	f003 0307 	and.w	r3, r3, #7
 8005250:	2b00      	cmp	r3, #0
 8005252:	d009      	beq.n	8005268 <pvPortMalloc+0x164>
 8005254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005258:	f383 8811 	msr	BASEPRI, r3
 800525c:	f3bf 8f6f 	isb	sy
 8005260:	f3bf 8f4f 	dsb	sy
 8005264:	60fb      	str	r3, [r7, #12]
 8005266:	e7fe      	b.n	8005266 <pvPortMalloc+0x162>
	return pvReturn;
 8005268:	69fb      	ldr	r3, [r7, #28]
}
 800526a:	4618      	mov	r0, r3
 800526c:	3728      	adds	r7, #40	; 0x28
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	2000419c 	.word	0x2000419c
 8005278:	200041a8 	.word	0x200041a8
 800527c:	200041a0 	.word	0x200041a0
 8005280:	20004194 	.word	0x20004194
 8005284:	200041a4 	.word	0x200041a4

08005288 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b086      	sub	sp, #24
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d046      	beq.n	8005328 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800529a:	2308      	movs	r3, #8
 800529c:	425b      	negs	r3, r3
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	4413      	add	r3, r2
 80052a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	4b20      	ldr	r3, [pc, #128]	; (8005330 <vPortFree+0xa8>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4013      	ands	r3, r2
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d109      	bne.n	80052ca <vPortFree+0x42>
 80052b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ba:	f383 8811 	msr	BASEPRI, r3
 80052be:	f3bf 8f6f 	isb	sy
 80052c2:	f3bf 8f4f 	dsb	sy
 80052c6:	60fb      	str	r3, [r7, #12]
 80052c8:	e7fe      	b.n	80052c8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d009      	beq.n	80052e6 <vPortFree+0x5e>
 80052d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d6:	f383 8811 	msr	BASEPRI, r3
 80052da:	f3bf 8f6f 	isb	sy
 80052de:	f3bf 8f4f 	dsb	sy
 80052e2:	60bb      	str	r3, [r7, #8]
 80052e4:	e7fe      	b.n	80052e4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	4b11      	ldr	r3, [pc, #68]	; (8005330 <vPortFree+0xa8>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4013      	ands	r3, r2
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d019      	beq.n	8005328 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d115      	bne.n	8005328 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	4b0b      	ldr	r3, [pc, #44]	; (8005330 <vPortFree+0xa8>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	43db      	mvns	r3, r3
 8005306:	401a      	ands	r2, r3
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800530c:	f7ff f9e8 	bl	80046e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	4b07      	ldr	r3, [pc, #28]	; (8005334 <vPortFree+0xac>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4413      	add	r3, r2
 800531a:	4a06      	ldr	r2, [pc, #24]	; (8005334 <vPortFree+0xac>)
 800531c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800531e:	6938      	ldr	r0, [r7, #16]
 8005320:	f000 f86c 	bl	80053fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005324:	f7ff f9ea 	bl	80046fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005328:	bf00      	nop
 800532a:	3718      	adds	r7, #24
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	200041a8 	.word	0x200041a8
 8005334:	200041a0 	.word	0x200041a0

08005338 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800533e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005342:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005344:	4b27      	ldr	r3, [pc, #156]	; (80053e4 <prvHeapInit+0xac>)
 8005346:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f003 0307 	and.w	r3, r3, #7
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00c      	beq.n	800536c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	3307      	adds	r3, #7
 8005356:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f023 0307 	bic.w	r3, r3, #7
 800535e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	4a1f      	ldr	r2, [pc, #124]	; (80053e4 <prvHeapInit+0xac>)
 8005368:	4413      	add	r3, r2
 800536a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005370:	4a1d      	ldr	r2, [pc, #116]	; (80053e8 <prvHeapInit+0xb0>)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005376:	4b1c      	ldr	r3, [pc, #112]	; (80053e8 <prvHeapInit+0xb0>)
 8005378:	2200      	movs	r2, #0
 800537a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	4413      	add	r3, r2
 8005382:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005384:	2208      	movs	r2, #8
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	1a9b      	subs	r3, r3, r2
 800538a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f023 0307 	bic.w	r3, r3, #7
 8005392:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	4a15      	ldr	r2, [pc, #84]	; (80053ec <prvHeapInit+0xb4>)
 8005398:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800539a:	4b14      	ldr	r3, [pc, #80]	; (80053ec <prvHeapInit+0xb4>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2200      	movs	r2, #0
 80053a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80053a2:	4b12      	ldr	r3, [pc, #72]	; (80053ec <prvHeapInit+0xb4>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2200      	movs	r2, #0
 80053a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	1ad2      	subs	r2, r2, r3
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80053b8:	4b0c      	ldr	r3, [pc, #48]	; (80053ec <prvHeapInit+0xb4>)
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	4a0a      	ldr	r2, [pc, #40]	; (80053f0 <prvHeapInit+0xb8>)
 80053c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	4a09      	ldr	r2, [pc, #36]	; (80053f4 <prvHeapInit+0xbc>)
 80053ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80053d0:	4b09      	ldr	r3, [pc, #36]	; (80053f8 <prvHeapInit+0xc0>)
 80053d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80053d6:	601a      	str	r2, [r3, #0]
}
 80053d8:	bf00      	nop
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr
 80053e4:	20000594 	.word	0x20000594
 80053e8:	20004194 	.word	0x20004194
 80053ec:	2000419c 	.word	0x2000419c
 80053f0:	200041a4 	.word	0x200041a4
 80053f4:	200041a0 	.word	0x200041a0
 80053f8:	200041a8 	.word	0x200041a8

080053fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005404:	4b28      	ldr	r3, [pc, #160]	; (80054a8 <prvInsertBlockIntoFreeList+0xac>)
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	e002      	b.n	8005410 <prvInsertBlockIntoFreeList+0x14>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	60fb      	str	r3, [r7, #12]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	429a      	cmp	r2, r3
 8005418:	d8f7      	bhi.n	800540a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	4413      	add	r3, r2
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	429a      	cmp	r2, r3
 800542a:	d108      	bne.n	800543e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	441a      	add	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	441a      	add	r2, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	429a      	cmp	r2, r3
 8005450:	d118      	bne.n	8005484 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	4b15      	ldr	r3, [pc, #84]	; (80054ac <prvInsertBlockIntoFreeList+0xb0>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	429a      	cmp	r2, r3
 800545c:	d00d      	beq.n	800547a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685a      	ldr	r2, [r3, #4]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	441a      	add	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	601a      	str	r2, [r3, #0]
 8005478:	e008      	b.n	800548c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800547a:	4b0c      	ldr	r3, [pc, #48]	; (80054ac <prvInsertBlockIntoFreeList+0xb0>)
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	601a      	str	r2, [r3, #0]
 8005482:	e003      	b.n	800548c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	429a      	cmp	r2, r3
 8005492:	d002      	beq.n	800549a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800549a:	bf00      	nop
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	20004194 	.word	0x20004194
 80054ac:	2000419c 	.word	0x2000419c

080054b0 <atof>:
 80054b0:	2100      	movs	r1, #0
 80054b2:	f000 bfe1 	b.w	8006478 <strtod>

080054b6 <atoi>:
 80054b6:	220a      	movs	r2, #10
 80054b8:	2100      	movs	r1, #0
 80054ba:	f001 b86d 	b.w	8006598 <strtol>
	...

080054c0 <__errno>:
 80054c0:	4b01      	ldr	r3, [pc, #4]	; (80054c8 <__errno+0x8>)
 80054c2:	6818      	ldr	r0, [r3, #0]
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	20000010 	.word	0x20000010

080054cc <__libc_init_array>:
 80054cc:	b570      	push	{r4, r5, r6, lr}
 80054ce:	4e0d      	ldr	r6, [pc, #52]	; (8005504 <__libc_init_array+0x38>)
 80054d0:	4c0d      	ldr	r4, [pc, #52]	; (8005508 <__libc_init_array+0x3c>)
 80054d2:	1ba4      	subs	r4, r4, r6
 80054d4:	10a4      	asrs	r4, r4, #2
 80054d6:	2500      	movs	r5, #0
 80054d8:	42a5      	cmp	r5, r4
 80054da:	d109      	bne.n	80054f0 <__libc_init_array+0x24>
 80054dc:	4e0b      	ldr	r6, [pc, #44]	; (800550c <__libc_init_array+0x40>)
 80054de:	4c0c      	ldr	r4, [pc, #48]	; (8005510 <__libc_init_array+0x44>)
 80054e0:	f003 f800 	bl	80084e4 <_init>
 80054e4:	1ba4      	subs	r4, r4, r6
 80054e6:	10a4      	asrs	r4, r4, #2
 80054e8:	2500      	movs	r5, #0
 80054ea:	42a5      	cmp	r5, r4
 80054ec:	d105      	bne.n	80054fa <__libc_init_array+0x2e>
 80054ee:	bd70      	pop	{r4, r5, r6, pc}
 80054f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80054f4:	4798      	blx	r3
 80054f6:	3501      	adds	r5, #1
 80054f8:	e7ee      	b.n	80054d8 <__libc_init_array+0xc>
 80054fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80054fe:	4798      	blx	r3
 8005500:	3501      	adds	r5, #1
 8005502:	e7f2      	b.n	80054ea <__libc_init_array+0x1e>
 8005504:	08008960 	.word	0x08008960
 8005508:	08008960 	.word	0x08008960
 800550c:	08008960 	.word	0x08008960
 8005510:	08008964 	.word	0x08008964

08005514 <__locale_ctype_ptr_l>:
 8005514:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005518:	4770      	bx	lr

0800551a <__ascii_mbtowc>:
 800551a:	b082      	sub	sp, #8
 800551c:	b901      	cbnz	r1, 8005520 <__ascii_mbtowc+0x6>
 800551e:	a901      	add	r1, sp, #4
 8005520:	b142      	cbz	r2, 8005534 <__ascii_mbtowc+0x1a>
 8005522:	b14b      	cbz	r3, 8005538 <__ascii_mbtowc+0x1e>
 8005524:	7813      	ldrb	r3, [r2, #0]
 8005526:	600b      	str	r3, [r1, #0]
 8005528:	7812      	ldrb	r2, [r2, #0]
 800552a:	1c10      	adds	r0, r2, #0
 800552c:	bf18      	it	ne
 800552e:	2001      	movne	r0, #1
 8005530:	b002      	add	sp, #8
 8005532:	4770      	bx	lr
 8005534:	4610      	mov	r0, r2
 8005536:	e7fb      	b.n	8005530 <__ascii_mbtowc+0x16>
 8005538:	f06f 0001 	mvn.w	r0, #1
 800553c:	e7f8      	b.n	8005530 <__ascii_mbtowc+0x16>

0800553e <memcpy>:
 800553e:	b510      	push	{r4, lr}
 8005540:	1e43      	subs	r3, r0, #1
 8005542:	440a      	add	r2, r1
 8005544:	4291      	cmp	r1, r2
 8005546:	d100      	bne.n	800554a <memcpy+0xc>
 8005548:	bd10      	pop	{r4, pc}
 800554a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800554e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005552:	e7f7      	b.n	8005544 <memcpy+0x6>

08005554 <memset>:
 8005554:	4402      	add	r2, r0
 8005556:	4603      	mov	r3, r0
 8005558:	4293      	cmp	r3, r2
 800555a:	d100      	bne.n	800555e <memset+0xa>
 800555c:	4770      	bx	lr
 800555e:	f803 1b01 	strb.w	r1, [r3], #1
 8005562:	e7f9      	b.n	8005558 <memset+0x4>

08005564 <iprintf>:
 8005564:	b40f      	push	{r0, r1, r2, r3}
 8005566:	4b0a      	ldr	r3, [pc, #40]	; (8005590 <iprintf+0x2c>)
 8005568:	b513      	push	{r0, r1, r4, lr}
 800556a:	681c      	ldr	r4, [r3, #0]
 800556c:	b124      	cbz	r4, 8005578 <iprintf+0x14>
 800556e:	69a3      	ldr	r3, [r4, #24]
 8005570:	b913      	cbnz	r3, 8005578 <iprintf+0x14>
 8005572:	4620      	mov	r0, r4
 8005574:	f001 f9e4 	bl	8006940 <__sinit>
 8005578:	ab05      	add	r3, sp, #20
 800557a:	9a04      	ldr	r2, [sp, #16]
 800557c:	68a1      	ldr	r1, [r4, #8]
 800557e:	9301      	str	r3, [sp, #4]
 8005580:	4620      	mov	r0, r4
 8005582:	f002 fadb 	bl	8007b3c <_vfiprintf_r>
 8005586:	b002      	add	sp, #8
 8005588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800558c:	b004      	add	sp, #16
 800558e:	4770      	bx	lr
 8005590:	20000010 	.word	0x20000010

08005594 <_puts_r>:
 8005594:	b570      	push	{r4, r5, r6, lr}
 8005596:	460e      	mov	r6, r1
 8005598:	4605      	mov	r5, r0
 800559a:	b118      	cbz	r0, 80055a4 <_puts_r+0x10>
 800559c:	6983      	ldr	r3, [r0, #24]
 800559e:	b90b      	cbnz	r3, 80055a4 <_puts_r+0x10>
 80055a0:	f001 f9ce 	bl	8006940 <__sinit>
 80055a4:	69ab      	ldr	r3, [r5, #24]
 80055a6:	68ac      	ldr	r4, [r5, #8]
 80055a8:	b913      	cbnz	r3, 80055b0 <_puts_r+0x1c>
 80055aa:	4628      	mov	r0, r5
 80055ac:	f001 f9c8 	bl	8006940 <__sinit>
 80055b0:	4b23      	ldr	r3, [pc, #140]	; (8005640 <_puts_r+0xac>)
 80055b2:	429c      	cmp	r4, r3
 80055b4:	d117      	bne.n	80055e6 <_puts_r+0x52>
 80055b6:	686c      	ldr	r4, [r5, #4]
 80055b8:	89a3      	ldrh	r3, [r4, #12]
 80055ba:	071b      	lsls	r3, r3, #28
 80055bc:	d51d      	bpl.n	80055fa <_puts_r+0x66>
 80055be:	6923      	ldr	r3, [r4, #16]
 80055c0:	b1db      	cbz	r3, 80055fa <_puts_r+0x66>
 80055c2:	3e01      	subs	r6, #1
 80055c4:	68a3      	ldr	r3, [r4, #8]
 80055c6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80055ca:	3b01      	subs	r3, #1
 80055cc:	60a3      	str	r3, [r4, #8]
 80055ce:	b9e9      	cbnz	r1, 800560c <_puts_r+0x78>
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	da2e      	bge.n	8005632 <_puts_r+0x9e>
 80055d4:	4622      	mov	r2, r4
 80055d6:	210a      	movs	r1, #10
 80055d8:	4628      	mov	r0, r5
 80055da:	f000 fff3 	bl	80065c4 <__swbuf_r>
 80055de:	3001      	adds	r0, #1
 80055e0:	d011      	beq.n	8005606 <_puts_r+0x72>
 80055e2:	200a      	movs	r0, #10
 80055e4:	e011      	b.n	800560a <_puts_r+0x76>
 80055e6:	4b17      	ldr	r3, [pc, #92]	; (8005644 <_puts_r+0xb0>)
 80055e8:	429c      	cmp	r4, r3
 80055ea:	d101      	bne.n	80055f0 <_puts_r+0x5c>
 80055ec:	68ac      	ldr	r4, [r5, #8]
 80055ee:	e7e3      	b.n	80055b8 <_puts_r+0x24>
 80055f0:	4b15      	ldr	r3, [pc, #84]	; (8005648 <_puts_r+0xb4>)
 80055f2:	429c      	cmp	r4, r3
 80055f4:	bf08      	it	eq
 80055f6:	68ec      	ldreq	r4, [r5, #12]
 80055f8:	e7de      	b.n	80055b8 <_puts_r+0x24>
 80055fa:	4621      	mov	r1, r4
 80055fc:	4628      	mov	r0, r5
 80055fe:	f001 f841 	bl	8006684 <__swsetup_r>
 8005602:	2800      	cmp	r0, #0
 8005604:	d0dd      	beq.n	80055c2 <_puts_r+0x2e>
 8005606:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800560a:	bd70      	pop	{r4, r5, r6, pc}
 800560c:	2b00      	cmp	r3, #0
 800560e:	da04      	bge.n	800561a <_puts_r+0x86>
 8005610:	69a2      	ldr	r2, [r4, #24]
 8005612:	429a      	cmp	r2, r3
 8005614:	dc06      	bgt.n	8005624 <_puts_r+0x90>
 8005616:	290a      	cmp	r1, #10
 8005618:	d004      	beq.n	8005624 <_puts_r+0x90>
 800561a:	6823      	ldr	r3, [r4, #0]
 800561c:	1c5a      	adds	r2, r3, #1
 800561e:	6022      	str	r2, [r4, #0]
 8005620:	7019      	strb	r1, [r3, #0]
 8005622:	e7cf      	b.n	80055c4 <_puts_r+0x30>
 8005624:	4622      	mov	r2, r4
 8005626:	4628      	mov	r0, r5
 8005628:	f000 ffcc 	bl	80065c4 <__swbuf_r>
 800562c:	3001      	adds	r0, #1
 800562e:	d1c9      	bne.n	80055c4 <_puts_r+0x30>
 8005630:	e7e9      	b.n	8005606 <_puts_r+0x72>
 8005632:	6823      	ldr	r3, [r4, #0]
 8005634:	200a      	movs	r0, #10
 8005636:	1c5a      	adds	r2, r3, #1
 8005638:	6022      	str	r2, [r4, #0]
 800563a:	7018      	strb	r0, [r3, #0]
 800563c:	e7e5      	b.n	800560a <_puts_r+0x76>
 800563e:	bf00      	nop
 8005640:	080087cc 	.word	0x080087cc
 8005644:	080087ec 	.word	0x080087ec
 8005648:	080087ac 	.word	0x080087ac

0800564c <puts>:
 800564c:	4b02      	ldr	r3, [pc, #8]	; (8005658 <puts+0xc>)
 800564e:	4601      	mov	r1, r0
 8005650:	6818      	ldr	r0, [r3, #0]
 8005652:	f7ff bf9f 	b.w	8005594 <_puts_r>
 8005656:	bf00      	nop
 8005658:	20000010 	.word	0x20000010

0800565c <setvbuf>:
 800565c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005660:	461d      	mov	r5, r3
 8005662:	4b51      	ldr	r3, [pc, #324]	; (80057a8 <setvbuf+0x14c>)
 8005664:	681e      	ldr	r6, [r3, #0]
 8005666:	4604      	mov	r4, r0
 8005668:	460f      	mov	r7, r1
 800566a:	4690      	mov	r8, r2
 800566c:	b126      	cbz	r6, 8005678 <setvbuf+0x1c>
 800566e:	69b3      	ldr	r3, [r6, #24]
 8005670:	b913      	cbnz	r3, 8005678 <setvbuf+0x1c>
 8005672:	4630      	mov	r0, r6
 8005674:	f001 f964 	bl	8006940 <__sinit>
 8005678:	4b4c      	ldr	r3, [pc, #304]	; (80057ac <setvbuf+0x150>)
 800567a:	429c      	cmp	r4, r3
 800567c:	d152      	bne.n	8005724 <setvbuf+0xc8>
 800567e:	6874      	ldr	r4, [r6, #4]
 8005680:	f1b8 0f02 	cmp.w	r8, #2
 8005684:	d006      	beq.n	8005694 <setvbuf+0x38>
 8005686:	f1b8 0f01 	cmp.w	r8, #1
 800568a:	f200 8089 	bhi.w	80057a0 <setvbuf+0x144>
 800568e:	2d00      	cmp	r5, #0
 8005690:	f2c0 8086 	blt.w	80057a0 <setvbuf+0x144>
 8005694:	4621      	mov	r1, r4
 8005696:	4630      	mov	r0, r6
 8005698:	f001 f8e8 	bl	800686c <_fflush_r>
 800569c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800569e:	b141      	cbz	r1, 80056b2 <setvbuf+0x56>
 80056a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056a4:	4299      	cmp	r1, r3
 80056a6:	d002      	beq.n	80056ae <setvbuf+0x52>
 80056a8:	4630      	mov	r0, r6
 80056aa:	f002 f975 	bl	8007998 <_free_r>
 80056ae:	2300      	movs	r3, #0
 80056b0:	6363      	str	r3, [r4, #52]	; 0x34
 80056b2:	2300      	movs	r3, #0
 80056b4:	61a3      	str	r3, [r4, #24]
 80056b6:	6063      	str	r3, [r4, #4]
 80056b8:	89a3      	ldrh	r3, [r4, #12]
 80056ba:	061b      	lsls	r3, r3, #24
 80056bc:	d503      	bpl.n	80056c6 <setvbuf+0x6a>
 80056be:	6921      	ldr	r1, [r4, #16]
 80056c0:	4630      	mov	r0, r6
 80056c2:	f002 f969 	bl	8007998 <_free_r>
 80056c6:	89a3      	ldrh	r3, [r4, #12]
 80056c8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80056cc:	f023 0303 	bic.w	r3, r3, #3
 80056d0:	f1b8 0f02 	cmp.w	r8, #2
 80056d4:	81a3      	strh	r3, [r4, #12]
 80056d6:	d05d      	beq.n	8005794 <setvbuf+0x138>
 80056d8:	ab01      	add	r3, sp, #4
 80056da:	466a      	mov	r2, sp
 80056dc:	4621      	mov	r1, r4
 80056de:	4630      	mov	r0, r6
 80056e0:	f001 fce0 	bl	80070a4 <__swhatbuf_r>
 80056e4:	89a3      	ldrh	r3, [r4, #12]
 80056e6:	4318      	orrs	r0, r3
 80056e8:	81a0      	strh	r0, [r4, #12]
 80056ea:	bb2d      	cbnz	r5, 8005738 <setvbuf+0xdc>
 80056ec:	9d00      	ldr	r5, [sp, #0]
 80056ee:	4628      	mov	r0, r5
 80056f0:	f001 fd3c 	bl	800716c <malloc>
 80056f4:	4607      	mov	r7, r0
 80056f6:	2800      	cmp	r0, #0
 80056f8:	d14e      	bne.n	8005798 <setvbuf+0x13c>
 80056fa:	f8dd 9000 	ldr.w	r9, [sp]
 80056fe:	45a9      	cmp	r9, r5
 8005700:	d13c      	bne.n	800577c <setvbuf+0x120>
 8005702:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005706:	89a3      	ldrh	r3, [r4, #12]
 8005708:	f043 0302 	orr.w	r3, r3, #2
 800570c:	81a3      	strh	r3, [r4, #12]
 800570e:	2300      	movs	r3, #0
 8005710:	60a3      	str	r3, [r4, #8]
 8005712:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005716:	6023      	str	r3, [r4, #0]
 8005718:	6123      	str	r3, [r4, #16]
 800571a:	2301      	movs	r3, #1
 800571c:	6163      	str	r3, [r4, #20]
 800571e:	b003      	add	sp, #12
 8005720:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005724:	4b22      	ldr	r3, [pc, #136]	; (80057b0 <setvbuf+0x154>)
 8005726:	429c      	cmp	r4, r3
 8005728:	d101      	bne.n	800572e <setvbuf+0xd2>
 800572a:	68b4      	ldr	r4, [r6, #8]
 800572c:	e7a8      	b.n	8005680 <setvbuf+0x24>
 800572e:	4b21      	ldr	r3, [pc, #132]	; (80057b4 <setvbuf+0x158>)
 8005730:	429c      	cmp	r4, r3
 8005732:	bf08      	it	eq
 8005734:	68f4      	ldreq	r4, [r6, #12]
 8005736:	e7a3      	b.n	8005680 <setvbuf+0x24>
 8005738:	2f00      	cmp	r7, #0
 800573a:	d0d8      	beq.n	80056ee <setvbuf+0x92>
 800573c:	69b3      	ldr	r3, [r6, #24]
 800573e:	b913      	cbnz	r3, 8005746 <setvbuf+0xea>
 8005740:	4630      	mov	r0, r6
 8005742:	f001 f8fd 	bl	8006940 <__sinit>
 8005746:	f1b8 0f01 	cmp.w	r8, #1
 800574a:	bf08      	it	eq
 800574c:	89a3      	ldrheq	r3, [r4, #12]
 800574e:	6027      	str	r7, [r4, #0]
 8005750:	bf04      	itt	eq
 8005752:	f043 0301 	orreq.w	r3, r3, #1
 8005756:	81a3      	strheq	r3, [r4, #12]
 8005758:	89a3      	ldrh	r3, [r4, #12]
 800575a:	f013 0008 	ands.w	r0, r3, #8
 800575e:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8005762:	d01b      	beq.n	800579c <setvbuf+0x140>
 8005764:	f013 0001 	ands.w	r0, r3, #1
 8005768:	bf18      	it	ne
 800576a:	426d      	negne	r5, r5
 800576c:	f04f 0300 	mov.w	r3, #0
 8005770:	bf1d      	ittte	ne
 8005772:	60a3      	strne	r3, [r4, #8]
 8005774:	61a5      	strne	r5, [r4, #24]
 8005776:	4618      	movne	r0, r3
 8005778:	60a5      	streq	r5, [r4, #8]
 800577a:	e7d0      	b.n	800571e <setvbuf+0xc2>
 800577c:	4648      	mov	r0, r9
 800577e:	f001 fcf5 	bl	800716c <malloc>
 8005782:	4607      	mov	r7, r0
 8005784:	2800      	cmp	r0, #0
 8005786:	d0bc      	beq.n	8005702 <setvbuf+0xa6>
 8005788:	89a3      	ldrh	r3, [r4, #12]
 800578a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800578e:	81a3      	strh	r3, [r4, #12]
 8005790:	464d      	mov	r5, r9
 8005792:	e7d3      	b.n	800573c <setvbuf+0xe0>
 8005794:	2000      	movs	r0, #0
 8005796:	e7b6      	b.n	8005706 <setvbuf+0xaa>
 8005798:	46a9      	mov	r9, r5
 800579a:	e7f5      	b.n	8005788 <setvbuf+0x12c>
 800579c:	60a0      	str	r0, [r4, #8]
 800579e:	e7be      	b.n	800571e <setvbuf+0xc2>
 80057a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057a4:	e7bb      	b.n	800571e <setvbuf+0xc2>
 80057a6:	bf00      	nop
 80057a8:	20000010 	.word	0x20000010
 80057ac:	080087cc 	.word	0x080087cc
 80057b0:	080087ec 	.word	0x080087ec
 80057b4:	080087ac 	.word	0x080087ac

080057b8 <strchr>:
 80057b8:	b2c9      	uxtb	r1, r1
 80057ba:	4603      	mov	r3, r0
 80057bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057c0:	b11a      	cbz	r2, 80057ca <strchr+0x12>
 80057c2:	428a      	cmp	r2, r1
 80057c4:	d1f9      	bne.n	80057ba <strchr+0x2>
 80057c6:	4618      	mov	r0, r3
 80057c8:	4770      	bx	lr
 80057ca:	2900      	cmp	r1, #0
 80057cc:	bf18      	it	ne
 80057ce:	2300      	movne	r3, #0
 80057d0:	e7f9      	b.n	80057c6 <strchr+0xe>

080057d2 <strncmp>:
 80057d2:	b510      	push	{r4, lr}
 80057d4:	b16a      	cbz	r2, 80057f2 <strncmp+0x20>
 80057d6:	3901      	subs	r1, #1
 80057d8:	1884      	adds	r4, r0, r2
 80057da:	f810 3b01 	ldrb.w	r3, [r0], #1
 80057de:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d103      	bne.n	80057ee <strncmp+0x1c>
 80057e6:	42a0      	cmp	r0, r4
 80057e8:	d001      	beq.n	80057ee <strncmp+0x1c>
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1f5      	bne.n	80057da <strncmp+0x8>
 80057ee:	1a98      	subs	r0, r3, r2
 80057f0:	bd10      	pop	{r4, pc}
 80057f2:	4610      	mov	r0, r2
 80057f4:	e7fc      	b.n	80057f0 <strncmp+0x1e>

080057f6 <strncpy>:
 80057f6:	b570      	push	{r4, r5, r6, lr}
 80057f8:	3901      	subs	r1, #1
 80057fa:	4604      	mov	r4, r0
 80057fc:	b902      	cbnz	r2, 8005800 <strncpy+0xa>
 80057fe:	bd70      	pop	{r4, r5, r6, pc}
 8005800:	4623      	mov	r3, r4
 8005802:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8005806:	f803 5b01 	strb.w	r5, [r3], #1
 800580a:	1e56      	subs	r6, r2, #1
 800580c:	b92d      	cbnz	r5, 800581a <strncpy+0x24>
 800580e:	4414      	add	r4, r2
 8005810:	42a3      	cmp	r3, r4
 8005812:	d0f4      	beq.n	80057fe <strncpy+0x8>
 8005814:	f803 5b01 	strb.w	r5, [r3], #1
 8005818:	e7fa      	b.n	8005810 <strncpy+0x1a>
 800581a:	461c      	mov	r4, r3
 800581c:	4632      	mov	r2, r6
 800581e:	e7ed      	b.n	80057fc <strncpy+0x6>

08005820 <strstr>:
 8005820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005822:	7803      	ldrb	r3, [r0, #0]
 8005824:	b17b      	cbz	r3, 8005846 <strstr+0x26>
 8005826:	4604      	mov	r4, r0
 8005828:	7823      	ldrb	r3, [r4, #0]
 800582a:	4620      	mov	r0, r4
 800582c:	1c66      	adds	r6, r4, #1
 800582e:	b17b      	cbz	r3, 8005850 <strstr+0x30>
 8005830:	1e4a      	subs	r2, r1, #1
 8005832:	1e63      	subs	r3, r4, #1
 8005834:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8005838:	b14d      	cbz	r5, 800584e <strstr+0x2e>
 800583a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800583e:	42af      	cmp	r7, r5
 8005840:	4634      	mov	r4, r6
 8005842:	d0f7      	beq.n	8005834 <strstr+0x14>
 8005844:	e7f0      	b.n	8005828 <strstr+0x8>
 8005846:	780b      	ldrb	r3, [r1, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	bf18      	it	ne
 800584c:	2000      	movne	r0, #0
 800584e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005850:	4618      	mov	r0, r3
 8005852:	e7fc      	b.n	800584e <strstr+0x2e>

08005854 <sulp>:
 8005854:	b570      	push	{r4, r5, r6, lr}
 8005856:	4604      	mov	r4, r0
 8005858:	460d      	mov	r5, r1
 800585a:	ec45 4b10 	vmov	d0, r4, r5
 800585e:	4616      	mov	r6, r2
 8005860:	f001 ff58 	bl	8007714 <__ulp>
 8005864:	ec51 0b10 	vmov	r0, r1, d0
 8005868:	b17e      	cbz	r6, 800588a <sulp+0x36>
 800586a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800586e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005872:	2b00      	cmp	r3, #0
 8005874:	dd09      	ble.n	800588a <sulp+0x36>
 8005876:	051b      	lsls	r3, r3, #20
 8005878:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800587c:	2400      	movs	r4, #0
 800587e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005882:	4622      	mov	r2, r4
 8005884:	462b      	mov	r3, r5
 8005886:	f7fa febf 	bl	8000608 <__aeabi_dmul>
 800588a:	bd70      	pop	{r4, r5, r6, pc}
 800588c:	0000      	movs	r0, r0
	...

08005890 <_strtod_l>:
 8005890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005894:	461f      	mov	r7, r3
 8005896:	b0a1      	sub	sp, #132	; 0x84
 8005898:	2300      	movs	r3, #0
 800589a:	4681      	mov	r9, r0
 800589c:	4638      	mov	r0, r7
 800589e:	460e      	mov	r6, r1
 80058a0:	9217      	str	r2, [sp, #92]	; 0x5c
 80058a2:	931c      	str	r3, [sp, #112]	; 0x70
 80058a4:	f001 fbfc 	bl	80070a0 <__localeconv_l>
 80058a8:	4680      	mov	r8, r0
 80058aa:	6800      	ldr	r0, [r0, #0]
 80058ac:	f7fa fc98 	bl	80001e0 <strlen>
 80058b0:	f04f 0a00 	mov.w	sl, #0
 80058b4:	4604      	mov	r4, r0
 80058b6:	f04f 0b00 	mov.w	fp, #0
 80058ba:	961b      	str	r6, [sp, #108]	; 0x6c
 80058bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80058be:	781a      	ldrb	r2, [r3, #0]
 80058c0:	2a0d      	cmp	r2, #13
 80058c2:	d832      	bhi.n	800592a <_strtod_l+0x9a>
 80058c4:	2a09      	cmp	r2, #9
 80058c6:	d236      	bcs.n	8005936 <_strtod_l+0xa6>
 80058c8:	2a00      	cmp	r2, #0
 80058ca:	d03e      	beq.n	800594a <_strtod_l+0xba>
 80058cc:	2300      	movs	r3, #0
 80058ce:	930d      	str	r3, [sp, #52]	; 0x34
 80058d0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80058d2:	782b      	ldrb	r3, [r5, #0]
 80058d4:	2b30      	cmp	r3, #48	; 0x30
 80058d6:	f040 80ac 	bne.w	8005a32 <_strtod_l+0x1a2>
 80058da:	786b      	ldrb	r3, [r5, #1]
 80058dc:	2b58      	cmp	r3, #88	; 0x58
 80058de:	d001      	beq.n	80058e4 <_strtod_l+0x54>
 80058e0:	2b78      	cmp	r3, #120	; 0x78
 80058e2:	d167      	bne.n	80059b4 <_strtod_l+0x124>
 80058e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058e6:	9301      	str	r3, [sp, #4]
 80058e8:	ab1c      	add	r3, sp, #112	; 0x70
 80058ea:	9300      	str	r3, [sp, #0]
 80058ec:	9702      	str	r7, [sp, #8]
 80058ee:	ab1d      	add	r3, sp, #116	; 0x74
 80058f0:	4a88      	ldr	r2, [pc, #544]	; (8005b14 <_strtod_l+0x284>)
 80058f2:	a91b      	add	r1, sp, #108	; 0x6c
 80058f4:	4648      	mov	r0, r9
 80058f6:	f001 f8fc 	bl	8006af2 <__gethex>
 80058fa:	f010 0407 	ands.w	r4, r0, #7
 80058fe:	4606      	mov	r6, r0
 8005900:	d005      	beq.n	800590e <_strtod_l+0x7e>
 8005902:	2c06      	cmp	r4, #6
 8005904:	d12b      	bne.n	800595e <_strtod_l+0xce>
 8005906:	3501      	adds	r5, #1
 8005908:	2300      	movs	r3, #0
 800590a:	951b      	str	r5, [sp, #108]	; 0x6c
 800590c:	930d      	str	r3, [sp, #52]	; 0x34
 800590e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005910:	2b00      	cmp	r3, #0
 8005912:	f040 859a 	bne.w	800644a <_strtod_l+0xbba>
 8005916:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005918:	b1e3      	cbz	r3, 8005954 <_strtod_l+0xc4>
 800591a:	4652      	mov	r2, sl
 800591c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005920:	ec43 2b10 	vmov	d0, r2, r3
 8005924:	b021      	add	sp, #132	; 0x84
 8005926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800592a:	2a2b      	cmp	r2, #43	; 0x2b
 800592c:	d015      	beq.n	800595a <_strtod_l+0xca>
 800592e:	2a2d      	cmp	r2, #45	; 0x2d
 8005930:	d004      	beq.n	800593c <_strtod_l+0xac>
 8005932:	2a20      	cmp	r2, #32
 8005934:	d1ca      	bne.n	80058cc <_strtod_l+0x3c>
 8005936:	3301      	adds	r3, #1
 8005938:	931b      	str	r3, [sp, #108]	; 0x6c
 800593a:	e7bf      	b.n	80058bc <_strtod_l+0x2c>
 800593c:	2201      	movs	r2, #1
 800593e:	920d      	str	r2, [sp, #52]	; 0x34
 8005940:	1c5a      	adds	r2, r3, #1
 8005942:	921b      	str	r2, [sp, #108]	; 0x6c
 8005944:	785b      	ldrb	r3, [r3, #1]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1c2      	bne.n	80058d0 <_strtod_l+0x40>
 800594a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800594c:	961b      	str	r6, [sp, #108]	; 0x6c
 800594e:	2b00      	cmp	r3, #0
 8005950:	f040 8579 	bne.w	8006446 <_strtod_l+0xbb6>
 8005954:	4652      	mov	r2, sl
 8005956:	465b      	mov	r3, fp
 8005958:	e7e2      	b.n	8005920 <_strtod_l+0x90>
 800595a:	2200      	movs	r2, #0
 800595c:	e7ef      	b.n	800593e <_strtod_l+0xae>
 800595e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005960:	b13a      	cbz	r2, 8005972 <_strtod_l+0xe2>
 8005962:	2135      	movs	r1, #53	; 0x35
 8005964:	a81e      	add	r0, sp, #120	; 0x78
 8005966:	f001 ffcd 	bl	8007904 <__copybits>
 800596a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800596c:	4648      	mov	r0, r9
 800596e:	f001 fc39 	bl	80071e4 <_Bfree>
 8005972:	3c01      	subs	r4, #1
 8005974:	2c04      	cmp	r4, #4
 8005976:	d806      	bhi.n	8005986 <_strtod_l+0xf6>
 8005978:	e8df f004 	tbb	[pc, r4]
 800597c:	1714030a 	.word	0x1714030a
 8005980:	0a          	.byte	0x0a
 8005981:	00          	.byte	0x00
 8005982:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8005986:	0730      	lsls	r0, r6, #28
 8005988:	d5c1      	bpl.n	800590e <_strtod_l+0x7e>
 800598a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800598e:	e7be      	b.n	800590e <_strtod_l+0x7e>
 8005990:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8005994:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005996:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800599a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800599e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80059a2:	e7f0      	b.n	8005986 <_strtod_l+0xf6>
 80059a4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8005b18 <_strtod_l+0x288>
 80059a8:	e7ed      	b.n	8005986 <_strtod_l+0xf6>
 80059aa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80059ae:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80059b2:	e7e8      	b.n	8005986 <_strtod_l+0xf6>
 80059b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80059b6:	1c5a      	adds	r2, r3, #1
 80059b8:	921b      	str	r2, [sp, #108]	; 0x6c
 80059ba:	785b      	ldrb	r3, [r3, #1]
 80059bc:	2b30      	cmp	r3, #48	; 0x30
 80059be:	d0f9      	beq.n	80059b4 <_strtod_l+0x124>
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d0a4      	beq.n	800590e <_strtod_l+0x7e>
 80059c4:	2301      	movs	r3, #1
 80059c6:	2500      	movs	r5, #0
 80059c8:	9306      	str	r3, [sp, #24]
 80059ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80059cc:	9308      	str	r3, [sp, #32]
 80059ce:	9507      	str	r5, [sp, #28]
 80059d0:	9505      	str	r5, [sp, #20]
 80059d2:	220a      	movs	r2, #10
 80059d4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80059d6:	7807      	ldrb	r7, [r0, #0]
 80059d8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80059dc:	b2d9      	uxtb	r1, r3
 80059de:	2909      	cmp	r1, #9
 80059e0:	d929      	bls.n	8005a36 <_strtod_l+0x1a6>
 80059e2:	4622      	mov	r2, r4
 80059e4:	f8d8 1000 	ldr.w	r1, [r8]
 80059e8:	f7ff fef3 	bl	80057d2 <strncmp>
 80059ec:	2800      	cmp	r0, #0
 80059ee:	d031      	beq.n	8005a54 <_strtod_l+0x1c4>
 80059f0:	2000      	movs	r0, #0
 80059f2:	9c05      	ldr	r4, [sp, #20]
 80059f4:	9004      	str	r0, [sp, #16]
 80059f6:	463b      	mov	r3, r7
 80059f8:	4602      	mov	r2, r0
 80059fa:	2b65      	cmp	r3, #101	; 0x65
 80059fc:	d001      	beq.n	8005a02 <_strtod_l+0x172>
 80059fe:	2b45      	cmp	r3, #69	; 0x45
 8005a00:	d114      	bne.n	8005a2c <_strtod_l+0x19c>
 8005a02:	b924      	cbnz	r4, 8005a0e <_strtod_l+0x17e>
 8005a04:	b910      	cbnz	r0, 8005a0c <_strtod_l+0x17c>
 8005a06:	9b06      	ldr	r3, [sp, #24]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d09e      	beq.n	800594a <_strtod_l+0xba>
 8005a0c:	2400      	movs	r4, #0
 8005a0e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005a10:	1c73      	adds	r3, r6, #1
 8005a12:	931b      	str	r3, [sp, #108]	; 0x6c
 8005a14:	7873      	ldrb	r3, [r6, #1]
 8005a16:	2b2b      	cmp	r3, #43	; 0x2b
 8005a18:	d078      	beq.n	8005b0c <_strtod_l+0x27c>
 8005a1a:	2b2d      	cmp	r3, #45	; 0x2d
 8005a1c:	d070      	beq.n	8005b00 <_strtod_l+0x270>
 8005a1e:	f04f 0c00 	mov.w	ip, #0
 8005a22:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8005a26:	2f09      	cmp	r7, #9
 8005a28:	d97c      	bls.n	8005b24 <_strtod_l+0x294>
 8005a2a:	961b      	str	r6, [sp, #108]	; 0x6c
 8005a2c:	f04f 0e00 	mov.w	lr, #0
 8005a30:	e09a      	b.n	8005b68 <_strtod_l+0x2d8>
 8005a32:	2300      	movs	r3, #0
 8005a34:	e7c7      	b.n	80059c6 <_strtod_l+0x136>
 8005a36:	9905      	ldr	r1, [sp, #20]
 8005a38:	2908      	cmp	r1, #8
 8005a3a:	bfdd      	ittte	le
 8005a3c:	9907      	ldrle	r1, [sp, #28]
 8005a3e:	fb02 3301 	mlale	r3, r2, r1, r3
 8005a42:	9307      	strle	r3, [sp, #28]
 8005a44:	fb02 3505 	mlagt	r5, r2, r5, r3
 8005a48:	9b05      	ldr	r3, [sp, #20]
 8005a4a:	3001      	adds	r0, #1
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	9305      	str	r3, [sp, #20]
 8005a50:	901b      	str	r0, [sp, #108]	; 0x6c
 8005a52:	e7bf      	b.n	80059d4 <_strtod_l+0x144>
 8005a54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a56:	191a      	adds	r2, r3, r4
 8005a58:	921b      	str	r2, [sp, #108]	; 0x6c
 8005a5a:	9a05      	ldr	r2, [sp, #20]
 8005a5c:	5d1b      	ldrb	r3, [r3, r4]
 8005a5e:	2a00      	cmp	r2, #0
 8005a60:	d037      	beq.n	8005ad2 <_strtod_l+0x242>
 8005a62:	9c05      	ldr	r4, [sp, #20]
 8005a64:	4602      	mov	r2, r0
 8005a66:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005a6a:	2909      	cmp	r1, #9
 8005a6c:	d913      	bls.n	8005a96 <_strtod_l+0x206>
 8005a6e:	2101      	movs	r1, #1
 8005a70:	9104      	str	r1, [sp, #16]
 8005a72:	e7c2      	b.n	80059fa <_strtod_l+0x16a>
 8005a74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a76:	1c5a      	adds	r2, r3, #1
 8005a78:	921b      	str	r2, [sp, #108]	; 0x6c
 8005a7a:	785b      	ldrb	r3, [r3, #1]
 8005a7c:	3001      	adds	r0, #1
 8005a7e:	2b30      	cmp	r3, #48	; 0x30
 8005a80:	d0f8      	beq.n	8005a74 <_strtod_l+0x1e4>
 8005a82:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005a86:	2a08      	cmp	r2, #8
 8005a88:	f200 84e4 	bhi.w	8006454 <_strtod_l+0xbc4>
 8005a8c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005a8e:	9208      	str	r2, [sp, #32]
 8005a90:	4602      	mov	r2, r0
 8005a92:	2000      	movs	r0, #0
 8005a94:	4604      	mov	r4, r0
 8005a96:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8005a9a:	f100 0101 	add.w	r1, r0, #1
 8005a9e:	d012      	beq.n	8005ac6 <_strtod_l+0x236>
 8005aa0:	440a      	add	r2, r1
 8005aa2:	eb00 0c04 	add.w	ip, r0, r4
 8005aa6:	4621      	mov	r1, r4
 8005aa8:	270a      	movs	r7, #10
 8005aaa:	458c      	cmp	ip, r1
 8005aac:	d113      	bne.n	8005ad6 <_strtod_l+0x246>
 8005aae:	1821      	adds	r1, r4, r0
 8005ab0:	2908      	cmp	r1, #8
 8005ab2:	f104 0401 	add.w	r4, r4, #1
 8005ab6:	4404      	add	r4, r0
 8005ab8:	dc19      	bgt.n	8005aee <_strtod_l+0x25e>
 8005aba:	9b07      	ldr	r3, [sp, #28]
 8005abc:	210a      	movs	r1, #10
 8005abe:	fb01 e303 	mla	r3, r1, r3, lr
 8005ac2:	9307      	str	r3, [sp, #28]
 8005ac4:	2100      	movs	r1, #0
 8005ac6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ac8:	1c58      	adds	r0, r3, #1
 8005aca:	901b      	str	r0, [sp, #108]	; 0x6c
 8005acc:	785b      	ldrb	r3, [r3, #1]
 8005ace:	4608      	mov	r0, r1
 8005ad0:	e7c9      	b.n	8005a66 <_strtod_l+0x1d6>
 8005ad2:	9805      	ldr	r0, [sp, #20]
 8005ad4:	e7d3      	b.n	8005a7e <_strtod_l+0x1ee>
 8005ad6:	2908      	cmp	r1, #8
 8005ad8:	f101 0101 	add.w	r1, r1, #1
 8005adc:	dc03      	bgt.n	8005ae6 <_strtod_l+0x256>
 8005ade:	9b07      	ldr	r3, [sp, #28]
 8005ae0:	437b      	muls	r3, r7
 8005ae2:	9307      	str	r3, [sp, #28]
 8005ae4:	e7e1      	b.n	8005aaa <_strtod_l+0x21a>
 8005ae6:	2910      	cmp	r1, #16
 8005ae8:	bfd8      	it	le
 8005aea:	437d      	mulle	r5, r7
 8005aec:	e7dd      	b.n	8005aaa <_strtod_l+0x21a>
 8005aee:	2c10      	cmp	r4, #16
 8005af0:	bfdc      	itt	le
 8005af2:	210a      	movle	r1, #10
 8005af4:	fb01 e505 	mlale	r5, r1, r5, lr
 8005af8:	e7e4      	b.n	8005ac4 <_strtod_l+0x234>
 8005afa:	2301      	movs	r3, #1
 8005afc:	9304      	str	r3, [sp, #16]
 8005afe:	e781      	b.n	8005a04 <_strtod_l+0x174>
 8005b00:	f04f 0c01 	mov.w	ip, #1
 8005b04:	1cb3      	adds	r3, r6, #2
 8005b06:	931b      	str	r3, [sp, #108]	; 0x6c
 8005b08:	78b3      	ldrb	r3, [r6, #2]
 8005b0a:	e78a      	b.n	8005a22 <_strtod_l+0x192>
 8005b0c:	f04f 0c00 	mov.w	ip, #0
 8005b10:	e7f8      	b.n	8005b04 <_strtod_l+0x274>
 8005b12:	bf00      	nop
 8005b14:	08008654 	.word	0x08008654
 8005b18:	7ff00000 	.word	0x7ff00000
 8005b1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b1e:	1c5f      	adds	r7, r3, #1
 8005b20:	971b      	str	r7, [sp, #108]	; 0x6c
 8005b22:	785b      	ldrb	r3, [r3, #1]
 8005b24:	2b30      	cmp	r3, #48	; 0x30
 8005b26:	d0f9      	beq.n	8005b1c <_strtod_l+0x28c>
 8005b28:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8005b2c:	2f08      	cmp	r7, #8
 8005b2e:	f63f af7d 	bhi.w	8005a2c <_strtod_l+0x19c>
 8005b32:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8005b36:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b38:	930a      	str	r3, [sp, #40]	; 0x28
 8005b3a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b3c:	1c5f      	adds	r7, r3, #1
 8005b3e:	971b      	str	r7, [sp, #108]	; 0x6c
 8005b40:	785b      	ldrb	r3, [r3, #1]
 8005b42:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8005b46:	f1b8 0f09 	cmp.w	r8, #9
 8005b4a:	d937      	bls.n	8005bbc <_strtod_l+0x32c>
 8005b4c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005b4e:	1a7f      	subs	r7, r7, r1
 8005b50:	2f08      	cmp	r7, #8
 8005b52:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8005b56:	dc37      	bgt.n	8005bc8 <_strtod_l+0x338>
 8005b58:	45be      	cmp	lr, r7
 8005b5a:	bfa8      	it	ge
 8005b5c:	46be      	movge	lr, r7
 8005b5e:	f1bc 0f00 	cmp.w	ip, #0
 8005b62:	d001      	beq.n	8005b68 <_strtod_l+0x2d8>
 8005b64:	f1ce 0e00 	rsb	lr, lr, #0
 8005b68:	2c00      	cmp	r4, #0
 8005b6a:	d151      	bne.n	8005c10 <_strtod_l+0x380>
 8005b6c:	2800      	cmp	r0, #0
 8005b6e:	f47f aece 	bne.w	800590e <_strtod_l+0x7e>
 8005b72:	9a06      	ldr	r2, [sp, #24]
 8005b74:	2a00      	cmp	r2, #0
 8005b76:	f47f aeca 	bne.w	800590e <_strtod_l+0x7e>
 8005b7a:	9a04      	ldr	r2, [sp, #16]
 8005b7c:	2a00      	cmp	r2, #0
 8005b7e:	f47f aee4 	bne.w	800594a <_strtod_l+0xba>
 8005b82:	2b4e      	cmp	r3, #78	; 0x4e
 8005b84:	d027      	beq.n	8005bd6 <_strtod_l+0x346>
 8005b86:	dc21      	bgt.n	8005bcc <_strtod_l+0x33c>
 8005b88:	2b49      	cmp	r3, #73	; 0x49
 8005b8a:	f47f aede 	bne.w	800594a <_strtod_l+0xba>
 8005b8e:	49a0      	ldr	r1, [pc, #640]	; (8005e10 <_strtod_l+0x580>)
 8005b90:	a81b      	add	r0, sp, #108	; 0x6c
 8005b92:	f001 f9e1 	bl	8006f58 <__match>
 8005b96:	2800      	cmp	r0, #0
 8005b98:	f43f aed7 	beq.w	800594a <_strtod_l+0xba>
 8005b9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b9e:	499d      	ldr	r1, [pc, #628]	; (8005e14 <_strtod_l+0x584>)
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	a81b      	add	r0, sp, #108	; 0x6c
 8005ba4:	931b      	str	r3, [sp, #108]	; 0x6c
 8005ba6:	f001 f9d7 	bl	8006f58 <__match>
 8005baa:	b910      	cbnz	r0, 8005bb2 <_strtod_l+0x322>
 8005bac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005bae:	3301      	adds	r3, #1
 8005bb0:	931b      	str	r3, [sp, #108]	; 0x6c
 8005bb2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8005e28 <_strtod_l+0x598>
 8005bb6:	f04f 0a00 	mov.w	sl, #0
 8005bba:	e6a8      	b.n	800590e <_strtod_l+0x7e>
 8005bbc:	210a      	movs	r1, #10
 8005bbe:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005bc2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005bc6:	e7b8      	b.n	8005b3a <_strtod_l+0x2aa>
 8005bc8:	46be      	mov	lr, r7
 8005bca:	e7c8      	b.n	8005b5e <_strtod_l+0x2ce>
 8005bcc:	2b69      	cmp	r3, #105	; 0x69
 8005bce:	d0de      	beq.n	8005b8e <_strtod_l+0x2fe>
 8005bd0:	2b6e      	cmp	r3, #110	; 0x6e
 8005bd2:	f47f aeba 	bne.w	800594a <_strtod_l+0xba>
 8005bd6:	4990      	ldr	r1, [pc, #576]	; (8005e18 <_strtod_l+0x588>)
 8005bd8:	a81b      	add	r0, sp, #108	; 0x6c
 8005bda:	f001 f9bd 	bl	8006f58 <__match>
 8005bde:	2800      	cmp	r0, #0
 8005be0:	f43f aeb3 	beq.w	800594a <_strtod_l+0xba>
 8005be4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	2b28      	cmp	r3, #40	; 0x28
 8005bea:	d10e      	bne.n	8005c0a <_strtod_l+0x37a>
 8005bec:	aa1e      	add	r2, sp, #120	; 0x78
 8005bee:	498b      	ldr	r1, [pc, #556]	; (8005e1c <_strtod_l+0x58c>)
 8005bf0:	a81b      	add	r0, sp, #108	; 0x6c
 8005bf2:	f001 f9c5 	bl	8006f80 <__hexnan>
 8005bf6:	2805      	cmp	r0, #5
 8005bf8:	d107      	bne.n	8005c0a <_strtod_l+0x37a>
 8005bfa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005bfc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8005c00:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005c04:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005c08:	e681      	b.n	800590e <_strtod_l+0x7e>
 8005c0a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8005e30 <_strtod_l+0x5a0>
 8005c0e:	e7d2      	b.n	8005bb6 <_strtod_l+0x326>
 8005c10:	ebae 0302 	sub.w	r3, lr, r2
 8005c14:	9306      	str	r3, [sp, #24]
 8005c16:	9b05      	ldr	r3, [sp, #20]
 8005c18:	9807      	ldr	r0, [sp, #28]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	bf08      	it	eq
 8005c1e:	4623      	moveq	r3, r4
 8005c20:	2c10      	cmp	r4, #16
 8005c22:	9305      	str	r3, [sp, #20]
 8005c24:	46a0      	mov	r8, r4
 8005c26:	bfa8      	it	ge
 8005c28:	f04f 0810 	movge.w	r8, #16
 8005c2c:	f7fa fc72 	bl	8000514 <__aeabi_ui2d>
 8005c30:	2c09      	cmp	r4, #9
 8005c32:	4682      	mov	sl, r0
 8005c34:	468b      	mov	fp, r1
 8005c36:	dc13      	bgt.n	8005c60 <_strtod_l+0x3d0>
 8005c38:	9b06      	ldr	r3, [sp, #24]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f43f ae67 	beq.w	800590e <_strtod_l+0x7e>
 8005c40:	9b06      	ldr	r3, [sp, #24]
 8005c42:	dd7a      	ble.n	8005d3a <_strtod_l+0x4aa>
 8005c44:	2b16      	cmp	r3, #22
 8005c46:	dc61      	bgt.n	8005d0c <_strtod_l+0x47c>
 8005c48:	4a75      	ldr	r2, [pc, #468]	; (8005e20 <_strtod_l+0x590>)
 8005c4a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8005c4e:	e9de 0100 	ldrd	r0, r1, [lr]
 8005c52:	4652      	mov	r2, sl
 8005c54:	465b      	mov	r3, fp
 8005c56:	f7fa fcd7 	bl	8000608 <__aeabi_dmul>
 8005c5a:	4682      	mov	sl, r0
 8005c5c:	468b      	mov	fp, r1
 8005c5e:	e656      	b.n	800590e <_strtod_l+0x7e>
 8005c60:	4b6f      	ldr	r3, [pc, #444]	; (8005e20 <_strtod_l+0x590>)
 8005c62:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005c66:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005c6a:	f7fa fccd 	bl	8000608 <__aeabi_dmul>
 8005c6e:	4606      	mov	r6, r0
 8005c70:	4628      	mov	r0, r5
 8005c72:	460f      	mov	r7, r1
 8005c74:	f7fa fc4e 	bl	8000514 <__aeabi_ui2d>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	4630      	mov	r0, r6
 8005c7e:	4639      	mov	r1, r7
 8005c80:	f7fa fb0c 	bl	800029c <__adddf3>
 8005c84:	2c0f      	cmp	r4, #15
 8005c86:	4682      	mov	sl, r0
 8005c88:	468b      	mov	fp, r1
 8005c8a:	ddd5      	ble.n	8005c38 <_strtod_l+0x3a8>
 8005c8c:	9b06      	ldr	r3, [sp, #24]
 8005c8e:	eba4 0808 	sub.w	r8, r4, r8
 8005c92:	4498      	add	r8, r3
 8005c94:	f1b8 0f00 	cmp.w	r8, #0
 8005c98:	f340 8096 	ble.w	8005dc8 <_strtod_l+0x538>
 8005c9c:	f018 030f 	ands.w	r3, r8, #15
 8005ca0:	d00a      	beq.n	8005cb8 <_strtod_l+0x428>
 8005ca2:	495f      	ldr	r1, [pc, #380]	; (8005e20 <_strtod_l+0x590>)
 8005ca4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005ca8:	4652      	mov	r2, sl
 8005caa:	465b      	mov	r3, fp
 8005cac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005cb0:	f7fa fcaa 	bl	8000608 <__aeabi_dmul>
 8005cb4:	4682      	mov	sl, r0
 8005cb6:	468b      	mov	fp, r1
 8005cb8:	f038 080f 	bics.w	r8, r8, #15
 8005cbc:	d073      	beq.n	8005da6 <_strtod_l+0x516>
 8005cbe:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005cc2:	dd47      	ble.n	8005d54 <_strtod_l+0x4c4>
 8005cc4:	2400      	movs	r4, #0
 8005cc6:	46a0      	mov	r8, r4
 8005cc8:	9407      	str	r4, [sp, #28]
 8005cca:	9405      	str	r4, [sp, #20]
 8005ccc:	2322      	movs	r3, #34	; 0x22
 8005cce:	f8df b158 	ldr.w	fp, [pc, #344]	; 8005e28 <_strtod_l+0x598>
 8005cd2:	f8c9 3000 	str.w	r3, [r9]
 8005cd6:	f04f 0a00 	mov.w	sl, #0
 8005cda:	9b07      	ldr	r3, [sp, #28]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f43f ae16 	beq.w	800590e <_strtod_l+0x7e>
 8005ce2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005ce4:	4648      	mov	r0, r9
 8005ce6:	f001 fa7d 	bl	80071e4 <_Bfree>
 8005cea:	9905      	ldr	r1, [sp, #20]
 8005cec:	4648      	mov	r0, r9
 8005cee:	f001 fa79 	bl	80071e4 <_Bfree>
 8005cf2:	4641      	mov	r1, r8
 8005cf4:	4648      	mov	r0, r9
 8005cf6:	f001 fa75 	bl	80071e4 <_Bfree>
 8005cfa:	9907      	ldr	r1, [sp, #28]
 8005cfc:	4648      	mov	r0, r9
 8005cfe:	f001 fa71 	bl	80071e4 <_Bfree>
 8005d02:	4621      	mov	r1, r4
 8005d04:	4648      	mov	r0, r9
 8005d06:	f001 fa6d 	bl	80071e4 <_Bfree>
 8005d0a:	e600      	b.n	800590e <_strtod_l+0x7e>
 8005d0c:	9a06      	ldr	r2, [sp, #24]
 8005d0e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005d12:	4293      	cmp	r3, r2
 8005d14:	dbba      	blt.n	8005c8c <_strtod_l+0x3fc>
 8005d16:	4d42      	ldr	r5, [pc, #264]	; (8005e20 <_strtod_l+0x590>)
 8005d18:	f1c4 040f 	rsb	r4, r4, #15
 8005d1c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005d20:	4652      	mov	r2, sl
 8005d22:	465b      	mov	r3, fp
 8005d24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d28:	f7fa fc6e 	bl	8000608 <__aeabi_dmul>
 8005d2c:	9b06      	ldr	r3, [sp, #24]
 8005d2e:	1b1c      	subs	r4, r3, r4
 8005d30:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005d34:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005d38:	e78d      	b.n	8005c56 <_strtod_l+0x3c6>
 8005d3a:	f113 0f16 	cmn.w	r3, #22
 8005d3e:	dba5      	blt.n	8005c8c <_strtod_l+0x3fc>
 8005d40:	4a37      	ldr	r2, [pc, #220]	; (8005e20 <_strtod_l+0x590>)
 8005d42:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8005d46:	e9d2 2300 	ldrd	r2, r3, [r2]
 8005d4a:	4650      	mov	r0, sl
 8005d4c:	4659      	mov	r1, fp
 8005d4e:	f7fa fd85 	bl	800085c <__aeabi_ddiv>
 8005d52:	e782      	b.n	8005c5a <_strtod_l+0x3ca>
 8005d54:	2300      	movs	r3, #0
 8005d56:	4e33      	ldr	r6, [pc, #204]	; (8005e24 <_strtod_l+0x594>)
 8005d58:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005d5c:	4650      	mov	r0, sl
 8005d5e:	4659      	mov	r1, fp
 8005d60:	461d      	mov	r5, r3
 8005d62:	f1b8 0f01 	cmp.w	r8, #1
 8005d66:	dc21      	bgt.n	8005dac <_strtod_l+0x51c>
 8005d68:	b10b      	cbz	r3, 8005d6e <_strtod_l+0x4de>
 8005d6a:	4682      	mov	sl, r0
 8005d6c:	468b      	mov	fp, r1
 8005d6e:	4b2d      	ldr	r3, [pc, #180]	; (8005e24 <_strtod_l+0x594>)
 8005d70:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005d74:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005d78:	4652      	mov	r2, sl
 8005d7a:	465b      	mov	r3, fp
 8005d7c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005d80:	f7fa fc42 	bl	8000608 <__aeabi_dmul>
 8005d84:	4b28      	ldr	r3, [pc, #160]	; (8005e28 <_strtod_l+0x598>)
 8005d86:	460a      	mov	r2, r1
 8005d88:	400b      	ands	r3, r1
 8005d8a:	4928      	ldr	r1, [pc, #160]	; (8005e2c <_strtod_l+0x59c>)
 8005d8c:	428b      	cmp	r3, r1
 8005d8e:	4682      	mov	sl, r0
 8005d90:	d898      	bhi.n	8005cc4 <_strtod_l+0x434>
 8005d92:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005d96:	428b      	cmp	r3, r1
 8005d98:	bf86      	itte	hi
 8005d9a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8005e34 <_strtod_l+0x5a4>
 8005d9e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8005da2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005da6:	2300      	movs	r3, #0
 8005da8:	9304      	str	r3, [sp, #16]
 8005daa:	e077      	b.n	8005e9c <_strtod_l+0x60c>
 8005dac:	f018 0f01 	tst.w	r8, #1
 8005db0:	d006      	beq.n	8005dc0 <_strtod_l+0x530>
 8005db2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8005db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dba:	f7fa fc25 	bl	8000608 <__aeabi_dmul>
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	3501      	adds	r5, #1
 8005dc2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005dc6:	e7cc      	b.n	8005d62 <_strtod_l+0x4d2>
 8005dc8:	d0ed      	beq.n	8005da6 <_strtod_l+0x516>
 8005dca:	f1c8 0800 	rsb	r8, r8, #0
 8005dce:	f018 020f 	ands.w	r2, r8, #15
 8005dd2:	d00a      	beq.n	8005dea <_strtod_l+0x55a>
 8005dd4:	4b12      	ldr	r3, [pc, #72]	; (8005e20 <_strtod_l+0x590>)
 8005dd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005dda:	4650      	mov	r0, sl
 8005ddc:	4659      	mov	r1, fp
 8005dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de2:	f7fa fd3b 	bl	800085c <__aeabi_ddiv>
 8005de6:	4682      	mov	sl, r0
 8005de8:	468b      	mov	fp, r1
 8005dea:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005dee:	d0da      	beq.n	8005da6 <_strtod_l+0x516>
 8005df0:	f1b8 0f1f 	cmp.w	r8, #31
 8005df4:	dd20      	ble.n	8005e38 <_strtod_l+0x5a8>
 8005df6:	2400      	movs	r4, #0
 8005df8:	46a0      	mov	r8, r4
 8005dfa:	9407      	str	r4, [sp, #28]
 8005dfc:	9405      	str	r4, [sp, #20]
 8005dfe:	2322      	movs	r3, #34	; 0x22
 8005e00:	f04f 0a00 	mov.w	sl, #0
 8005e04:	f04f 0b00 	mov.w	fp, #0
 8005e08:	f8c9 3000 	str.w	r3, [r9]
 8005e0c:	e765      	b.n	8005cda <_strtod_l+0x44a>
 8005e0e:	bf00      	nop
 8005e10:	08008646 	.word	0x08008646
 8005e14:	08008649 	.word	0x08008649
 8005e18:	0800864f 	.word	0x0800864f
 8005e1c:	08008668 	.word	0x08008668
 8005e20:	08008838 	.word	0x08008838
 8005e24:	08008810 	.word	0x08008810
 8005e28:	7ff00000 	.word	0x7ff00000
 8005e2c:	7ca00000 	.word	0x7ca00000
 8005e30:	fff80000 	.word	0xfff80000
 8005e34:	7fefffff 	.word	0x7fefffff
 8005e38:	f018 0310 	ands.w	r3, r8, #16
 8005e3c:	bf18      	it	ne
 8005e3e:	236a      	movne	r3, #106	; 0x6a
 8005e40:	4da0      	ldr	r5, [pc, #640]	; (80060c4 <_strtod_l+0x834>)
 8005e42:	9304      	str	r3, [sp, #16]
 8005e44:	4650      	mov	r0, sl
 8005e46:	4659      	mov	r1, fp
 8005e48:	2300      	movs	r3, #0
 8005e4a:	f1b8 0f00 	cmp.w	r8, #0
 8005e4e:	f300 810a 	bgt.w	8006066 <_strtod_l+0x7d6>
 8005e52:	b10b      	cbz	r3, 8005e58 <_strtod_l+0x5c8>
 8005e54:	4682      	mov	sl, r0
 8005e56:	468b      	mov	fp, r1
 8005e58:	9b04      	ldr	r3, [sp, #16]
 8005e5a:	b1bb      	cbz	r3, 8005e8c <_strtod_l+0x5fc>
 8005e5c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8005e60:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	4659      	mov	r1, fp
 8005e68:	dd10      	ble.n	8005e8c <_strtod_l+0x5fc>
 8005e6a:	2b1f      	cmp	r3, #31
 8005e6c:	f340 8107 	ble.w	800607e <_strtod_l+0x7ee>
 8005e70:	2b34      	cmp	r3, #52	; 0x34
 8005e72:	bfde      	ittt	le
 8005e74:	3b20      	suble	r3, #32
 8005e76:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8005e7a:	fa02 f303 	lslle.w	r3, r2, r3
 8005e7e:	f04f 0a00 	mov.w	sl, #0
 8005e82:	bfcc      	ite	gt
 8005e84:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005e88:	ea03 0b01 	andle.w	fp, r3, r1
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	2300      	movs	r3, #0
 8005e90:	4650      	mov	r0, sl
 8005e92:	4659      	mov	r1, fp
 8005e94:	f7fa fe20 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	d1ac      	bne.n	8005df6 <_strtod_l+0x566>
 8005e9c:	9b07      	ldr	r3, [sp, #28]
 8005e9e:	9300      	str	r3, [sp, #0]
 8005ea0:	9a05      	ldr	r2, [sp, #20]
 8005ea2:	9908      	ldr	r1, [sp, #32]
 8005ea4:	4623      	mov	r3, r4
 8005ea6:	4648      	mov	r0, r9
 8005ea8:	f001 f9ee 	bl	8007288 <__s2b>
 8005eac:	9007      	str	r0, [sp, #28]
 8005eae:	2800      	cmp	r0, #0
 8005eb0:	f43f af08 	beq.w	8005cc4 <_strtod_l+0x434>
 8005eb4:	9a06      	ldr	r2, [sp, #24]
 8005eb6:	9b06      	ldr	r3, [sp, #24]
 8005eb8:	2a00      	cmp	r2, #0
 8005eba:	f1c3 0300 	rsb	r3, r3, #0
 8005ebe:	bfa8      	it	ge
 8005ec0:	2300      	movge	r3, #0
 8005ec2:	930e      	str	r3, [sp, #56]	; 0x38
 8005ec4:	2400      	movs	r4, #0
 8005ec6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005eca:	9316      	str	r3, [sp, #88]	; 0x58
 8005ecc:	46a0      	mov	r8, r4
 8005ece:	9b07      	ldr	r3, [sp, #28]
 8005ed0:	4648      	mov	r0, r9
 8005ed2:	6859      	ldr	r1, [r3, #4]
 8005ed4:	f001 f952 	bl	800717c <_Balloc>
 8005ed8:	9005      	str	r0, [sp, #20]
 8005eda:	2800      	cmp	r0, #0
 8005edc:	f43f aef6 	beq.w	8005ccc <_strtod_l+0x43c>
 8005ee0:	9b07      	ldr	r3, [sp, #28]
 8005ee2:	691a      	ldr	r2, [r3, #16]
 8005ee4:	3202      	adds	r2, #2
 8005ee6:	f103 010c 	add.w	r1, r3, #12
 8005eea:	0092      	lsls	r2, r2, #2
 8005eec:	300c      	adds	r0, #12
 8005eee:	f7ff fb26 	bl	800553e <memcpy>
 8005ef2:	aa1e      	add	r2, sp, #120	; 0x78
 8005ef4:	a91d      	add	r1, sp, #116	; 0x74
 8005ef6:	ec4b ab10 	vmov	d0, sl, fp
 8005efa:	4648      	mov	r0, r9
 8005efc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8005f00:	f001 fc7e 	bl	8007800 <__d2b>
 8005f04:	901c      	str	r0, [sp, #112]	; 0x70
 8005f06:	2800      	cmp	r0, #0
 8005f08:	f43f aee0 	beq.w	8005ccc <_strtod_l+0x43c>
 8005f0c:	2101      	movs	r1, #1
 8005f0e:	4648      	mov	r0, r9
 8005f10:	f001 fa46 	bl	80073a0 <__i2b>
 8005f14:	4680      	mov	r8, r0
 8005f16:	2800      	cmp	r0, #0
 8005f18:	f43f aed8 	beq.w	8005ccc <_strtod_l+0x43c>
 8005f1c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8005f1e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005f20:	2e00      	cmp	r6, #0
 8005f22:	bfab      	itete	ge
 8005f24:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005f26:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8005f28:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8005f2a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8005f2c:	bfac      	ite	ge
 8005f2e:	18f7      	addge	r7, r6, r3
 8005f30:	1b9d      	sublt	r5, r3, r6
 8005f32:	9b04      	ldr	r3, [sp, #16]
 8005f34:	1af6      	subs	r6, r6, r3
 8005f36:	4416      	add	r6, r2
 8005f38:	4b63      	ldr	r3, [pc, #396]	; (80060c8 <_strtod_l+0x838>)
 8005f3a:	3e01      	subs	r6, #1
 8005f3c:	429e      	cmp	r6, r3
 8005f3e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005f42:	f280 80af 	bge.w	80060a4 <_strtod_l+0x814>
 8005f46:	1b9b      	subs	r3, r3, r6
 8005f48:	2b1f      	cmp	r3, #31
 8005f4a:	eba2 0203 	sub.w	r2, r2, r3
 8005f4e:	f04f 0101 	mov.w	r1, #1
 8005f52:	f300 809b 	bgt.w	800608c <_strtod_l+0x7fc>
 8005f56:	fa01 f303 	lsl.w	r3, r1, r3
 8005f5a:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	930a      	str	r3, [sp, #40]	; 0x28
 8005f60:	18be      	adds	r6, r7, r2
 8005f62:	9b04      	ldr	r3, [sp, #16]
 8005f64:	42b7      	cmp	r7, r6
 8005f66:	4415      	add	r5, r2
 8005f68:	441d      	add	r5, r3
 8005f6a:	463b      	mov	r3, r7
 8005f6c:	bfa8      	it	ge
 8005f6e:	4633      	movge	r3, r6
 8005f70:	42ab      	cmp	r3, r5
 8005f72:	bfa8      	it	ge
 8005f74:	462b      	movge	r3, r5
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	bfc2      	ittt	gt
 8005f7a:	1af6      	subgt	r6, r6, r3
 8005f7c:	1aed      	subgt	r5, r5, r3
 8005f7e:	1aff      	subgt	r7, r7, r3
 8005f80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f82:	b1bb      	cbz	r3, 8005fb4 <_strtod_l+0x724>
 8005f84:	4641      	mov	r1, r8
 8005f86:	461a      	mov	r2, r3
 8005f88:	4648      	mov	r0, r9
 8005f8a:	f001 faa9 	bl	80074e0 <__pow5mult>
 8005f8e:	4680      	mov	r8, r0
 8005f90:	2800      	cmp	r0, #0
 8005f92:	f43f ae9b 	beq.w	8005ccc <_strtod_l+0x43c>
 8005f96:	4601      	mov	r1, r0
 8005f98:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005f9a:	4648      	mov	r0, r9
 8005f9c:	f001 fa09 	bl	80073b2 <__multiply>
 8005fa0:	900c      	str	r0, [sp, #48]	; 0x30
 8005fa2:	2800      	cmp	r0, #0
 8005fa4:	f43f ae92 	beq.w	8005ccc <_strtod_l+0x43c>
 8005fa8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005faa:	4648      	mov	r0, r9
 8005fac:	f001 f91a 	bl	80071e4 <_Bfree>
 8005fb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005fb2:	931c      	str	r3, [sp, #112]	; 0x70
 8005fb4:	2e00      	cmp	r6, #0
 8005fb6:	dc7a      	bgt.n	80060ae <_strtod_l+0x81e>
 8005fb8:	9b06      	ldr	r3, [sp, #24]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	dd08      	ble.n	8005fd0 <_strtod_l+0x740>
 8005fbe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005fc0:	9905      	ldr	r1, [sp, #20]
 8005fc2:	4648      	mov	r0, r9
 8005fc4:	f001 fa8c 	bl	80074e0 <__pow5mult>
 8005fc8:	9005      	str	r0, [sp, #20]
 8005fca:	2800      	cmp	r0, #0
 8005fcc:	f43f ae7e 	beq.w	8005ccc <_strtod_l+0x43c>
 8005fd0:	2d00      	cmp	r5, #0
 8005fd2:	dd08      	ble.n	8005fe6 <_strtod_l+0x756>
 8005fd4:	462a      	mov	r2, r5
 8005fd6:	9905      	ldr	r1, [sp, #20]
 8005fd8:	4648      	mov	r0, r9
 8005fda:	f001 facf 	bl	800757c <__lshift>
 8005fde:	9005      	str	r0, [sp, #20]
 8005fe0:	2800      	cmp	r0, #0
 8005fe2:	f43f ae73 	beq.w	8005ccc <_strtod_l+0x43c>
 8005fe6:	2f00      	cmp	r7, #0
 8005fe8:	dd08      	ble.n	8005ffc <_strtod_l+0x76c>
 8005fea:	4641      	mov	r1, r8
 8005fec:	463a      	mov	r2, r7
 8005fee:	4648      	mov	r0, r9
 8005ff0:	f001 fac4 	bl	800757c <__lshift>
 8005ff4:	4680      	mov	r8, r0
 8005ff6:	2800      	cmp	r0, #0
 8005ff8:	f43f ae68 	beq.w	8005ccc <_strtod_l+0x43c>
 8005ffc:	9a05      	ldr	r2, [sp, #20]
 8005ffe:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006000:	4648      	mov	r0, r9
 8006002:	f001 fb29 	bl	8007658 <__mdiff>
 8006006:	4604      	mov	r4, r0
 8006008:	2800      	cmp	r0, #0
 800600a:	f43f ae5f 	beq.w	8005ccc <_strtod_l+0x43c>
 800600e:	68c3      	ldr	r3, [r0, #12]
 8006010:	930c      	str	r3, [sp, #48]	; 0x30
 8006012:	2300      	movs	r3, #0
 8006014:	60c3      	str	r3, [r0, #12]
 8006016:	4641      	mov	r1, r8
 8006018:	f001 fb04 	bl	8007624 <__mcmp>
 800601c:	2800      	cmp	r0, #0
 800601e:	da55      	bge.n	80060cc <_strtod_l+0x83c>
 8006020:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006022:	b9e3      	cbnz	r3, 800605e <_strtod_l+0x7ce>
 8006024:	f1ba 0f00 	cmp.w	sl, #0
 8006028:	d119      	bne.n	800605e <_strtod_l+0x7ce>
 800602a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800602e:	b9b3      	cbnz	r3, 800605e <_strtod_l+0x7ce>
 8006030:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006034:	0d1b      	lsrs	r3, r3, #20
 8006036:	051b      	lsls	r3, r3, #20
 8006038:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800603c:	d90f      	bls.n	800605e <_strtod_l+0x7ce>
 800603e:	6963      	ldr	r3, [r4, #20]
 8006040:	b913      	cbnz	r3, 8006048 <_strtod_l+0x7b8>
 8006042:	6923      	ldr	r3, [r4, #16]
 8006044:	2b01      	cmp	r3, #1
 8006046:	dd0a      	ble.n	800605e <_strtod_l+0x7ce>
 8006048:	4621      	mov	r1, r4
 800604a:	2201      	movs	r2, #1
 800604c:	4648      	mov	r0, r9
 800604e:	f001 fa95 	bl	800757c <__lshift>
 8006052:	4641      	mov	r1, r8
 8006054:	4604      	mov	r4, r0
 8006056:	f001 fae5 	bl	8007624 <__mcmp>
 800605a:	2800      	cmp	r0, #0
 800605c:	dc67      	bgt.n	800612e <_strtod_l+0x89e>
 800605e:	9b04      	ldr	r3, [sp, #16]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d171      	bne.n	8006148 <_strtod_l+0x8b8>
 8006064:	e63d      	b.n	8005ce2 <_strtod_l+0x452>
 8006066:	f018 0f01 	tst.w	r8, #1
 800606a:	d004      	beq.n	8006076 <_strtod_l+0x7e6>
 800606c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006070:	f7fa faca 	bl	8000608 <__aeabi_dmul>
 8006074:	2301      	movs	r3, #1
 8006076:	ea4f 0868 	mov.w	r8, r8, asr #1
 800607a:	3508      	adds	r5, #8
 800607c:	e6e5      	b.n	8005e4a <_strtod_l+0x5ba>
 800607e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006082:	fa02 f303 	lsl.w	r3, r2, r3
 8006086:	ea03 0a0a 	and.w	sl, r3, sl
 800608a:	e6ff      	b.n	8005e8c <_strtod_l+0x5fc>
 800608c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8006090:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8006094:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8006098:	36e2      	adds	r6, #226	; 0xe2
 800609a:	fa01 f306 	lsl.w	r3, r1, r6
 800609e:	930a      	str	r3, [sp, #40]	; 0x28
 80060a0:	910f      	str	r1, [sp, #60]	; 0x3c
 80060a2:	e75d      	b.n	8005f60 <_strtod_l+0x6d0>
 80060a4:	2300      	movs	r3, #0
 80060a6:	930a      	str	r3, [sp, #40]	; 0x28
 80060a8:	2301      	movs	r3, #1
 80060aa:	930f      	str	r3, [sp, #60]	; 0x3c
 80060ac:	e758      	b.n	8005f60 <_strtod_l+0x6d0>
 80060ae:	4632      	mov	r2, r6
 80060b0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80060b2:	4648      	mov	r0, r9
 80060b4:	f001 fa62 	bl	800757c <__lshift>
 80060b8:	901c      	str	r0, [sp, #112]	; 0x70
 80060ba:	2800      	cmp	r0, #0
 80060bc:	f47f af7c 	bne.w	8005fb8 <_strtod_l+0x728>
 80060c0:	e604      	b.n	8005ccc <_strtod_l+0x43c>
 80060c2:	bf00      	nop
 80060c4:	08008680 	.word	0x08008680
 80060c8:	fffffc02 	.word	0xfffffc02
 80060cc:	465d      	mov	r5, fp
 80060ce:	f040 8086 	bne.w	80061de <_strtod_l+0x94e>
 80060d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80060d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80060d8:	b32a      	cbz	r2, 8006126 <_strtod_l+0x896>
 80060da:	4aaf      	ldr	r2, [pc, #700]	; (8006398 <_strtod_l+0xb08>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d153      	bne.n	8006188 <_strtod_l+0x8f8>
 80060e0:	9b04      	ldr	r3, [sp, #16]
 80060e2:	4650      	mov	r0, sl
 80060e4:	b1d3      	cbz	r3, 800611c <_strtod_l+0x88c>
 80060e6:	4aad      	ldr	r2, [pc, #692]	; (800639c <_strtod_l+0xb0c>)
 80060e8:	402a      	ands	r2, r5
 80060ea:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80060ee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80060f2:	d816      	bhi.n	8006122 <_strtod_l+0x892>
 80060f4:	0d12      	lsrs	r2, r2, #20
 80060f6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80060fa:	fa01 f303 	lsl.w	r3, r1, r3
 80060fe:	4298      	cmp	r0, r3
 8006100:	d142      	bne.n	8006188 <_strtod_l+0x8f8>
 8006102:	4ba7      	ldr	r3, [pc, #668]	; (80063a0 <_strtod_l+0xb10>)
 8006104:	429d      	cmp	r5, r3
 8006106:	d102      	bne.n	800610e <_strtod_l+0x87e>
 8006108:	3001      	adds	r0, #1
 800610a:	f43f addf 	beq.w	8005ccc <_strtod_l+0x43c>
 800610e:	4ba3      	ldr	r3, [pc, #652]	; (800639c <_strtod_l+0xb0c>)
 8006110:	402b      	ands	r3, r5
 8006112:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006116:	f04f 0a00 	mov.w	sl, #0
 800611a:	e7a0      	b.n	800605e <_strtod_l+0x7ce>
 800611c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006120:	e7ed      	b.n	80060fe <_strtod_l+0x86e>
 8006122:	460b      	mov	r3, r1
 8006124:	e7eb      	b.n	80060fe <_strtod_l+0x86e>
 8006126:	bb7b      	cbnz	r3, 8006188 <_strtod_l+0x8f8>
 8006128:	f1ba 0f00 	cmp.w	sl, #0
 800612c:	d12c      	bne.n	8006188 <_strtod_l+0x8f8>
 800612e:	9904      	ldr	r1, [sp, #16]
 8006130:	4a9a      	ldr	r2, [pc, #616]	; (800639c <_strtod_l+0xb0c>)
 8006132:	465b      	mov	r3, fp
 8006134:	b1f1      	cbz	r1, 8006174 <_strtod_l+0x8e4>
 8006136:	ea02 010b 	and.w	r1, r2, fp
 800613a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800613e:	dc19      	bgt.n	8006174 <_strtod_l+0x8e4>
 8006140:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006144:	f77f ae5b 	ble.w	8005dfe <_strtod_l+0x56e>
 8006148:	4a96      	ldr	r2, [pc, #600]	; (80063a4 <_strtod_l+0xb14>)
 800614a:	2300      	movs	r3, #0
 800614c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8006150:	4650      	mov	r0, sl
 8006152:	4659      	mov	r1, fp
 8006154:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006158:	f7fa fa56 	bl	8000608 <__aeabi_dmul>
 800615c:	4682      	mov	sl, r0
 800615e:	468b      	mov	fp, r1
 8006160:	2900      	cmp	r1, #0
 8006162:	f47f adbe 	bne.w	8005ce2 <_strtod_l+0x452>
 8006166:	2800      	cmp	r0, #0
 8006168:	f47f adbb 	bne.w	8005ce2 <_strtod_l+0x452>
 800616c:	2322      	movs	r3, #34	; 0x22
 800616e:	f8c9 3000 	str.w	r3, [r9]
 8006172:	e5b6      	b.n	8005ce2 <_strtod_l+0x452>
 8006174:	4013      	ands	r3, r2
 8006176:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800617a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800617e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006182:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006186:	e76a      	b.n	800605e <_strtod_l+0x7ce>
 8006188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800618a:	b193      	cbz	r3, 80061b2 <_strtod_l+0x922>
 800618c:	422b      	tst	r3, r5
 800618e:	f43f af66 	beq.w	800605e <_strtod_l+0x7ce>
 8006192:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006194:	9a04      	ldr	r2, [sp, #16]
 8006196:	4650      	mov	r0, sl
 8006198:	4659      	mov	r1, fp
 800619a:	b173      	cbz	r3, 80061ba <_strtod_l+0x92a>
 800619c:	f7ff fb5a 	bl	8005854 <sulp>
 80061a0:	4602      	mov	r2, r0
 80061a2:	460b      	mov	r3, r1
 80061a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80061a8:	f7fa f878 	bl	800029c <__adddf3>
 80061ac:	4682      	mov	sl, r0
 80061ae:	468b      	mov	fp, r1
 80061b0:	e755      	b.n	800605e <_strtod_l+0x7ce>
 80061b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80061b4:	ea13 0f0a 	tst.w	r3, sl
 80061b8:	e7e9      	b.n	800618e <_strtod_l+0x8fe>
 80061ba:	f7ff fb4b 	bl	8005854 <sulp>
 80061be:	4602      	mov	r2, r0
 80061c0:	460b      	mov	r3, r1
 80061c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80061c6:	f7fa f867 	bl	8000298 <__aeabi_dsub>
 80061ca:	2200      	movs	r2, #0
 80061cc:	2300      	movs	r3, #0
 80061ce:	4682      	mov	sl, r0
 80061d0:	468b      	mov	fp, r1
 80061d2:	f7fa fc81 	bl	8000ad8 <__aeabi_dcmpeq>
 80061d6:	2800      	cmp	r0, #0
 80061d8:	f47f ae11 	bne.w	8005dfe <_strtod_l+0x56e>
 80061dc:	e73f      	b.n	800605e <_strtod_l+0x7ce>
 80061de:	4641      	mov	r1, r8
 80061e0:	4620      	mov	r0, r4
 80061e2:	f001 fb5c 	bl	800789e <__ratio>
 80061e6:	ec57 6b10 	vmov	r6, r7, d0
 80061ea:	2200      	movs	r2, #0
 80061ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80061f0:	ee10 0a10 	vmov	r0, s0
 80061f4:	4639      	mov	r1, r7
 80061f6:	f7fa fc83 	bl	8000b00 <__aeabi_dcmple>
 80061fa:	2800      	cmp	r0, #0
 80061fc:	d077      	beq.n	80062ee <_strtod_l+0xa5e>
 80061fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006200:	2b00      	cmp	r3, #0
 8006202:	d04a      	beq.n	800629a <_strtod_l+0xa0a>
 8006204:	4b68      	ldr	r3, [pc, #416]	; (80063a8 <_strtod_l+0xb18>)
 8006206:	2200      	movs	r2, #0
 8006208:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800620c:	4f66      	ldr	r7, [pc, #408]	; (80063a8 <_strtod_l+0xb18>)
 800620e:	2600      	movs	r6, #0
 8006210:	4b62      	ldr	r3, [pc, #392]	; (800639c <_strtod_l+0xb0c>)
 8006212:	402b      	ands	r3, r5
 8006214:	930f      	str	r3, [sp, #60]	; 0x3c
 8006216:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006218:	4b64      	ldr	r3, [pc, #400]	; (80063ac <_strtod_l+0xb1c>)
 800621a:	429a      	cmp	r2, r3
 800621c:	f040 80ce 	bne.w	80063bc <_strtod_l+0xb2c>
 8006220:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006224:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006228:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800622c:	ec4b ab10 	vmov	d0, sl, fp
 8006230:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8006234:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006238:	f001 fa6c 	bl	8007714 <__ulp>
 800623c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006240:	ec53 2b10 	vmov	r2, r3, d0
 8006244:	f7fa f9e0 	bl	8000608 <__aeabi_dmul>
 8006248:	4652      	mov	r2, sl
 800624a:	465b      	mov	r3, fp
 800624c:	f7fa f826 	bl	800029c <__adddf3>
 8006250:	460b      	mov	r3, r1
 8006252:	4952      	ldr	r1, [pc, #328]	; (800639c <_strtod_l+0xb0c>)
 8006254:	4a56      	ldr	r2, [pc, #344]	; (80063b0 <_strtod_l+0xb20>)
 8006256:	4019      	ands	r1, r3
 8006258:	4291      	cmp	r1, r2
 800625a:	4682      	mov	sl, r0
 800625c:	d95b      	bls.n	8006316 <_strtod_l+0xa86>
 800625e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006260:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006264:	4293      	cmp	r3, r2
 8006266:	d103      	bne.n	8006270 <_strtod_l+0x9e0>
 8006268:	9b08      	ldr	r3, [sp, #32]
 800626a:	3301      	adds	r3, #1
 800626c:	f43f ad2e 	beq.w	8005ccc <_strtod_l+0x43c>
 8006270:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80063a0 <_strtod_l+0xb10>
 8006274:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006278:	991c      	ldr	r1, [sp, #112]	; 0x70
 800627a:	4648      	mov	r0, r9
 800627c:	f000 ffb2 	bl	80071e4 <_Bfree>
 8006280:	9905      	ldr	r1, [sp, #20]
 8006282:	4648      	mov	r0, r9
 8006284:	f000 ffae 	bl	80071e4 <_Bfree>
 8006288:	4641      	mov	r1, r8
 800628a:	4648      	mov	r0, r9
 800628c:	f000 ffaa 	bl	80071e4 <_Bfree>
 8006290:	4621      	mov	r1, r4
 8006292:	4648      	mov	r0, r9
 8006294:	f000 ffa6 	bl	80071e4 <_Bfree>
 8006298:	e619      	b.n	8005ece <_strtod_l+0x63e>
 800629a:	f1ba 0f00 	cmp.w	sl, #0
 800629e:	d11a      	bne.n	80062d6 <_strtod_l+0xa46>
 80062a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80062a4:	b9eb      	cbnz	r3, 80062e2 <_strtod_l+0xa52>
 80062a6:	2200      	movs	r2, #0
 80062a8:	4b3f      	ldr	r3, [pc, #252]	; (80063a8 <_strtod_l+0xb18>)
 80062aa:	4630      	mov	r0, r6
 80062ac:	4639      	mov	r1, r7
 80062ae:	f7fa fc1d 	bl	8000aec <__aeabi_dcmplt>
 80062b2:	b9c8      	cbnz	r0, 80062e8 <_strtod_l+0xa58>
 80062b4:	4630      	mov	r0, r6
 80062b6:	4639      	mov	r1, r7
 80062b8:	2200      	movs	r2, #0
 80062ba:	4b3e      	ldr	r3, [pc, #248]	; (80063b4 <_strtod_l+0xb24>)
 80062bc:	f7fa f9a4 	bl	8000608 <__aeabi_dmul>
 80062c0:	4606      	mov	r6, r0
 80062c2:	460f      	mov	r7, r1
 80062c4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80062c8:	9618      	str	r6, [sp, #96]	; 0x60
 80062ca:	9319      	str	r3, [sp, #100]	; 0x64
 80062cc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80062d0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80062d4:	e79c      	b.n	8006210 <_strtod_l+0x980>
 80062d6:	f1ba 0f01 	cmp.w	sl, #1
 80062da:	d102      	bne.n	80062e2 <_strtod_l+0xa52>
 80062dc:	2d00      	cmp	r5, #0
 80062de:	f43f ad8e 	beq.w	8005dfe <_strtod_l+0x56e>
 80062e2:	2200      	movs	r2, #0
 80062e4:	4b34      	ldr	r3, [pc, #208]	; (80063b8 <_strtod_l+0xb28>)
 80062e6:	e78f      	b.n	8006208 <_strtod_l+0x978>
 80062e8:	2600      	movs	r6, #0
 80062ea:	4f32      	ldr	r7, [pc, #200]	; (80063b4 <_strtod_l+0xb24>)
 80062ec:	e7ea      	b.n	80062c4 <_strtod_l+0xa34>
 80062ee:	4b31      	ldr	r3, [pc, #196]	; (80063b4 <_strtod_l+0xb24>)
 80062f0:	4630      	mov	r0, r6
 80062f2:	4639      	mov	r1, r7
 80062f4:	2200      	movs	r2, #0
 80062f6:	f7fa f987 	bl	8000608 <__aeabi_dmul>
 80062fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062fc:	4606      	mov	r6, r0
 80062fe:	460f      	mov	r7, r1
 8006300:	b933      	cbnz	r3, 8006310 <_strtod_l+0xa80>
 8006302:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006306:	9010      	str	r0, [sp, #64]	; 0x40
 8006308:	9311      	str	r3, [sp, #68]	; 0x44
 800630a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800630e:	e7df      	b.n	80062d0 <_strtod_l+0xa40>
 8006310:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8006314:	e7f9      	b.n	800630a <_strtod_l+0xa7a>
 8006316:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800631a:	9b04      	ldr	r3, [sp, #16]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1ab      	bne.n	8006278 <_strtod_l+0x9e8>
 8006320:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006324:	0d1b      	lsrs	r3, r3, #20
 8006326:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006328:	051b      	lsls	r3, r3, #20
 800632a:	429a      	cmp	r2, r3
 800632c:	465d      	mov	r5, fp
 800632e:	d1a3      	bne.n	8006278 <_strtod_l+0x9e8>
 8006330:	4639      	mov	r1, r7
 8006332:	4630      	mov	r0, r6
 8006334:	f7fa fc18 	bl	8000b68 <__aeabi_d2iz>
 8006338:	f7fa f8fc 	bl	8000534 <__aeabi_i2d>
 800633c:	460b      	mov	r3, r1
 800633e:	4602      	mov	r2, r0
 8006340:	4639      	mov	r1, r7
 8006342:	4630      	mov	r0, r6
 8006344:	f7f9 ffa8 	bl	8000298 <__aeabi_dsub>
 8006348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800634a:	4606      	mov	r6, r0
 800634c:	460f      	mov	r7, r1
 800634e:	b933      	cbnz	r3, 800635e <_strtod_l+0xace>
 8006350:	f1ba 0f00 	cmp.w	sl, #0
 8006354:	d103      	bne.n	800635e <_strtod_l+0xace>
 8006356:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800635a:	2d00      	cmp	r5, #0
 800635c:	d06d      	beq.n	800643a <_strtod_l+0xbaa>
 800635e:	a30a      	add	r3, pc, #40	; (adr r3, 8006388 <_strtod_l+0xaf8>)
 8006360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006364:	4630      	mov	r0, r6
 8006366:	4639      	mov	r1, r7
 8006368:	f7fa fbc0 	bl	8000aec <__aeabi_dcmplt>
 800636c:	2800      	cmp	r0, #0
 800636e:	f47f acb8 	bne.w	8005ce2 <_strtod_l+0x452>
 8006372:	a307      	add	r3, pc, #28	; (adr r3, 8006390 <_strtod_l+0xb00>)
 8006374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006378:	4630      	mov	r0, r6
 800637a:	4639      	mov	r1, r7
 800637c:	f7fa fbd4 	bl	8000b28 <__aeabi_dcmpgt>
 8006380:	2800      	cmp	r0, #0
 8006382:	f43f af79 	beq.w	8006278 <_strtod_l+0x9e8>
 8006386:	e4ac      	b.n	8005ce2 <_strtod_l+0x452>
 8006388:	94a03595 	.word	0x94a03595
 800638c:	3fdfffff 	.word	0x3fdfffff
 8006390:	35afe535 	.word	0x35afe535
 8006394:	3fe00000 	.word	0x3fe00000
 8006398:	000fffff 	.word	0x000fffff
 800639c:	7ff00000 	.word	0x7ff00000
 80063a0:	7fefffff 	.word	0x7fefffff
 80063a4:	39500000 	.word	0x39500000
 80063a8:	3ff00000 	.word	0x3ff00000
 80063ac:	7fe00000 	.word	0x7fe00000
 80063b0:	7c9fffff 	.word	0x7c9fffff
 80063b4:	3fe00000 	.word	0x3fe00000
 80063b8:	bff00000 	.word	0xbff00000
 80063bc:	9b04      	ldr	r3, [sp, #16]
 80063be:	b333      	cbz	r3, 800640e <_strtod_l+0xb7e>
 80063c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80063c2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80063c6:	d822      	bhi.n	800640e <_strtod_l+0xb7e>
 80063c8:	a327      	add	r3, pc, #156	; (adr r3, 8006468 <_strtod_l+0xbd8>)
 80063ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ce:	4630      	mov	r0, r6
 80063d0:	4639      	mov	r1, r7
 80063d2:	f7fa fb95 	bl	8000b00 <__aeabi_dcmple>
 80063d6:	b1a0      	cbz	r0, 8006402 <_strtod_l+0xb72>
 80063d8:	4639      	mov	r1, r7
 80063da:	4630      	mov	r0, r6
 80063dc:	f7fa fbec 	bl	8000bb8 <__aeabi_d2uiz>
 80063e0:	2800      	cmp	r0, #0
 80063e2:	bf08      	it	eq
 80063e4:	2001      	moveq	r0, #1
 80063e6:	f7fa f895 	bl	8000514 <__aeabi_ui2d>
 80063ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063ec:	4606      	mov	r6, r0
 80063ee:	460f      	mov	r7, r1
 80063f0:	bb03      	cbnz	r3, 8006434 <_strtod_l+0xba4>
 80063f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80063f6:	9012      	str	r0, [sp, #72]	; 0x48
 80063f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80063fa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80063fe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006404:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006406:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800640a:	1a9b      	subs	r3, r3, r2
 800640c:	930b      	str	r3, [sp, #44]	; 0x2c
 800640e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8006412:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8006416:	f001 f97d 	bl	8007714 <__ulp>
 800641a:	4650      	mov	r0, sl
 800641c:	ec53 2b10 	vmov	r2, r3, d0
 8006420:	4659      	mov	r1, fp
 8006422:	f7fa f8f1 	bl	8000608 <__aeabi_dmul>
 8006426:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800642a:	f7f9 ff37 	bl	800029c <__adddf3>
 800642e:	4682      	mov	sl, r0
 8006430:	468b      	mov	fp, r1
 8006432:	e772      	b.n	800631a <_strtod_l+0xa8a>
 8006434:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8006438:	e7df      	b.n	80063fa <_strtod_l+0xb6a>
 800643a:	a30d      	add	r3, pc, #52	; (adr r3, 8006470 <_strtod_l+0xbe0>)
 800643c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006440:	f7fa fb54 	bl	8000aec <__aeabi_dcmplt>
 8006444:	e79c      	b.n	8006380 <_strtod_l+0xaf0>
 8006446:	2300      	movs	r3, #0
 8006448:	930d      	str	r3, [sp, #52]	; 0x34
 800644a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800644c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800644e:	6013      	str	r3, [r2, #0]
 8006450:	f7ff ba61 	b.w	8005916 <_strtod_l+0x86>
 8006454:	2b65      	cmp	r3, #101	; 0x65
 8006456:	f04f 0200 	mov.w	r2, #0
 800645a:	f43f ab4e 	beq.w	8005afa <_strtod_l+0x26a>
 800645e:	2101      	movs	r1, #1
 8006460:	4614      	mov	r4, r2
 8006462:	9104      	str	r1, [sp, #16]
 8006464:	f7ff bacb 	b.w	80059fe <_strtod_l+0x16e>
 8006468:	ffc00000 	.word	0xffc00000
 800646c:	41dfffff 	.word	0x41dfffff
 8006470:	94a03595 	.word	0x94a03595
 8006474:	3fcfffff 	.word	0x3fcfffff

08006478 <strtod>:
 8006478:	4b07      	ldr	r3, [pc, #28]	; (8006498 <strtod+0x20>)
 800647a:	4a08      	ldr	r2, [pc, #32]	; (800649c <strtod+0x24>)
 800647c:	b410      	push	{r4}
 800647e:	681c      	ldr	r4, [r3, #0]
 8006480:	6a23      	ldr	r3, [r4, #32]
 8006482:	2b00      	cmp	r3, #0
 8006484:	bf08      	it	eq
 8006486:	4613      	moveq	r3, r2
 8006488:	460a      	mov	r2, r1
 800648a:	4601      	mov	r1, r0
 800648c:	4620      	mov	r0, r4
 800648e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006492:	f7ff b9fd 	b.w	8005890 <_strtod_l>
 8006496:	bf00      	nop
 8006498:	20000010 	.word	0x20000010
 800649c:	20000074 	.word	0x20000074

080064a0 <_strtol_l.isra.0>:
 80064a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064a4:	4680      	mov	r8, r0
 80064a6:	4689      	mov	r9, r1
 80064a8:	4692      	mov	sl, r2
 80064aa:	461e      	mov	r6, r3
 80064ac:	460f      	mov	r7, r1
 80064ae:	463d      	mov	r5, r7
 80064b0:	9808      	ldr	r0, [sp, #32]
 80064b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80064b6:	f7ff f82d 	bl	8005514 <__locale_ctype_ptr_l>
 80064ba:	4420      	add	r0, r4
 80064bc:	7843      	ldrb	r3, [r0, #1]
 80064be:	f013 0308 	ands.w	r3, r3, #8
 80064c2:	d132      	bne.n	800652a <_strtol_l.isra.0+0x8a>
 80064c4:	2c2d      	cmp	r4, #45	; 0x2d
 80064c6:	d132      	bne.n	800652e <_strtol_l.isra.0+0x8e>
 80064c8:	787c      	ldrb	r4, [r7, #1]
 80064ca:	1cbd      	adds	r5, r7, #2
 80064cc:	2201      	movs	r2, #1
 80064ce:	2e00      	cmp	r6, #0
 80064d0:	d05d      	beq.n	800658e <_strtol_l.isra.0+0xee>
 80064d2:	2e10      	cmp	r6, #16
 80064d4:	d109      	bne.n	80064ea <_strtol_l.isra.0+0x4a>
 80064d6:	2c30      	cmp	r4, #48	; 0x30
 80064d8:	d107      	bne.n	80064ea <_strtol_l.isra.0+0x4a>
 80064da:	782b      	ldrb	r3, [r5, #0]
 80064dc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80064e0:	2b58      	cmp	r3, #88	; 0x58
 80064e2:	d14f      	bne.n	8006584 <_strtol_l.isra.0+0xe4>
 80064e4:	786c      	ldrb	r4, [r5, #1]
 80064e6:	2610      	movs	r6, #16
 80064e8:	3502      	adds	r5, #2
 80064ea:	2a00      	cmp	r2, #0
 80064ec:	bf14      	ite	ne
 80064ee:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80064f2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80064f6:	2700      	movs	r7, #0
 80064f8:	fbb1 fcf6 	udiv	ip, r1, r6
 80064fc:	4638      	mov	r0, r7
 80064fe:	fb06 1e1c 	mls	lr, r6, ip, r1
 8006502:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8006506:	2b09      	cmp	r3, #9
 8006508:	d817      	bhi.n	800653a <_strtol_l.isra.0+0x9a>
 800650a:	461c      	mov	r4, r3
 800650c:	42a6      	cmp	r6, r4
 800650e:	dd23      	ble.n	8006558 <_strtol_l.isra.0+0xb8>
 8006510:	1c7b      	adds	r3, r7, #1
 8006512:	d007      	beq.n	8006524 <_strtol_l.isra.0+0x84>
 8006514:	4584      	cmp	ip, r0
 8006516:	d31c      	bcc.n	8006552 <_strtol_l.isra.0+0xb2>
 8006518:	d101      	bne.n	800651e <_strtol_l.isra.0+0x7e>
 800651a:	45a6      	cmp	lr, r4
 800651c:	db19      	blt.n	8006552 <_strtol_l.isra.0+0xb2>
 800651e:	fb00 4006 	mla	r0, r0, r6, r4
 8006522:	2701      	movs	r7, #1
 8006524:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006528:	e7eb      	b.n	8006502 <_strtol_l.isra.0+0x62>
 800652a:	462f      	mov	r7, r5
 800652c:	e7bf      	b.n	80064ae <_strtol_l.isra.0+0xe>
 800652e:	2c2b      	cmp	r4, #43	; 0x2b
 8006530:	bf04      	itt	eq
 8006532:	1cbd      	addeq	r5, r7, #2
 8006534:	787c      	ldrbeq	r4, [r7, #1]
 8006536:	461a      	mov	r2, r3
 8006538:	e7c9      	b.n	80064ce <_strtol_l.isra.0+0x2e>
 800653a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800653e:	2b19      	cmp	r3, #25
 8006540:	d801      	bhi.n	8006546 <_strtol_l.isra.0+0xa6>
 8006542:	3c37      	subs	r4, #55	; 0x37
 8006544:	e7e2      	b.n	800650c <_strtol_l.isra.0+0x6c>
 8006546:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800654a:	2b19      	cmp	r3, #25
 800654c:	d804      	bhi.n	8006558 <_strtol_l.isra.0+0xb8>
 800654e:	3c57      	subs	r4, #87	; 0x57
 8006550:	e7dc      	b.n	800650c <_strtol_l.isra.0+0x6c>
 8006552:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006556:	e7e5      	b.n	8006524 <_strtol_l.isra.0+0x84>
 8006558:	1c7b      	adds	r3, r7, #1
 800655a:	d108      	bne.n	800656e <_strtol_l.isra.0+0xce>
 800655c:	2322      	movs	r3, #34	; 0x22
 800655e:	f8c8 3000 	str.w	r3, [r8]
 8006562:	4608      	mov	r0, r1
 8006564:	f1ba 0f00 	cmp.w	sl, #0
 8006568:	d107      	bne.n	800657a <_strtol_l.isra.0+0xda>
 800656a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800656e:	b102      	cbz	r2, 8006572 <_strtol_l.isra.0+0xd2>
 8006570:	4240      	negs	r0, r0
 8006572:	f1ba 0f00 	cmp.w	sl, #0
 8006576:	d0f8      	beq.n	800656a <_strtol_l.isra.0+0xca>
 8006578:	b10f      	cbz	r7, 800657e <_strtol_l.isra.0+0xde>
 800657a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800657e:	f8ca 9000 	str.w	r9, [sl]
 8006582:	e7f2      	b.n	800656a <_strtol_l.isra.0+0xca>
 8006584:	2430      	movs	r4, #48	; 0x30
 8006586:	2e00      	cmp	r6, #0
 8006588:	d1af      	bne.n	80064ea <_strtol_l.isra.0+0x4a>
 800658a:	2608      	movs	r6, #8
 800658c:	e7ad      	b.n	80064ea <_strtol_l.isra.0+0x4a>
 800658e:	2c30      	cmp	r4, #48	; 0x30
 8006590:	d0a3      	beq.n	80064da <_strtol_l.isra.0+0x3a>
 8006592:	260a      	movs	r6, #10
 8006594:	e7a9      	b.n	80064ea <_strtol_l.isra.0+0x4a>
	...

08006598 <strtol>:
 8006598:	4b08      	ldr	r3, [pc, #32]	; (80065bc <strtol+0x24>)
 800659a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800659c:	681c      	ldr	r4, [r3, #0]
 800659e:	4d08      	ldr	r5, [pc, #32]	; (80065c0 <strtol+0x28>)
 80065a0:	6a23      	ldr	r3, [r4, #32]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	bf08      	it	eq
 80065a6:	462b      	moveq	r3, r5
 80065a8:	9300      	str	r3, [sp, #0]
 80065aa:	4613      	mov	r3, r2
 80065ac:	460a      	mov	r2, r1
 80065ae:	4601      	mov	r1, r0
 80065b0:	4620      	mov	r0, r4
 80065b2:	f7ff ff75 	bl	80064a0 <_strtol_l.isra.0>
 80065b6:	b003      	add	sp, #12
 80065b8:	bd30      	pop	{r4, r5, pc}
 80065ba:	bf00      	nop
 80065bc:	20000010 	.word	0x20000010
 80065c0:	20000074 	.word	0x20000074

080065c4 <__swbuf_r>:
 80065c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065c6:	460e      	mov	r6, r1
 80065c8:	4614      	mov	r4, r2
 80065ca:	4605      	mov	r5, r0
 80065cc:	b118      	cbz	r0, 80065d6 <__swbuf_r+0x12>
 80065ce:	6983      	ldr	r3, [r0, #24]
 80065d0:	b90b      	cbnz	r3, 80065d6 <__swbuf_r+0x12>
 80065d2:	f000 f9b5 	bl	8006940 <__sinit>
 80065d6:	4b21      	ldr	r3, [pc, #132]	; (800665c <__swbuf_r+0x98>)
 80065d8:	429c      	cmp	r4, r3
 80065da:	d12a      	bne.n	8006632 <__swbuf_r+0x6e>
 80065dc:	686c      	ldr	r4, [r5, #4]
 80065de:	69a3      	ldr	r3, [r4, #24]
 80065e0:	60a3      	str	r3, [r4, #8]
 80065e2:	89a3      	ldrh	r3, [r4, #12]
 80065e4:	071a      	lsls	r2, r3, #28
 80065e6:	d52e      	bpl.n	8006646 <__swbuf_r+0x82>
 80065e8:	6923      	ldr	r3, [r4, #16]
 80065ea:	b363      	cbz	r3, 8006646 <__swbuf_r+0x82>
 80065ec:	6923      	ldr	r3, [r4, #16]
 80065ee:	6820      	ldr	r0, [r4, #0]
 80065f0:	1ac0      	subs	r0, r0, r3
 80065f2:	6963      	ldr	r3, [r4, #20]
 80065f4:	b2f6      	uxtb	r6, r6
 80065f6:	4283      	cmp	r3, r0
 80065f8:	4637      	mov	r7, r6
 80065fa:	dc04      	bgt.n	8006606 <__swbuf_r+0x42>
 80065fc:	4621      	mov	r1, r4
 80065fe:	4628      	mov	r0, r5
 8006600:	f000 f934 	bl	800686c <_fflush_r>
 8006604:	bb28      	cbnz	r0, 8006652 <__swbuf_r+0x8e>
 8006606:	68a3      	ldr	r3, [r4, #8]
 8006608:	3b01      	subs	r3, #1
 800660a:	60a3      	str	r3, [r4, #8]
 800660c:	6823      	ldr	r3, [r4, #0]
 800660e:	1c5a      	adds	r2, r3, #1
 8006610:	6022      	str	r2, [r4, #0]
 8006612:	701e      	strb	r6, [r3, #0]
 8006614:	6963      	ldr	r3, [r4, #20]
 8006616:	3001      	adds	r0, #1
 8006618:	4283      	cmp	r3, r0
 800661a:	d004      	beq.n	8006626 <__swbuf_r+0x62>
 800661c:	89a3      	ldrh	r3, [r4, #12]
 800661e:	07db      	lsls	r3, r3, #31
 8006620:	d519      	bpl.n	8006656 <__swbuf_r+0x92>
 8006622:	2e0a      	cmp	r6, #10
 8006624:	d117      	bne.n	8006656 <__swbuf_r+0x92>
 8006626:	4621      	mov	r1, r4
 8006628:	4628      	mov	r0, r5
 800662a:	f000 f91f 	bl	800686c <_fflush_r>
 800662e:	b190      	cbz	r0, 8006656 <__swbuf_r+0x92>
 8006630:	e00f      	b.n	8006652 <__swbuf_r+0x8e>
 8006632:	4b0b      	ldr	r3, [pc, #44]	; (8006660 <__swbuf_r+0x9c>)
 8006634:	429c      	cmp	r4, r3
 8006636:	d101      	bne.n	800663c <__swbuf_r+0x78>
 8006638:	68ac      	ldr	r4, [r5, #8]
 800663a:	e7d0      	b.n	80065de <__swbuf_r+0x1a>
 800663c:	4b09      	ldr	r3, [pc, #36]	; (8006664 <__swbuf_r+0xa0>)
 800663e:	429c      	cmp	r4, r3
 8006640:	bf08      	it	eq
 8006642:	68ec      	ldreq	r4, [r5, #12]
 8006644:	e7cb      	b.n	80065de <__swbuf_r+0x1a>
 8006646:	4621      	mov	r1, r4
 8006648:	4628      	mov	r0, r5
 800664a:	f000 f81b 	bl	8006684 <__swsetup_r>
 800664e:	2800      	cmp	r0, #0
 8006650:	d0cc      	beq.n	80065ec <__swbuf_r+0x28>
 8006652:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006656:	4638      	mov	r0, r7
 8006658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800665a:	bf00      	nop
 800665c:	080087cc 	.word	0x080087cc
 8006660:	080087ec 	.word	0x080087ec
 8006664:	080087ac 	.word	0x080087ac

08006668 <__ascii_wctomb>:
 8006668:	b149      	cbz	r1, 800667e <__ascii_wctomb+0x16>
 800666a:	2aff      	cmp	r2, #255	; 0xff
 800666c:	bf85      	ittet	hi
 800666e:	238a      	movhi	r3, #138	; 0x8a
 8006670:	6003      	strhi	r3, [r0, #0]
 8006672:	700a      	strbls	r2, [r1, #0]
 8006674:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006678:	bf98      	it	ls
 800667a:	2001      	movls	r0, #1
 800667c:	4770      	bx	lr
 800667e:	4608      	mov	r0, r1
 8006680:	4770      	bx	lr
	...

08006684 <__swsetup_r>:
 8006684:	4b32      	ldr	r3, [pc, #200]	; (8006750 <__swsetup_r+0xcc>)
 8006686:	b570      	push	{r4, r5, r6, lr}
 8006688:	681d      	ldr	r5, [r3, #0]
 800668a:	4606      	mov	r6, r0
 800668c:	460c      	mov	r4, r1
 800668e:	b125      	cbz	r5, 800669a <__swsetup_r+0x16>
 8006690:	69ab      	ldr	r3, [r5, #24]
 8006692:	b913      	cbnz	r3, 800669a <__swsetup_r+0x16>
 8006694:	4628      	mov	r0, r5
 8006696:	f000 f953 	bl	8006940 <__sinit>
 800669a:	4b2e      	ldr	r3, [pc, #184]	; (8006754 <__swsetup_r+0xd0>)
 800669c:	429c      	cmp	r4, r3
 800669e:	d10f      	bne.n	80066c0 <__swsetup_r+0x3c>
 80066a0:	686c      	ldr	r4, [r5, #4]
 80066a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	0715      	lsls	r5, r2, #28
 80066aa:	d42c      	bmi.n	8006706 <__swsetup_r+0x82>
 80066ac:	06d0      	lsls	r0, r2, #27
 80066ae:	d411      	bmi.n	80066d4 <__swsetup_r+0x50>
 80066b0:	2209      	movs	r2, #9
 80066b2:	6032      	str	r2, [r6, #0]
 80066b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066b8:	81a3      	strh	r3, [r4, #12]
 80066ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066be:	e03e      	b.n	800673e <__swsetup_r+0xba>
 80066c0:	4b25      	ldr	r3, [pc, #148]	; (8006758 <__swsetup_r+0xd4>)
 80066c2:	429c      	cmp	r4, r3
 80066c4:	d101      	bne.n	80066ca <__swsetup_r+0x46>
 80066c6:	68ac      	ldr	r4, [r5, #8]
 80066c8:	e7eb      	b.n	80066a2 <__swsetup_r+0x1e>
 80066ca:	4b24      	ldr	r3, [pc, #144]	; (800675c <__swsetup_r+0xd8>)
 80066cc:	429c      	cmp	r4, r3
 80066ce:	bf08      	it	eq
 80066d0:	68ec      	ldreq	r4, [r5, #12]
 80066d2:	e7e6      	b.n	80066a2 <__swsetup_r+0x1e>
 80066d4:	0751      	lsls	r1, r2, #29
 80066d6:	d512      	bpl.n	80066fe <__swsetup_r+0x7a>
 80066d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066da:	b141      	cbz	r1, 80066ee <__swsetup_r+0x6a>
 80066dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066e0:	4299      	cmp	r1, r3
 80066e2:	d002      	beq.n	80066ea <__swsetup_r+0x66>
 80066e4:	4630      	mov	r0, r6
 80066e6:	f001 f957 	bl	8007998 <_free_r>
 80066ea:	2300      	movs	r3, #0
 80066ec:	6363      	str	r3, [r4, #52]	; 0x34
 80066ee:	89a3      	ldrh	r3, [r4, #12]
 80066f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80066f4:	81a3      	strh	r3, [r4, #12]
 80066f6:	2300      	movs	r3, #0
 80066f8:	6063      	str	r3, [r4, #4]
 80066fa:	6923      	ldr	r3, [r4, #16]
 80066fc:	6023      	str	r3, [r4, #0]
 80066fe:	89a3      	ldrh	r3, [r4, #12]
 8006700:	f043 0308 	orr.w	r3, r3, #8
 8006704:	81a3      	strh	r3, [r4, #12]
 8006706:	6923      	ldr	r3, [r4, #16]
 8006708:	b94b      	cbnz	r3, 800671e <__swsetup_r+0x9a>
 800670a:	89a3      	ldrh	r3, [r4, #12]
 800670c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006714:	d003      	beq.n	800671e <__swsetup_r+0x9a>
 8006716:	4621      	mov	r1, r4
 8006718:	4630      	mov	r0, r6
 800671a:	f000 fce7 	bl	80070ec <__smakebuf_r>
 800671e:	89a2      	ldrh	r2, [r4, #12]
 8006720:	f012 0301 	ands.w	r3, r2, #1
 8006724:	d00c      	beq.n	8006740 <__swsetup_r+0xbc>
 8006726:	2300      	movs	r3, #0
 8006728:	60a3      	str	r3, [r4, #8]
 800672a:	6963      	ldr	r3, [r4, #20]
 800672c:	425b      	negs	r3, r3
 800672e:	61a3      	str	r3, [r4, #24]
 8006730:	6923      	ldr	r3, [r4, #16]
 8006732:	b953      	cbnz	r3, 800674a <__swsetup_r+0xc6>
 8006734:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006738:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800673c:	d1ba      	bne.n	80066b4 <__swsetup_r+0x30>
 800673e:	bd70      	pop	{r4, r5, r6, pc}
 8006740:	0792      	lsls	r2, r2, #30
 8006742:	bf58      	it	pl
 8006744:	6963      	ldrpl	r3, [r4, #20]
 8006746:	60a3      	str	r3, [r4, #8]
 8006748:	e7f2      	b.n	8006730 <__swsetup_r+0xac>
 800674a:	2000      	movs	r0, #0
 800674c:	e7f7      	b.n	800673e <__swsetup_r+0xba>
 800674e:	bf00      	nop
 8006750:	20000010 	.word	0x20000010
 8006754:	080087cc 	.word	0x080087cc
 8006758:	080087ec 	.word	0x080087ec
 800675c:	080087ac 	.word	0x080087ac

08006760 <__sflush_r>:
 8006760:	898a      	ldrh	r2, [r1, #12]
 8006762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006766:	4605      	mov	r5, r0
 8006768:	0710      	lsls	r0, r2, #28
 800676a:	460c      	mov	r4, r1
 800676c:	d458      	bmi.n	8006820 <__sflush_r+0xc0>
 800676e:	684b      	ldr	r3, [r1, #4]
 8006770:	2b00      	cmp	r3, #0
 8006772:	dc05      	bgt.n	8006780 <__sflush_r+0x20>
 8006774:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006776:	2b00      	cmp	r3, #0
 8006778:	dc02      	bgt.n	8006780 <__sflush_r+0x20>
 800677a:	2000      	movs	r0, #0
 800677c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006780:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006782:	2e00      	cmp	r6, #0
 8006784:	d0f9      	beq.n	800677a <__sflush_r+0x1a>
 8006786:	2300      	movs	r3, #0
 8006788:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800678c:	682f      	ldr	r7, [r5, #0]
 800678e:	6a21      	ldr	r1, [r4, #32]
 8006790:	602b      	str	r3, [r5, #0]
 8006792:	d032      	beq.n	80067fa <__sflush_r+0x9a>
 8006794:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006796:	89a3      	ldrh	r3, [r4, #12]
 8006798:	075a      	lsls	r2, r3, #29
 800679a:	d505      	bpl.n	80067a8 <__sflush_r+0x48>
 800679c:	6863      	ldr	r3, [r4, #4]
 800679e:	1ac0      	subs	r0, r0, r3
 80067a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80067a2:	b10b      	cbz	r3, 80067a8 <__sflush_r+0x48>
 80067a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80067a6:	1ac0      	subs	r0, r0, r3
 80067a8:	2300      	movs	r3, #0
 80067aa:	4602      	mov	r2, r0
 80067ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067ae:	6a21      	ldr	r1, [r4, #32]
 80067b0:	4628      	mov	r0, r5
 80067b2:	47b0      	blx	r6
 80067b4:	1c43      	adds	r3, r0, #1
 80067b6:	89a3      	ldrh	r3, [r4, #12]
 80067b8:	d106      	bne.n	80067c8 <__sflush_r+0x68>
 80067ba:	6829      	ldr	r1, [r5, #0]
 80067bc:	291d      	cmp	r1, #29
 80067be:	d848      	bhi.n	8006852 <__sflush_r+0xf2>
 80067c0:	4a29      	ldr	r2, [pc, #164]	; (8006868 <__sflush_r+0x108>)
 80067c2:	40ca      	lsrs	r2, r1
 80067c4:	07d6      	lsls	r6, r2, #31
 80067c6:	d544      	bpl.n	8006852 <__sflush_r+0xf2>
 80067c8:	2200      	movs	r2, #0
 80067ca:	6062      	str	r2, [r4, #4]
 80067cc:	04d9      	lsls	r1, r3, #19
 80067ce:	6922      	ldr	r2, [r4, #16]
 80067d0:	6022      	str	r2, [r4, #0]
 80067d2:	d504      	bpl.n	80067de <__sflush_r+0x7e>
 80067d4:	1c42      	adds	r2, r0, #1
 80067d6:	d101      	bne.n	80067dc <__sflush_r+0x7c>
 80067d8:	682b      	ldr	r3, [r5, #0]
 80067da:	b903      	cbnz	r3, 80067de <__sflush_r+0x7e>
 80067dc:	6560      	str	r0, [r4, #84]	; 0x54
 80067de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067e0:	602f      	str	r7, [r5, #0]
 80067e2:	2900      	cmp	r1, #0
 80067e4:	d0c9      	beq.n	800677a <__sflush_r+0x1a>
 80067e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067ea:	4299      	cmp	r1, r3
 80067ec:	d002      	beq.n	80067f4 <__sflush_r+0x94>
 80067ee:	4628      	mov	r0, r5
 80067f0:	f001 f8d2 	bl	8007998 <_free_r>
 80067f4:	2000      	movs	r0, #0
 80067f6:	6360      	str	r0, [r4, #52]	; 0x34
 80067f8:	e7c0      	b.n	800677c <__sflush_r+0x1c>
 80067fa:	2301      	movs	r3, #1
 80067fc:	4628      	mov	r0, r5
 80067fe:	47b0      	blx	r6
 8006800:	1c41      	adds	r1, r0, #1
 8006802:	d1c8      	bne.n	8006796 <__sflush_r+0x36>
 8006804:	682b      	ldr	r3, [r5, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d0c5      	beq.n	8006796 <__sflush_r+0x36>
 800680a:	2b1d      	cmp	r3, #29
 800680c:	d001      	beq.n	8006812 <__sflush_r+0xb2>
 800680e:	2b16      	cmp	r3, #22
 8006810:	d101      	bne.n	8006816 <__sflush_r+0xb6>
 8006812:	602f      	str	r7, [r5, #0]
 8006814:	e7b1      	b.n	800677a <__sflush_r+0x1a>
 8006816:	89a3      	ldrh	r3, [r4, #12]
 8006818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800681c:	81a3      	strh	r3, [r4, #12]
 800681e:	e7ad      	b.n	800677c <__sflush_r+0x1c>
 8006820:	690f      	ldr	r7, [r1, #16]
 8006822:	2f00      	cmp	r7, #0
 8006824:	d0a9      	beq.n	800677a <__sflush_r+0x1a>
 8006826:	0793      	lsls	r3, r2, #30
 8006828:	680e      	ldr	r6, [r1, #0]
 800682a:	bf08      	it	eq
 800682c:	694b      	ldreq	r3, [r1, #20]
 800682e:	600f      	str	r7, [r1, #0]
 8006830:	bf18      	it	ne
 8006832:	2300      	movne	r3, #0
 8006834:	eba6 0807 	sub.w	r8, r6, r7
 8006838:	608b      	str	r3, [r1, #8]
 800683a:	f1b8 0f00 	cmp.w	r8, #0
 800683e:	dd9c      	ble.n	800677a <__sflush_r+0x1a>
 8006840:	4643      	mov	r3, r8
 8006842:	463a      	mov	r2, r7
 8006844:	6a21      	ldr	r1, [r4, #32]
 8006846:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006848:	4628      	mov	r0, r5
 800684a:	47b0      	blx	r6
 800684c:	2800      	cmp	r0, #0
 800684e:	dc06      	bgt.n	800685e <__sflush_r+0xfe>
 8006850:	89a3      	ldrh	r3, [r4, #12]
 8006852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006856:	81a3      	strh	r3, [r4, #12]
 8006858:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800685c:	e78e      	b.n	800677c <__sflush_r+0x1c>
 800685e:	4407      	add	r7, r0
 8006860:	eba8 0800 	sub.w	r8, r8, r0
 8006864:	e7e9      	b.n	800683a <__sflush_r+0xda>
 8006866:	bf00      	nop
 8006868:	20400001 	.word	0x20400001

0800686c <_fflush_r>:
 800686c:	b538      	push	{r3, r4, r5, lr}
 800686e:	690b      	ldr	r3, [r1, #16]
 8006870:	4605      	mov	r5, r0
 8006872:	460c      	mov	r4, r1
 8006874:	b1db      	cbz	r3, 80068ae <_fflush_r+0x42>
 8006876:	b118      	cbz	r0, 8006880 <_fflush_r+0x14>
 8006878:	6983      	ldr	r3, [r0, #24]
 800687a:	b90b      	cbnz	r3, 8006880 <_fflush_r+0x14>
 800687c:	f000 f860 	bl	8006940 <__sinit>
 8006880:	4b0c      	ldr	r3, [pc, #48]	; (80068b4 <_fflush_r+0x48>)
 8006882:	429c      	cmp	r4, r3
 8006884:	d109      	bne.n	800689a <_fflush_r+0x2e>
 8006886:	686c      	ldr	r4, [r5, #4]
 8006888:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800688c:	b17b      	cbz	r3, 80068ae <_fflush_r+0x42>
 800688e:	4621      	mov	r1, r4
 8006890:	4628      	mov	r0, r5
 8006892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006896:	f7ff bf63 	b.w	8006760 <__sflush_r>
 800689a:	4b07      	ldr	r3, [pc, #28]	; (80068b8 <_fflush_r+0x4c>)
 800689c:	429c      	cmp	r4, r3
 800689e:	d101      	bne.n	80068a4 <_fflush_r+0x38>
 80068a0:	68ac      	ldr	r4, [r5, #8]
 80068a2:	e7f1      	b.n	8006888 <_fflush_r+0x1c>
 80068a4:	4b05      	ldr	r3, [pc, #20]	; (80068bc <_fflush_r+0x50>)
 80068a6:	429c      	cmp	r4, r3
 80068a8:	bf08      	it	eq
 80068aa:	68ec      	ldreq	r4, [r5, #12]
 80068ac:	e7ec      	b.n	8006888 <_fflush_r+0x1c>
 80068ae:	2000      	movs	r0, #0
 80068b0:	bd38      	pop	{r3, r4, r5, pc}
 80068b2:	bf00      	nop
 80068b4:	080087cc 	.word	0x080087cc
 80068b8:	080087ec 	.word	0x080087ec
 80068bc:	080087ac 	.word	0x080087ac

080068c0 <std>:
 80068c0:	2300      	movs	r3, #0
 80068c2:	b510      	push	{r4, lr}
 80068c4:	4604      	mov	r4, r0
 80068c6:	e9c0 3300 	strd	r3, r3, [r0]
 80068ca:	6083      	str	r3, [r0, #8]
 80068cc:	8181      	strh	r1, [r0, #12]
 80068ce:	6643      	str	r3, [r0, #100]	; 0x64
 80068d0:	81c2      	strh	r2, [r0, #14]
 80068d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068d6:	6183      	str	r3, [r0, #24]
 80068d8:	4619      	mov	r1, r3
 80068da:	2208      	movs	r2, #8
 80068dc:	305c      	adds	r0, #92	; 0x5c
 80068de:	f7fe fe39 	bl	8005554 <memset>
 80068e2:	4b05      	ldr	r3, [pc, #20]	; (80068f8 <std+0x38>)
 80068e4:	6263      	str	r3, [r4, #36]	; 0x24
 80068e6:	4b05      	ldr	r3, [pc, #20]	; (80068fc <std+0x3c>)
 80068e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80068ea:	4b05      	ldr	r3, [pc, #20]	; (8006900 <std+0x40>)
 80068ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80068ee:	4b05      	ldr	r3, [pc, #20]	; (8006904 <std+0x44>)
 80068f0:	6224      	str	r4, [r4, #32]
 80068f2:	6323      	str	r3, [r4, #48]	; 0x30
 80068f4:	bd10      	pop	{r4, pc}
 80068f6:	bf00      	nop
 80068f8:	08008099 	.word	0x08008099
 80068fc:	080080bb 	.word	0x080080bb
 8006900:	080080f3 	.word	0x080080f3
 8006904:	08008117 	.word	0x08008117

08006908 <_cleanup_r>:
 8006908:	4901      	ldr	r1, [pc, #4]	; (8006910 <_cleanup_r+0x8>)
 800690a:	f000 b885 	b.w	8006a18 <_fwalk_reent>
 800690e:	bf00      	nop
 8006910:	0800686d 	.word	0x0800686d

08006914 <__sfmoreglue>:
 8006914:	b570      	push	{r4, r5, r6, lr}
 8006916:	1e4a      	subs	r2, r1, #1
 8006918:	2568      	movs	r5, #104	; 0x68
 800691a:	4355      	muls	r5, r2
 800691c:	460e      	mov	r6, r1
 800691e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006922:	f001 f887 	bl	8007a34 <_malloc_r>
 8006926:	4604      	mov	r4, r0
 8006928:	b140      	cbz	r0, 800693c <__sfmoreglue+0x28>
 800692a:	2100      	movs	r1, #0
 800692c:	e9c0 1600 	strd	r1, r6, [r0]
 8006930:	300c      	adds	r0, #12
 8006932:	60a0      	str	r0, [r4, #8]
 8006934:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006938:	f7fe fe0c 	bl	8005554 <memset>
 800693c:	4620      	mov	r0, r4
 800693e:	bd70      	pop	{r4, r5, r6, pc}

08006940 <__sinit>:
 8006940:	6983      	ldr	r3, [r0, #24]
 8006942:	b510      	push	{r4, lr}
 8006944:	4604      	mov	r4, r0
 8006946:	bb33      	cbnz	r3, 8006996 <__sinit+0x56>
 8006948:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800694c:	6503      	str	r3, [r0, #80]	; 0x50
 800694e:	4b12      	ldr	r3, [pc, #72]	; (8006998 <__sinit+0x58>)
 8006950:	4a12      	ldr	r2, [pc, #72]	; (800699c <__sinit+0x5c>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6282      	str	r2, [r0, #40]	; 0x28
 8006956:	4298      	cmp	r0, r3
 8006958:	bf04      	itt	eq
 800695a:	2301      	moveq	r3, #1
 800695c:	6183      	streq	r3, [r0, #24]
 800695e:	f000 f81f 	bl	80069a0 <__sfp>
 8006962:	6060      	str	r0, [r4, #4]
 8006964:	4620      	mov	r0, r4
 8006966:	f000 f81b 	bl	80069a0 <__sfp>
 800696a:	60a0      	str	r0, [r4, #8]
 800696c:	4620      	mov	r0, r4
 800696e:	f000 f817 	bl	80069a0 <__sfp>
 8006972:	2200      	movs	r2, #0
 8006974:	60e0      	str	r0, [r4, #12]
 8006976:	2104      	movs	r1, #4
 8006978:	6860      	ldr	r0, [r4, #4]
 800697a:	f7ff ffa1 	bl	80068c0 <std>
 800697e:	2201      	movs	r2, #1
 8006980:	2109      	movs	r1, #9
 8006982:	68a0      	ldr	r0, [r4, #8]
 8006984:	f7ff ff9c 	bl	80068c0 <std>
 8006988:	2202      	movs	r2, #2
 800698a:	2112      	movs	r1, #18
 800698c:	68e0      	ldr	r0, [r4, #12]
 800698e:	f7ff ff97 	bl	80068c0 <std>
 8006992:	2301      	movs	r3, #1
 8006994:	61a3      	str	r3, [r4, #24]
 8006996:	bd10      	pop	{r4, pc}
 8006998:	08008638 	.word	0x08008638
 800699c:	08006909 	.word	0x08006909

080069a0 <__sfp>:
 80069a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069a2:	4b1b      	ldr	r3, [pc, #108]	; (8006a10 <__sfp+0x70>)
 80069a4:	681e      	ldr	r6, [r3, #0]
 80069a6:	69b3      	ldr	r3, [r6, #24]
 80069a8:	4607      	mov	r7, r0
 80069aa:	b913      	cbnz	r3, 80069b2 <__sfp+0x12>
 80069ac:	4630      	mov	r0, r6
 80069ae:	f7ff ffc7 	bl	8006940 <__sinit>
 80069b2:	3648      	adds	r6, #72	; 0x48
 80069b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80069b8:	3b01      	subs	r3, #1
 80069ba:	d503      	bpl.n	80069c4 <__sfp+0x24>
 80069bc:	6833      	ldr	r3, [r6, #0]
 80069be:	b133      	cbz	r3, 80069ce <__sfp+0x2e>
 80069c0:	6836      	ldr	r6, [r6, #0]
 80069c2:	e7f7      	b.n	80069b4 <__sfp+0x14>
 80069c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80069c8:	b16d      	cbz	r5, 80069e6 <__sfp+0x46>
 80069ca:	3468      	adds	r4, #104	; 0x68
 80069cc:	e7f4      	b.n	80069b8 <__sfp+0x18>
 80069ce:	2104      	movs	r1, #4
 80069d0:	4638      	mov	r0, r7
 80069d2:	f7ff ff9f 	bl	8006914 <__sfmoreglue>
 80069d6:	6030      	str	r0, [r6, #0]
 80069d8:	2800      	cmp	r0, #0
 80069da:	d1f1      	bne.n	80069c0 <__sfp+0x20>
 80069dc:	230c      	movs	r3, #12
 80069de:	603b      	str	r3, [r7, #0]
 80069e0:	4604      	mov	r4, r0
 80069e2:	4620      	mov	r0, r4
 80069e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069e6:	4b0b      	ldr	r3, [pc, #44]	; (8006a14 <__sfp+0x74>)
 80069e8:	6665      	str	r5, [r4, #100]	; 0x64
 80069ea:	e9c4 5500 	strd	r5, r5, [r4]
 80069ee:	60a5      	str	r5, [r4, #8]
 80069f0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80069f4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80069f8:	2208      	movs	r2, #8
 80069fa:	4629      	mov	r1, r5
 80069fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006a00:	f7fe fda8 	bl	8005554 <memset>
 8006a04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006a08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006a0c:	e7e9      	b.n	80069e2 <__sfp+0x42>
 8006a0e:	bf00      	nop
 8006a10:	08008638 	.word	0x08008638
 8006a14:	ffff0001 	.word	0xffff0001

08006a18 <_fwalk_reent>:
 8006a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a1c:	4680      	mov	r8, r0
 8006a1e:	4689      	mov	r9, r1
 8006a20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006a24:	2600      	movs	r6, #0
 8006a26:	b914      	cbnz	r4, 8006a2e <_fwalk_reent+0x16>
 8006a28:	4630      	mov	r0, r6
 8006a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a2e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006a32:	3f01      	subs	r7, #1
 8006a34:	d501      	bpl.n	8006a3a <_fwalk_reent+0x22>
 8006a36:	6824      	ldr	r4, [r4, #0]
 8006a38:	e7f5      	b.n	8006a26 <_fwalk_reent+0xe>
 8006a3a:	89ab      	ldrh	r3, [r5, #12]
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d907      	bls.n	8006a50 <_fwalk_reent+0x38>
 8006a40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a44:	3301      	adds	r3, #1
 8006a46:	d003      	beq.n	8006a50 <_fwalk_reent+0x38>
 8006a48:	4629      	mov	r1, r5
 8006a4a:	4640      	mov	r0, r8
 8006a4c:	47c8      	blx	r9
 8006a4e:	4306      	orrs	r6, r0
 8006a50:	3568      	adds	r5, #104	; 0x68
 8006a52:	e7ee      	b.n	8006a32 <_fwalk_reent+0x1a>

08006a54 <rshift>:
 8006a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a56:	6906      	ldr	r6, [r0, #16]
 8006a58:	114b      	asrs	r3, r1, #5
 8006a5a:	429e      	cmp	r6, r3
 8006a5c:	f100 0414 	add.w	r4, r0, #20
 8006a60:	dd30      	ble.n	8006ac4 <rshift+0x70>
 8006a62:	f011 011f 	ands.w	r1, r1, #31
 8006a66:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006a6a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8006a6e:	d108      	bne.n	8006a82 <rshift+0x2e>
 8006a70:	4621      	mov	r1, r4
 8006a72:	42b2      	cmp	r2, r6
 8006a74:	460b      	mov	r3, r1
 8006a76:	d211      	bcs.n	8006a9c <rshift+0x48>
 8006a78:	f852 3b04 	ldr.w	r3, [r2], #4
 8006a7c:	f841 3b04 	str.w	r3, [r1], #4
 8006a80:	e7f7      	b.n	8006a72 <rshift+0x1e>
 8006a82:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8006a86:	f1c1 0c20 	rsb	ip, r1, #32
 8006a8a:	40cd      	lsrs	r5, r1
 8006a8c:	3204      	adds	r2, #4
 8006a8e:	4623      	mov	r3, r4
 8006a90:	42b2      	cmp	r2, r6
 8006a92:	4617      	mov	r7, r2
 8006a94:	d30c      	bcc.n	8006ab0 <rshift+0x5c>
 8006a96:	601d      	str	r5, [r3, #0]
 8006a98:	b105      	cbz	r5, 8006a9c <rshift+0x48>
 8006a9a:	3304      	adds	r3, #4
 8006a9c:	1b1a      	subs	r2, r3, r4
 8006a9e:	42a3      	cmp	r3, r4
 8006aa0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006aa4:	bf08      	it	eq
 8006aa6:	2300      	moveq	r3, #0
 8006aa8:	6102      	str	r2, [r0, #16]
 8006aaa:	bf08      	it	eq
 8006aac:	6143      	streq	r3, [r0, #20]
 8006aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ab0:	683f      	ldr	r7, [r7, #0]
 8006ab2:	fa07 f70c 	lsl.w	r7, r7, ip
 8006ab6:	433d      	orrs	r5, r7
 8006ab8:	f843 5b04 	str.w	r5, [r3], #4
 8006abc:	f852 5b04 	ldr.w	r5, [r2], #4
 8006ac0:	40cd      	lsrs	r5, r1
 8006ac2:	e7e5      	b.n	8006a90 <rshift+0x3c>
 8006ac4:	4623      	mov	r3, r4
 8006ac6:	e7e9      	b.n	8006a9c <rshift+0x48>

08006ac8 <__hexdig_fun>:
 8006ac8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006acc:	2b09      	cmp	r3, #9
 8006ace:	d802      	bhi.n	8006ad6 <__hexdig_fun+0xe>
 8006ad0:	3820      	subs	r0, #32
 8006ad2:	b2c0      	uxtb	r0, r0
 8006ad4:	4770      	bx	lr
 8006ad6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006ada:	2b05      	cmp	r3, #5
 8006adc:	d801      	bhi.n	8006ae2 <__hexdig_fun+0x1a>
 8006ade:	3847      	subs	r0, #71	; 0x47
 8006ae0:	e7f7      	b.n	8006ad2 <__hexdig_fun+0xa>
 8006ae2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006ae6:	2b05      	cmp	r3, #5
 8006ae8:	d801      	bhi.n	8006aee <__hexdig_fun+0x26>
 8006aea:	3827      	subs	r0, #39	; 0x27
 8006aec:	e7f1      	b.n	8006ad2 <__hexdig_fun+0xa>
 8006aee:	2000      	movs	r0, #0
 8006af0:	4770      	bx	lr

08006af2 <__gethex>:
 8006af2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006af6:	b08b      	sub	sp, #44	; 0x2c
 8006af8:	468a      	mov	sl, r1
 8006afa:	9002      	str	r0, [sp, #8]
 8006afc:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006afe:	9306      	str	r3, [sp, #24]
 8006b00:	4690      	mov	r8, r2
 8006b02:	f000 facd 	bl	80070a0 <__localeconv_l>
 8006b06:	6803      	ldr	r3, [r0, #0]
 8006b08:	9303      	str	r3, [sp, #12]
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f7f9 fb68 	bl	80001e0 <strlen>
 8006b10:	9b03      	ldr	r3, [sp, #12]
 8006b12:	9001      	str	r0, [sp, #4]
 8006b14:	4403      	add	r3, r0
 8006b16:	f04f 0b00 	mov.w	fp, #0
 8006b1a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006b1e:	9307      	str	r3, [sp, #28]
 8006b20:	f8da 3000 	ldr.w	r3, [sl]
 8006b24:	3302      	adds	r3, #2
 8006b26:	461f      	mov	r7, r3
 8006b28:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006b2c:	2830      	cmp	r0, #48	; 0x30
 8006b2e:	d06c      	beq.n	8006c0a <__gethex+0x118>
 8006b30:	f7ff ffca 	bl	8006ac8 <__hexdig_fun>
 8006b34:	4604      	mov	r4, r0
 8006b36:	2800      	cmp	r0, #0
 8006b38:	d16a      	bne.n	8006c10 <__gethex+0x11e>
 8006b3a:	9a01      	ldr	r2, [sp, #4]
 8006b3c:	9903      	ldr	r1, [sp, #12]
 8006b3e:	4638      	mov	r0, r7
 8006b40:	f7fe fe47 	bl	80057d2 <strncmp>
 8006b44:	2800      	cmp	r0, #0
 8006b46:	d166      	bne.n	8006c16 <__gethex+0x124>
 8006b48:	9b01      	ldr	r3, [sp, #4]
 8006b4a:	5cf8      	ldrb	r0, [r7, r3]
 8006b4c:	18fe      	adds	r6, r7, r3
 8006b4e:	f7ff ffbb 	bl	8006ac8 <__hexdig_fun>
 8006b52:	2800      	cmp	r0, #0
 8006b54:	d062      	beq.n	8006c1c <__gethex+0x12a>
 8006b56:	4633      	mov	r3, r6
 8006b58:	7818      	ldrb	r0, [r3, #0]
 8006b5a:	2830      	cmp	r0, #48	; 0x30
 8006b5c:	461f      	mov	r7, r3
 8006b5e:	f103 0301 	add.w	r3, r3, #1
 8006b62:	d0f9      	beq.n	8006b58 <__gethex+0x66>
 8006b64:	f7ff ffb0 	bl	8006ac8 <__hexdig_fun>
 8006b68:	fab0 f580 	clz	r5, r0
 8006b6c:	096d      	lsrs	r5, r5, #5
 8006b6e:	4634      	mov	r4, r6
 8006b70:	f04f 0b01 	mov.w	fp, #1
 8006b74:	463a      	mov	r2, r7
 8006b76:	4616      	mov	r6, r2
 8006b78:	3201      	adds	r2, #1
 8006b7a:	7830      	ldrb	r0, [r6, #0]
 8006b7c:	f7ff ffa4 	bl	8006ac8 <__hexdig_fun>
 8006b80:	2800      	cmp	r0, #0
 8006b82:	d1f8      	bne.n	8006b76 <__gethex+0x84>
 8006b84:	9a01      	ldr	r2, [sp, #4]
 8006b86:	9903      	ldr	r1, [sp, #12]
 8006b88:	4630      	mov	r0, r6
 8006b8a:	f7fe fe22 	bl	80057d2 <strncmp>
 8006b8e:	b950      	cbnz	r0, 8006ba6 <__gethex+0xb4>
 8006b90:	b954      	cbnz	r4, 8006ba8 <__gethex+0xb6>
 8006b92:	9b01      	ldr	r3, [sp, #4]
 8006b94:	18f4      	adds	r4, r6, r3
 8006b96:	4622      	mov	r2, r4
 8006b98:	4616      	mov	r6, r2
 8006b9a:	3201      	adds	r2, #1
 8006b9c:	7830      	ldrb	r0, [r6, #0]
 8006b9e:	f7ff ff93 	bl	8006ac8 <__hexdig_fun>
 8006ba2:	2800      	cmp	r0, #0
 8006ba4:	d1f8      	bne.n	8006b98 <__gethex+0xa6>
 8006ba6:	b10c      	cbz	r4, 8006bac <__gethex+0xba>
 8006ba8:	1ba4      	subs	r4, r4, r6
 8006baa:	00a4      	lsls	r4, r4, #2
 8006bac:	7833      	ldrb	r3, [r6, #0]
 8006bae:	2b50      	cmp	r3, #80	; 0x50
 8006bb0:	d001      	beq.n	8006bb6 <__gethex+0xc4>
 8006bb2:	2b70      	cmp	r3, #112	; 0x70
 8006bb4:	d140      	bne.n	8006c38 <__gethex+0x146>
 8006bb6:	7873      	ldrb	r3, [r6, #1]
 8006bb8:	2b2b      	cmp	r3, #43	; 0x2b
 8006bba:	d031      	beq.n	8006c20 <__gethex+0x12e>
 8006bbc:	2b2d      	cmp	r3, #45	; 0x2d
 8006bbe:	d033      	beq.n	8006c28 <__gethex+0x136>
 8006bc0:	1c71      	adds	r1, r6, #1
 8006bc2:	f04f 0900 	mov.w	r9, #0
 8006bc6:	7808      	ldrb	r0, [r1, #0]
 8006bc8:	f7ff ff7e 	bl	8006ac8 <__hexdig_fun>
 8006bcc:	1e43      	subs	r3, r0, #1
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	2b18      	cmp	r3, #24
 8006bd2:	d831      	bhi.n	8006c38 <__gethex+0x146>
 8006bd4:	f1a0 0210 	sub.w	r2, r0, #16
 8006bd8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006bdc:	f7ff ff74 	bl	8006ac8 <__hexdig_fun>
 8006be0:	1e43      	subs	r3, r0, #1
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	2b18      	cmp	r3, #24
 8006be6:	d922      	bls.n	8006c2e <__gethex+0x13c>
 8006be8:	f1b9 0f00 	cmp.w	r9, #0
 8006bec:	d000      	beq.n	8006bf0 <__gethex+0xfe>
 8006bee:	4252      	negs	r2, r2
 8006bf0:	4414      	add	r4, r2
 8006bf2:	f8ca 1000 	str.w	r1, [sl]
 8006bf6:	b30d      	cbz	r5, 8006c3c <__gethex+0x14a>
 8006bf8:	f1bb 0f00 	cmp.w	fp, #0
 8006bfc:	bf0c      	ite	eq
 8006bfe:	2706      	moveq	r7, #6
 8006c00:	2700      	movne	r7, #0
 8006c02:	4638      	mov	r0, r7
 8006c04:	b00b      	add	sp, #44	; 0x2c
 8006c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c0a:	f10b 0b01 	add.w	fp, fp, #1
 8006c0e:	e78a      	b.n	8006b26 <__gethex+0x34>
 8006c10:	2500      	movs	r5, #0
 8006c12:	462c      	mov	r4, r5
 8006c14:	e7ae      	b.n	8006b74 <__gethex+0x82>
 8006c16:	463e      	mov	r6, r7
 8006c18:	2501      	movs	r5, #1
 8006c1a:	e7c7      	b.n	8006bac <__gethex+0xba>
 8006c1c:	4604      	mov	r4, r0
 8006c1e:	e7fb      	b.n	8006c18 <__gethex+0x126>
 8006c20:	f04f 0900 	mov.w	r9, #0
 8006c24:	1cb1      	adds	r1, r6, #2
 8006c26:	e7ce      	b.n	8006bc6 <__gethex+0xd4>
 8006c28:	f04f 0901 	mov.w	r9, #1
 8006c2c:	e7fa      	b.n	8006c24 <__gethex+0x132>
 8006c2e:	230a      	movs	r3, #10
 8006c30:	fb03 0202 	mla	r2, r3, r2, r0
 8006c34:	3a10      	subs	r2, #16
 8006c36:	e7cf      	b.n	8006bd8 <__gethex+0xe6>
 8006c38:	4631      	mov	r1, r6
 8006c3a:	e7da      	b.n	8006bf2 <__gethex+0x100>
 8006c3c:	1bf3      	subs	r3, r6, r7
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	4629      	mov	r1, r5
 8006c42:	2b07      	cmp	r3, #7
 8006c44:	dc49      	bgt.n	8006cda <__gethex+0x1e8>
 8006c46:	9802      	ldr	r0, [sp, #8]
 8006c48:	f000 fa98 	bl	800717c <_Balloc>
 8006c4c:	9b01      	ldr	r3, [sp, #4]
 8006c4e:	f100 0914 	add.w	r9, r0, #20
 8006c52:	f04f 0b00 	mov.w	fp, #0
 8006c56:	f1c3 0301 	rsb	r3, r3, #1
 8006c5a:	4605      	mov	r5, r0
 8006c5c:	f8cd 9010 	str.w	r9, [sp, #16]
 8006c60:	46da      	mov	sl, fp
 8006c62:	9308      	str	r3, [sp, #32]
 8006c64:	42b7      	cmp	r7, r6
 8006c66:	d33b      	bcc.n	8006ce0 <__gethex+0x1ee>
 8006c68:	9804      	ldr	r0, [sp, #16]
 8006c6a:	f840 ab04 	str.w	sl, [r0], #4
 8006c6e:	eba0 0009 	sub.w	r0, r0, r9
 8006c72:	1080      	asrs	r0, r0, #2
 8006c74:	6128      	str	r0, [r5, #16]
 8006c76:	0147      	lsls	r7, r0, #5
 8006c78:	4650      	mov	r0, sl
 8006c7a:	f000 fb43 	bl	8007304 <__hi0bits>
 8006c7e:	f8d8 6000 	ldr.w	r6, [r8]
 8006c82:	1a3f      	subs	r7, r7, r0
 8006c84:	42b7      	cmp	r7, r6
 8006c86:	dd64      	ble.n	8006d52 <__gethex+0x260>
 8006c88:	1bbf      	subs	r7, r7, r6
 8006c8a:	4639      	mov	r1, r7
 8006c8c:	4628      	mov	r0, r5
 8006c8e:	f000 fe53 	bl	8007938 <__any_on>
 8006c92:	4682      	mov	sl, r0
 8006c94:	b178      	cbz	r0, 8006cb6 <__gethex+0x1c4>
 8006c96:	1e7b      	subs	r3, r7, #1
 8006c98:	1159      	asrs	r1, r3, #5
 8006c9a:	f003 021f 	and.w	r2, r3, #31
 8006c9e:	f04f 0a01 	mov.w	sl, #1
 8006ca2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006ca6:	fa0a f202 	lsl.w	r2, sl, r2
 8006caa:	420a      	tst	r2, r1
 8006cac:	d003      	beq.n	8006cb6 <__gethex+0x1c4>
 8006cae:	4553      	cmp	r3, sl
 8006cb0:	dc46      	bgt.n	8006d40 <__gethex+0x24e>
 8006cb2:	f04f 0a02 	mov.w	sl, #2
 8006cb6:	4639      	mov	r1, r7
 8006cb8:	4628      	mov	r0, r5
 8006cba:	f7ff fecb 	bl	8006a54 <rshift>
 8006cbe:	443c      	add	r4, r7
 8006cc0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006cc4:	42a3      	cmp	r3, r4
 8006cc6:	da52      	bge.n	8006d6e <__gethex+0x27c>
 8006cc8:	4629      	mov	r1, r5
 8006cca:	9802      	ldr	r0, [sp, #8]
 8006ccc:	f000 fa8a 	bl	80071e4 <_Bfree>
 8006cd0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	6013      	str	r3, [r2, #0]
 8006cd6:	27a3      	movs	r7, #163	; 0xa3
 8006cd8:	e793      	b.n	8006c02 <__gethex+0x110>
 8006cda:	3101      	adds	r1, #1
 8006cdc:	105b      	asrs	r3, r3, #1
 8006cde:	e7b0      	b.n	8006c42 <__gethex+0x150>
 8006ce0:	1e73      	subs	r3, r6, #1
 8006ce2:	9305      	str	r3, [sp, #20]
 8006ce4:	9a07      	ldr	r2, [sp, #28]
 8006ce6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d018      	beq.n	8006d20 <__gethex+0x22e>
 8006cee:	f1bb 0f20 	cmp.w	fp, #32
 8006cf2:	d107      	bne.n	8006d04 <__gethex+0x212>
 8006cf4:	9b04      	ldr	r3, [sp, #16]
 8006cf6:	f8c3 a000 	str.w	sl, [r3]
 8006cfa:	3304      	adds	r3, #4
 8006cfc:	f04f 0a00 	mov.w	sl, #0
 8006d00:	9304      	str	r3, [sp, #16]
 8006d02:	46d3      	mov	fp, sl
 8006d04:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006d08:	f7ff fede 	bl	8006ac8 <__hexdig_fun>
 8006d0c:	f000 000f 	and.w	r0, r0, #15
 8006d10:	fa00 f00b 	lsl.w	r0, r0, fp
 8006d14:	ea4a 0a00 	orr.w	sl, sl, r0
 8006d18:	f10b 0b04 	add.w	fp, fp, #4
 8006d1c:	9b05      	ldr	r3, [sp, #20]
 8006d1e:	e00d      	b.n	8006d3c <__gethex+0x24a>
 8006d20:	9b05      	ldr	r3, [sp, #20]
 8006d22:	9a08      	ldr	r2, [sp, #32]
 8006d24:	4413      	add	r3, r2
 8006d26:	42bb      	cmp	r3, r7
 8006d28:	d3e1      	bcc.n	8006cee <__gethex+0x1fc>
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	9a01      	ldr	r2, [sp, #4]
 8006d2e:	9903      	ldr	r1, [sp, #12]
 8006d30:	9309      	str	r3, [sp, #36]	; 0x24
 8006d32:	f7fe fd4e 	bl	80057d2 <strncmp>
 8006d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d38:	2800      	cmp	r0, #0
 8006d3a:	d1d8      	bne.n	8006cee <__gethex+0x1fc>
 8006d3c:	461e      	mov	r6, r3
 8006d3e:	e791      	b.n	8006c64 <__gethex+0x172>
 8006d40:	1eb9      	subs	r1, r7, #2
 8006d42:	4628      	mov	r0, r5
 8006d44:	f000 fdf8 	bl	8007938 <__any_on>
 8006d48:	2800      	cmp	r0, #0
 8006d4a:	d0b2      	beq.n	8006cb2 <__gethex+0x1c0>
 8006d4c:	f04f 0a03 	mov.w	sl, #3
 8006d50:	e7b1      	b.n	8006cb6 <__gethex+0x1c4>
 8006d52:	da09      	bge.n	8006d68 <__gethex+0x276>
 8006d54:	1bf7      	subs	r7, r6, r7
 8006d56:	4629      	mov	r1, r5
 8006d58:	463a      	mov	r2, r7
 8006d5a:	9802      	ldr	r0, [sp, #8]
 8006d5c:	f000 fc0e 	bl	800757c <__lshift>
 8006d60:	1be4      	subs	r4, r4, r7
 8006d62:	4605      	mov	r5, r0
 8006d64:	f100 0914 	add.w	r9, r0, #20
 8006d68:	f04f 0a00 	mov.w	sl, #0
 8006d6c:	e7a8      	b.n	8006cc0 <__gethex+0x1ce>
 8006d6e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006d72:	42a0      	cmp	r0, r4
 8006d74:	dd6a      	ble.n	8006e4c <__gethex+0x35a>
 8006d76:	1b04      	subs	r4, r0, r4
 8006d78:	42a6      	cmp	r6, r4
 8006d7a:	dc2e      	bgt.n	8006dda <__gethex+0x2e8>
 8006d7c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d022      	beq.n	8006dca <__gethex+0x2d8>
 8006d84:	2b03      	cmp	r3, #3
 8006d86:	d024      	beq.n	8006dd2 <__gethex+0x2e0>
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d115      	bne.n	8006db8 <__gethex+0x2c6>
 8006d8c:	42a6      	cmp	r6, r4
 8006d8e:	d113      	bne.n	8006db8 <__gethex+0x2c6>
 8006d90:	2e01      	cmp	r6, #1
 8006d92:	dc0b      	bgt.n	8006dac <__gethex+0x2ba>
 8006d94:	9a06      	ldr	r2, [sp, #24]
 8006d96:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006d9a:	6013      	str	r3, [r2, #0]
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	612b      	str	r3, [r5, #16]
 8006da0:	f8c9 3000 	str.w	r3, [r9]
 8006da4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006da6:	2762      	movs	r7, #98	; 0x62
 8006da8:	601d      	str	r5, [r3, #0]
 8006daa:	e72a      	b.n	8006c02 <__gethex+0x110>
 8006dac:	1e71      	subs	r1, r6, #1
 8006dae:	4628      	mov	r0, r5
 8006db0:	f000 fdc2 	bl	8007938 <__any_on>
 8006db4:	2800      	cmp	r0, #0
 8006db6:	d1ed      	bne.n	8006d94 <__gethex+0x2a2>
 8006db8:	4629      	mov	r1, r5
 8006dba:	9802      	ldr	r0, [sp, #8]
 8006dbc:	f000 fa12 	bl	80071e4 <_Bfree>
 8006dc0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	6013      	str	r3, [r2, #0]
 8006dc6:	2750      	movs	r7, #80	; 0x50
 8006dc8:	e71b      	b.n	8006c02 <__gethex+0x110>
 8006dca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d0e1      	beq.n	8006d94 <__gethex+0x2a2>
 8006dd0:	e7f2      	b.n	8006db8 <__gethex+0x2c6>
 8006dd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1dd      	bne.n	8006d94 <__gethex+0x2a2>
 8006dd8:	e7ee      	b.n	8006db8 <__gethex+0x2c6>
 8006dda:	1e67      	subs	r7, r4, #1
 8006ddc:	f1ba 0f00 	cmp.w	sl, #0
 8006de0:	d131      	bne.n	8006e46 <__gethex+0x354>
 8006de2:	b127      	cbz	r7, 8006dee <__gethex+0x2fc>
 8006de4:	4639      	mov	r1, r7
 8006de6:	4628      	mov	r0, r5
 8006de8:	f000 fda6 	bl	8007938 <__any_on>
 8006dec:	4682      	mov	sl, r0
 8006dee:	117a      	asrs	r2, r7, #5
 8006df0:	2301      	movs	r3, #1
 8006df2:	f007 071f 	and.w	r7, r7, #31
 8006df6:	fa03 f707 	lsl.w	r7, r3, r7
 8006dfa:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8006dfe:	4621      	mov	r1, r4
 8006e00:	421f      	tst	r7, r3
 8006e02:	4628      	mov	r0, r5
 8006e04:	bf18      	it	ne
 8006e06:	f04a 0a02 	orrne.w	sl, sl, #2
 8006e0a:	1b36      	subs	r6, r6, r4
 8006e0c:	f7ff fe22 	bl	8006a54 <rshift>
 8006e10:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8006e14:	2702      	movs	r7, #2
 8006e16:	f1ba 0f00 	cmp.w	sl, #0
 8006e1a:	d048      	beq.n	8006eae <__gethex+0x3bc>
 8006e1c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d015      	beq.n	8006e50 <__gethex+0x35e>
 8006e24:	2b03      	cmp	r3, #3
 8006e26:	d017      	beq.n	8006e58 <__gethex+0x366>
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d109      	bne.n	8006e40 <__gethex+0x34e>
 8006e2c:	f01a 0f02 	tst.w	sl, #2
 8006e30:	d006      	beq.n	8006e40 <__gethex+0x34e>
 8006e32:	f8d9 3000 	ldr.w	r3, [r9]
 8006e36:	ea4a 0a03 	orr.w	sl, sl, r3
 8006e3a:	f01a 0f01 	tst.w	sl, #1
 8006e3e:	d10e      	bne.n	8006e5e <__gethex+0x36c>
 8006e40:	f047 0710 	orr.w	r7, r7, #16
 8006e44:	e033      	b.n	8006eae <__gethex+0x3bc>
 8006e46:	f04f 0a01 	mov.w	sl, #1
 8006e4a:	e7d0      	b.n	8006dee <__gethex+0x2fc>
 8006e4c:	2701      	movs	r7, #1
 8006e4e:	e7e2      	b.n	8006e16 <__gethex+0x324>
 8006e50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e52:	f1c3 0301 	rsb	r3, r3, #1
 8006e56:	9315      	str	r3, [sp, #84]	; 0x54
 8006e58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d0f0      	beq.n	8006e40 <__gethex+0x34e>
 8006e5e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8006e62:	f105 0314 	add.w	r3, r5, #20
 8006e66:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8006e6a:	eb03 010a 	add.w	r1, r3, sl
 8006e6e:	f04f 0c00 	mov.w	ip, #0
 8006e72:	4618      	mov	r0, r3
 8006e74:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e78:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8006e7c:	d01c      	beq.n	8006eb8 <__gethex+0x3c6>
 8006e7e:	3201      	adds	r2, #1
 8006e80:	6002      	str	r2, [r0, #0]
 8006e82:	2f02      	cmp	r7, #2
 8006e84:	f105 0314 	add.w	r3, r5, #20
 8006e88:	d138      	bne.n	8006efc <__gethex+0x40a>
 8006e8a:	f8d8 2000 	ldr.w	r2, [r8]
 8006e8e:	3a01      	subs	r2, #1
 8006e90:	42b2      	cmp	r2, r6
 8006e92:	d10a      	bne.n	8006eaa <__gethex+0x3b8>
 8006e94:	1171      	asrs	r1, r6, #5
 8006e96:	2201      	movs	r2, #1
 8006e98:	f006 061f 	and.w	r6, r6, #31
 8006e9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006ea0:	fa02 f606 	lsl.w	r6, r2, r6
 8006ea4:	421e      	tst	r6, r3
 8006ea6:	bf18      	it	ne
 8006ea8:	4617      	movne	r7, r2
 8006eaa:	f047 0720 	orr.w	r7, r7, #32
 8006eae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006eb0:	601d      	str	r5, [r3, #0]
 8006eb2:	9b06      	ldr	r3, [sp, #24]
 8006eb4:	601c      	str	r4, [r3, #0]
 8006eb6:	e6a4      	b.n	8006c02 <__gethex+0x110>
 8006eb8:	4299      	cmp	r1, r3
 8006eba:	f843 cc04 	str.w	ip, [r3, #-4]
 8006ebe:	d8d8      	bhi.n	8006e72 <__gethex+0x380>
 8006ec0:	68ab      	ldr	r3, [r5, #8]
 8006ec2:	4599      	cmp	r9, r3
 8006ec4:	db12      	blt.n	8006eec <__gethex+0x3fa>
 8006ec6:	6869      	ldr	r1, [r5, #4]
 8006ec8:	9802      	ldr	r0, [sp, #8]
 8006eca:	3101      	adds	r1, #1
 8006ecc:	f000 f956 	bl	800717c <_Balloc>
 8006ed0:	692a      	ldr	r2, [r5, #16]
 8006ed2:	3202      	adds	r2, #2
 8006ed4:	f105 010c 	add.w	r1, r5, #12
 8006ed8:	4683      	mov	fp, r0
 8006eda:	0092      	lsls	r2, r2, #2
 8006edc:	300c      	adds	r0, #12
 8006ede:	f7fe fb2e 	bl	800553e <memcpy>
 8006ee2:	4629      	mov	r1, r5
 8006ee4:	9802      	ldr	r0, [sp, #8]
 8006ee6:	f000 f97d 	bl	80071e4 <_Bfree>
 8006eea:	465d      	mov	r5, fp
 8006eec:	692b      	ldr	r3, [r5, #16]
 8006eee:	1c5a      	adds	r2, r3, #1
 8006ef0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006ef4:	612a      	str	r2, [r5, #16]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	615a      	str	r2, [r3, #20]
 8006efa:	e7c2      	b.n	8006e82 <__gethex+0x390>
 8006efc:	692a      	ldr	r2, [r5, #16]
 8006efe:	454a      	cmp	r2, r9
 8006f00:	dd0b      	ble.n	8006f1a <__gethex+0x428>
 8006f02:	2101      	movs	r1, #1
 8006f04:	4628      	mov	r0, r5
 8006f06:	f7ff fda5 	bl	8006a54 <rshift>
 8006f0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006f0e:	3401      	adds	r4, #1
 8006f10:	42a3      	cmp	r3, r4
 8006f12:	f6ff aed9 	blt.w	8006cc8 <__gethex+0x1d6>
 8006f16:	2701      	movs	r7, #1
 8006f18:	e7c7      	b.n	8006eaa <__gethex+0x3b8>
 8006f1a:	f016 061f 	ands.w	r6, r6, #31
 8006f1e:	d0fa      	beq.n	8006f16 <__gethex+0x424>
 8006f20:	449a      	add	sl, r3
 8006f22:	f1c6 0620 	rsb	r6, r6, #32
 8006f26:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006f2a:	f000 f9eb 	bl	8007304 <__hi0bits>
 8006f2e:	42b0      	cmp	r0, r6
 8006f30:	dbe7      	blt.n	8006f02 <__gethex+0x410>
 8006f32:	e7f0      	b.n	8006f16 <__gethex+0x424>

08006f34 <L_shift>:
 8006f34:	f1c2 0208 	rsb	r2, r2, #8
 8006f38:	0092      	lsls	r2, r2, #2
 8006f3a:	b570      	push	{r4, r5, r6, lr}
 8006f3c:	f1c2 0620 	rsb	r6, r2, #32
 8006f40:	6843      	ldr	r3, [r0, #4]
 8006f42:	6804      	ldr	r4, [r0, #0]
 8006f44:	fa03 f506 	lsl.w	r5, r3, r6
 8006f48:	432c      	orrs	r4, r5
 8006f4a:	40d3      	lsrs	r3, r2
 8006f4c:	6004      	str	r4, [r0, #0]
 8006f4e:	f840 3f04 	str.w	r3, [r0, #4]!
 8006f52:	4288      	cmp	r0, r1
 8006f54:	d3f4      	bcc.n	8006f40 <L_shift+0xc>
 8006f56:	bd70      	pop	{r4, r5, r6, pc}

08006f58 <__match>:
 8006f58:	b530      	push	{r4, r5, lr}
 8006f5a:	6803      	ldr	r3, [r0, #0]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f62:	b914      	cbnz	r4, 8006f6a <__match+0x12>
 8006f64:	6003      	str	r3, [r0, #0]
 8006f66:	2001      	movs	r0, #1
 8006f68:	bd30      	pop	{r4, r5, pc}
 8006f6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f6e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006f72:	2d19      	cmp	r5, #25
 8006f74:	bf98      	it	ls
 8006f76:	3220      	addls	r2, #32
 8006f78:	42a2      	cmp	r2, r4
 8006f7a:	d0f0      	beq.n	8006f5e <__match+0x6>
 8006f7c:	2000      	movs	r0, #0
 8006f7e:	e7f3      	b.n	8006f68 <__match+0x10>

08006f80 <__hexnan>:
 8006f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f84:	680b      	ldr	r3, [r1, #0]
 8006f86:	6801      	ldr	r1, [r0, #0]
 8006f88:	115f      	asrs	r7, r3, #5
 8006f8a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8006f8e:	f013 031f 	ands.w	r3, r3, #31
 8006f92:	b087      	sub	sp, #28
 8006f94:	bf18      	it	ne
 8006f96:	3704      	addne	r7, #4
 8006f98:	2500      	movs	r5, #0
 8006f9a:	1f3e      	subs	r6, r7, #4
 8006f9c:	4682      	mov	sl, r0
 8006f9e:	4690      	mov	r8, r2
 8006fa0:	9301      	str	r3, [sp, #4]
 8006fa2:	f847 5c04 	str.w	r5, [r7, #-4]
 8006fa6:	46b1      	mov	r9, r6
 8006fa8:	4634      	mov	r4, r6
 8006faa:	9502      	str	r5, [sp, #8]
 8006fac:	46ab      	mov	fp, r5
 8006fae:	784a      	ldrb	r2, [r1, #1]
 8006fb0:	1c4b      	adds	r3, r1, #1
 8006fb2:	9303      	str	r3, [sp, #12]
 8006fb4:	b342      	cbz	r2, 8007008 <__hexnan+0x88>
 8006fb6:	4610      	mov	r0, r2
 8006fb8:	9105      	str	r1, [sp, #20]
 8006fba:	9204      	str	r2, [sp, #16]
 8006fbc:	f7ff fd84 	bl	8006ac8 <__hexdig_fun>
 8006fc0:	2800      	cmp	r0, #0
 8006fc2:	d143      	bne.n	800704c <__hexnan+0xcc>
 8006fc4:	9a04      	ldr	r2, [sp, #16]
 8006fc6:	9905      	ldr	r1, [sp, #20]
 8006fc8:	2a20      	cmp	r2, #32
 8006fca:	d818      	bhi.n	8006ffe <__hexnan+0x7e>
 8006fcc:	9b02      	ldr	r3, [sp, #8]
 8006fce:	459b      	cmp	fp, r3
 8006fd0:	dd13      	ble.n	8006ffa <__hexnan+0x7a>
 8006fd2:	454c      	cmp	r4, r9
 8006fd4:	d206      	bcs.n	8006fe4 <__hexnan+0x64>
 8006fd6:	2d07      	cmp	r5, #7
 8006fd8:	dc04      	bgt.n	8006fe4 <__hexnan+0x64>
 8006fda:	462a      	mov	r2, r5
 8006fdc:	4649      	mov	r1, r9
 8006fde:	4620      	mov	r0, r4
 8006fe0:	f7ff ffa8 	bl	8006f34 <L_shift>
 8006fe4:	4544      	cmp	r4, r8
 8006fe6:	d944      	bls.n	8007072 <__hexnan+0xf2>
 8006fe8:	2300      	movs	r3, #0
 8006fea:	f1a4 0904 	sub.w	r9, r4, #4
 8006fee:	f844 3c04 	str.w	r3, [r4, #-4]
 8006ff2:	f8cd b008 	str.w	fp, [sp, #8]
 8006ff6:	464c      	mov	r4, r9
 8006ff8:	461d      	mov	r5, r3
 8006ffa:	9903      	ldr	r1, [sp, #12]
 8006ffc:	e7d7      	b.n	8006fae <__hexnan+0x2e>
 8006ffe:	2a29      	cmp	r2, #41	; 0x29
 8007000:	d14a      	bne.n	8007098 <__hexnan+0x118>
 8007002:	3102      	adds	r1, #2
 8007004:	f8ca 1000 	str.w	r1, [sl]
 8007008:	f1bb 0f00 	cmp.w	fp, #0
 800700c:	d044      	beq.n	8007098 <__hexnan+0x118>
 800700e:	454c      	cmp	r4, r9
 8007010:	d206      	bcs.n	8007020 <__hexnan+0xa0>
 8007012:	2d07      	cmp	r5, #7
 8007014:	dc04      	bgt.n	8007020 <__hexnan+0xa0>
 8007016:	462a      	mov	r2, r5
 8007018:	4649      	mov	r1, r9
 800701a:	4620      	mov	r0, r4
 800701c:	f7ff ff8a 	bl	8006f34 <L_shift>
 8007020:	4544      	cmp	r4, r8
 8007022:	d928      	bls.n	8007076 <__hexnan+0xf6>
 8007024:	4643      	mov	r3, r8
 8007026:	f854 2b04 	ldr.w	r2, [r4], #4
 800702a:	f843 2b04 	str.w	r2, [r3], #4
 800702e:	42a6      	cmp	r6, r4
 8007030:	d2f9      	bcs.n	8007026 <__hexnan+0xa6>
 8007032:	2200      	movs	r2, #0
 8007034:	f843 2b04 	str.w	r2, [r3], #4
 8007038:	429e      	cmp	r6, r3
 800703a:	d2fb      	bcs.n	8007034 <__hexnan+0xb4>
 800703c:	6833      	ldr	r3, [r6, #0]
 800703e:	b91b      	cbnz	r3, 8007048 <__hexnan+0xc8>
 8007040:	4546      	cmp	r6, r8
 8007042:	d127      	bne.n	8007094 <__hexnan+0x114>
 8007044:	2301      	movs	r3, #1
 8007046:	6033      	str	r3, [r6, #0]
 8007048:	2005      	movs	r0, #5
 800704a:	e026      	b.n	800709a <__hexnan+0x11a>
 800704c:	3501      	adds	r5, #1
 800704e:	2d08      	cmp	r5, #8
 8007050:	f10b 0b01 	add.w	fp, fp, #1
 8007054:	dd06      	ble.n	8007064 <__hexnan+0xe4>
 8007056:	4544      	cmp	r4, r8
 8007058:	d9cf      	bls.n	8006ffa <__hexnan+0x7a>
 800705a:	2300      	movs	r3, #0
 800705c:	f844 3c04 	str.w	r3, [r4, #-4]
 8007060:	2501      	movs	r5, #1
 8007062:	3c04      	subs	r4, #4
 8007064:	6822      	ldr	r2, [r4, #0]
 8007066:	f000 000f 	and.w	r0, r0, #15
 800706a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800706e:	6020      	str	r0, [r4, #0]
 8007070:	e7c3      	b.n	8006ffa <__hexnan+0x7a>
 8007072:	2508      	movs	r5, #8
 8007074:	e7c1      	b.n	8006ffa <__hexnan+0x7a>
 8007076:	9b01      	ldr	r3, [sp, #4]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d0df      	beq.n	800703c <__hexnan+0xbc>
 800707c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007080:	f1c3 0320 	rsb	r3, r3, #32
 8007084:	fa22 f303 	lsr.w	r3, r2, r3
 8007088:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800708c:	401a      	ands	r2, r3
 800708e:	f847 2c04 	str.w	r2, [r7, #-4]
 8007092:	e7d3      	b.n	800703c <__hexnan+0xbc>
 8007094:	3e04      	subs	r6, #4
 8007096:	e7d1      	b.n	800703c <__hexnan+0xbc>
 8007098:	2004      	movs	r0, #4
 800709a:	b007      	add	sp, #28
 800709c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080070a0 <__localeconv_l>:
 80070a0:	30f0      	adds	r0, #240	; 0xf0
 80070a2:	4770      	bx	lr

080070a4 <__swhatbuf_r>:
 80070a4:	b570      	push	{r4, r5, r6, lr}
 80070a6:	460e      	mov	r6, r1
 80070a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070ac:	2900      	cmp	r1, #0
 80070ae:	b096      	sub	sp, #88	; 0x58
 80070b0:	4614      	mov	r4, r2
 80070b2:	461d      	mov	r5, r3
 80070b4:	da07      	bge.n	80070c6 <__swhatbuf_r+0x22>
 80070b6:	2300      	movs	r3, #0
 80070b8:	602b      	str	r3, [r5, #0]
 80070ba:	89b3      	ldrh	r3, [r6, #12]
 80070bc:	061a      	lsls	r2, r3, #24
 80070be:	d410      	bmi.n	80070e2 <__swhatbuf_r+0x3e>
 80070c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070c4:	e00e      	b.n	80070e4 <__swhatbuf_r+0x40>
 80070c6:	466a      	mov	r2, sp
 80070c8:	f001 f84c 	bl	8008164 <_fstat_r>
 80070cc:	2800      	cmp	r0, #0
 80070ce:	dbf2      	blt.n	80070b6 <__swhatbuf_r+0x12>
 80070d0:	9a01      	ldr	r2, [sp, #4]
 80070d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80070d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80070da:	425a      	negs	r2, r3
 80070dc:	415a      	adcs	r2, r3
 80070de:	602a      	str	r2, [r5, #0]
 80070e0:	e7ee      	b.n	80070c0 <__swhatbuf_r+0x1c>
 80070e2:	2340      	movs	r3, #64	; 0x40
 80070e4:	2000      	movs	r0, #0
 80070e6:	6023      	str	r3, [r4, #0]
 80070e8:	b016      	add	sp, #88	; 0x58
 80070ea:	bd70      	pop	{r4, r5, r6, pc}

080070ec <__smakebuf_r>:
 80070ec:	898b      	ldrh	r3, [r1, #12]
 80070ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80070f0:	079d      	lsls	r5, r3, #30
 80070f2:	4606      	mov	r6, r0
 80070f4:	460c      	mov	r4, r1
 80070f6:	d507      	bpl.n	8007108 <__smakebuf_r+0x1c>
 80070f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80070fc:	6023      	str	r3, [r4, #0]
 80070fe:	6123      	str	r3, [r4, #16]
 8007100:	2301      	movs	r3, #1
 8007102:	6163      	str	r3, [r4, #20]
 8007104:	b002      	add	sp, #8
 8007106:	bd70      	pop	{r4, r5, r6, pc}
 8007108:	ab01      	add	r3, sp, #4
 800710a:	466a      	mov	r2, sp
 800710c:	f7ff ffca 	bl	80070a4 <__swhatbuf_r>
 8007110:	9900      	ldr	r1, [sp, #0]
 8007112:	4605      	mov	r5, r0
 8007114:	4630      	mov	r0, r6
 8007116:	f000 fc8d 	bl	8007a34 <_malloc_r>
 800711a:	b948      	cbnz	r0, 8007130 <__smakebuf_r+0x44>
 800711c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007120:	059a      	lsls	r2, r3, #22
 8007122:	d4ef      	bmi.n	8007104 <__smakebuf_r+0x18>
 8007124:	f023 0303 	bic.w	r3, r3, #3
 8007128:	f043 0302 	orr.w	r3, r3, #2
 800712c:	81a3      	strh	r3, [r4, #12]
 800712e:	e7e3      	b.n	80070f8 <__smakebuf_r+0xc>
 8007130:	4b0d      	ldr	r3, [pc, #52]	; (8007168 <__smakebuf_r+0x7c>)
 8007132:	62b3      	str	r3, [r6, #40]	; 0x28
 8007134:	89a3      	ldrh	r3, [r4, #12]
 8007136:	6020      	str	r0, [r4, #0]
 8007138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800713c:	81a3      	strh	r3, [r4, #12]
 800713e:	9b00      	ldr	r3, [sp, #0]
 8007140:	6163      	str	r3, [r4, #20]
 8007142:	9b01      	ldr	r3, [sp, #4]
 8007144:	6120      	str	r0, [r4, #16]
 8007146:	b15b      	cbz	r3, 8007160 <__smakebuf_r+0x74>
 8007148:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800714c:	4630      	mov	r0, r6
 800714e:	f001 f81b 	bl	8008188 <_isatty_r>
 8007152:	b128      	cbz	r0, 8007160 <__smakebuf_r+0x74>
 8007154:	89a3      	ldrh	r3, [r4, #12]
 8007156:	f023 0303 	bic.w	r3, r3, #3
 800715a:	f043 0301 	orr.w	r3, r3, #1
 800715e:	81a3      	strh	r3, [r4, #12]
 8007160:	89a3      	ldrh	r3, [r4, #12]
 8007162:	431d      	orrs	r5, r3
 8007164:	81a5      	strh	r5, [r4, #12]
 8007166:	e7cd      	b.n	8007104 <__smakebuf_r+0x18>
 8007168:	08006909 	.word	0x08006909

0800716c <malloc>:
 800716c:	4b02      	ldr	r3, [pc, #8]	; (8007178 <malloc+0xc>)
 800716e:	4601      	mov	r1, r0
 8007170:	6818      	ldr	r0, [r3, #0]
 8007172:	f000 bc5f 	b.w	8007a34 <_malloc_r>
 8007176:	bf00      	nop
 8007178:	20000010 	.word	0x20000010

0800717c <_Balloc>:
 800717c:	b570      	push	{r4, r5, r6, lr}
 800717e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007180:	4604      	mov	r4, r0
 8007182:	460e      	mov	r6, r1
 8007184:	b93d      	cbnz	r5, 8007196 <_Balloc+0x1a>
 8007186:	2010      	movs	r0, #16
 8007188:	f7ff fff0 	bl	800716c <malloc>
 800718c:	6260      	str	r0, [r4, #36]	; 0x24
 800718e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007192:	6005      	str	r5, [r0, #0]
 8007194:	60c5      	str	r5, [r0, #12]
 8007196:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007198:	68eb      	ldr	r3, [r5, #12]
 800719a:	b183      	cbz	r3, 80071be <_Balloc+0x42>
 800719c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80071a4:	b9b8      	cbnz	r0, 80071d6 <_Balloc+0x5a>
 80071a6:	2101      	movs	r1, #1
 80071a8:	fa01 f506 	lsl.w	r5, r1, r6
 80071ac:	1d6a      	adds	r2, r5, #5
 80071ae:	0092      	lsls	r2, r2, #2
 80071b0:	4620      	mov	r0, r4
 80071b2:	f000 fbe2 	bl	800797a <_calloc_r>
 80071b6:	b160      	cbz	r0, 80071d2 <_Balloc+0x56>
 80071b8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80071bc:	e00e      	b.n	80071dc <_Balloc+0x60>
 80071be:	2221      	movs	r2, #33	; 0x21
 80071c0:	2104      	movs	r1, #4
 80071c2:	4620      	mov	r0, r4
 80071c4:	f000 fbd9 	bl	800797a <_calloc_r>
 80071c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071ca:	60e8      	str	r0, [r5, #12]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1e4      	bne.n	800719c <_Balloc+0x20>
 80071d2:	2000      	movs	r0, #0
 80071d4:	bd70      	pop	{r4, r5, r6, pc}
 80071d6:	6802      	ldr	r2, [r0, #0]
 80071d8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80071dc:	2300      	movs	r3, #0
 80071de:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80071e2:	e7f7      	b.n	80071d4 <_Balloc+0x58>

080071e4 <_Bfree>:
 80071e4:	b570      	push	{r4, r5, r6, lr}
 80071e6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80071e8:	4606      	mov	r6, r0
 80071ea:	460d      	mov	r5, r1
 80071ec:	b93c      	cbnz	r4, 80071fe <_Bfree+0x1a>
 80071ee:	2010      	movs	r0, #16
 80071f0:	f7ff ffbc 	bl	800716c <malloc>
 80071f4:	6270      	str	r0, [r6, #36]	; 0x24
 80071f6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80071fa:	6004      	str	r4, [r0, #0]
 80071fc:	60c4      	str	r4, [r0, #12]
 80071fe:	b13d      	cbz	r5, 8007210 <_Bfree+0x2c>
 8007200:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007202:	686a      	ldr	r2, [r5, #4]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800720a:	6029      	str	r1, [r5, #0]
 800720c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007210:	bd70      	pop	{r4, r5, r6, pc}

08007212 <__multadd>:
 8007212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007216:	690d      	ldr	r5, [r1, #16]
 8007218:	461f      	mov	r7, r3
 800721a:	4606      	mov	r6, r0
 800721c:	460c      	mov	r4, r1
 800721e:	f101 0c14 	add.w	ip, r1, #20
 8007222:	2300      	movs	r3, #0
 8007224:	f8dc 0000 	ldr.w	r0, [ip]
 8007228:	b281      	uxth	r1, r0
 800722a:	fb02 7101 	mla	r1, r2, r1, r7
 800722e:	0c0f      	lsrs	r7, r1, #16
 8007230:	0c00      	lsrs	r0, r0, #16
 8007232:	fb02 7000 	mla	r0, r2, r0, r7
 8007236:	b289      	uxth	r1, r1
 8007238:	3301      	adds	r3, #1
 800723a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800723e:	429d      	cmp	r5, r3
 8007240:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007244:	f84c 1b04 	str.w	r1, [ip], #4
 8007248:	dcec      	bgt.n	8007224 <__multadd+0x12>
 800724a:	b1d7      	cbz	r7, 8007282 <__multadd+0x70>
 800724c:	68a3      	ldr	r3, [r4, #8]
 800724e:	42ab      	cmp	r3, r5
 8007250:	dc12      	bgt.n	8007278 <__multadd+0x66>
 8007252:	6861      	ldr	r1, [r4, #4]
 8007254:	4630      	mov	r0, r6
 8007256:	3101      	adds	r1, #1
 8007258:	f7ff ff90 	bl	800717c <_Balloc>
 800725c:	6922      	ldr	r2, [r4, #16]
 800725e:	3202      	adds	r2, #2
 8007260:	f104 010c 	add.w	r1, r4, #12
 8007264:	4680      	mov	r8, r0
 8007266:	0092      	lsls	r2, r2, #2
 8007268:	300c      	adds	r0, #12
 800726a:	f7fe f968 	bl	800553e <memcpy>
 800726e:	4621      	mov	r1, r4
 8007270:	4630      	mov	r0, r6
 8007272:	f7ff ffb7 	bl	80071e4 <_Bfree>
 8007276:	4644      	mov	r4, r8
 8007278:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800727c:	3501      	adds	r5, #1
 800727e:	615f      	str	r7, [r3, #20]
 8007280:	6125      	str	r5, [r4, #16]
 8007282:	4620      	mov	r0, r4
 8007284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007288 <__s2b>:
 8007288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800728c:	460c      	mov	r4, r1
 800728e:	4615      	mov	r5, r2
 8007290:	461f      	mov	r7, r3
 8007292:	2209      	movs	r2, #9
 8007294:	3308      	adds	r3, #8
 8007296:	4606      	mov	r6, r0
 8007298:	fb93 f3f2 	sdiv	r3, r3, r2
 800729c:	2100      	movs	r1, #0
 800729e:	2201      	movs	r2, #1
 80072a0:	429a      	cmp	r2, r3
 80072a2:	db20      	blt.n	80072e6 <__s2b+0x5e>
 80072a4:	4630      	mov	r0, r6
 80072a6:	f7ff ff69 	bl	800717c <_Balloc>
 80072aa:	9b08      	ldr	r3, [sp, #32]
 80072ac:	6143      	str	r3, [r0, #20]
 80072ae:	2d09      	cmp	r5, #9
 80072b0:	f04f 0301 	mov.w	r3, #1
 80072b4:	6103      	str	r3, [r0, #16]
 80072b6:	dd19      	ble.n	80072ec <__s2b+0x64>
 80072b8:	f104 0809 	add.w	r8, r4, #9
 80072bc:	46c1      	mov	r9, r8
 80072be:	442c      	add	r4, r5
 80072c0:	f819 3b01 	ldrb.w	r3, [r9], #1
 80072c4:	4601      	mov	r1, r0
 80072c6:	3b30      	subs	r3, #48	; 0x30
 80072c8:	220a      	movs	r2, #10
 80072ca:	4630      	mov	r0, r6
 80072cc:	f7ff ffa1 	bl	8007212 <__multadd>
 80072d0:	45a1      	cmp	r9, r4
 80072d2:	d1f5      	bne.n	80072c0 <__s2b+0x38>
 80072d4:	eb08 0405 	add.w	r4, r8, r5
 80072d8:	3c08      	subs	r4, #8
 80072da:	1b2d      	subs	r5, r5, r4
 80072dc:	1963      	adds	r3, r4, r5
 80072de:	42bb      	cmp	r3, r7
 80072e0:	db07      	blt.n	80072f2 <__s2b+0x6a>
 80072e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072e6:	0052      	lsls	r2, r2, #1
 80072e8:	3101      	adds	r1, #1
 80072ea:	e7d9      	b.n	80072a0 <__s2b+0x18>
 80072ec:	340a      	adds	r4, #10
 80072ee:	2509      	movs	r5, #9
 80072f0:	e7f3      	b.n	80072da <__s2b+0x52>
 80072f2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80072f6:	4601      	mov	r1, r0
 80072f8:	3b30      	subs	r3, #48	; 0x30
 80072fa:	220a      	movs	r2, #10
 80072fc:	4630      	mov	r0, r6
 80072fe:	f7ff ff88 	bl	8007212 <__multadd>
 8007302:	e7eb      	b.n	80072dc <__s2b+0x54>

08007304 <__hi0bits>:
 8007304:	0c02      	lsrs	r2, r0, #16
 8007306:	0412      	lsls	r2, r2, #16
 8007308:	4603      	mov	r3, r0
 800730a:	b9b2      	cbnz	r2, 800733a <__hi0bits+0x36>
 800730c:	0403      	lsls	r3, r0, #16
 800730e:	2010      	movs	r0, #16
 8007310:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007314:	bf04      	itt	eq
 8007316:	021b      	lsleq	r3, r3, #8
 8007318:	3008      	addeq	r0, #8
 800731a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800731e:	bf04      	itt	eq
 8007320:	011b      	lsleq	r3, r3, #4
 8007322:	3004      	addeq	r0, #4
 8007324:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007328:	bf04      	itt	eq
 800732a:	009b      	lsleq	r3, r3, #2
 800732c:	3002      	addeq	r0, #2
 800732e:	2b00      	cmp	r3, #0
 8007330:	db06      	blt.n	8007340 <__hi0bits+0x3c>
 8007332:	005b      	lsls	r3, r3, #1
 8007334:	d503      	bpl.n	800733e <__hi0bits+0x3a>
 8007336:	3001      	adds	r0, #1
 8007338:	4770      	bx	lr
 800733a:	2000      	movs	r0, #0
 800733c:	e7e8      	b.n	8007310 <__hi0bits+0xc>
 800733e:	2020      	movs	r0, #32
 8007340:	4770      	bx	lr

08007342 <__lo0bits>:
 8007342:	6803      	ldr	r3, [r0, #0]
 8007344:	f013 0207 	ands.w	r2, r3, #7
 8007348:	4601      	mov	r1, r0
 800734a:	d00b      	beq.n	8007364 <__lo0bits+0x22>
 800734c:	07da      	lsls	r2, r3, #31
 800734e:	d423      	bmi.n	8007398 <__lo0bits+0x56>
 8007350:	0798      	lsls	r0, r3, #30
 8007352:	bf49      	itett	mi
 8007354:	085b      	lsrmi	r3, r3, #1
 8007356:	089b      	lsrpl	r3, r3, #2
 8007358:	2001      	movmi	r0, #1
 800735a:	600b      	strmi	r3, [r1, #0]
 800735c:	bf5c      	itt	pl
 800735e:	600b      	strpl	r3, [r1, #0]
 8007360:	2002      	movpl	r0, #2
 8007362:	4770      	bx	lr
 8007364:	b298      	uxth	r0, r3
 8007366:	b9a8      	cbnz	r0, 8007394 <__lo0bits+0x52>
 8007368:	0c1b      	lsrs	r3, r3, #16
 800736a:	2010      	movs	r0, #16
 800736c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007370:	bf04      	itt	eq
 8007372:	0a1b      	lsreq	r3, r3, #8
 8007374:	3008      	addeq	r0, #8
 8007376:	071a      	lsls	r2, r3, #28
 8007378:	bf04      	itt	eq
 800737a:	091b      	lsreq	r3, r3, #4
 800737c:	3004      	addeq	r0, #4
 800737e:	079a      	lsls	r2, r3, #30
 8007380:	bf04      	itt	eq
 8007382:	089b      	lsreq	r3, r3, #2
 8007384:	3002      	addeq	r0, #2
 8007386:	07da      	lsls	r2, r3, #31
 8007388:	d402      	bmi.n	8007390 <__lo0bits+0x4e>
 800738a:	085b      	lsrs	r3, r3, #1
 800738c:	d006      	beq.n	800739c <__lo0bits+0x5a>
 800738e:	3001      	adds	r0, #1
 8007390:	600b      	str	r3, [r1, #0]
 8007392:	4770      	bx	lr
 8007394:	4610      	mov	r0, r2
 8007396:	e7e9      	b.n	800736c <__lo0bits+0x2a>
 8007398:	2000      	movs	r0, #0
 800739a:	4770      	bx	lr
 800739c:	2020      	movs	r0, #32
 800739e:	4770      	bx	lr

080073a0 <__i2b>:
 80073a0:	b510      	push	{r4, lr}
 80073a2:	460c      	mov	r4, r1
 80073a4:	2101      	movs	r1, #1
 80073a6:	f7ff fee9 	bl	800717c <_Balloc>
 80073aa:	2201      	movs	r2, #1
 80073ac:	6144      	str	r4, [r0, #20]
 80073ae:	6102      	str	r2, [r0, #16]
 80073b0:	bd10      	pop	{r4, pc}

080073b2 <__multiply>:
 80073b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b6:	4614      	mov	r4, r2
 80073b8:	690a      	ldr	r2, [r1, #16]
 80073ba:	6923      	ldr	r3, [r4, #16]
 80073bc:	429a      	cmp	r2, r3
 80073be:	bfb8      	it	lt
 80073c0:	460b      	movlt	r3, r1
 80073c2:	4688      	mov	r8, r1
 80073c4:	bfbc      	itt	lt
 80073c6:	46a0      	movlt	r8, r4
 80073c8:	461c      	movlt	r4, r3
 80073ca:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80073ce:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80073d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80073d6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80073da:	eb07 0609 	add.w	r6, r7, r9
 80073de:	42b3      	cmp	r3, r6
 80073e0:	bfb8      	it	lt
 80073e2:	3101      	addlt	r1, #1
 80073e4:	f7ff feca 	bl	800717c <_Balloc>
 80073e8:	f100 0514 	add.w	r5, r0, #20
 80073ec:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80073f0:	462b      	mov	r3, r5
 80073f2:	2200      	movs	r2, #0
 80073f4:	4573      	cmp	r3, lr
 80073f6:	d316      	bcc.n	8007426 <__multiply+0x74>
 80073f8:	f104 0214 	add.w	r2, r4, #20
 80073fc:	f108 0114 	add.w	r1, r8, #20
 8007400:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007404:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007408:	9300      	str	r3, [sp, #0]
 800740a:	9b00      	ldr	r3, [sp, #0]
 800740c:	9201      	str	r2, [sp, #4]
 800740e:	4293      	cmp	r3, r2
 8007410:	d80c      	bhi.n	800742c <__multiply+0x7a>
 8007412:	2e00      	cmp	r6, #0
 8007414:	dd03      	ble.n	800741e <__multiply+0x6c>
 8007416:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800741a:	2b00      	cmp	r3, #0
 800741c:	d05d      	beq.n	80074da <__multiply+0x128>
 800741e:	6106      	str	r6, [r0, #16]
 8007420:	b003      	add	sp, #12
 8007422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007426:	f843 2b04 	str.w	r2, [r3], #4
 800742a:	e7e3      	b.n	80073f4 <__multiply+0x42>
 800742c:	f8b2 b000 	ldrh.w	fp, [r2]
 8007430:	f1bb 0f00 	cmp.w	fp, #0
 8007434:	d023      	beq.n	800747e <__multiply+0xcc>
 8007436:	4689      	mov	r9, r1
 8007438:	46ac      	mov	ip, r5
 800743a:	f04f 0800 	mov.w	r8, #0
 800743e:	f859 4b04 	ldr.w	r4, [r9], #4
 8007442:	f8dc a000 	ldr.w	sl, [ip]
 8007446:	b2a3      	uxth	r3, r4
 8007448:	fa1f fa8a 	uxth.w	sl, sl
 800744c:	fb0b a303 	mla	r3, fp, r3, sl
 8007450:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007454:	f8dc 4000 	ldr.w	r4, [ip]
 8007458:	4443      	add	r3, r8
 800745a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800745e:	fb0b 840a 	mla	r4, fp, sl, r8
 8007462:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007466:	46e2      	mov	sl, ip
 8007468:	b29b      	uxth	r3, r3
 800746a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800746e:	454f      	cmp	r7, r9
 8007470:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007474:	f84a 3b04 	str.w	r3, [sl], #4
 8007478:	d82b      	bhi.n	80074d2 <__multiply+0x120>
 800747a:	f8cc 8004 	str.w	r8, [ip, #4]
 800747e:	9b01      	ldr	r3, [sp, #4]
 8007480:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007484:	3204      	adds	r2, #4
 8007486:	f1ba 0f00 	cmp.w	sl, #0
 800748a:	d020      	beq.n	80074ce <__multiply+0x11c>
 800748c:	682b      	ldr	r3, [r5, #0]
 800748e:	4689      	mov	r9, r1
 8007490:	46a8      	mov	r8, r5
 8007492:	f04f 0b00 	mov.w	fp, #0
 8007496:	f8b9 c000 	ldrh.w	ip, [r9]
 800749a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800749e:	fb0a 440c 	mla	r4, sl, ip, r4
 80074a2:	445c      	add	r4, fp
 80074a4:	46c4      	mov	ip, r8
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80074ac:	f84c 3b04 	str.w	r3, [ip], #4
 80074b0:	f859 3b04 	ldr.w	r3, [r9], #4
 80074b4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80074b8:	0c1b      	lsrs	r3, r3, #16
 80074ba:	fb0a b303 	mla	r3, sl, r3, fp
 80074be:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80074c2:	454f      	cmp	r7, r9
 80074c4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80074c8:	d805      	bhi.n	80074d6 <__multiply+0x124>
 80074ca:	f8c8 3004 	str.w	r3, [r8, #4]
 80074ce:	3504      	adds	r5, #4
 80074d0:	e79b      	b.n	800740a <__multiply+0x58>
 80074d2:	46d4      	mov	ip, sl
 80074d4:	e7b3      	b.n	800743e <__multiply+0x8c>
 80074d6:	46e0      	mov	r8, ip
 80074d8:	e7dd      	b.n	8007496 <__multiply+0xe4>
 80074da:	3e01      	subs	r6, #1
 80074dc:	e799      	b.n	8007412 <__multiply+0x60>
	...

080074e0 <__pow5mult>:
 80074e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074e4:	4615      	mov	r5, r2
 80074e6:	f012 0203 	ands.w	r2, r2, #3
 80074ea:	4606      	mov	r6, r0
 80074ec:	460f      	mov	r7, r1
 80074ee:	d007      	beq.n	8007500 <__pow5mult+0x20>
 80074f0:	3a01      	subs	r2, #1
 80074f2:	4c21      	ldr	r4, [pc, #132]	; (8007578 <__pow5mult+0x98>)
 80074f4:	2300      	movs	r3, #0
 80074f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80074fa:	f7ff fe8a 	bl	8007212 <__multadd>
 80074fe:	4607      	mov	r7, r0
 8007500:	10ad      	asrs	r5, r5, #2
 8007502:	d035      	beq.n	8007570 <__pow5mult+0x90>
 8007504:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007506:	b93c      	cbnz	r4, 8007518 <__pow5mult+0x38>
 8007508:	2010      	movs	r0, #16
 800750a:	f7ff fe2f 	bl	800716c <malloc>
 800750e:	6270      	str	r0, [r6, #36]	; 0x24
 8007510:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007514:	6004      	str	r4, [r0, #0]
 8007516:	60c4      	str	r4, [r0, #12]
 8007518:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800751c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007520:	b94c      	cbnz	r4, 8007536 <__pow5mult+0x56>
 8007522:	f240 2171 	movw	r1, #625	; 0x271
 8007526:	4630      	mov	r0, r6
 8007528:	f7ff ff3a 	bl	80073a0 <__i2b>
 800752c:	2300      	movs	r3, #0
 800752e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007532:	4604      	mov	r4, r0
 8007534:	6003      	str	r3, [r0, #0]
 8007536:	f04f 0800 	mov.w	r8, #0
 800753a:	07eb      	lsls	r3, r5, #31
 800753c:	d50a      	bpl.n	8007554 <__pow5mult+0x74>
 800753e:	4639      	mov	r1, r7
 8007540:	4622      	mov	r2, r4
 8007542:	4630      	mov	r0, r6
 8007544:	f7ff ff35 	bl	80073b2 <__multiply>
 8007548:	4639      	mov	r1, r7
 800754a:	4681      	mov	r9, r0
 800754c:	4630      	mov	r0, r6
 800754e:	f7ff fe49 	bl	80071e4 <_Bfree>
 8007552:	464f      	mov	r7, r9
 8007554:	106d      	asrs	r5, r5, #1
 8007556:	d00b      	beq.n	8007570 <__pow5mult+0x90>
 8007558:	6820      	ldr	r0, [r4, #0]
 800755a:	b938      	cbnz	r0, 800756c <__pow5mult+0x8c>
 800755c:	4622      	mov	r2, r4
 800755e:	4621      	mov	r1, r4
 8007560:	4630      	mov	r0, r6
 8007562:	f7ff ff26 	bl	80073b2 <__multiply>
 8007566:	6020      	str	r0, [r4, #0]
 8007568:	f8c0 8000 	str.w	r8, [r0]
 800756c:	4604      	mov	r4, r0
 800756e:	e7e4      	b.n	800753a <__pow5mult+0x5a>
 8007570:	4638      	mov	r0, r7
 8007572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007576:	bf00      	nop
 8007578:	08008900 	.word	0x08008900

0800757c <__lshift>:
 800757c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007580:	460c      	mov	r4, r1
 8007582:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007586:	6923      	ldr	r3, [r4, #16]
 8007588:	6849      	ldr	r1, [r1, #4]
 800758a:	eb0a 0903 	add.w	r9, sl, r3
 800758e:	68a3      	ldr	r3, [r4, #8]
 8007590:	4607      	mov	r7, r0
 8007592:	4616      	mov	r6, r2
 8007594:	f109 0501 	add.w	r5, r9, #1
 8007598:	42ab      	cmp	r3, r5
 800759a:	db32      	blt.n	8007602 <__lshift+0x86>
 800759c:	4638      	mov	r0, r7
 800759e:	f7ff fded 	bl	800717c <_Balloc>
 80075a2:	2300      	movs	r3, #0
 80075a4:	4680      	mov	r8, r0
 80075a6:	f100 0114 	add.w	r1, r0, #20
 80075aa:	461a      	mov	r2, r3
 80075ac:	4553      	cmp	r3, sl
 80075ae:	db2b      	blt.n	8007608 <__lshift+0x8c>
 80075b0:	6920      	ldr	r0, [r4, #16]
 80075b2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80075b6:	f104 0314 	add.w	r3, r4, #20
 80075ba:	f016 021f 	ands.w	r2, r6, #31
 80075be:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80075c2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80075c6:	d025      	beq.n	8007614 <__lshift+0x98>
 80075c8:	f1c2 0e20 	rsb	lr, r2, #32
 80075cc:	2000      	movs	r0, #0
 80075ce:	681e      	ldr	r6, [r3, #0]
 80075d0:	468a      	mov	sl, r1
 80075d2:	4096      	lsls	r6, r2
 80075d4:	4330      	orrs	r0, r6
 80075d6:	f84a 0b04 	str.w	r0, [sl], #4
 80075da:	f853 0b04 	ldr.w	r0, [r3], #4
 80075de:	459c      	cmp	ip, r3
 80075e0:	fa20 f00e 	lsr.w	r0, r0, lr
 80075e4:	d814      	bhi.n	8007610 <__lshift+0x94>
 80075e6:	6048      	str	r0, [r1, #4]
 80075e8:	b108      	cbz	r0, 80075ee <__lshift+0x72>
 80075ea:	f109 0502 	add.w	r5, r9, #2
 80075ee:	3d01      	subs	r5, #1
 80075f0:	4638      	mov	r0, r7
 80075f2:	f8c8 5010 	str.w	r5, [r8, #16]
 80075f6:	4621      	mov	r1, r4
 80075f8:	f7ff fdf4 	bl	80071e4 <_Bfree>
 80075fc:	4640      	mov	r0, r8
 80075fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007602:	3101      	adds	r1, #1
 8007604:	005b      	lsls	r3, r3, #1
 8007606:	e7c7      	b.n	8007598 <__lshift+0x1c>
 8007608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800760c:	3301      	adds	r3, #1
 800760e:	e7cd      	b.n	80075ac <__lshift+0x30>
 8007610:	4651      	mov	r1, sl
 8007612:	e7dc      	b.n	80075ce <__lshift+0x52>
 8007614:	3904      	subs	r1, #4
 8007616:	f853 2b04 	ldr.w	r2, [r3], #4
 800761a:	f841 2f04 	str.w	r2, [r1, #4]!
 800761e:	459c      	cmp	ip, r3
 8007620:	d8f9      	bhi.n	8007616 <__lshift+0x9a>
 8007622:	e7e4      	b.n	80075ee <__lshift+0x72>

08007624 <__mcmp>:
 8007624:	6903      	ldr	r3, [r0, #16]
 8007626:	690a      	ldr	r2, [r1, #16]
 8007628:	1a9b      	subs	r3, r3, r2
 800762a:	b530      	push	{r4, r5, lr}
 800762c:	d10c      	bne.n	8007648 <__mcmp+0x24>
 800762e:	0092      	lsls	r2, r2, #2
 8007630:	3014      	adds	r0, #20
 8007632:	3114      	adds	r1, #20
 8007634:	1884      	adds	r4, r0, r2
 8007636:	4411      	add	r1, r2
 8007638:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800763c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007640:	4295      	cmp	r5, r2
 8007642:	d003      	beq.n	800764c <__mcmp+0x28>
 8007644:	d305      	bcc.n	8007652 <__mcmp+0x2e>
 8007646:	2301      	movs	r3, #1
 8007648:	4618      	mov	r0, r3
 800764a:	bd30      	pop	{r4, r5, pc}
 800764c:	42a0      	cmp	r0, r4
 800764e:	d3f3      	bcc.n	8007638 <__mcmp+0x14>
 8007650:	e7fa      	b.n	8007648 <__mcmp+0x24>
 8007652:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007656:	e7f7      	b.n	8007648 <__mcmp+0x24>

08007658 <__mdiff>:
 8007658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800765c:	460d      	mov	r5, r1
 800765e:	4607      	mov	r7, r0
 8007660:	4611      	mov	r1, r2
 8007662:	4628      	mov	r0, r5
 8007664:	4614      	mov	r4, r2
 8007666:	f7ff ffdd 	bl	8007624 <__mcmp>
 800766a:	1e06      	subs	r6, r0, #0
 800766c:	d108      	bne.n	8007680 <__mdiff+0x28>
 800766e:	4631      	mov	r1, r6
 8007670:	4638      	mov	r0, r7
 8007672:	f7ff fd83 	bl	800717c <_Balloc>
 8007676:	2301      	movs	r3, #1
 8007678:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800767c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007680:	bfa4      	itt	ge
 8007682:	4623      	movge	r3, r4
 8007684:	462c      	movge	r4, r5
 8007686:	4638      	mov	r0, r7
 8007688:	6861      	ldr	r1, [r4, #4]
 800768a:	bfa6      	itte	ge
 800768c:	461d      	movge	r5, r3
 800768e:	2600      	movge	r6, #0
 8007690:	2601      	movlt	r6, #1
 8007692:	f7ff fd73 	bl	800717c <_Balloc>
 8007696:	692b      	ldr	r3, [r5, #16]
 8007698:	60c6      	str	r6, [r0, #12]
 800769a:	6926      	ldr	r6, [r4, #16]
 800769c:	f105 0914 	add.w	r9, r5, #20
 80076a0:	f104 0214 	add.w	r2, r4, #20
 80076a4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80076a8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80076ac:	f100 0514 	add.w	r5, r0, #20
 80076b0:	f04f 0e00 	mov.w	lr, #0
 80076b4:	f852 ab04 	ldr.w	sl, [r2], #4
 80076b8:	f859 4b04 	ldr.w	r4, [r9], #4
 80076bc:	fa1e f18a 	uxtah	r1, lr, sl
 80076c0:	b2a3      	uxth	r3, r4
 80076c2:	1ac9      	subs	r1, r1, r3
 80076c4:	0c23      	lsrs	r3, r4, #16
 80076c6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80076ca:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80076ce:	b289      	uxth	r1, r1
 80076d0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80076d4:	45c8      	cmp	r8, r9
 80076d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80076da:	4694      	mov	ip, r2
 80076dc:	f845 3b04 	str.w	r3, [r5], #4
 80076e0:	d8e8      	bhi.n	80076b4 <__mdiff+0x5c>
 80076e2:	45bc      	cmp	ip, r7
 80076e4:	d304      	bcc.n	80076f0 <__mdiff+0x98>
 80076e6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80076ea:	b183      	cbz	r3, 800770e <__mdiff+0xb6>
 80076ec:	6106      	str	r6, [r0, #16]
 80076ee:	e7c5      	b.n	800767c <__mdiff+0x24>
 80076f0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80076f4:	fa1e f381 	uxtah	r3, lr, r1
 80076f8:	141a      	asrs	r2, r3, #16
 80076fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80076fe:	b29b      	uxth	r3, r3
 8007700:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007704:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007708:	f845 3b04 	str.w	r3, [r5], #4
 800770c:	e7e9      	b.n	80076e2 <__mdiff+0x8a>
 800770e:	3e01      	subs	r6, #1
 8007710:	e7e9      	b.n	80076e6 <__mdiff+0x8e>
	...

08007714 <__ulp>:
 8007714:	4b12      	ldr	r3, [pc, #72]	; (8007760 <__ulp+0x4c>)
 8007716:	ee10 2a90 	vmov	r2, s1
 800771a:	401a      	ands	r2, r3
 800771c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8007720:	2b00      	cmp	r3, #0
 8007722:	dd04      	ble.n	800772e <__ulp+0x1a>
 8007724:	2000      	movs	r0, #0
 8007726:	4619      	mov	r1, r3
 8007728:	ec41 0b10 	vmov	d0, r0, r1
 800772c:	4770      	bx	lr
 800772e:	425b      	negs	r3, r3
 8007730:	151b      	asrs	r3, r3, #20
 8007732:	2b13      	cmp	r3, #19
 8007734:	f04f 0000 	mov.w	r0, #0
 8007738:	f04f 0100 	mov.w	r1, #0
 800773c:	dc04      	bgt.n	8007748 <__ulp+0x34>
 800773e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007742:	fa42 f103 	asr.w	r1, r2, r3
 8007746:	e7ef      	b.n	8007728 <__ulp+0x14>
 8007748:	3b14      	subs	r3, #20
 800774a:	2b1e      	cmp	r3, #30
 800774c:	f04f 0201 	mov.w	r2, #1
 8007750:	bfda      	itte	le
 8007752:	f1c3 031f 	rsble	r3, r3, #31
 8007756:	fa02 f303 	lslle.w	r3, r2, r3
 800775a:	4613      	movgt	r3, r2
 800775c:	4618      	mov	r0, r3
 800775e:	e7e3      	b.n	8007728 <__ulp+0x14>
 8007760:	7ff00000 	.word	0x7ff00000

08007764 <__b2d>:
 8007764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007766:	6905      	ldr	r5, [r0, #16]
 8007768:	f100 0714 	add.w	r7, r0, #20
 800776c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007770:	1f2e      	subs	r6, r5, #4
 8007772:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007776:	4620      	mov	r0, r4
 8007778:	f7ff fdc4 	bl	8007304 <__hi0bits>
 800777c:	f1c0 0320 	rsb	r3, r0, #32
 8007780:	280a      	cmp	r0, #10
 8007782:	600b      	str	r3, [r1, #0]
 8007784:	f8df c074 	ldr.w	ip, [pc, #116]	; 80077fc <__b2d+0x98>
 8007788:	dc14      	bgt.n	80077b4 <__b2d+0x50>
 800778a:	f1c0 0e0b 	rsb	lr, r0, #11
 800778e:	fa24 f10e 	lsr.w	r1, r4, lr
 8007792:	42b7      	cmp	r7, r6
 8007794:	ea41 030c 	orr.w	r3, r1, ip
 8007798:	bf34      	ite	cc
 800779a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800779e:	2100      	movcs	r1, #0
 80077a0:	3015      	adds	r0, #21
 80077a2:	fa04 f000 	lsl.w	r0, r4, r0
 80077a6:	fa21 f10e 	lsr.w	r1, r1, lr
 80077aa:	ea40 0201 	orr.w	r2, r0, r1
 80077ae:	ec43 2b10 	vmov	d0, r2, r3
 80077b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077b4:	42b7      	cmp	r7, r6
 80077b6:	bf3a      	itte	cc
 80077b8:	f1a5 0608 	subcc.w	r6, r5, #8
 80077bc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80077c0:	2100      	movcs	r1, #0
 80077c2:	380b      	subs	r0, #11
 80077c4:	d015      	beq.n	80077f2 <__b2d+0x8e>
 80077c6:	4084      	lsls	r4, r0
 80077c8:	f1c0 0520 	rsb	r5, r0, #32
 80077cc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80077d0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80077d4:	42be      	cmp	r6, r7
 80077d6:	fa21 fc05 	lsr.w	ip, r1, r5
 80077da:	ea44 030c 	orr.w	r3, r4, ip
 80077de:	bf8c      	ite	hi
 80077e0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80077e4:	2400      	movls	r4, #0
 80077e6:	fa01 f000 	lsl.w	r0, r1, r0
 80077ea:	40ec      	lsrs	r4, r5
 80077ec:	ea40 0204 	orr.w	r2, r0, r4
 80077f0:	e7dd      	b.n	80077ae <__b2d+0x4a>
 80077f2:	ea44 030c 	orr.w	r3, r4, ip
 80077f6:	460a      	mov	r2, r1
 80077f8:	e7d9      	b.n	80077ae <__b2d+0x4a>
 80077fa:	bf00      	nop
 80077fc:	3ff00000 	.word	0x3ff00000

08007800 <__d2b>:
 8007800:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007804:	460e      	mov	r6, r1
 8007806:	2101      	movs	r1, #1
 8007808:	ec59 8b10 	vmov	r8, r9, d0
 800780c:	4615      	mov	r5, r2
 800780e:	f7ff fcb5 	bl	800717c <_Balloc>
 8007812:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007816:	4607      	mov	r7, r0
 8007818:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800781c:	bb34      	cbnz	r4, 800786c <__d2b+0x6c>
 800781e:	9301      	str	r3, [sp, #4]
 8007820:	f1b8 0300 	subs.w	r3, r8, #0
 8007824:	d027      	beq.n	8007876 <__d2b+0x76>
 8007826:	a802      	add	r0, sp, #8
 8007828:	f840 3d08 	str.w	r3, [r0, #-8]!
 800782c:	f7ff fd89 	bl	8007342 <__lo0bits>
 8007830:	9900      	ldr	r1, [sp, #0]
 8007832:	b1f0      	cbz	r0, 8007872 <__d2b+0x72>
 8007834:	9a01      	ldr	r2, [sp, #4]
 8007836:	f1c0 0320 	rsb	r3, r0, #32
 800783a:	fa02 f303 	lsl.w	r3, r2, r3
 800783e:	430b      	orrs	r3, r1
 8007840:	40c2      	lsrs	r2, r0
 8007842:	617b      	str	r3, [r7, #20]
 8007844:	9201      	str	r2, [sp, #4]
 8007846:	9b01      	ldr	r3, [sp, #4]
 8007848:	61bb      	str	r3, [r7, #24]
 800784a:	2b00      	cmp	r3, #0
 800784c:	bf14      	ite	ne
 800784e:	2102      	movne	r1, #2
 8007850:	2101      	moveq	r1, #1
 8007852:	6139      	str	r1, [r7, #16]
 8007854:	b1c4      	cbz	r4, 8007888 <__d2b+0x88>
 8007856:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800785a:	4404      	add	r4, r0
 800785c:	6034      	str	r4, [r6, #0]
 800785e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007862:	6028      	str	r0, [r5, #0]
 8007864:	4638      	mov	r0, r7
 8007866:	b003      	add	sp, #12
 8007868:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800786c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007870:	e7d5      	b.n	800781e <__d2b+0x1e>
 8007872:	6179      	str	r1, [r7, #20]
 8007874:	e7e7      	b.n	8007846 <__d2b+0x46>
 8007876:	a801      	add	r0, sp, #4
 8007878:	f7ff fd63 	bl	8007342 <__lo0bits>
 800787c:	9b01      	ldr	r3, [sp, #4]
 800787e:	617b      	str	r3, [r7, #20]
 8007880:	2101      	movs	r1, #1
 8007882:	6139      	str	r1, [r7, #16]
 8007884:	3020      	adds	r0, #32
 8007886:	e7e5      	b.n	8007854 <__d2b+0x54>
 8007888:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800788c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007890:	6030      	str	r0, [r6, #0]
 8007892:	6918      	ldr	r0, [r3, #16]
 8007894:	f7ff fd36 	bl	8007304 <__hi0bits>
 8007898:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800789c:	e7e1      	b.n	8007862 <__d2b+0x62>

0800789e <__ratio>:
 800789e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078a2:	4688      	mov	r8, r1
 80078a4:	4669      	mov	r1, sp
 80078a6:	4681      	mov	r9, r0
 80078a8:	f7ff ff5c 	bl	8007764 <__b2d>
 80078ac:	a901      	add	r1, sp, #4
 80078ae:	4640      	mov	r0, r8
 80078b0:	ec57 6b10 	vmov	r6, r7, d0
 80078b4:	f7ff ff56 	bl	8007764 <__b2d>
 80078b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80078bc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80078c0:	eba3 0c02 	sub.w	ip, r3, r2
 80078c4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80078c8:	1a9b      	subs	r3, r3, r2
 80078ca:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80078ce:	ec5b ab10 	vmov	sl, fp, d0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	bfce      	itee	gt
 80078d6:	463a      	movgt	r2, r7
 80078d8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80078dc:	465a      	movle	r2, fp
 80078de:	4659      	mov	r1, fp
 80078e0:	463d      	mov	r5, r7
 80078e2:	bfd4      	ite	le
 80078e4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80078e8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80078ec:	4630      	mov	r0, r6
 80078ee:	ee10 2a10 	vmov	r2, s0
 80078f2:	460b      	mov	r3, r1
 80078f4:	4629      	mov	r1, r5
 80078f6:	f7f8 ffb1 	bl	800085c <__aeabi_ddiv>
 80078fa:	ec41 0b10 	vmov	d0, r0, r1
 80078fe:	b003      	add	sp, #12
 8007900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007904 <__copybits>:
 8007904:	3901      	subs	r1, #1
 8007906:	b510      	push	{r4, lr}
 8007908:	1149      	asrs	r1, r1, #5
 800790a:	6914      	ldr	r4, [r2, #16]
 800790c:	3101      	adds	r1, #1
 800790e:	f102 0314 	add.w	r3, r2, #20
 8007912:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007916:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800791a:	42a3      	cmp	r3, r4
 800791c:	4602      	mov	r2, r0
 800791e:	d303      	bcc.n	8007928 <__copybits+0x24>
 8007920:	2300      	movs	r3, #0
 8007922:	428a      	cmp	r2, r1
 8007924:	d305      	bcc.n	8007932 <__copybits+0x2e>
 8007926:	bd10      	pop	{r4, pc}
 8007928:	f853 2b04 	ldr.w	r2, [r3], #4
 800792c:	f840 2b04 	str.w	r2, [r0], #4
 8007930:	e7f3      	b.n	800791a <__copybits+0x16>
 8007932:	f842 3b04 	str.w	r3, [r2], #4
 8007936:	e7f4      	b.n	8007922 <__copybits+0x1e>

08007938 <__any_on>:
 8007938:	f100 0214 	add.w	r2, r0, #20
 800793c:	6900      	ldr	r0, [r0, #16]
 800793e:	114b      	asrs	r3, r1, #5
 8007940:	4298      	cmp	r0, r3
 8007942:	b510      	push	{r4, lr}
 8007944:	db11      	blt.n	800796a <__any_on+0x32>
 8007946:	dd0a      	ble.n	800795e <__any_on+0x26>
 8007948:	f011 011f 	ands.w	r1, r1, #31
 800794c:	d007      	beq.n	800795e <__any_on+0x26>
 800794e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007952:	fa24 f001 	lsr.w	r0, r4, r1
 8007956:	fa00 f101 	lsl.w	r1, r0, r1
 800795a:	428c      	cmp	r4, r1
 800795c:	d10b      	bne.n	8007976 <__any_on+0x3e>
 800795e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007962:	4293      	cmp	r3, r2
 8007964:	d803      	bhi.n	800796e <__any_on+0x36>
 8007966:	2000      	movs	r0, #0
 8007968:	bd10      	pop	{r4, pc}
 800796a:	4603      	mov	r3, r0
 800796c:	e7f7      	b.n	800795e <__any_on+0x26>
 800796e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007972:	2900      	cmp	r1, #0
 8007974:	d0f5      	beq.n	8007962 <__any_on+0x2a>
 8007976:	2001      	movs	r0, #1
 8007978:	e7f6      	b.n	8007968 <__any_on+0x30>

0800797a <_calloc_r>:
 800797a:	b538      	push	{r3, r4, r5, lr}
 800797c:	fb02 f401 	mul.w	r4, r2, r1
 8007980:	4621      	mov	r1, r4
 8007982:	f000 f857 	bl	8007a34 <_malloc_r>
 8007986:	4605      	mov	r5, r0
 8007988:	b118      	cbz	r0, 8007992 <_calloc_r+0x18>
 800798a:	4622      	mov	r2, r4
 800798c:	2100      	movs	r1, #0
 800798e:	f7fd fde1 	bl	8005554 <memset>
 8007992:	4628      	mov	r0, r5
 8007994:	bd38      	pop	{r3, r4, r5, pc}
	...

08007998 <_free_r>:
 8007998:	b538      	push	{r3, r4, r5, lr}
 800799a:	4605      	mov	r5, r0
 800799c:	2900      	cmp	r1, #0
 800799e:	d045      	beq.n	8007a2c <_free_r+0x94>
 80079a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079a4:	1f0c      	subs	r4, r1, #4
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	bfb8      	it	lt
 80079aa:	18e4      	addlt	r4, r4, r3
 80079ac:	f000 fc0e 	bl	80081cc <__malloc_lock>
 80079b0:	4a1f      	ldr	r2, [pc, #124]	; (8007a30 <_free_r+0x98>)
 80079b2:	6813      	ldr	r3, [r2, #0]
 80079b4:	4610      	mov	r0, r2
 80079b6:	b933      	cbnz	r3, 80079c6 <_free_r+0x2e>
 80079b8:	6063      	str	r3, [r4, #4]
 80079ba:	6014      	str	r4, [r2, #0]
 80079bc:	4628      	mov	r0, r5
 80079be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079c2:	f000 bc04 	b.w	80081ce <__malloc_unlock>
 80079c6:	42a3      	cmp	r3, r4
 80079c8:	d90c      	bls.n	80079e4 <_free_r+0x4c>
 80079ca:	6821      	ldr	r1, [r4, #0]
 80079cc:	1862      	adds	r2, r4, r1
 80079ce:	4293      	cmp	r3, r2
 80079d0:	bf04      	itt	eq
 80079d2:	681a      	ldreq	r2, [r3, #0]
 80079d4:	685b      	ldreq	r3, [r3, #4]
 80079d6:	6063      	str	r3, [r4, #4]
 80079d8:	bf04      	itt	eq
 80079da:	1852      	addeq	r2, r2, r1
 80079dc:	6022      	streq	r2, [r4, #0]
 80079de:	6004      	str	r4, [r0, #0]
 80079e0:	e7ec      	b.n	80079bc <_free_r+0x24>
 80079e2:	4613      	mov	r3, r2
 80079e4:	685a      	ldr	r2, [r3, #4]
 80079e6:	b10a      	cbz	r2, 80079ec <_free_r+0x54>
 80079e8:	42a2      	cmp	r2, r4
 80079ea:	d9fa      	bls.n	80079e2 <_free_r+0x4a>
 80079ec:	6819      	ldr	r1, [r3, #0]
 80079ee:	1858      	adds	r0, r3, r1
 80079f0:	42a0      	cmp	r0, r4
 80079f2:	d10b      	bne.n	8007a0c <_free_r+0x74>
 80079f4:	6820      	ldr	r0, [r4, #0]
 80079f6:	4401      	add	r1, r0
 80079f8:	1858      	adds	r0, r3, r1
 80079fa:	4282      	cmp	r2, r0
 80079fc:	6019      	str	r1, [r3, #0]
 80079fe:	d1dd      	bne.n	80079bc <_free_r+0x24>
 8007a00:	6810      	ldr	r0, [r2, #0]
 8007a02:	6852      	ldr	r2, [r2, #4]
 8007a04:	605a      	str	r2, [r3, #4]
 8007a06:	4401      	add	r1, r0
 8007a08:	6019      	str	r1, [r3, #0]
 8007a0a:	e7d7      	b.n	80079bc <_free_r+0x24>
 8007a0c:	d902      	bls.n	8007a14 <_free_r+0x7c>
 8007a0e:	230c      	movs	r3, #12
 8007a10:	602b      	str	r3, [r5, #0]
 8007a12:	e7d3      	b.n	80079bc <_free_r+0x24>
 8007a14:	6820      	ldr	r0, [r4, #0]
 8007a16:	1821      	adds	r1, r4, r0
 8007a18:	428a      	cmp	r2, r1
 8007a1a:	bf04      	itt	eq
 8007a1c:	6811      	ldreq	r1, [r2, #0]
 8007a1e:	6852      	ldreq	r2, [r2, #4]
 8007a20:	6062      	str	r2, [r4, #4]
 8007a22:	bf04      	itt	eq
 8007a24:	1809      	addeq	r1, r1, r0
 8007a26:	6021      	streq	r1, [r4, #0]
 8007a28:	605c      	str	r4, [r3, #4]
 8007a2a:	e7c7      	b.n	80079bc <_free_r+0x24>
 8007a2c:	bd38      	pop	{r3, r4, r5, pc}
 8007a2e:	bf00      	nop
 8007a30:	200041ac 	.word	0x200041ac

08007a34 <_malloc_r>:
 8007a34:	b570      	push	{r4, r5, r6, lr}
 8007a36:	1ccd      	adds	r5, r1, #3
 8007a38:	f025 0503 	bic.w	r5, r5, #3
 8007a3c:	3508      	adds	r5, #8
 8007a3e:	2d0c      	cmp	r5, #12
 8007a40:	bf38      	it	cc
 8007a42:	250c      	movcc	r5, #12
 8007a44:	2d00      	cmp	r5, #0
 8007a46:	4606      	mov	r6, r0
 8007a48:	db01      	blt.n	8007a4e <_malloc_r+0x1a>
 8007a4a:	42a9      	cmp	r1, r5
 8007a4c:	d903      	bls.n	8007a56 <_malloc_r+0x22>
 8007a4e:	230c      	movs	r3, #12
 8007a50:	6033      	str	r3, [r6, #0]
 8007a52:	2000      	movs	r0, #0
 8007a54:	bd70      	pop	{r4, r5, r6, pc}
 8007a56:	f000 fbb9 	bl	80081cc <__malloc_lock>
 8007a5a:	4a21      	ldr	r2, [pc, #132]	; (8007ae0 <_malloc_r+0xac>)
 8007a5c:	6814      	ldr	r4, [r2, #0]
 8007a5e:	4621      	mov	r1, r4
 8007a60:	b991      	cbnz	r1, 8007a88 <_malloc_r+0x54>
 8007a62:	4c20      	ldr	r4, [pc, #128]	; (8007ae4 <_malloc_r+0xb0>)
 8007a64:	6823      	ldr	r3, [r4, #0]
 8007a66:	b91b      	cbnz	r3, 8007a70 <_malloc_r+0x3c>
 8007a68:	4630      	mov	r0, r6
 8007a6a:	f000 fb05 	bl	8008078 <_sbrk_r>
 8007a6e:	6020      	str	r0, [r4, #0]
 8007a70:	4629      	mov	r1, r5
 8007a72:	4630      	mov	r0, r6
 8007a74:	f000 fb00 	bl	8008078 <_sbrk_r>
 8007a78:	1c43      	adds	r3, r0, #1
 8007a7a:	d124      	bne.n	8007ac6 <_malloc_r+0x92>
 8007a7c:	230c      	movs	r3, #12
 8007a7e:	6033      	str	r3, [r6, #0]
 8007a80:	4630      	mov	r0, r6
 8007a82:	f000 fba4 	bl	80081ce <__malloc_unlock>
 8007a86:	e7e4      	b.n	8007a52 <_malloc_r+0x1e>
 8007a88:	680b      	ldr	r3, [r1, #0]
 8007a8a:	1b5b      	subs	r3, r3, r5
 8007a8c:	d418      	bmi.n	8007ac0 <_malloc_r+0x8c>
 8007a8e:	2b0b      	cmp	r3, #11
 8007a90:	d90f      	bls.n	8007ab2 <_malloc_r+0x7e>
 8007a92:	600b      	str	r3, [r1, #0]
 8007a94:	50cd      	str	r5, [r1, r3]
 8007a96:	18cc      	adds	r4, r1, r3
 8007a98:	4630      	mov	r0, r6
 8007a9a:	f000 fb98 	bl	80081ce <__malloc_unlock>
 8007a9e:	f104 000b 	add.w	r0, r4, #11
 8007aa2:	1d23      	adds	r3, r4, #4
 8007aa4:	f020 0007 	bic.w	r0, r0, #7
 8007aa8:	1ac3      	subs	r3, r0, r3
 8007aaa:	d0d3      	beq.n	8007a54 <_malloc_r+0x20>
 8007aac:	425a      	negs	r2, r3
 8007aae:	50e2      	str	r2, [r4, r3]
 8007ab0:	e7d0      	b.n	8007a54 <_malloc_r+0x20>
 8007ab2:	428c      	cmp	r4, r1
 8007ab4:	684b      	ldr	r3, [r1, #4]
 8007ab6:	bf16      	itet	ne
 8007ab8:	6063      	strne	r3, [r4, #4]
 8007aba:	6013      	streq	r3, [r2, #0]
 8007abc:	460c      	movne	r4, r1
 8007abe:	e7eb      	b.n	8007a98 <_malloc_r+0x64>
 8007ac0:	460c      	mov	r4, r1
 8007ac2:	6849      	ldr	r1, [r1, #4]
 8007ac4:	e7cc      	b.n	8007a60 <_malloc_r+0x2c>
 8007ac6:	1cc4      	adds	r4, r0, #3
 8007ac8:	f024 0403 	bic.w	r4, r4, #3
 8007acc:	42a0      	cmp	r0, r4
 8007ace:	d005      	beq.n	8007adc <_malloc_r+0xa8>
 8007ad0:	1a21      	subs	r1, r4, r0
 8007ad2:	4630      	mov	r0, r6
 8007ad4:	f000 fad0 	bl	8008078 <_sbrk_r>
 8007ad8:	3001      	adds	r0, #1
 8007ada:	d0cf      	beq.n	8007a7c <_malloc_r+0x48>
 8007adc:	6025      	str	r5, [r4, #0]
 8007ade:	e7db      	b.n	8007a98 <_malloc_r+0x64>
 8007ae0:	200041ac 	.word	0x200041ac
 8007ae4:	200041b0 	.word	0x200041b0

08007ae8 <__sfputc_r>:
 8007ae8:	6893      	ldr	r3, [r2, #8]
 8007aea:	3b01      	subs	r3, #1
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	b410      	push	{r4}
 8007af0:	6093      	str	r3, [r2, #8]
 8007af2:	da08      	bge.n	8007b06 <__sfputc_r+0x1e>
 8007af4:	6994      	ldr	r4, [r2, #24]
 8007af6:	42a3      	cmp	r3, r4
 8007af8:	db01      	blt.n	8007afe <__sfputc_r+0x16>
 8007afa:	290a      	cmp	r1, #10
 8007afc:	d103      	bne.n	8007b06 <__sfputc_r+0x1e>
 8007afe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b02:	f7fe bd5f 	b.w	80065c4 <__swbuf_r>
 8007b06:	6813      	ldr	r3, [r2, #0]
 8007b08:	1c58      	adds	r0, r3, #1
 8007b0a:	6010      	str	r0, [r2, #0]
 8007b0c:	7019      	strb	r1, [r3, #0]
 8007b0e:	4608      	mov	r0, r1
 8007b10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b14:	4770      	bx	lr

08007b16 <__sfputs_r>:
 8007b16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b18:	4606      	mov	r6, r0
 8007b1a:	460f      	mov	r7, r1
 8007b1c:	4614      	mov	r4, r2
 8007b1e:	18d5      	adds	r5, r2, r3
 8007b20:	42ac      	cmp	r4, r5
 8007b22:	d101      	bne.n	8007b28 <__sfputs_r+0x12>
 8007b24:	2000      	movs	r0, #0
 8007b26:	e007      	b.n	8007b38 <__sfputs_r+0x22>
 8007b28:	463a      	mov	r2, r7
 8007b2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b2e:	4630      	mov	r0, r6
 8007b30:	f7ff ffda 	bl	8007ae8 <__sfputc_r>
 8007b34:	1c43      	adds	r3, r0, #1
 8007b36:	d1f3      	bne.n	8007b20 <__sfputs_r+0xa>
 8007b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007b3c <_vfiprintf_r>:
 8007b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b40:	460c      	mov	r4, r1
 8007b42:	b09d      	sub	sp, #116	; 0x74
 8007b44:	4617      	mov	r7, r2
 8007b46:	461d      	mov	r5, r3
 8007b48:	4606      	mov	r6, r0
 8007b4a:	b118      	cbz	r0, 8007b54 <_vfiprintf_r+0x18>
 8007b4c:	6983      	ldr	r3, [r0, #24]
 8007b4e:	b90b      	cbnz	r3, 8007b54 <_vfiprintf_r+0x18>
 8007b50:	f7fe fef6 	bl	8006940 <__sinit>
 8007b54:	4b7c      	ldr	r3, [pc, #496]	; (8007d48 <_vfiprintf_r+0x20c>)
 8007b56:	429c      	cmp	r4, r3
 8007b58:	d158      	bne.n	8007c0c <_vfiprintf_r+0xd0>
 8007b5a:	6874      	ldr	r4, [r6, #4]
 8007b5c:	89a3      	ldrh	r3, [r4, #12]
 8007b5e:	0718      	lsls	r0, r3, #28
 8007b60:	d55e      	bpl.n	8007c20 <_vfiprintf_r+0xe4>
 8007b62:	6923      	ldr	r3, [r4, #16]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d05b      	beq.n	8007c20 <_vfiprintf_r+0xe4>
 8007b68:	2300      	movs	r3, #0
 8007b6a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b6c:	2320      	movs	r3, #32
 8007b6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b72:	2330      	movs	r3, #48	; 0x30
 8007b74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b78:	9503      	str	r5, [sp, #12]
 8007b7a:	f04f 0b01 	mov.w	fp, #1
 8007b7e:	46b8      	mov	r8, r7
 8007b80:	4645      	mov	r5, r8
 8007b82:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007b86:	b10b      	cbz	r3, 8007b8c <_vfiprintf_r+0x50>
 8007b88:	2b25      	cmp	r3, #37	; 0x25
 8007b8a:	d154      	bne.n	8007c36 <_vfiprintf_r+0xfa>
 8007b8c:	ebb8 0a07 	subs.w	sl, r8, r7
 8007b90:	d00b      	beq.n	8007baa <_vfiprintf_r+0x6e>
 8007b92:	4653      	mov	r3, sl
 8007b94:	463a      	mov	r2, r7
 8007b96:	4621      	mov	r1, r4
 8007b98:	4630      	mov	r0, r6
 8007b9a:	f7ff ffbc 	bl	8007b16 <__sfputs_r>
 8007b9e:	3001      	adds	r0, #1
 8007ba0:	f000 80c2 	beq.w	8007d28 <_vfiprintf_r+0x1ec>
 8007ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ba6:	4453      	add	r3, sl
 8007ba8:	9309      	str	r3, [sp, #36]	; 0x24
 8007baa:	f898 3000 	ldrb.w	r3, [r8]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f000 80ba 	beq.w	8007d28 <_vfiprintf_r+0x1ec>
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007bba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bbe:	9304      	str	r3, [sp, #16]
 8007bc0:	9307      	str	r3, [sp, #28]
 8007bc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007bc6:	931a      	str	r3, [sp, #104]	; 0x68
 8007bc8:	46a8      	mov	r8, r5
 8007bca:	2205      	movs	r2, #5
 8007bcc:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007bd0:	485e      	ldr	r0, [pc, #376]	; (8007d4c <_vfiprintf_r+0x210>)
 8007bd2:	f7f8 fb0d 	bl	80001f0 <memchr>
 8007bd6:	9b04      	ldr	r3, [sp, #16]
 8007bd8:	bb78      	cbnz	r0, 8007c3a <_vfiprintf_r+0xfe>
 8007bda:	06d9      	lsls	r1, r3, #27
 8007bdc:	bf44      	itt	mi
 8007bde:	2220      	movmi	r2, #32
 8007be0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007be4:	071a      	lsls	r2, r3, #28
 8007be6:	bf44      	itt	mi
 8007be8:	222b      	movmi	r2, #43	; 0x2b
 8007bea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007bee:	782a      	ldrb	r2, [r5, #0]
 8007bf0:	2a2a      	cmp	r2, #42	; 0x2a
 8007bf2:	d02a      	beq.n	8007c4a <_vfiprintf_r+0x10e>
 8007bf4:	9a07      	ldr	r2, [sp, #28]
 8007bf6:	46a8      	mov	r8, r5
 8007bf8:	2000      	movs	r0, #0
 8007bfa:	250a      	movs	r5, #10
 8007bfc:	4641      	mov	r1, r8
 8007bfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c02:	3b30      	subs	r3, #48	; 0x30
 8007c04:	2b09      	cmp	r3, #9
 8007c06:	d969      	bls.n	8007cdc <_vfiprintf_r+0x1a0>
 8007c08:	b360      	cbz	r0, 8007c64 <_vfiprintf_r+0x128>
 8007c0a:	e024      	b.n	8007c56 <_vfiprintf_r+0x11a>
 8007c0c:	4b50      	ldr	r3, [pc, #320]	; (8007d50 <_vfiprintf_r+0x214>)
 8007c0e:	429c      	cmp	r4, r3
 8007c10:	d101      	bne.n	8007c16 <_vfiprintf_r+0xda>
 8007c12:	68b4      	ldr	r4, [r6, #8]
 8007c14:	e7a2      	b.n	8007b5c <_vfiprintf_r+0x20>
 8007c16:	4b4f      	ldr	r3, [pc, #316]	; (8007d54 <_vfiprintf_r+0x218>)
 8007c18:	429c      	cmp	r4, r3
 8007c1a:	bf08      	it	eq
 8007c1c:	68f4      	ldreq	r4, [r6, #12]
 8007c1e:	e79d      	b.n	8007b5c <_vfiprintf_r+0x20>
 8007c20:	4621      	mov	r1, r4
 8007c22:	4630      	mov	r0, r6
 8007c24:	f7fe fd2e 	bl	8006684 <__swsetup_r>
 8007c28:	2800      	cmp	r0, #0
 8007c2a:	d09d      	beq.n	8007b68 <_vfiprintf_r+0x2c>
 8007c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c30:	b01d      	add	sp, #116	; 0x74
 8007c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c36:	46a8      	mov	r8, r5
 8007c38:	e7a2      	b.n	8007b80 <_vfiprintf_r+0x44>
 8007c3a:	4a44      	ldr	r2, [pc, #272]	; (8007d4c <_vfiprintf_r+0x210>)
 8007c3c:	1a80      	subs	r0, r0, r2
 8007c3e:	fa0b f000 	lsl.w	r0, fp, r0
 8007c42:	4318      	orrs	r0, r3
 8007c44:	9004      	str	r0, [sp, #16]
 8007c46:	4645      	mov	r5, r8
 8007c48:	e7be      	b.n	8007bc8 <_vfiprintf_r+0x8c>
 8007c4a:	9a03      	ldr	r2, [sp, #12]
 8007c4c:	1d11      	adds	r1, r2, #4
 8007c4e:	6812      	ldr	r2, [r2, #0]
 8007c50:	9103      	str	r1, [sp, #12]
 8007c52:	2a00      	cmp	r2, #0
 8007c54:	db01      	blt.n	8007c5a <_vfiprintf_r+0x11e>
 8007c56:	9207      	str	r2, [sp, #28]
 8007c58:	e004      	b.n	8007c64 <_vfiprintf_r+0x128>
 8007c5a:	4252      	negs	r2, r2
 8007c5c:	f043 0302 	orr.w	r3, r3, #2
 8007c60:	9207      	str	r2, [sp, #28]
 8007c62:	9304      	str	r3, [sp, #16]
 8007c64:	f898 3000 	ldrb.w	r3, [r8]
 8007c68:	2b2e      	cmp	r3, #46	; 0x2e
 8007c6a:	d10e      	bne.n	8007c8a <_vfiprintf_r+0x14e>
 8007c6c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007c70:	2b2a      	cmp	r3, #42	; 0x2a
 8007c72:	d138      	bne.n	8007ce6 <_vfiprintf_r+0x1aa>
 8007c74:	9b03      	ldr	r3, [sp, #12]
 8007c76:	1d1a      	adds	r2, r3, #4
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	9203      	str	r2, [sp, #12]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	bfb8      	it	lt
 8007c80:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007c84:	f108 0802 	add.w	r8, r8, #2
 8007c88:	9305      	str	r3, [sp, #20]
 8007c8a:	4d33      	ldr	r5, [pc, #204]	; (8007d58 <_vfiprintf_r+0x21c>)
 8007c8c:	f898 1000 	ldrb.w	r1, [r8]
 8007c90:	2203      	movs	r2, #3
 8007c92:	4628      	mov	r0, r5
 8007c94:	f7f8 faac 	bl	80001f0 <memchr>
 8007c98:	b140      	cbz	r0, 8007cac <_vfiprintf_r+0x170>
 8007c9a:	2340      	movs	r3, #64	; 0x40
 8007c9c:	1b40      	subs	r0, r0, r5
 8007c9e:	fa03 f000 	lsl.w	r0, r3, r0
 8007ca2:	9b04      	ldr	r3, [sp, #16]
 8007ca4:	4303      	orrs	r3, r0
 8007ca6:	f108 0801 	add.w	r8, r8, #1
 8007caa:	9304      	str	r3, [sp, #16]
 8007cac:	f898 1000 	ldrb.w	r1, [r8]
 8007cb0:	482a      	ldr	r0, [pc, #168]	; (8007d5c <_vfiprintf_r+0x220>)
 8007cb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007cb6:	2206      	movs	r2, #6
 8007cb8:	f108 0701 	add.w	r7, r8, #1
 8007cbc:	f7f8 fa98 	bl	80001f0 <memchr>
 8007cc0:	2800      	cmp	r0, #0
 8007cc2:	d037      	beq.n	8007d34 <_vfiprintf_r+0x1f8>
 8007cc4:	4b26      	ldr	r3, [pc, #152]	; (8007d60 <_vfiprintf_r+0x224>)
 8007cc6:	bb1b      	cbnz	r3, 8007d10 <_vfiprintf_r+0x1d4>
 8007cc8:	9b03      	ldr	r3, [sp, #12]
 8007cca:	3307      	adds	r3, #7
 8007ccc:	f023 0307 	bic.w	r3, r3, #7
 8007cd0:	3308      	adds	r3, #8
 8007cd2:	9303      	str	r3, [sp, #12]
 8007cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cd6:	444b      	add	r3, r9
 8007cd8:	9309      	str	r3, [sp, #36]	; 0x24
 8007cda:	e750      	b.n	8007b7e <_vfiprintf_r+0x42>
 8007cdc:	fb05 3202 	mla	r2, r5, r2, r3
 8007ce0:	2001      	movs	r0, #1
 8007ce2:	4688      	mov	r8, r1
 8007ce4:	e78a      	b.n	8007bfc <_vfiprintf_r+0xc0>
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	f108 0801 	add.w	r8, r8, #1
 8007cec:	9305      	str	r3, [sp, #20]
 8007cee:	4619      	mov	r1, r3
 8007cf0:	250a      	movs	r5, #10
 8007cf2:	4640      	mov	r0, r8
 8007cf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cf8:	3a30      	subs	r2, #48	; 0x30
 8007cfa:	2a09      	cmp	r2, #9
 8007cfc:	d903      	bls.n	8007d06 <_vfiprintf_r+0x1ca>
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d0c3      	beq.n	8007c8a <_vfiprintf_r+0x14e>
 8007d02:	9105      	str	r1, [sp, #20]
 8007d04:	e7c1      	b.n	8007c8a <_vfiprintf_r+0x14e>
 8007d06:	fb05 2101 	mla	r1, r5, r1, r2
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	4680      	mov	r8, r0
 8007d0e:	e7f0      	b.n	8007cf2 <_vfiprintf_r+0x1b6>
 8007d10:	ab03      	add	r3, sp, #12
 8007d12:	9300      	str	r3, [sp, #0]
 8007d14:	4622      	mov	r2, r4
 8007d16:	4b13      	ldr	r3, [pc, #76]	; (8007d64 <_vfiprintf_r+0x228>)
 8007d18:	a904      	add	r1, sp, #16
 8007d1a:	4630      	mov	r0, r6
 8007d1c:	f3af 8000 	nop.w
 8007d20:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007d24:	4681      	mov	r9, r0
 8007d26:	d1d5      	bne.n	8007cd4 <_vfiprintf_r+0x198>
 8007d28:	89a3      	ldrh	r3, [r4, #12]
 8007d2a:	065b      	lsls	r3, r3, #25
 8007d2c:	f53f af7e 	bmi.w	8007c2c <_vfiprintf_r+0xf0>
 8007d30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d32:	e77d      	b.n	8007c30 <_vfiprintf_r+0xf4>
 8007d34:	ab03      	add	r3, sp, #12
 8007d36:	9300      	str	r3, [sp, #0]
 8007d38:	4622      	mov	r2, r4
 8007d3a:	4b0a      	ldr	r3, [pc, #40]	; (8007d64 <_vfiprintf_r+0x228>)
 8007d3c:	a904      	add	r1, sp, #16
 8007d3e:	4630      	mov	r0, r6
 8007d40:	f000 f888 	bl	8007e54 <_printf_i>
 8007d44:	e7ec      	b.n	8007d20 <_vfiprintf_r+0x1e4>
 8007d46:	bf00      	nop
 8007d48:	080087cc 	.word	0x080087cc
 8007d4c:	0800890c 	.word	0x0800890c
 8007d50:	080087ec 	.word	0x080087ec
 8007d54:	080087ac 	.word	0x080087ac
 8007d58:	08008912 	.word	0x08008912
 8007d5c:	08008916 	.word	0x08008916
 8007d60:	00000000 	.word	0x00000000
 8007d64:	08007b17 	.word	0x08007b17

08007d68 <_printf_common>:
 8007d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d6c:	4691      	mov	r9, r2
 8007d6e:	461f      	mov	r7, r3
 8007d70:	688a      	ldr	r2, [r1, #8]
 8007d72:	690b      	ldr	r3, [r1, #16]
 8007d74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	bfb8      	it	lt
 8007d7c:	4613      	movlt	r3, r2
 8007d7e:	f8c9 3000 	str.w	r3, [r9]
 8007d82:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d86:	4606      	mov	r6, r0
 8007d88:	460c      	mov	r4, r1
 8007d8a:	b112      	cbz	r2, 8007d92 <_printf_common+0x2a>
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	f8c9 3000 	str.w	r3, [r9]
 8007d92:	6823      	ldr	r3, [r4, #0]
 8007d94:	0699      	lsls	r1, r3, #26
 8007d96:	bf42      	ittt	mi
 8007d98:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007d9c:	3302      	addmi	r3, #2
 8007d9e:	f8c9 3000 	strmi.w	r3, [r9]
 8007da2:	6825      	ldr	r5, [r4, #0]
 8007da4:	f015 0506 	ands.w	r5, r5, #6
 8007da8:	d107      	bne.n	8007dba <_printf_common+0x52>
 8007daa:	f104 0a19 	add.w	sl, r4, #25
 8007dae:	68e3      	ldr	r3, [r4, #12]
 8007db0:	f8d9 2000 	ldr.w	r2, [r9]
 8007db4:	1a9b      	subs	r3, r3, r2
 8007db6:	42ab      	cmp	r3, r5
 8007db8:	dc28      	bgt.n	8007e0c <_printf_common+0xa4>
 8007dba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007dbe:	6822      	ldr	r2, [r4, #0]
 8007dc0:	3300      	adds	r3, #0
 8007dc2:	bf18      	it	ne
 8007dc4:	2301      	movne	r3, #1
 8007dc6:	0692      	lsls	r2, r2, #26
 8007dc8:	d42d      	bmi.n	8007e26 <_printf_common+0xbe>
 8007dca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007dce:	4639      	mov	r1, r7
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	47c0      	blx	r8
 8007dd4:	3001      	adds	r0, #1
 8007dd6:	d020      	beq.n	8007e1a <_printf_common+0xb2>
 8007dd8:	6823      	ldr	r3, [r4, #0]
 8007dda:	68e5      	ldr	r5, [r4, #12]
 8007ddc:	f8d9 2000 	ldr.w	r2, [r9]
 8007de0:	f003 0306 	and.w	r3, r3, #6
 8007de4:	2b04      	cmp	r3, #4
 8007de6:	bf08      	it	eq
 8007de8:	1aad      	subeq	r5, r5, r2
 8007dea:	68a3      	ldr	r3, [r4, #8]
 8007dec:	6922      	ldr	r2, [r4, #16]
 8007dee:	bf0c      	ite	eq
 8007df0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007df4:	2500      	movne	r5, #0
 8007df6:	4293      	cmp	r3, r2
 8007df8:	bfc4      	itt	gt
 8007dfa:	1a9b      	subgt	r3, r3, r2
 8007dfc:	18ed      	addgt	r5, r5, r3
 8007dfe:	f04f 0900 	mov.w	r9, #0
 8007e02:	341a      	adds	r4, #26
 8007e04:	454d      	cmp	r5, r9
 8007e06:	d11a      	bne.n	8007e3e <_printf_common+0xd6>
 8007e08:	2000      	movs	r0, #0
 8007e0a:	e008      	b.n	8007e1e <_printf_common+0xb6>
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	4652      	mov	r2, sl
 8007e10:	4639      	mov	r1, r7
 8007e12:	4630      	mov	r0, r6
 8007e14:	47c0      	blx	r8
 8007e16:	3001      	adds	r0, #1
 8007e18:	d103      	bne.n	8007e22 <_printf_common+0xba>
 8007e1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e22:	3501      	adds	r5, #1
 8007e24:	e7c3      	b.n	8007dae <_printf_common+0x46>
 8007e26:	18e1      	adds	r1, r4, r3
 8007e28:	1c5a      	adds	r2, r3, #1
 8007e2a:	2030      	movs	r0, #48	; 0x30
 8007e2c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e30:	4422      	add	r2, r4
 8007e32:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e3a:	3302      	adds	r3, #2
 8007e3c:	e7c5      	b.n	8007dca <_printf_common+0x62>
 8007e3e:	2301      	movs	r3, #1
 8007e40:	4622      	mov	r2, r4
 8007e42:	4639      	mov	r1, r7
 8007e44:	4630      	mov	r0, r6
 8007e46:	47c0      	blx	r8
 8007e48:	3001      	adds	r0, #1
 8007e4a:	d0e6      	beq.n	8007e1a <_printf_common+0xb2>
 8007e4c:	f109 0901 	add.w	r9, r9, #1
 8007e50:	e7d8      	b.n	8007e04 <_printf_common+0x9c>
	...

08007e54 <_printf_i>:
 8007e54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e58:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007e5c:	460c      	mov	r4, r1
 8007e5e:	7e09      	ldrb	r1, [r1, #24]
 8007e60:	b085      	sub	sp, #20
 8007e62:	296e      	cmp	r1, #110	; 0x6e
 8007e64:	4617      	mov	r7, r2
 8007e66:	4606      	mov	r6, r0
 8007e68:	4698      	mov	r8, r3
 8007e6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e6c:	f000 80b3 	beq.w	8007fd6 <_printf_i+0x182>
 8007e70:	d822      	bhi.n	8007eb8 <_printf_i+0x64>
 8007e72:	2963      	cmp	r1, #99	; 0x63
 8007e74:	d036      	beq.n	8007ee4 <_printf_i+0x90>
 8007e76:	d80a      	bhi.n	8007e8e <_printf_i+0x3a>
 8007e78:	2900      	cmp	r1, #0
 8007e7a:	f000 80b9 	beq.w	8007ff0 <_printf_i+0x19c>
 8007e7e:	2958      	cmp	r1, #88	; 0x58
 8007e80:	f000 8083 	beq.w	8007f8a <_printf_i+0x136>
 8007e84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e88:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007e8c:	e032      	b.n	8007ef4 <_printf_i+0xa0>
 8007e8e:	2964      	cmp	r1, #100	; 0x64
 8007e90:	d001      	beq.n	8007e96 <_printf_i+0x42>
 8007e92:	2969      	cmp	r1, #105	; 0x69
 8007e94:	d1f6      	bne.n	8007e84 <_printf_i+0x30>
 8007e96:	6820      	ldr	r0, [r4, #0]
 8007e98:	6813      	ldr	r3, [r2, #0]
 8007e9a:	0605      	lsls	r5, r0, #24
 8007e9c:	f103 0104 	add.w	r1, r3, #4
 8007ea0:	d52a      	bpl.n	8007ef8 <_printf_i+0xa4>
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	6011      	str	r1, [r2, #0]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	da03      	bge.n	8007eb2 <_printf_i+0x5e>
 8007eaa:	222d      	movs	r2, #45	; 0x2d
 8007eac:	425b      	negs	r3, r3
 8007eae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007eb2:	486f      	ldr	r0, [pc, #444]	; (8008070 <_printf_i+0x21c>)
 8007eb4:	220a      	movs	r2, #10
 8007eb6:	e039      	b.n	8007f2c <_printf_i+0xd8>
 8007eb8:	2973      	cmp	r1, #115	; 0x73
 8007eba:	f000 809d 	beq.w	8007ff8 <_printf_i+0x1a4>
 8007ebe:	d808      	bhi.n	8007ed2 <_printf_i+0x7e>
 8007ec0:	296f      	cmp	r1, #111	; 0x6f
 8007ec2:	d020      	beq.n	8007f06 <_printf_i+0xb2>
 8007ec4:	2970      	cmp	r1, #112	; 0x70
 8007ec6:	d1dd      	bne.n	8007e84 <_printf_i+0x30>
 8007ec8:	6823      	ldr	r3, [r4, #0]
 8007eca:	f043 0320 	orr.w	r3, r3, #32
 8007ece:	6023      	str	r3, [r4, #0]
 8007ed0:	e003      	b.n	8007eda <_printf_i+0x86>
 8007ed2:	2975      	cmp	r1, #117	; 0x75
 8007ed4:	d017      	beq.n	8007f06 <_printf_i+0xb2>
 8007ed6:	2978      	cmp	r1, #120	; 0x78
 8007ed8:	d1d4      	bne.n	8007e84 <_printf_i+0x30>
 8007eda:	2378      	movs	r3, #120	; 0x78
 8007edc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ee0:	4864      	ldr	r0, [pc, #400]	; (8008074 <_printf_i+0x220>)
 8007ee2:	e055      	b.n	8007f90 <_printf_i+0x13c>
 8007ee4:	6813      	ldr	r3, [r2, #0]
 8007ee6:	1d19      	adds	r1, r3, #4
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	6011      	str	r1, [r2, #0]
 8007eec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ef0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	e08c      	b.n	8008012 <_printf_i+0x1be>
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	6011      	str	r1, [r2, #0]
 8007efc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f00:	bf18      	it	ne
 8007f02:	b21b      	sxthne	r3, r3
 8007f04:	e7cf      	b.n	8007ea6 <_printf_i+0x52>
 8007f06:	6813      	ldr	r3, [r2, #0]
 8007f08:	6825      	ldr	r5, [r4, #0]
 8007f0a:	1d18      	adds	r0, r3, #4
 8007f0c:	6010      	str	r0, [r2, #0]
 8007f0e:	0628      	lsls	r0, r5, #24
 8007f10:	d501      	bpl.n	8007f16 <_printf_i+0xc2>
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	e002      	b.n	8007f1c <_printf_i+0xc8>
 8007f16:	0668      	lsls	r0, r5, #25
 8007f18:	d5fb      	bpl.n	8007f12 <_printf_i+0xbe>
 8007f1a:	881b      	ldrh	r3, [r3, #0]
 8007f1c:	4854      	ldr	r0, [pc, #336]	; (8008070 <_printf_i+0x21c>)
 8007f1e:	296f      	cmp	r1, #111	; 0x6f
 8007f20:	bf14      	ite	ne
 8007f22:	220a      	movne	r2, #10
 8007f24:	2208      	moveq	r2, #8
 8007f26:	2100      	movs	r1, #0
 8007f28:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f2c:	6865      	ldr	r5, [r4, #4]
 8007f2e:	60a5      	str	r5, [r4, #8]
 8007f30:	2d00      	cmp	r5, #0
 8007f32:	f2c0 8095 	blt.w	8008060 <_printf_i+0x20c>
 8007f36:	6821      	ldr	r1, [r4, #0]
 8007f38:	f021 0104 	bic.w	r1, r1, #4
 8007f3c:	6021      	str	r1, [r4, #0]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d13d      	bne.n	8007fbe <_printf_i+0x16a>
 8007f42:	2d00      	cmp	r5, #0
 8007f44:	f040 808e 	bne.w	8008064 <_printf_i+0x210>
 8007f48:	4665      	mov	r5, ip
 8007f4a:	2a08      	cmp	r2, #8
 8007f4c:	d10b      	bne.n	8007f66 <_printf_i+0x112>
 8007f4e:	6823      	ldr	r3, [r4, #0]
 8007f50:	07db      	lsls	r3, r3, #31
 8007f52:	d508      	bpl.n	8007f66 <_printf_i+0x112>
 8007f54:	6923      	ldr	r3, [r4, #16]
 8007f56:	6862      	ldr	r2, [r4, #4]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	bfde      	ittt	le
 8007f5c:	2330      	movle	r3, #48	; 0x30
 8007f5e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f62:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007f66:	ebac 0305 	sub.w	r3, ip, r5
 8007f6a:	6123      	str	r3, [r4, #16]
 8007f6c:	f8cd 8000 	str.w	r8, [sp]
 8007f70:	463b      	mov	r3, r7
 8007f72:	aa03      	add	r2, sp, #12
 8007f74:	4621      	mov	r1, r4
 8007f76:	4630      	mov	r0, r6
 8007f78:	f7ff fef6 	bl	8007d68 <_printf_common>
 8007f7c:	3001      	adds	r0, #1
 8007f7e:	d14d      	bne.n	800801c <_printf_i+0x1c8>
 8007f80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f84:	b005      	add	sp, #20
 8007f86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f8a:	4839      	ldr	r0, [pc, #228]	; (8008070 <_printf_i+0x21c>)
 8007f8c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007f90:	6813      	ldr	r3, [r2, #0]
 8007f92:	6821      	ldr	r1, [r4, #0]
 8007f94:	1d1d      	adds	r5, r3, #4
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	6015      	str	r5, [r2, #0]
 8007f9a:	060a      	lsls	r2, r1, #24
 8007f9c:	d50b      	bpl.n	8007fb6 <_printf_i+0x162>
 8007f9e:	07ca      	lsls	r2, r1, #31
 8007fa0:	bf44      	itt	mi
 8007fa2:	f041 0120 	orrmi.w	r1, r1, #32
 8007fa6:	6021      	strmi	r1, [r4, #0]
 8007fa8:	b91b      	cbnz	r3, 8007fb2 <_printf_i+0x15e>
 8007faa:	6822      	ldr	r2, [r4, #0]
 8007fac:	f022 0220 	bic.w	r2, r2, #32
 8007fb0:	6022      	str	r2, [r4, #0]
 8007fb2:	2210      	movs	r2, #16
 8007fb4:	e7b7      	b.n	8007f26 <_printf_i+0xd2>
 8007fb6:	064d      	lsls	r5, r1, #25
 8007fb8:	bf48      	it	mi
 8007fba:	b29b      	uxthmi	r3, r3
 8007fbc:	e7ef      	b.n	8007f9e <_printf_i+0x14a>
 8007fbe:	4665      	mov	r5, ip
 8007fc0:	fbb3 f1f2 	udiv	r1, r3, r2
 8007fc4:	fb02 3311 	mls	r3, r2, r1, r3
 8007fc8:	5cc3      	ldrb	r3, [r0, r3]
 8007fca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007fce:	460b      	mov	r3, r1
 8007fd0:	2900      	cmp	r1, #0
 8007fd2:	d1f5      	bne.n	8007fc0 <_printf_i+0x16c>
 8007fd4:	e7b9      	b.n	8007f4a <_printf_i+0xf6>
 8007fd6:	6813      	ldr	r3, [r2, #0]
 8007fd8:	6825      	ldr	r5, [r4, #0]
 8007fda:	6961      	ldr	r1, [r4, #20]
 8007fdc:	1d18      	adds	r0, r3, #4
 8007fde:	6010      	str	r0, [r2, #0]
 8007fe0:	0628      	lsls	r0, r5, #24
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	d501      	bpl.n	8007fea <_printf_i+0x196>
 8007fe6:	6019      	str	r1, [r3, #0]
 8007fe8:	e002      	b.n	8007ff0 <_printf_i+0x19c>
 8007fea:	066a      	lsls	r2, r5, #25
 8007fec:	d5fb      	bpl.n	8007fe6 <_printf_i+0x192>
 8007fee:	8019      	strh	r1, [r3, #0]
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	6123      	str	r3, [r4, #16]
 8007ff4:	4665      	mov	r5, ip
 8007ff6:	e7b9      	b.n	8007f6c <_printf_i+0x118>
 8007ff8:	6813      	ldr	r3, [r2, #0]
 8007ffa:	1d19      	adds	r1, r3, #4
 8007ffc:	6011      	str	r1, [r2, #0]
 8007ffe:	681d      	ldr	r5, [r3, #0]
 8008000:	6862      	ldr	r2, [r4, #4]
 8008002:	2100      	movs	r1, #0
 8008004:	4628      	mov	r0, r5
 8008006:	f7f8 f8f3 	bl	80001f0 <memchr>
 800800a:	b108      	cbz	r0, 8008010 <_printf_i+0x1bc>
 800800c:	1b40      	subs	r0, r0, r5
 800800e:	6060      	str	r0, [r4, #4]
 8008010:	6863      	ldr	r3, [r4, #4]
 8008012:	6123      	str	r3, [r4, #16]
 8008014:	2300      	movs	r3, #0
 8008016:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800801a:	e7a7      	b.n	8007f6c <_printf_i+0x118>
 800801c:	6923      	ldr	r3, [r4, #16]
 800801e:	462a      	mov	r2, r5
 8008020:	4639      	mov	r1, r7
 8008022:	4630      	mov	r0, r6
 8008024:	47c0      	blx	r8
 8008026:	3001      	adds	r0, #1
 8008028:	d0aa      	beq.n	8007f80 <_printf_i+0x12c>
 800802a:	6823      	ldr	r3, [r4, #0]
 800802c:	079b      	lsls	r3, r3, #30
 800802e:	d413      	bmi.n	8008058 <_printf_i+0x204>
 8008030:	68e0      	ldr	r0, [r4, #12]
 8008032:	9b03      	ldr	r3, [sp, #12]
 8008034:	4298      	cmp	r0, r3
 8008036:	bfb8      	it	lt
 8008038:	4618      	movlt	r0, r3
 800803a:	e7a3      	b.n	8007f84 <_printf_i+0x130>
 800803c:	2301      	movs	r3, #1
 800803e:	464a      	mov	r2, r9
 8008040:	4639      	mov	r1, r7
 8008042:	4630      	mov	r0, r6
 8008044:	47c0      	blx	r8
 8008046:	3001      	adds	r0, #1
 8008048:	d09a      	beq.n	8007f80 <_printf_i+0x12c>
 800804a:	3501      	adds	r5, #1
 800804c:	68e3      	ldr	r3, [r4, #12]
 800804e:	9a03      	ldr	r2, [sp, #12]
 8008050:	1a9b      	subs	r3, r3, r2
 8008052:	42ab      	cmp	r3, r5
 8008054:	dcf2      	bgt.n	800803c <_printf_i+0x1e8>
 8008056:	e7eb      	b.n	8008030 <_printf_i+0x1dc>
 8008058:	2500      	movs	r5, #0
 800805a:	f104 0919 	add.w	r9, r4, #25
 800805e:	e7f5      	b.n	800804c <_printf_i+0x1f8>
 8008060:	2b00      	cmp	r3, #0
 8008062:	d1ac      	bne.n	8007fbe <_printf_i+0x16a>
 8008064:	7803      	ldrb	r3, [r0, #0]
 8008066:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800806a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800806e:	e76c      	b.n	8007f4a <_printf_i+0xf6>
 8008070:	0800891d 	.word	0x0800891d
 8008074:	0800892e 	.word	0x0800892e

08008078 <_sbrk_r>:
 8008078:	b538      	push	{r3, r4, r5, lr}
 800807a:	4c06      	ldr	r4, [pc, #24]	; (8008094 <_sbrk_r+0x1c>)
 800807c:	2300      	movs	r3, #0
 800807e:	4605      	mov	r5, r0
 8008080:	4608      	mov	r0, r1
 8008082:	6023      	str	r3, [r4, #0]
 8008084:	f7f9 fa88 	bl	8001598 <_sbrk>
 8008088:	1c43      	adds	r3, r0, #1
 800808a:	d102      	bne.n	8008092 <_sbrk_r+0x1a>
 800808c:	6823      	ldr	r3, [r4, #0]
 800808e:	b103      	cbz	r3, 8008092 <_sbrk_r+0x1a>
 8008090:	602b      	str	r3, [r5, #0]
 8008092:	bd38      	pop	{r3, r4, r5, pc}
 8008094:	20004650 	.word	0x20004650

08008098 <__sread>:
 8008098:	b510      	push	{r4, lr}
 800809a:	460c      	mov	r4, r1
 800809c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080a0:	f000 f896 	bl	80081d0 <_read_r>
 80080a4:	2800      	cmp	r0, #0
 80080a6:	bfab      	itete	ge
 80080a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80080aa:	89a3      	ldrhlt	r3, [r4, #12]
 80080ac:	181b      	addge	r3, r3, r0
 80080ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80080b2:	bfac      	ite	ge
 80080b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80080b6:	81a3      	strhlt	r3, [r4, #12]
 80080b8:	bd10      	pop	{r4, pc}

080080ba <__swrite>:
 80080ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080be:	461f      	mov	r7, r3
 80080c0:	898b      	ldrh	r3, [r1, #12]
 80080c2:	05db      	lsls	r3, r3, #23
 80080c4:	4605      	mov	r5, r0
 80080c6:	460c      	mov	r4, r1
 80080c8:	4616      	mov	r6, r2
 80080ca:	d505      	bpl.n	80080d8 <__swrite+0x1e>
 80080cc:	2302      	movs	r3, #2
 80080ce:	2200      	movs	r2, #0
 80080d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080d4:	f000 f868 	bl	80081a8 <_lseek_r>
 80080d8:	89a3      	ldrh	r3, [r4, #12]
 80080da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080e2:	81a3      	strh	r3, [r4, #12]
 80080e4:	4632      	mov	r2, r6
 80080e6:	463b      	mov	r3, r7
 80080e8:	4628      	mov	r0, r5
 80080ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080ee:	f000 b817 	b.w	8008120 <_write_r>

080080f2 <__sseek>:
 80080f2:	b510      	push	{r4, lr}
 80080f4:	460c      	mov	r4, r1
 80080f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080fa:	f000 f855 	bl	80081a8 <_lseek_r>
 80080fe:	1c43      	adds	r3, r0, #1
 8008100:	89a3      	ldrh	r3, [r4, #12]
 8008102:	bf15      	itete	ne
 8008104:	6560      	strne	r0, [r4, #84]	; 0x54
 8008106:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800810a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800810e:	81a3      	strheq	r3, [r4, #12]
 8008110:	bf18      	it	ne
 8008112:	81a3      	strhne	r3, [r4, #12]
 8008114:	bd10      	pop	{r4, pc}

08008116 <__sclose>:
 8008116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800811a:	f000 b813 	b.w	8008144 <_close_r>
	...

08008120 <_write_r>:
 8008120:	b538      	push	{r3, r4, r5, lr}
 8008122:	4c07      	ldr	r4, [pc, #28]	; (8008140 <_write_r+0x20>)
 8008124:	4605      	mov	r5, r0
 8008126:	4608      	mov	r0, r1
 8008128:	4611      	mov	r1, r2
 800812a:	2200      	movs	r2, #0
 800812c:	6022      	str	r2, [r4, #0]
 800812e:	461a      	mov	r2, r3
 8008130:	f7f9 f8bc 	bl	80012ac <_write>
 8008134:	1c43      	adds	r3, r0, #1
 8008136:	d102      	bne.n	800813e <_write_r+0x1e>
 8008138:	6823      	ldr	r3, [r4, #0]
 800813a:	b103      	cbz	r3, 800813e <_write_r+0x1e>
 800813c:	602b      	str	r3, [r5, #0]
 800813e:	bd38      	pop	{r3, r4, r5, pc}
 8008140:	20004650 	.word	0x20004650

08008144 <_close_r>:
 8008144:	b538      	push	{r3, r4, r5, lr}
 8008146:	4c06      	ldr	r4, [pc, #24]	; (8008160 <_close_r+0x1c>)
 8008148:	2300      	movs	r3, #0
 800814a:	4605      	mov	r5, r0
 800814c:	4608      	mov	r0, r1
 800814e:	6023      	str	r3, [r4, #0]
 8008150:	f7f9 f8d8 	bl	8001304 <_close>
 8008154:	1c43      	adds	r3, r0, #1
 8008156:	d102      	bne.n	800815e <_close_r+0x1a>
 8008158:	6823      	ldr	r3, [r4, #0]
 800815a:	b103      	cbz	r3, 800815e <_close_r+0x1a>
 800815c:	602b      	str	r3, [r5, #0]
 800815e:	bd38      	pop	{r3, r4, r5, pc}
 8008160:	20004650 	.word	0x20004650

08008164 <_fstat_r>:
 8008164:	b538      	push	{r3, r4, r5, lr}
 8008166:	4c07      	ldr	r4, [pc, #28]	; (8008184 <_fstat_r+0x20>)
 8008168:	2300      	movs	r3, #0
 800816a:	4605      	mov	r5, r0
 800816c:	4608      	mov	r0, r1
 800816e:	4611      	mov	r1, r2
 8008170:	6023      	str	r3, [r4, #0]
 8008172:	f7f9 f917 	bl	80013a4 <_fstat>
 8008176:	1c43      	adds	r3, r0, #1
 8008178:	d102      	bne.n	8008180 <_fstat_r+0x1c>
 800817a:	6823      	ldr	r3, [r4, #0]
 800817c:	b103      	cbz	r3, 8008180 <_fstat_r+0x1c>
 800817e:	602b      	str	r3, [r5, #0]
 8008180:	bd38      	pop	{r3, r4, r5, pc}
 8008182:	bf00      	nop
 8008184:	20004650 	.word	0x20004650

08008188 <_isatty_r>:
 8008188:	b538      	push	{r3, r4, r5, lr}
 800818a:	4c06      	ldr	r4, [pc, #24]	; (80081a4 <_isatty_r+0x1c>)
 800818c:	2300      	movs	r3, #0
 800818e:	4605      	mov	r5, r0
 8008190:	4608      	mov	r0, r1
 8008192:	6023      	str	r3, [r4, #0]
 8008194:	f7f9 f874 	bl	8001280 <_isatty>
 8008198:	1c43      	adds	r3, r0, #1
 800819a:	d102      	bne.n	80081a2 <_isatty_r+0x1a>
 800819c:	6823      	ldr	r3, [r4, #0]
 800819e:	b103      	cbz	r3, 80081a2 <_isatty_r+0x1a>
 80081a0:	602b      	str	r3, [r5, #0]
 80081a2:	bd38      	pop	{r3, r4, r5, pc}
 80081a4:	20004650 	.word	0x20004650

080081a8 <_lseek_r>:
 80081a8:	b538      	push	{r3, r4, r5, lr}
 80081aa:	4c07      	ldr	r4, [pc, #28]	; (80081c8 <_lseek_r+0x20>)
 80081ac:	4605      	mov	r5, r0
 80081ae:	4608      	mov	r0, r1
 80081b0:	4611      	mov	r1, r2
 80081b2:	2200      	movs	r2, #0
 80081b4:	6022      	str	r2, [r4, #0]
 80081b6:	461a      	mov	r2, r3
 80081b8:	f7f9 f8bb 	bl	8001332 <_lseek>
 80081bc:	1c43      	adds	r3, r0, #1
 80081be:	d102      	bne.n	80081c6 <_lseek_r+0x1e>
 80081c0:	6823      	ldr	r3, [r4, #0]
 80081c2:	b103      	cbz	r3, 80081c6 <_lseek_r+0x1e>
 80081c4:	602b      	str	r3, [r5, #0]
 80081c6:	bd38      	pop	{r3, r4, r5, pc}
 80081c8:	20004650 	.word	0x20004650

080081cc <__malloc_lock>:
 80081cc:	4770      	bx	lr

080081ce <__malloc_unlock>:
 80081ce:	4770      	bx	lr

080081d0 <_read_r>:
 80081d0:	b538      	push	{r3, r4, r5, lr}
 80081d2:	4c07      	ldr	r4, [pc, #28]	; (80081f0 <_read_r+0x20>)
 80081d4:	4605      	mov	r5, r0
 80081d6:	4608      	mov	r0, r1
 80081d8:	4611      	mov	r1, r2
 80081da:	2200      	movs	r2, #0
 80081dc:	6022      	str	r2, [r4, #0]
 80081de:	461a      	mov	r2, r3
 80081e0:	f7f9 f8b8 	bl	8001354 <_read>
 80081e4:	1c43      	adds	r3, r0, #1
 80081e6:	d102      	bne.n	80081ee <_read_r+0x1e>
 80081e8:	6823      	ldr	r3, [r4, #0]
 80081ea:	b103      	cbz	r3, 80081ee <_read_r+0x1e>
 80081ec:	602b      	str	r3, [r5, #0]
 80081ee:	bd38      	pop	{r3, r4, r5, pc}
 80081f0:	20004650 	.word	0x20004650

080081f4 <fmod>:
 80081f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80081f8:	ed2d 8b02 	vpush	{d8}
 80081fc:	b08b      	sub	sp, #44	; 0x2c
 80081fe:	ec55 4b10 	vmov	r4, r5, d0
 8008202:	ec57 6b11 	vmov	r6, r7, d1
 8008206:	f000 f859 	bl	80082bc <__ieee754_fmod>
 800820a:	4b2a      	ldr	r3, [pc, #168]	; (80082b4 <fmod+0xc0>)
 800820c:	eeb0 8a40 	vmov.f32	s16, s0
 8008210:	eef0 8a60 	vmov.f32	s17, s1
 8008214:	f993 8000 	ldrsb.w	r8, [r3]
 8008218:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800821c:	d030      	beq.n	8008280 <fmod+0x8c>
 800821e:	4632      	mov	r2, r6
 8008220:	463b      	mov	r3, r7
 8008222:	4630      	mov	r0, r6
 8008224:	4639      	mov	r1, r7
 8008226:	f7f8 fc89 	bl	8000b3c <__aeabi_dcmpun>
 800822a:	bb48      	cbnz	r0, 8008280 <fmod+0x8c>
 800822c:	4622      	mov	r2, r4
 800822e:	462b      	mov	r3, r5
 8008230:	4620      	mov	r0, r4
 8008232:	4629      	mov	r1, r5
 8008234:	f7f8 fc82 	bl	8000b3c <__aeabi_dcmpun>
 8008238:	4681      	mov	r9, r0
 800823a:	bb08      	cbnz	r0, 8008280 <fmod+0x8c>
 800823c:	2200      	movs	r2, #0
 800823e:	2300      	movs	r3, #0
 8008240:	4630      	mov	r0, r6
 8008242:	4639      	mov	r1, r7
 8008244:	f7f8 fc48 	bl	8000ad8 <__aeabi_dcmpeq>
 8008248:	b1d0      	cbz	r0, 8008280 <fmod+0x8c>
 800824a:	2301      	movs	r3, #1
 800824c:	9300      	str	r3, [sp, #0]
 800824e:	4b1a      	ldr	r3, [pc, #104]	; (80082b8 <fmod+0xc4>)
 8008250:	9301      	str	r3, [sp, #4]
 8008252:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008256:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800825a:	f8cd 9020 	str.w	r9, [sp, #32]
 800825e:	f1b8 0f00 	cmp.w	r8, #0
 8008262:	d116      	bne.n	8008292 <fmod+0x9e>
 8008264:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008268:	4668      	mov	r0, sp
 800826a:	f000 f939 	bl	80084e0 <matherr>
 800826e:	b1d8      	cbz	r0, 80082a8 <fmod+0xb4>
 8008270:	9b08      	ldr	r3, [sp, #32]
 8008272:	b11b      	cbz	r3, 800827c <fmod+0x88>
 8008274:	f7fd f924 	bl	80054c0 <__errno>
 8008278:	9b08      	ldr	r3, [sp, #32]
 800827a:	6003      	str	r3, [r0, #0]
 800827c:	ed9d 8b06 	vldr	d8, [sp, #24]
 8008280:	eeb0 0a48 	vmov.f32	s0, s16
 8008284:	eef0 0a68 	vmov.f32	s1, s17
 8008288:	b00b      	add	sp, #44	; 0x2c
 800828a:	ecbd 8b02 	vpop	{d8}
 800828e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008292:	2200      	movs	r2, #0
 8008294:	2300      	movs	r3, #0
 8008296:	4610      	mov	r0, r2
 8008298:	4619      	mov	r1, r3
 800829a:	f7f8 fadf 	bl	800085c <__aeabi_ddiv>
 800829e:	f1b8 0f02 	cmp.w	r8, #2
 80082a2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80082a6:	d1df      	bne.n	8008268 <fmod+0x74>
 80082a8:	f7fd f90a 	bl	80054c0 <__errno>
 80082ac:	2321      	movs	r3, #33	; 0x21
 80082ae:	6003      	str	r3, [r0, #0]
 80082b0:	e7de      	b.n	8008270 <fmod+0x7c>
 80082b2:	bf00      	nop
 80082b4:	200001e0 	.word	0x200001e0
 80082b8:	0800893f 	.word	0x0800893f

080082bc <__ieee754_fmod>:
 80082bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082c0:	ec53 2b11 	vmov	r2, r3, d1
 80082c4:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 80082c8:	ea5e 0402 	orrs.w	r4, lr, r2
 80082cc:	ec51 0b10 	vmov	r0, r1, d0
 80082d0:	461e      	mov	r6, r3
 80082d2:	ee11 5a10 	vmov	r5, s2
 80082d6:	4694      	mov	ip, r2
 80082d8:	d00c      	beq.n	80082f4 <__ieee754_fmod+0x38>
 80082da:	4c7a      	ldr	r4, [pc, #488]	; (80084c4 <__ieee754_fmod+0x208>)
 80082dc:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 80082e0:	45a0      	cmp	r8, r4
 80082e2:	4689      	mov	r9, r1
 80082e4:	dc06      	bgt.n	80082f4 <__ieee754_fmod+0x38>
 80082e6:	4254      	negs	r4, r2
 80082e8:	4314      	orrs	r4, r2
 80082ea:	4f77      	ldr	r7, [pc, #476]	; (80084c8 <__ieee754_fmod+0x20c>)
 80082ec:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 80082f0:	42bc      	cmp	r4, r7
 80082f2:	d909      	bls.n	8008308 <__ieee754_fmod+0x4c>
 80082f4:	f7f8 f988 	bl	8000608 <__aeabi_dmul>
 80082f8:	4602      	mov	r2, r0
 80082fa:	460b      	mov	r3, r1
 80082fc:	f7f8 faae 	bl	800085c <__aeabi_ddiv>
 8008300:	ec41 0b10 	vmov	d0, r0, r1
 8008304:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008308:	45f0      	cmp	r8, lr
 800830a:	ee10 2a10 	vmov	r2, s0
 800830e:	4607      	mov	r7, r0
 8008310:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 8008314:	dc0a      	bgt.n	800832c <__ieee754_fmod+0x70>
 8008316:	dbf3      	blt.n	8008300 <__ieee754_fmod+0x44>
 8008318:	42a8      	cmp	r0, r5
 800831a:	d3f1      	bcc.n	8008300 <__ieee754_fmod+0x44>
 800831c:	d106      	bne.n	800832c <__ieee754_fmod+0x70>
 800831e:	496b      	ldr	r1, [pc, #428]	; (80084cc <__ieee754_fmod+0x210>)
 8008320:	0fe4      	lsrs	r4, r4, #31
 8008322:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8008326:	e9d4 0100 	ldrd	r0, r1, [r4]
 800832a:	e7e9      	b.n	8008300 <__ieee754_fmod+0x44>
 800832c:	4b68      	ldr	r3, [pc, #416]	; (80084d0 <__ieee754_fmod+0x214>)
 800832e:	4598      	cmp	r8, r3
 8008330:	dc49      	bgt.n	80083c6 <__ieee754_fmod+0x10a>
 8008332:	f1b8 0f00 	cmp.w	r8, #0
 8008336:	d13d      	bne.n	80083b4 <__ieee754_fmod+0xf8>
 8008338:	4866      	ldr	r0, [pc, #408]	; (80084d4 <__ieee754_fmod+0x218>)
 800833a:	4611      	mov	r1, r2
 800833c:	2900      	cmp	r1, #0
 800833e:	dc36      	bgt.n	80083ae <__ieee754_fmod+0xf2>
 8008340:	459e      	cmp	lr, r3
 8008342:	dc51      	bgt.n	80083e8 <__ieee754_fmod+0x12c>
 8008344:	f1be 0f00 	cmp.w	lr, #0
 8008348:	d145      	bne.n	80083d6 <__ieee754_fmod+0x11a>
 800834a:	4b62      	ldr	r3, [pc, #392]	; (80084d4 <__ieee754_fmod+0x218>)
 800834c:	4629      	mov	r1, r5
 800834e:	2900      	cmp	r1, #0
 8008350:	dc3e      	bgt.n	80083d0 <__ieee754_fmod+0x114>
 8008352:	4961      	ldr	r1, [pc, #388]	; (80084d8 <__ieee754_fmod+0x21c>)
 8008354:	4288      	cmp	r0, r1
 8008356:	db4c      	blt.n	80083f2 <__ieee754_fmod+0x136>
 8008358:	f3c9 0113 	ubfx	r1, r9, #0, #20
 800835c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008360:	4a5d      	ldr	r2, [pc, #372]	; (80084d8 <__ieee754_fmod+0x21c>)
 8008362:	4293      	cmp	r3, r2
 8008364:	db59      	blt.n	800841a <__ieee754_fmod+0x15e>
 8008366:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800836a:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800836e:	1ac0      	subs	r0, r0, r3
 8008370:	1b8a      	subs	r2, r1, r6
 8008372:	eba7 050c 	sub.w	r5, r7, ip
 8008376:	2800      	cmp	r0, #0
 8008378:	d166      	bne.n	8008448 <__ieee754_fmod+0x18c>
 800837a:	4567      	cmp	r7, ip
 800837c:	bf38      	it	cc
 800837e:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
 8008382:	2a00      	cmp	r2, #0
 8008384:	bfbc      	itt	lt
 8008386:	463d      	movlt	r5, r7
 8008388:	460a      	movlt	r2, r1
 800838a:	ea52 0105 	orrs.w	r1, r2, r5
 800838e:	d0c6      	beq.n	800831e <__ieee754_fmod+0x62>
 8008390:	494f      	ldr	r1, [pc, #316]	; (80084d0 <__ieee754_fmod+0x214>)
 8008392:	428a      	cmp	r2, r1
 8008394:	dd6d      	ble.n	8008472 <__ieee754_fmod+0x1b6>
 8008396:	4950      	ldr	r1, [pc, #320]	; (80084d8 <__ieee754_fmod+0x21c>)
 8008398:	428b      	cmp	r3, r1
 800839a:	db70      	blt.n	800847e <__ieee754_fmod+0x1c2>
 800839c:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 80083a0:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80083a4:	4314      	orrs	r4, r2
 80083a6:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 80083aa:	4628      	mov	r0, r5
 80083ac:	e7a8      	b.n	8008300 <__ieee754_fmod+0x44>
 80083ae:	3801      	subs	r0, #1
 80083b0:	0049      	lsls	r1, r1, #1
 80083b2:	e7c3      	b.n	800833c <__ieee754_fmod+0x80>
 80083b4:	4848      	ldr	r0, [pc, #288]	; (80084d8 <__ieee754_fmod+0x21c>)
 80083b6:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 80083ba:	0049      	lsls	r1, r1, #1
 80083bc:	2900      	cmp	r1, #0
 80083be:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 80083c2:	dcfa      	bgt.n	80083ba <__ieee754_fmod+0xfe>
 80083c4:	e7bc      	b.n	8008340 <__ieee754_fmod+0x84>
 80083c6:	ea4f 5028 	mov.w	r0, r8, asr #20
 80083ca:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 80083ce:	e7b7      	b.n	8008340 <__ieee754_fmod+0x84>
 80083d0:	3b01      	subs	r3, #1
 80083d2:	0049      	lsls	r1, r1, #1
 80083d4:	e7bb      	b.n	800834e <__ieee754_fmod+0x92>
 80083d6:	4b40      	ldr	r3, [pc, #256]	; (80084d8 <__ieee754_fmod+0x21c>)
 80083d8:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 80083dc:	0049      	lsls	r1, r1, #1
 80083de:	2900      	cmp	r1, #0
 80083e0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80083e4:	dcfa      	bgt.n	80083dc <__ieee754_fmod+0x120>
 80083e6:	e7b4      	b.n	8008352 <__ieee754_fmod+0x96>
 80083e8:	ea4f 532e 	mov.w	r3, lr, asr #20
 80083ec:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80083f0:	e7af      	b.n	8008352 <__ieee754_fmod+0x96>
 80083f2:	1a0f      	subs	r7, r1, r0
 80083f4:	2f1f      	cmp	r7, #31
 80083f6:	dc0a      	bgt.n	800840e <__ieee754_fmod+0x152>
 80083f8:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 80083fc:	fa08 f807 	lsl.w	r8, r8, r7
 8008400:	fa22 f101 	lsr.w	r1, r2, r1
 8008404:	ea41 0108 	orr.w	r1, r1, r8
 8008408:	fa02 f707 	lsl.w	r7, r2, r7
 800840c:	e7a8      	b.n	8008360 <__ieee754_fmod+0xa4>
 800840e:	4933      	ldr	r1, [pc, #204]	; (80084dc <__ieee754_fmod+0x220>)
 8008410:	1a09      	subs	r1, r1, r0
 8008412:	fa02 f101 	lsl.w	r1, r2, r1
 8008416:	2700      	movs	r7, #0
 8008418:	e7a2      	b.n	8008360 <__ieee754_fmod+0xa4>
 800841a:	eba2 0c03 	sub.w	ip, r2, r3
 800841e:	f1bc 0f1f 	cmp.w	ip, #31
 8008422:	dc0a      	bgt.n	800843a <__ieee754_fmod+0x17e>
 8008424:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 8008428:	fa0e fe0c 	lsl.w	lr, lr, ip
 800842c:	fa25 f606 	lsr.w	r6, r5, r6
 8008430:	ea46 060e 	orr.w	r6, r6, lr
 8008434:	fa05 fc0c 	lsl.w	ip, r5, ip
 8008438:	e799      	b.n	800836e <__ieee754_fmod+0xb2>
 800843a:	4e28      	ldr	r6, [pc, #160]	; (80084dc <__ieee754_fmod+0x220>)
 800843c:	1af6      	subs	r6, r6, r3
 800843e:	fa05 f606 	lsl.w	r6, r5, r6
 8008442:	f04f 0c00 	mov.w	ip, #0
 8008446:	e792      	b.n	800836e <__ieee754_fmod+0xb2>
 8008448:	4567      	cmp	r7, ip
 800844a:	bf38      	it	cc
 800844c:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
 8008450:	2a00      	cmp	r2, #0
 8008452:	da05      	bge.n	8008460 <__ieee754_fmod+0x1a4>
 8008454:	0ffa      	lsrs	r2, r7, #31
 8008456:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800845a:	007f      	lsls	r7, r7, #1
 800845c:	3801      	subs	r0, #1
 800845e:	e787      	b.n	8008370 <__ieee754_fmod+0xb4>
 8008460:	ea52 0105 	orrs.w	r1, r2, r5
 8008464:	f43f af5b 	beq.w	800831e <__ieee754_fmod+0x62>
 8008468:	0fe9      	lsrs	r1, r5, #31
 800846a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800846e:	006f      	lsls	r7, r5, #1
 8008470:	e7f4      	b.n	800845c <__ieee754_fmod+0x1a0>
 8008472:	0fe8      	lsrs	r0, r5, #31
 8008474:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8008478:	006d      	lsls	r5, r5, #1
 800847a:	3b01      	subs	r3, #1
 800847c:	e789      	b.n	8008392 <__ieee754_fmod+0xd6>
 800847e:	1ac9      	subs	r1, r1, r3
 8008480:	2914      	cmp	r1, #20
 8008482:	dc0a      	bgt.n	800849a <__ieee754_fmod+0x1de>
 8008484:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8008488:	fa02 f303 	lsl.w	r3, r2, r3
 800848c:	40cd      	lsrs	r5, r1
 800848e:	432b      	orrs	r3, r5
 8008490:	410a      	asrs	r2, r1
 8008492:	ea42 0104 	orr.w	r1, r2, r4
 8008496:	4618      	mov	r0, r3
 8008498:	e732      	b.n	8008300 <__ieee754_fmod+0x44>
 800849a:	291f      	cmp	r1, #31
 800849c:	dc07      	bgt.n	80084ae <__ieee754_fmod+0x1f2>
 800849e:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 80084a2:	40cd      	lsrs	r5, r1
 80084a4:	fa02 f303 	lsl.w	r3, r2, r3
 80084a8:	432b      	orrs	r3, r5
 80084aa:	4622      	mov	r2, r4
 80084ac:	e7f1      	b.n	8008492 <__ieee754_fmod+0x1d6>
 80084ae:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80084b2:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80084b6:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80084ba:	33e2      	adds	r3, #226	; 0xe2
 80084bc:	fa42 f303 	asr.w	r3, r2, r3
 80084c0:	e7f3      	b.n	80084aa <__ieee754_fmod+0x1ee>
 80084c2:	bf00      	nop
 80084c4:	7fefffff 	.word	0x7fefffff
 80084c8:	7ff00000 	.word	0x7ff00000
 80084cc:	08008948 	.word	0x08008948
 80084d0:	000fffff 	.word	0x000fffff
 80084d4:	fffffbed 	.word	0xfffffbed
 80084d8:	fffffc02 	.word	0xfffffc02
 80084dc:	fffffbe2 	.word	0xfffffbe2

080084e0 <matherr>:
 80084e0:	2000      	movs	r0, #0
 80084e2:	4770      	bx	lr

080084e4 <_init>:
 80084e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084e6:	bf00      	nop
 80084e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ea:	bc08      	pop	{r3}
 80084ec:	469e      	mov	lr, r3
 80084ee:	4770      	bx	lr

080084f0 <_fini>:
 80084f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084f2:	bf00      	nop
 80084f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084f6:	bc08      	pop	{r3}
 80084f8:	469e      	mov	lr, r3
 80084fa:	4770      	bx	lr
